==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DaiJoin
Function name: join(address,uint256)
PC address: 1060
Estimated Gas Usage: 7284 - 79921
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:223

vat.move(address(this), usr, mul(ONE, wad))

--------------------
Initial State:

Account: [CREATOR], balance: 0x12000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: exit(address,uint256), txdata: 0xef693bed00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: join(address,uint256), txdata: 0x3b4da69fedededededededededededededededededededededededededededededededed0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DaiJoin
Function name: join(address,uint256)
PC address: 1087
Estimated Gas Usage: 7342 - 79979
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:224

dai

--------------------
Initial State:

Account: [CREATOR], balance: 0x80002804800d02, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a6a6a6a6a6a6a6a6a6a6a6a6deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: join(address,uint256), txdata: 0x3b4da69f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: join(address,uint256), txdata: 0x3b4da69fa6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a60000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ETHJoin
Function name: join(address)
PC address: 1239
Estimated Gas Usage: 6341 - 44177
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:186

vat.slip(ilk, usr, int(msg.value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x22100000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: exit(address,uint256), txdata: 0xef693bed00000000000000000000000010020002010004200204080810040040000240000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: join(address), txdata: 0x28ffe6c86969696969696969696969696969696969696969696969696969696969696969, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DaiJoin
Function name: join(address,uint256)
PC address: 1281
Estimated Gas Usage: 7342 - 79979
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:224

dai.burn(msg.sender, wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4001002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6969696969696969696969690100800001010100000200008000000000000100696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0
Caller: [SOMEGUY], function: join(address,uint256), txdata: 0x3b4da69f69696969696969696969696969696969696969696969696969696969696969690000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DaiJoin
Function name: join(address,uint256)
PC address: 1281
Estimated Gas Usage: 7284 - 79921
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:224

dai.burn(msg.sender, wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: join(address,uint256), txdata: 0x3b4da69f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DaiJoin
Function name: join(address,uint256)
PC address: 1281
Estimated Gas Usage: 7342 - 79979
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:224

dai.burn(msg.sender, wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80002804800d02, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a6a6a6a6a6a6a6a6a6a6a6a6deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: join(address,uint256), txdata: 0x3b4da69f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: join(address,uint256), txdata: 0x3b4da69fa6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a60000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: GemJoin
Function name: join(address,uint256)
PC address: 1322
Estimated Gas Usage: 8978 - 81896
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:150

vat.slip(ilk, usr, int(wad))

--------------------
Initial State:

Account: [CREATOR], balance: 0x20010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: exit(address,uint256), txdata: 0xef693bed00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010100000000000000000000, value: 0x0
Caller: [SOMEGUY], function: join(address,uint256), txdata: 0x3b4da69fedededededededededededededededededededededededededededededededed0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: GemJoin
Function name: join(address,uint256)
PC address: 1595
Estimated Gas Usage: 8978 - 81896
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:151

gem.transferFrom(msg.sender, address(this), wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x120, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 69696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: exit(address,uint256), txdata: 0xef693bed00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010100000000000000000000, value: 0x0
Caller: [ATTACKER], function: join(address,uint256), txdata: 0x3b4da69fedededededededededededededededededededededededededededededededed0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: GemJoin
Function name: join(address,uint256)
PC address: 1595
Estimated Gas Usage: 8978 - 81896
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:151

gem.transferFrom(msg.sender, address(this), wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: join(address,uint256), txdata: 0x3b4da69f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ETHJoin
Function name: exit(address,uint256)
PC address: 2573
Estimated Gas Usage: 6463 - 78485
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:190

vat.slip(ilk, msg.sender, -int(wad))

--------------------
Initial State:

Account: [CREATOR], balance: 0x428224080000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: exit(address,uint256), txdata: 0xef693bed00000000000000000000000080040020020401010104020120020040020008040000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: exit(address,uint256), txdata: 0xef693bed69696969696969696969696969696969696969696969696969696969696969690000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DaiJoin
Function name: exit(address,uint256)
PC address: 2633
Estimated Gas Usage: 8214 - 80851
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:228

vat.move(msg.sender, address(this), mul(ONE, wad))

--------------------
Initial State:

Account: [CREATOR], balance: 0x2010001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40840800000004, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a6a6a6a6a6a6a6a6a6a6a6a6deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: join(address,uint256), txdata: 0x3b4da69f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: exit(address,uint256), txdata: 0xef693beda6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a60000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ETHJoin
Function name: exit(address,uint256)
PC address: 2642
Estimated Gas Usage: 6463 - 78485
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:191

usr.transfer(wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: exit(address,uint256), txdata: 0xef693bed00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ETHJoin
Function name: exit(address,uint256)
PC address: 2642
Estimated Gas Usage: 6463 - 78485
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:191

usr.transfer(wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000008000001ff, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: join(address), txdata: 0x28ffe6c80000000000000000000000000000000000000000000000000000000000000000, value: 0x1
Caller: [ATTACKER], function: exit(address,uint256), txdata: 0xef693bedc8c8c8c8c8c8c8c8c8c8c8c8deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DaiJoin
Function name: exit(address,uint256)
PC address: 2660
Estimated Gas Usage: 8214 - 80851
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:229

dai

--------------------
Initial State:

Account: [CREATOR], balance: 0x40220000920080291, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: exit(address,uint256), txdata: 0xef693bed0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120003a4c1210, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DaiJoin
Function name: exit(address,uint256)
PC address: 2854
Estimated Gas Usage: 8214 - 80851
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:229

dai.mint(usr, wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x21814c04400b0404, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ededededededededededededededededededededededededededededededededededededededededededededdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: exit(address,uint256), txdata: 0xef693bed00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: exit(address,uint256), txdata: 0xef693bededededededededededededededededededededededededededededededededed0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DaiJoin
Function name: exit(address,uint256)
PC address: 2854
Estimated Gas Usage: 8214 - 80851
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:229

dai.mint(usr, wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x100010202, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: exit(address,uint256), txdata: 0xef693bed00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000002000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DaiJoin
Function name: exit(address,uint256)
PC address: 2854
Estimated Gas Usage: 8214 - 80851
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:229

dai.mint(usr, wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40220000920080291, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: exit(address,uint256), txdata: 0xef693bed0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120003a4c1210, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: GemJoin
Function name: exit(address,uint256)
PC address: 3118
Estimated Gas Usage: 8211 - 81034
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:155

vat.slip(ilk, msg.sender, -int(wad))

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: exit(address,uint256), txdata: 0xef693bed00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: exit(address,uint256), txdata: 0xef693bededededededededededededededededededededededededededededededededed0000000000000000000000000000000000000000000000008002202002400080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: GemJoin
Function name: exit(address,uint256)
PC address: 3339
Estimated Gas Usage: 8211 - 81034
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:156

gem.transfer(usr, wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededededdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: exit(address,uint256), txdata: 0xef693bed00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010100000000000000000000, value: 0x0
Caller: [SOMEGUY], function: exit(address,uint256), txdata: 0xef693bededededededededededededededededededededededededededededededededed0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: GemJoin
Function name: exit(address,uint256)
PC address: 3339
Estimated Gas Usage: 8211 - 81034
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/9/0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol:156

gem.transfer(usr, wad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: exit(address,uint256), txdata: 0xef693bed00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0



---------------------------------------------
For contract 0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol
Tool Runtime = 2022.6281193650211 seconds
#############################################