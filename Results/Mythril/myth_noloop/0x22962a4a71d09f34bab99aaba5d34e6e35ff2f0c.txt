==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SecondSale
Function name: stop()
PC address: 1154
Estimated Gas Usage: 4508 - 5923
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/8/0x22962a4a71d09f34bab99aaba5d34e6e35ff2f0c.sol:1423

require(!isFailed())

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: start(uint256,uint256,address), txdata: 0xa51fe113000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000101010101010101010101010101010101010101, value: 0x0
Caller: [CREATOR], function: stop(), txdata: 0x07da68f5, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SecondSale
Function name: stop()
PC address: 1174
Estimated Gas Usage: 7028 - 8443
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/8/0x22962a4a71d09f34bab99aaba5d34e6e35ff2f0c.sol:1425

require(!isSuccessful())

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: start(uint256,uint256,address), txdata: 0xa51fe113000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000101010101010101010101010101010101010101, value: 0x0
Caller: [CREATOR], function: stop(), txdata: 0x07da68f5, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SecondSale
Function name: isActive()
PC address: 1304
Estimated Gas Usage: 3500 - 3925
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/8/0x22962a4a71d09f34bab99aaba5d34e6e35ff2f0c.sol:1537

started &&



      // hard cap wasn't reached yet

      totalCollected < hardCap &&



      // and current time is within the crowdfunding period

      block.timestamp >= startTimestamp &&

      block.timestamp < endTimestamp

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: start(uint256,uint256,address), txdata: 0xa51fe113000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000010000000000000000000000000000010000000000000000000000000101010101010101010101010101010101010101, value: 0x0
Caller: [SOMEGUY], function: isActive(), txdata: 0x22f3e2d4, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SecondSale
Function name: withdraw(uint256)
PC address: 1693
Estimated Gas Usage: 10414 - 31169
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/8/0x22962a4a71d09f34bab99aaba5d34e6e35ff2f0c.sol:1611

require(isSuccessful())

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: start(uint256,uint256,address), txdata: 0xa51fe113000000000010000000000001010101010101010100100100000000000000000000000000001000000000000101010101010101010110010001010100010000010000000000000000000000000401408008010201010110400101010102018004, value: 0x0
Caller: [CREATOR], function: withdraw(uint256), txdata: 0x2e1a7d4d1313131313131313131313131313131313131313131313131313131313131313, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SecondSale
Function name: refund()
PC address: 2125
Estimated Gas Usage: 8669 - 29424
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/8/0x22962a4a71d09f34bab99aaba5d34e6e35ff2f0c.sol:1393

require(stopped || isFailed(), "Not cancelled or failed")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: start(uint256,uint256,address), txdata: 0xa51fe113000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000101010101010101010101010101010101010101, value: 0x0
Caller: [SOMEGUY], function: refund(), txdata: 0x590e1ae3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SecondSale
Function name: burnUnsold()
PC address: 4104
Estimated Gas Usage: 10287 - 31042
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/8/0x22962a4a71d09f34bab99aaba5d34e6e35ff2f0c.sol:1611

require(isSuccessful())

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: start(uint256,uint256,address), txdata: 0xa51fe113000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000101010101010101010101010101010101010101, value: 0x0
Caller: [CREATOR], function: burnUnsold(), txdata: 0xb52a5851, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SecondSale
Function name: isSuccessful()
PC address: 4561
Estimated Gas Usage: 2637 - 2732
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/8/0x22962a4a71d09f34bab99aaba5d34e6e35ff2f0c.sol:1581

block.timestamp >= endTimestamp && totalCollected >= minimalGoal

--------------------
Initial State:

Account: [CREATOR], balance: 0xc1040100000d60, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: isSuccessful(), txdata: 0xec4cd0cf, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SecondSale
Function name: isFailed()
PC address: 5147
Estimated Gas Usage: 1912 - 2337
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/8/0x22962a4a71d09f34bab99aaba5d34e6e35ff2f0c.sol:1501

started &&



      // crowdsale period has finished

      block.timestamp >= endTimestamp &&



      // but collected ETH is below the required minimum

      totalCollected < minimalGoal

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: start(uint256,uint256,address), txdata: 0xa51fe113000000000010000000000000000000000000000000100000000000000010000000000000001000000000000000000000010000000010000000000000011000010000000000000000000000008080010101012001010401010401010101400101, value: 0x0
Caller: [ATTACKER], function: isFailed(), txdata: 0xf4163340, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SecondSale
Function name: receive()
PC address: 5369
Estimated Gas Usage: 11176 - 32261
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/8/0x22962a4a71d09f34bab99aaba5d34e6e35ff2f0c.sol:1591

require(isActive())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: start(uint256,uint256,address), txdata: 0xa51fe113000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000101010101014001010101010101010101010101, value: 0x0
Caller: [SOMEGUY], function: receive(), txdata: 0xa3e76c0f, value: 0x2c68af0bb140000

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SecondSale
Function name: receive()
PC address: 5802
Estimated Gas Usage: 42186 - 179743
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/8/0x22962a4a71d09f34bab99aaba5d34e6e35ff2f0c.sol:1305

crowdsaleToken.transfer(_recepient, tokensSold)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000000004000d, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 131313131313131313131313deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: start(uint256,uint256,address), txdata: 0xa51fe1138c000000000000000000000000000000000000000000000000000000000000018e000000000000000000000000000100000000000000000000000000000000030000000000000000000000000101010101010101010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: receive(), txdata: 0xa3e76c0f, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SecondSale
Function name: receive()
PC address: 6237
Estimated Gas Usage: 42186 - 179743
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/8/0x22962a4a71d09f34bab99aaba5d34e6e35ff2f0c.sol:1315

participants[_recepient] = participants[_recepient].add(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x201e000005d7e0800, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: start(uint256,uint256,address), txdata: 0xa51fe1138000000000000000000000002000000000000080000020000000000000000001e0800000801008080000000100000104014000800000400002000000000000030000000000000000000000000101040101010801010110010101010101010102, value: 0x0
Caller: [ATTACKER], function: receive(), txdata: 0xa3e76c0f, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SecondSale
Function name: receive()
PC address: 6264
Estimated Gas Usage: 42186 - 179743
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/8/0x22962a4a71d09f34bab99aaba5d34e6e35ff2f0c.sol:1321

totalCollected = totalCollected.add(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x201e000005d7e0800, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: start(uint256,uint256,address), txdata: 0xa51fe1138000000000000000000000002000000000000080000020000000000000000001e0800000801008080000000100000104014000800000400002000000000000030000000000000000000000000101040101010801010110010101010101010102, value: 0x0
Caller: [ATTACKER], function: receive(), txdata: 0xa3e76c0f, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SecondSale
Function name: receive()
PC address: 6291
Estimated Gas Usage: 42186 - 179743
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/8/0x22962a4a71d09f34bab99aaba5d34e6e35ff2f0c.sol:1327

totalSold = totalSold.add(tokensSold)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x201e000005d7e0800, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: start(uint256,uint256,address), txdata: 0xa51fe1138000000000000000000000002000000000000080000020000000000000000001e0800000801008080000000100000104014000800000400002000000000000030000000000000000000000000101040101010801010110010101010101010102, value: 0x0
Caller: [ATTACKER], function: receive(), txdata: 0xa3e76c0f, value: 0x2c68af0bb140000

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SecondSale
Function name: receive()
PC address: 6301
Estimated Gas Usage: 42186 - 179743
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/8/0x22962a4a71d09f34bab99aaba5d34e6e35ff2f0c.sol:189

_status = _NOT_ENTERED

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x201e000005d7e0800, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: start(uint256,uint256,address), txdata: 0xa51fe1138000000000000000000000002000000000000080000020000000000000000001e0800000801008080000000100000104014000800000400002000000000000030000000000000000000000000101040101010801010110010101010101010102, value: 0x0
Caller: [ATTACKER], function: receive(), txdata: 0xa3e76c0f, value: 0x2c68af0bb140000



---------------------------------------------
For contract 0x22962a4a71d09f34bab99aaba5d34e6e35ff2f0c.sol
Tool Runtime = 1616.8232109500095 seconds
#############################################