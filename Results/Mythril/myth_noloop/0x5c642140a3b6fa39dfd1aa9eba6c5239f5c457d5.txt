==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 4117
Estimated Gas Usage: 1365 - 1840
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/5/0x5c642140a3b6fa39dfd1aa9eba6c5239f5c457d5.sol:55

assert(c >= _a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x400000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b30000000000000000000000000000000000000100010200000200000000000000899b59821053253568673b22ae1252d66c6674e055464dce60d5a499dfa169c6, value: 0x0
Caller: [SOMEGUY], function: increaseApproval(address,uint256), txdata: 0xd73dd623d1d1d1d1d1d1d1d1d1d1d1d10000000000000100010200000200000000000000c72b513e044e2c6349910a08a4165210a89c4440c4c24432004ca46b180f4604, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: RequestableERC20Wrapper
Function name: withdraw(uint256)
PC address: 4324
Estimated Gas Usage: 18230 - 95472
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/5/0x5c642140a3b6fa39dfd1aa9eba6c5239f5c457d5.sol:356

token.transfer(msg.sender, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1400000000e2122, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101010101010101010101010101010101010100017d7d7d7d7d7d7d7d7d7d7d7ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EtherToken
Function name: withdraw(uint256)
PC address: 4751
Estimated Gas Usage: 18208 - 95450
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/5/0x5c642140a3b6fa39dfd1aa9eba6c5239f5c457d5.sol:356

token.transfer(msg.sender, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x409c2a00016004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000001000000800000000100804000000000008080000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: init(address), txdata: 0x19ab453c8080808080808080808080808000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: RequestableERC20Wrapper
Function name: deposit(uint256)
PC address: 6607
Estimated Gas Usage: 18324 - 95661
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/5/0x5c642140a3b6fa39dfd1aa9eba6c5239f5c457d5.sol:348

token.transferFrom(msg.sender, address(this), _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000106, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x300039c4c89053, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0001010100000101010000000001010100000101010000010100010000000101454545454545454545454545deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: init(address), txdata: 0x19ab453c0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f2500008a006808000481042000002000201000000011474c43a34108a840200683, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: EtherToken
Function name: deposit(uint256)
PC address: 7115
Estimated Gas Usage: 18235 - 95572
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/5/0x5c642140a3b6fa39dfd1aa9eba6c5239f5c457d5.sol:348

token.transferFrom(msg.sender, address(this), _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2100890, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x120, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8000000000000000000000000000000000000000000000000040000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: init(address), txdata: 0x19ab453c0000000000000000000000001008000000081214e2276a080a54effa18854cc2, value: 0x0
Caller: [ATTACKER], function: deposit(uint256), txdata: 0xb6b55f250000000000000000000010000000000150f68b07c00831c310809901922784c0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RequestableERC20Wrapper
Function name: applyRequestInChildChain(bool,uint256,address,bytes32,bytes)
PC address: 8005
Estimated Gas Usage: 2978 - 7120
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/5/0x5c642140a3b6fa39dfd1aa9eba6c5239f5c457d5.sol:46

assert(_b <= _a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c0080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01, value: 0x0
Caller: [SOMEGUY], function: applyRequestInChildChain(bool,uint256,address,bytes32,bytes), txdata: 0x141ecf460101010101010101000101010100400001010101010101010001010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020010101000e9b61d6f4d6c659c6d8918d0aaec3136845e16cca681214fb39aff4f103699c000000000000000000000000000000000000000000000000000000000000003c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RequestableERC20Wrapper
Function name: increaseApproval(address,uint256)
PC address: 8035
Estimated Gas Usage: 1387 - 1862
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/5/0x5c642140a3b6fa39dfd1aa9eba6c5239f5c457d5.sol:55

assert(c >= _a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b3000000000000000000000000010400080100000000000000000000000000000090106652a59d5678f53a159828d22cd8734b38ad66a42bf057642f2858906d54, value: 0x0
Caller: [CREATOR], function: increaseApproval(address,uint256), txdata: 0xd73dd623d1d1d1d1d1d1d1d1d1d1d1d1010400080100000000000000000000000000000083018456ad054a050b6934946854184e0106815842a46a00d2408020d0d74914, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherToken
Function name: applyRequestInChildChain(bool,uint256,address,bytes32,bytes)
PC address: 8513
Estimated Gas Usage: 2978 - 7120
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/5/0x5c642140a3b6fa39dfd1aa9eba6c5239f5c457d5.sol:46

assert(_b <= _a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01, value: 0x0
Caller: [SOMEGUY], function: applyRequestInChildChain(bool,uint256,address,bytes32,bytes), txdata: 0x141ecf460101010101010101010101010101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000ff0020ff643bd9f3434d2b7992ea955e3b48f73ee374174376e3b744bb5adc6b2db245d5000000000000000000000000000000000000000000000000000000000000003b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EtherToken
Function name: fallback
PC address: 8543
Estimated Gas Usage: 1817 - 2242
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/5/0x5c642140a3b6fa39dfd1aa9eba6c5239f5c457d5.sol:55

assert(c >= _a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000040000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0401048010040401010200100001080120400104800802040108010102408080000000000000000000000000000000000000000000000000000000000000000002, value: 0x0
Caller: [SOMEGUY], function: applyRequestInChildChain(bool,uint256,address,bytes32,bytes), txdata: 0x141ecf4600000000000000000000000000000000000000000000000000000000000000000020ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff101010101010101010100901d12ebe1b195e5aa8748e62bd7734ae19b51fc21e01eb2f0b4b94790dc1b1ec9739bfafaa5073ee86162b75534fe65a78081a0000000000000000000000000000000000000000000000000000000000000002, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x1



---------------------------------------------
For contract 0x5c642140a3b6fa39dfd1aa9eba6c5239f5c457d5.sol
Tool Runtime = 9991.702995760978 seconds
#############################################