==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MoonStake
Function name: burnMining(uint256)
PC address: 2842
Estimated Gas Usage: 19997 - 130780
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol:504

IERC20Custom(crops).transferFrom(msg.sender, address(this), _amount.mul(1 ether))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010104080840201000800101200401000000000000000000000000000080800100010080000000801000000100000000000000000000000000000000010101010110200108010101010101018008014000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: setLPTokens(address,address,address,address), txdata: 0xde7b8c3608080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0808080808080808080808080808080808080808080808080808080808080808, value: 0x0
Caller: [ATTACKER], function: burnMining(uint256), txdata: 0x41576ca50000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MoonStake
Function name: burnMining(uint256)
PC address: 2905
Estimated Gas Usage: 19997 - 130780
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol:505

crops

--------------------
Initial State:

Account: [CREATOR], balance: 0xe0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001040101800101010110010208200108080102020000000000000000000000000101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: burnMining(uint256), txdata: 0x41576ca50000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MoonStake
Function name: burnMining(uint256)
PC address: 3073
Estimated Gas Usage: 19997 - 130780
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol:505

IERC20Custom(crops).burn(_amount.mul(1 ether))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010104080840201000800101200401000000000000000000000000000080800100010080000000801000000100000000000000000000000000000000010101010110200108010101010101018008014000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: setLPTokens(address,address,address,address), txdata: 0xde7b8c3608080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0808080808080808080808080808080808080808080808080808080808080808, value: 0x0
Caller: [ATTACKER], function: burnMining(uint256), txdata: 0x41576ca50000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MoonStake
Function name: burnMining(uint256)
PC address: 3073
Estimated Gas Usage: 20281 - 131064
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/9/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol:505

IERC20Custom(crops).burn(_amount.mul(1 ether))

--------------------
Initial State:

Account: [CREATOR], balance: 0x438be, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004400208802004010840010208048008400100010000000000000000000000000804084008800810011004011008082001014004000000000000000000000000080840014010040140202004202004020210200100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: burnMining(uint256), txdata: 0x41576ca50000000000000000000008000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MoonStake
Function name: burnMining(uint256)
PC address: 3073
Estimated Gas Usage: 19997 - 130780
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol:505

IERC20Custom(crops).burn(_amount.mul(1 ether))

--------------------
Initial State:

Account: [CREATOR], balance: 0xe0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001040101800101010110010208200108080102020000000000000000000000000101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: burnMining(uint256), txdata: 0x41576ca50000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MoonStake
Function name: burnMining(uint256)
PC address: 3128
Estimated Gas Usage: 20281 - 131064
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol:506

burnCount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020202002801004400100208020800840800804400000000000000000000000000220801010008008100440808004010440081004000000000000000000000000010808041004201040021008000120024000028000000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: burnMining(uint256), txdata: 0x41576ca50000000000000000000000000000000010810000000000000003557900000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MoonStake
Function name: burnMining(uint256)
PC address: 3150
Estimated Gas Usage: 20281 - 131064
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol:506

burnList[burnCount].totalBurn += _amount.mul(1 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020202002801004400100208020800840800804400000000000000000000000000220801010008008100440808004010440081004000000000000000000000000010808041004201040021008000120024000028000000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: burnMining(uint256), txdata: 0x41576ca50000000000000000000000000000000010810000000000000003557900000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MoonStake
Function name: burnMining(uint256)
PC address: 3157
Estimated Gas Usage: 20281 - 131064
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol:506

burnList[burnCount].totalBurn += _amount.mul(1 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020202002801004400100208020800840800804400000000000000000000000000220801010008008100440808004010440081004000000000000000000000000010808041004201040021008000120024000028000000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: burnMining(uint256), txdata: 0x41576ca50000000000000000000000000000000010810000000000000003557900000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MoonStake
Function name: burnMining(uint256)
PC address: 3256
Estimated Gas Usage: 19997 - 130780
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol:507

burnCount

--------------------
Initial State:

Account: [CREATOR], balance: 0xe0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001040101800101010110010208200108080102020000000000000000000000000101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: burnMining(uint256), txdata: 0x41576ca50000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MoonStake
Function name: burnMining(uint256)
PC address: 3275
Estimated Gas Usage: 19997 - 130780
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol:507

userList[msg.sender].burnStake[burnCount] += _amount.mul(1 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001040101800101010110010208200108080102020000000000000000000000000101010101010101010101010101010101010101000000000000000000000000010101010101010101010101010101010101010100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: burnMining(uint256), txdata: 0x41576ca50000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MoonStake
Function name: burnMining(uint256)
PC address: 3282
Estimated Gas Usage: 20281 - 131064
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol:507

userList[msg.sender].burnStake[burnCount] += _amount.mul(1 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020202002801004400100208020800840800804400000000000000000000000000220801010008008100440808004010440081004000000000000000000000000010808041004201040021008000120024000028000000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: burnMining(uint256), txdata: 0x41576ca50000000000000000000000000000000010810000000000000003557900000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MoonStake
Function name: payoutBurns()
PC address: 15963
Estimated Gas Usage: 77051 - 484938
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/9/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol:513

moonETHToken.getReserves()

--------------------
Initial State:

Account: [CREATOR], balance: 0x80010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001088020100401080480204010800140000204020000000000000000000000000401804040042020020002200420400440100201000000000000000000000000020102088080104010018020040208100101010100000000000000000000000008, value: 0x0
Caller: [CREATOR], function: payoutBurns(), txdata: 0xfbc09321, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MoonStake
Function name: payoutBurns()
PC address: 16280
Estimated Gas Usage: 77122 - 485009
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/9/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol:514

moonETHToken.totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x20008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001080808010102400101100180010402020101020000000000000000000000002004800801200801404080028008040240808001000000000000000000000000010204020410100440200480208080200180100200000000000000000000000001, value: 0x0
Caller: [CREATOR], function: payoutBurns(), txdata: 0xfbc09321, value: 0x0
Caller: [CREATOR], function: payoutBurns(), txdata: 0xfbc09321, value: 0x0



---------------------------------------------
For contract 0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol
Tool Runtime = 3474.7852842540015 seconds
#############################################