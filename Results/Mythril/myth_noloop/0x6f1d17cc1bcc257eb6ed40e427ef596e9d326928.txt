==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CommunityVesting
Function name: constructor
PC address: 410
Estimated Gas Usage: 7931 - 31476
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/7/0x6f1d17cc1bcc257eb6ed40e427ef596e9d326928.sol:1540

require(start.add(duration) > block.timestamp)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: constructor
PC address: 430
Estimated Gas Usage: 8007 - 31831
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/7/0x6f1d17cc1bcc257eb6ed40e427ef596e9d326928.sol:1540

require(start.add(duration) > block.timestamp)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000084001208010100140020402041080011010044022c7e1effd7f586d1261f6422d6e6b901177597162a459dac480a3b7de46fd0e082bb95d314b4d66d0262a9460301fc8024e1032404a0f860ccc03063248268062, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CommunityVesting
Function name: constructor
PC address: 601
Estimated Gas Usage: 7879 - 31424
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/7/0x6f1d17cc1bcc257eb6ed40e427ef596e9d326928.sol:257

require(c >= a, "SafeMath: addition overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CommunityVesting
Function name: revoke(address)
PC address: 3992
Estimated Gas Usage: 22604 - 152486
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/7/0x6f1d17cc1bcc257eb6ed40e427ef596e9d326928.sol:1756

token.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000010000000000000000000001000001, value: 0x0
Caller: [CREATOR], function: revoke(address), txdata: 0x74a8f1030000000000000000000000000000000000001000000010000110000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CommunityVesting
Function name: release(address)
PC address: 4146
Estimated Gas Usage: 4710 - 39747
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/7/0x6f1d17cc1bcc257eb6ed40e427ef596e9d326928.sol:1762

if (block.timestamp < _cliff) {

            return 0;

        } else if (

            block.timestamp >= _start.add(_duration) || _revoked[address(token)]

        ) {

            return totalBalance;

        } else {

            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);

        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x410, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000020, value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x191655878080808080808080808080800000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CommunityVesting
Function name: release(address)
PC address: 4188
Estimated Gas Usage: 6452 - 41489
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/7/0x6f1d17cc1bcc257eb6ed40e427ef596e9d326928.sol:1768

block.timestamp >= _start.add(_duration) || _revoked[address(token)]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: release(address), txdata: 0x191655878080808080808080808080800000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CommunityVesting
Function name: release(address)
PC address: 4272
Estimated Gas Usage: 6469 - 41506
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/7/0x6f1d17cc1bcc257eb6ed40e427ef596e9d326928.sol:1766

if (

            block.timestamp >= _start.add(_duration) || _revoked[address(token)]

        ) {

            return totalBalance;

        } else {

            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);

        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x191655871010101010101010101010100000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CommunityVesting
Function name: release(address)
PC address: 4606
Estimated Gas Usage: 9162 - 45097
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/7/0x6f1d17cc1bcc257eb6ed40e427ef596e9d326928.sol:325

require(b <= a, errorMessage)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: release(address), txdata: 0x191655878080808080808080808080800000000100010140080210040102011001021000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CommunityVesting
Function name: release(address)
PC address: 4832
Estimated Gas Usage: 9374 - 45309
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/7/0x6f1d17cc1bcc257eb6ed40e427ef596e9d326928.sol:375

require(c / a == b, "SafeMath: multiplication overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x191655870000000000000000000000000101010100010420010101000200044001100210, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CommunityVesting
Function name: revoke(address)
PC address: 5597
Estimated Gas Usage: 22604 - 152486
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/7/0x6f1d17cc1bcc257eb6ed40e427ef596e9d326928.sol:844

target.call.value(value)(

            data

        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000011001800000000001044008800108402002, value: 0x0
Caller: [CREATOR], function: revoke(address), txdata: 0x74a8f1030000000000000000000000002004000004040002000410040404028008400800, value: 0x0
Caller: [CREATOR], function: revoke(address), txdata: 0x74a8f103000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: revoke(address)
PC address: 5597
Estimated Gas Usage: 22604 - 152486
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/7/0x6f1d17cc1bcc257eb6ed40e427ef596e9d326928.sol:844

target.call.value(value)(

            data

        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x8204, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000080010010010040040004040401000400000200320a4b841056c20c300c0048caaa5058c82800040000400000000000002793005701f50050100038501802d878162fc041f087fc00101fffffffffffffec2120161a409847d03e3ae1f8180a0688401341e3fffc015004094008860000810280, value: 0x0
Caller: [CREATOR], function: revoke(address), txdata: 0x74a8f1039898989898989898989898980000000000001000010101010100010040100400, value: 0x0
Caller: [CREATOR], function: revoke(address), txdata: 0x74a8f103989898989898989898989898deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CommunityVesting
Function name: release(address)
PC address: 5597
Estimated Gas Usage: 18077 - 111794
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/7/0x6f1d17cc1bcc257eb6ed40e427ef596e9d326928.sol:844

target.call.value(value)(

            data

        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080100214001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: release(address), txdata: 0x191655870000000000000000000000000401100000000000000000000000000000100000, value: 0x0



---------------------------------------------
For contract 0x6f1d17cc1bcc257eb6ed40e427ef596e9d326928.sol
Tool Runtime = 3475.1843533200154 seconds
#############################################