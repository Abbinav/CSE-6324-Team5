==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PrivateSale
Function name: endSale()
PC address: 3375
Estimated Gas Usage: 22907 - 219038
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/2/0xd421efc67ee0d051155ca5e8075ac7eb125ff053.sol:421

usdc.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x5ba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: endSale(), txdata: 0x380d831b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PrivateSale
Function name: endSale()
PC address: 3694
Estimated Gas Usage: 22907 - 219038
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/2/0xd421efc67ee0d051155ca5e8075ac7eb125ff053.sol:425

token.transfer(owner, tokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 838383838383838383838383deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: endSale(), txdata: 0x380d831b, value: 0x0
Caller: [CREATOR], function: endSale(), txdata: 0x380d831b, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PrivateSale
Function name: endSale()
PC address: 3694
Estimated Gas Usage: 22907 - 219038
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/2/0xd421efc67ee0d051155ca5e8075ac7eb125ff053.sol:425

token.transfer(owner, tokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: endSale(), txdata: 0x380d831b, value: 0x0
Caller: [CREATOR], function: endSale(), txdata: 0x380d831b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PrivateSale
Function name: endSale()
PC address: 3818
Estimated Gas Usage: 22907 - 219038
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0xd421efc67ee0d051155ca5e8075ac7eb125ff053.sol:427

owner

--------------------
Initial State:

Account: [CREATOR], balance: 0xfc0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 838383838383838383838383deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: endSale(), txdata: 0x380d831b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PrivateSale
Function name: endSale()
PC address: 3984
Estimated Gas Usage: 22907 - 219038
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/2/0xd421efc67ee0d051155ca5e8075ac7eb125ff053.sol:427

usdc.transfer(owner, usd)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8383838383838383838383838383838383838383838383838383838383838383838383838383838383838383deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: endSale(), txdata: 0x380d831b, value: 0x0
Caller: [CREATOR], function: endSale(), txdata: 0x380d831b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PrivateSale
Function name: endSale()
PC address: 3984
Estimated Gas Usage: 22907 - 219038
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0xd421efc67ee0d051155ca5e8075ac7eb125ff053.sol:427

usdc.transfer(owner, usd)

--------------------
Initial State:

Account: [CREATOR], balance: 0xfc0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 838383838383838383838383deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: endSale(), txdata: 0x380d831b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PrivateSale
Function name: endSale()
PC address: 4046
Estimated Gas Usage: 22907 - 219038
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0xd421efc67ee0d051155ca5e8075ac7eb125ff053.sol:429

owner

--------------------
Initial State:

Account: [CREATOR], balance: 0xf40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8383838383838383838383838383838383838383838383838383838383838383838383838383838383838383deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: endSale(), txdata: 0x380d831b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PrivateSale
Function name: endSale()
PC address: 4122
Estimated Gas Usage: 22907 - 219038
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0xd421efc67ee0d051155ca5e8075ac7eb125ff053.sol:429

owner.transfer(eth)

--------------------
Initial State:

Account: [CREATOR], balance: 0xf40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8383838383838383838383838383838383838383838383838383838383838383838383838383838383838383deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: endSale(), txdata: 0x380d831b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PrivateSale
Function name: endSale()
PC address: 4157
Estimated Gas Usage: 22907 - 219038
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0xd421efc67ee0d051155ca5e8075ac7eb125ff053.sol:431

saleEnded = true

--------------------
Initial State:

Account: [CREATOR], balance: 0xf40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8383838383838383838383838383838383838383838383838383838383838383838383838383838383838383deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: endSale(), txdata: 0x380d831b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PrivateSale
Function name: endSale()
PC address: 4171
Estimated Gas Usage: 22907 - 219038
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0xd421efc67ee0d051155ca5e8075ac7eb125ff053.sol:431

saleEnded = true

--------------------
Initial State:

Account: [CREATOR], balance: 0xfc0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 838383838383838383838383deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: endSale(), txdata: 0x380d831b, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PrivateSale
Function name: buyWithUSDC(uint256)
PC address: 5782
Estimated Gas Usage: 24385 - 170878
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/2/0xd421efc67ee0d051155ca5e8075ac7eb125ff053.sol:373

usdc.transferFrom(msg.sender, address(this), amountUSDC)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setLimits(uint256,uint256), txdata: 0xc4590d3f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: buyWithUSDC(uint256), txdata: 0xaeccf7350000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PrivateSale
Function name: buyWithUSDC(uint256)
PC address: 5782
Estimated Gas Usage: 24385 - 170878
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/2/0xd421efc67ee0d051155ca5e8075ac7eb125ff053.sol:373

usdc.transferFrom(msg.sender, address(this), amountUSDC)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2c00000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLimits(uint256,uint256), txdata: 0xc4590d3f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: buyWithUSDC(uint256), txdata: 0xaeccf7350000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PrivateSale
Function name: buyWithUSDC(uint256)
PC address: 6049
Estimated Gas Usage: 24385 - 170878
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/2/0xd421efc67ee0d051155ca5e8075ac7eb125ff053.sol:375

token.transfer(msg.sender, tokens)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setLimits(uint256,uint256), txdata: 0xc4590d3f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: buyWithUSDC(uint256), txdata: 0xaeccf7350000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PrivateSale
Function name: buyWithUSDC(uint256)
PC address: 6124
Estimated Gas Usage: 24385 - 170878
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0xd421efc67ee0d051155ca5e8075ac7eb125ff053.sol:377

tokensSold += tokens

--------------------
Initial State:

Account: [CREATOR], balance: 0x101, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setLimits(uint256,uint256), txdata: 0xc4590d3f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: buyWithUSDC(uint256), txdata: 0xaeccf7350000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PrivateSale
Function name: buyWithUSDC(uint256)
PC address: 6131
Estimated Gas Usage: 24385 - 170878
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0xd421efc67ee0d051155ca5e8075ac7eb125ff053.sol:377

tokensSold += tokens

--------------------
Initial State:

Account: [CREATOR], balance: 0x101, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setLimits(uint256,uint256), txdata: 0xc4590d3f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: buyWithUSDC(uint256), txdata: 0xaeccf7350000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0xd421efc67ee0d051155ca5e8075ac7eb125ff053.sol
Tool Runtime = 626.1774944960052 seconds
#############################################