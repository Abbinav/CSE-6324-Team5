==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: transferFrom(address,address,uint256)
PC address: 4169
Estimated Gas Usage: 2351 - 3016
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/11/0x9eb8c50459e29d2044714779df782d435577a48b.sol:27

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b3000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dda7a7a7a7a7a7a7a7a7a7a7a7affeaffeaffeaffeaffeaffeaffeaffeaffeaffea7a7a7a7a7a7a7a7a7a7a7a701010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 4200
Estimated Gas Usage: 1368 - 1843
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/11/0x9eb8c50459e29d2044714779df782d435577a48b.sol:33

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x21400040020f04b1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x24060000040008001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: approve(address,uint256), txdata: 0x095ea7b30000000000000000000000000000000000000000000001014000000200000000000000000000000105f48f190ca1a6c35bbc4948d974101f98d04229642acae0, value: 0x0
Caller: [ATTACKER], function: increaseApproval(address,uint256), txdata: 0xd73dd623a7a7a7a7a7a7a7a7a7a7a7a70000000000000000000001014000000200000000ffffffffffffffff12118266f9600c1e0401d74082c5eff03337c009a4631a91, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DappChannel
Function name: transferFrom(address,address,uint256)
PC address: 4805
Estimated Gas Usage: 2373 - 3038
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/11/0x9eb8c50459e29d2044714779df782d435577a48b.sol:27

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef8000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dda7a7a7a7a7a7a7a7a7a7a7a7aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa7a7a7a7a7a7a7a7a7a7a7a701010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000008, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DappChannel
Function name: increaseApproval(address,uint256)
PC address: 4836
Estimated Gas Usage: 1390 - 1865
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/11/0x9eb8c50459e29d2044714779df782d435577a48b.sol:33

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x200d000000006002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000010800120040208200808011008040110081040080000000000000000000000000000000000000000000008000000000000000000, value: 0x0
Caller: [SOMEGUY], function: increaseApproval(address,uint256), txdata: 0xd73dd623a7a7a7a7a7a7a7a7a7a7a7a71080012004020820080801100804011008104008fffffffffffffffffffffffffffffffffffffffffffff921c81c8142298102ac, value: 0x0



---------------------------------------------
For contract 0x9eb8c50459e29d2044714779df782d435577a48b.sol
Tool Runtime = 936.7584039290086 seconds
#############################################