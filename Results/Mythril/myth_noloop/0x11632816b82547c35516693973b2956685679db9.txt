==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LockedResources
Function name: refundAll()
PC address: 486
Estimated Gas Usage: 7773 - 78407
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_noloop/1/0x11632816b82547c35516693973b2956685679db9.sol:109

VaultCreation + 90 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x1ba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: refundAll(), txdata: 0x38e771ab, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LockedResources
Function name: refundAll()
PC address: 494
Estimated Gas Usage: 1875 - 2300
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x11632816b82547c35516693973b2956685679db9.sol:109

require(now > VaultCreation + 90 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3ba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: refundAll(), txdata: 0x38e771ab, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LockedResources
Function name: refundAll()
PC address: 951
Estimated Gas Usage: 7773 - 78407
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/1/0x11632816b82547c35516693973b2956685679db9.sol:110

token.transfer(owner(), token.balanceOf(address(this)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: refundAll(), txdata: 0x38e771ab, value: 0x0



---------------------------------------------
For contract 0x11632816b82547c35516693973b2956685679db9.sol
Tool Runtime = 20.510230093990685 seconds
#############################################