==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: receive()
PC address: 1458
Estimated Gas Usage: 1948 - 2043
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:109

require(startDate > 0 && now.sub(startDate) <= 7 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [CREATOR], function: receive(), txdata: 0xa3e76c0f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: receive()
PC address: 1827
Estimated Gas Usage: 6337 - 41654
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:114

if (now.sub(startDate) <= 1 days) {
       amount = msg.value.mul(6);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay1.mul(10));
    } else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days) {
       amount = msg.value.mul(11).div(2);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay2.mul(10).div(2));
    } else if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days) {
       amount = msg.value.mul(5);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay3.mul(10));
    } else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days) {
       amount = msg.value.mul(9).div(2);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay4.mul(10).div(2));
    } else if(now.sub(startDate) > 4 days) {
       amount = msg.value.mul(4);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay5.mul(10));
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: receive(), txdata: 0xa3e76c0f, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: receive()
PC address: 2060
Estimated Gas Usage: 7279 - 42596
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:117

now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: receive(), txdata: 0xa3e76c0f, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: receive()
PC address: 2094
Estimated Gas Usage: 8223 - 43540
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:117

if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days) {
       amount = msg.value.mul(11).div(2);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay2.mul(10).div(2));
    } else if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days) {
       amount = msg.value.mul(5);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay3.mul(10));
    } else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days) {
       amount = msg.value.mul(9).div(2);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay4.mul(10).div(2));
    } else if(now.sub(startDate) > 4 days) {
       amount = msg.value.mul(4);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay5.mul(10));
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1a000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: receive(), txdata: 0xa3e76c0f, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: receive()
PC address: 2365
Estimated Gas Usage: 9165 - 44482
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:120

now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: receive(), txdata: 0xa3e76c0f, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: receive()
PC address: 2399
Estimated Gas Usage: 10109 - 45426
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:120

if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days) {
       amount = msg.value.mul(5);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay3.mul(10));
    } else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days) {
       amount = msg.value.mul(9).div(2);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay4.mul(10).div(2));
    } else if(now.sub(startDate) > 4 days) {
       amount = msg.value.mul(4);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay5.mul(10));
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: receive(), txdata: 0xa3e76c0f, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: receive()
PC address: 2632
Estimated Gas Usage: 11051 - 46368
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:123

now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: receive(), txdata: 0xa3e76c0f, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: receive()
PC address: 2666
Estimated Gas Usage: 11995 - 47312
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:123

if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days) {
       amount = msg.value.mul(9).div(2);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay4.mul(10).div(2));
    } else if(now.sub(startDate) > 4 days) {
       amount = msg.value.mul(4);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay5.mul(10));
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000021004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: receive(), txdata: 0xa3e76c0f, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: receive()
PC address: 2936
Estimated Gas Usage: 12934 - 48251
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:126

if(now.sub(startDate) > 4 days) {
       amount = msg.value.mul(4);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay5.mul(10));
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x411238c5800040880, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [CREATOR], function: receive(), txdata: 0xa3e76c0f, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: buyBackETH(address)
PC address: 4611
Estimated Gas Usage: 1226 - 1321
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:200

now.sub(startDate) > 7 days && !softCapMet

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: buyBackETH(address), txdata: 0xbe3853c90000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: buyBackETH(address)
PC address: 4636
Estimated Gas Usage: 1246 - 1341
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:200

require(now.sub(startDate) > 7 days && !softCapMet)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyBackETH(address), txdata: 0xbe3853c90000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: contribute()
PC address: 5165
Estimated Gas Usage: 1970 - 2065
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:148

require(startDate > 0 && now.sub(startDate) <= 7 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [CREATOR], function: contribute(), txdata: 0xd7bb99ba, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: contribute()
PC address: 5534
Estimated Gas Usage: 6359 - 41676
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:153

if (now.sub(startDate) <= 1 days) {
       amount = msg.value.mul(6);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay1.mul(10));
    } else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days) {
       amount = msg.value.mul(11).div(2);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay2.mul(10).div(2));
    } else if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days) {
       amount = msg.value.mul(5);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay3.mul(10));
    } else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days) {
       amount = msg.value.mul(9).div(2);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay4.mul(10).div(2));
    } else if(now.sub(startDate) > 4 days) {
       amount = msg.value.mul(4);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay5.mul(10));
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: contribute(), txdata: 0xd7bb99ba, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: contribute()
PC address: 5767
Estimated Gas Usage: 7301 - 42618
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:156

now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x4290901f5604040ee, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: contribute(), txdata: 0xd7bb99ba, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: contribute()
PC address: 5801
Estimated Gas Usage: 8245 - 43562
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:156

if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days) {
       amount = msg.value.mul(11).div(2);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay2.mul(10).div(2));
    } else if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days) {
       amount = msg.value.mul(5);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay3.mul(10));
    } else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days) {
       amount = msg.value.mul(9).div(2);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay4.mul(10).div(2));
    } else if(now.sub(startDate) > 4 days) {
       amount = msg.value.mul(4);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay5.mul(10));
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: contribute(), txdata: 0xd7bb99ba, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: contribute()
PC address: 6072
Estimated Gas Usage: 9187 - 44504
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:159

now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: contribute(), txdata: 0xd7bb99ba, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: contribute()
PC address: 6106
Estimated Gas Usage: 10131 - 45448
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:159

if(now.sub(startDate) > 2 days && now.sub(startDate) <= 3 days) {
       amount = msg.value.mul(5);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay3.mul(10));
    } else if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days) {
       amount = msg.value.mul(9).div(2);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay4.mul(10).div(2));
    } else if(now.sub(startDate) > 4 days) {
       amount = msg.value.mul(4);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay5.mul(10));
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: contribute(), txdata: 0xd7bb99ba, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: contribute()
PC address: 6339
Estimated Gas Usage: 11073 - 46390
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:162

now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: contribute(), txdata: 0xd7bb99ba, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: contribute()
PC address: 6373
Estimated Gas Usage: 12017 - 47334
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:162

if(now.sub(startDate) > 3 days && now.sub(startDate) <= 4 days) {
       amount = msg.value.mul(9).div(2);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay4.mul(10).div(2));
    } else if(now.sub(startDate) > 4 days) {
       amount = msg.value.mul(4);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay5.mul(10));
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x442895bb40b20304, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [CREATOR], function: contribute(), txdata: 0xd7bb99ba, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: contribute()
PC address: 6643
Estimated Gas Usage: 12956 - 48273
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:165

if(now.sub(startDate) > 4 days) {
       amount = msg.value.mul(4);
       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(rateDay5.mul(10));
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: contribute(), txdata: 0xd7bb99ba, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: burnYFMS()
PC address: 8783
Estimated Gas Usage: 4582 - 39899
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:249

require(msg.sender == owner && YFMSToken.balanceOf(address(this)) > 0 && now.sub(startDate) > 7 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: burnYFMS(), txdata: 0xef2d75fe, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: YFMSTokenSale
Function name: burnYFMS()
PC address: 9042
Estimated Gas Usage: 9600 - 114796
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:251

YFMSToken.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: burnYFMS(), txdata: 0xef2d75fe, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: YFMSTokenSale
Function name: burnYFMS()
PC address: 9234
Estimated Gas Usage: 9600 - 114796
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:251

YFMSToken.transfer(address(0), YFMSToken.balanceOf(address(this)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: burnYFMS(), txdata: 0xef2d75fe, value: 0x0
Caller: [CREATOR], function: burnYFMS(), txdata: 0xef2d75fe, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: YFMSTokenSale
Function name: burnYFMS()
PC address: 9234
Estimated Gas Usage: 9600 - 114796
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:251

YFMSToken.transfer(address(0), YFMSToken.balanceOf(address(this)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: burnYFMS(), txdata: 0xef2d75fe, value: 0x0
Caller: [CREATOR], function: burnYFMS(), txdata: 0xef2d75fe, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: YFMSTokenSale
Function name: buyBackETH(address)
PC address: 9305
Estimated Gas Usage: 1157 - 1252
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol:41

require(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyBackETH(address), txdata: 0xbe3853c90000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0xF9f6d74a9f5db5000cB3c067C26414403781eab6.sol
Tool Runtime = 1688.7889159580227 seconds
#############################################