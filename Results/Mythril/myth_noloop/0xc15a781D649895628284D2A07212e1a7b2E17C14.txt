==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Vow
Function name: constructor
PC address: 540
Estimated Gas Usage: 31543 - 172599
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:134

vat.hope(flapper_)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vow
Function name: constructor
PC address: 568
Estimated Gas Usage: 31543 - 172599
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:135

live = 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Vow
Function name: kiss(uint256)
PC address: 3469
Estimated Gas Usage: 13956 - 106494
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:191

vat.heal(rad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0
Caller: [ATTACKER], function: kiss(uint256), txdata: 0x2506855a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Vow
Function name: kiss(uint256)
PC address: 3469
Estimated Gas Usage: 13956 - 106494
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:191

vat.heal(rad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000004000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: kiss(uint256), txdata: 0x2506855a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Vow
Function name: cage()
PC address: 5468
Estimated Gas Usage: 34610 - 306769
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:213

flapper.cage(vat.dai(address(flapper)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6969696969696969696969690000000000000000000000000000000000000000696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: heal(uint256), txdata: 0xf37ac61c0000000000000000000000000000000401010101010101010000000002000000, value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Vow
Function name: cage()
PC address: 5468
Estimated Gas Usage: 34610 - 306769
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:213

flapper.cage(vat.dai(address(flapper)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Vow
Function name: cage()
PC address: 5626
Estimated Gas Usage: 34610 - 306769
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:214

flopper.cage()

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000009000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 69696969696969696969696900000000000000000000000000000000000000006969696969696969696969690000000000000000000000000000000000000000696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: heal(uint256), txdata: 0xf37ac61c0000000004000000000000000000000000000000000000000001010101020000, value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Vow
Function name: cage()
PC address: 5626
Estimated Gas Usage: 34610 - 306769
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:214

flopper.cage()

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: heal(uint256), txdata: 0xf37ac61c0000000000000000000000000000000000000000000004000000000002000000, value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vow
Function name: cage()
PC address: 5653
Estimated Gas Usage: 34610 - 306769
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:215

vat

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6969696969696969696969690000000000000000000000000000000000000000696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vow
Function name: cage()
PC address: 5718
Estimated Gas Usage: 34610 - 306769
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:215

vat

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6969696969696969696969690000000000000000000000000000000000000000696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vow
Function name: cage()
PC address: 5964
Estimated Gas Usage: 34610 - 306769
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:215

vat

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 6969696969696969696969690000000000000000000000000000000000000000696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Vow
Function name: cage()
PC address: 6294
Estimated Gas Usage: 34610 - 306769
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:215

vat.heal(min(vat.dai(address(this)), vat.sin(address(this))))

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: heal(uint256), txdata: 0xf37ac61c0000008000000000000040000000000401010101010101010000000001000000, value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vow
Function name: cage()
PC address: 6294
Estimated Gas Usage: 34610 - 306769
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:215

vat.heal(min(vat.dai(address(this)), vat.sin(address(this))))

--------------------
Initial State:

Account: [CREATOR], balance: 0x40002001008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 69696969696969696969696900000000000000000000000010010110400002006969696969696969696969690000000000000000000000000000000000000000696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Vow
Function name: file(bytes32,address)
PC address: 8592
Estimated Gas Usage: 9183 - 32643
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:161

vat.nope(address(flapper))

--------------------
Initial State:

Account: [CREATOR], balance: 0x230, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0
Caller: [CREATOR], function: file(bytes32,address), txdata: 0xd4e8be83666c6f70706572000000000000000000000000000000000000000000000000006969696969696969696969696969696969696969696969696969696969696969, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vow
Function name: file(bytes32,address)
PC address: 8624
Estimated Gas Usage: 14823 - 108025
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:162

flapper = FlapLike(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 838383838383838383838383deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: file(bytes32,address), txdata: 0xd4e8be83666c6170706572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vow
Function name: file(bytes32,address)
PC address: 8677
Estimated Gas Usage: 14823 - 108025
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:162

flapper = FlapLike(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 838383838383838383838383deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: file(bytes32,address), txdata: 0xd4e8be83666c6170706572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vow
Function name: file(bytes32,address)
PC address: 8684
Estimated Gas Usage: 14823 - 108025
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:163

vat

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0
Caller: [CREATOR], function: file(bytes32,address), txdata: 0xd4e8be83666c6170706572000000000000000000000000000000000000000000000000006969696969696969696969696969696969696969696969696969696969696969, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Vow
Function name: file(bytes32,address)
PC address: 8870
Estimated Gas Usage: 14823 - 108025
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:163

vat.hope(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 838383838383838383838383deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: file(bytes32,address), txdata: 0xd4e8be83666c6170706572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Vow
Function name: file(bytes32,address)
PC address: 8870
Estimated Gas Usage: 14823 - 108025
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:163

vat.hope(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: file(bytes32,address), txdata: 0xd4e8be83666c6170706572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vow
Function name: file(bytes32,address)
PC address: 8870
Estimated Gas Usage: 14823 - 108025
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:163

vat.hope(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0
Caller: [CREATOR], function: file(bytes32,address), txdata: 0xd4e8be83666c6170706572000000000000000000000000000000000000000000000000006969696969696969696969696969696969696969696969696969696969696969, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Vow
Function name: flog(uint256)
PC address: 9193
Estimated Gas Usage: 1216 - 1311
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:176

require(add(era, wait) <= now, "Vow/wait-not-finished")

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: flog(uint256), txdata: 0xd7ee674b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Vow
Function name: heal(uint256)
PC address: 9986
Estimated Gas Usage: 11575 - 119005
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:184

vat.sin(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: heal(uint256), txdata: 0xf37ac61c007db36e0000000000000000000000000901d12ebe1b195e5aa8748e62bd7735, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Vow
Function name: heal(uint256)
PC address: 10325
Estimated Gas Usage: 11575 - 119005
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:185

vat.heal(rad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 696969696969696969696969deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0
Caller: [ATTACKER], function: heal(uint256), txdata: 0xf37ac61c007db36e0000000000000000000000000901d12ebe1b195e5aa8748e62bd7735, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Vow
Function name: heal(uint256)
PC address: 10325
Estimated Gas Usage: 11575 - 119005
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/5/0xc15a781D649895628284D2A07212e1a7b2E17C14.sol:185

vat.heal(rad)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: cage(), txdata: 0x69245009, value: 0x0
Caller: [ATTACKER], function: heal(uint256), txdata: 0xf37ac61c007db36e0000000000000000000000000901d12ebe1b195e5aa8748e62bd7735, value: 0x0



---------------------------------------------
For contract 0xc15a781D649895628284D2A07212e1a7b2E17C14.sol
Tool Runtime = 2454.6234257199976 seconds
#############################################