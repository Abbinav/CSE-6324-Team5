==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: relyContract(address,address)
PC address: 1260
Estimated Gas Usage: 2777 - 37438
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:200

AuthLike_3(target).rely(usr)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: relyContract(address,address), txdata: 0x373e73f8909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef9090909090909090909090909090909090909090909090909090909090909090, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 2365
Estimated Gas Usage: 67747 - 1092856
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:154

lenderDeployer.reserve()

--------------------
Initial State:

Account: [CREATOR], balance: 0x32a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000800000004000000000000000000000000001004010010020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 2562
Estimated Gas Usage: 67747 - 1092856
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:155

borrowerDeployer.shelf()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000000000000004000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000001004010010020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 2562
Estimated Gas Usage: 67747 - 1092856
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:155

borrowerDeployer.shelf()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000020101041000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 2626
Estimated Gas Usage: 67747 - 1092856
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:158

borrowerDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0x72a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000001000200000000000000000000000000000000000000000000020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 2757
Estimated Gas Usage: 67747 - 1092856
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:158

borrowerDeployer.collector()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000000000000004000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000001004010010020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 2757
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:158

borrowerDeployer.collector()

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000000000000000000000080000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000101000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 3010
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:158

DependLike_3(borrowerDeployer.collector()).depend("distributor", reserve_)

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000000000000000000000080000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000101000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 3037
Estimated Gas Usage: 67747 - 1092856
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:159

borrowerDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 3168
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:159

borrowerDeployer.shelf()

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000000000000000000000080000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000101000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 3421
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:159

DependLike_3(borrowerDeployer.shelf()).depend("lender", reserve_)

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000000000000000000000080000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000101000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 3448
Estimated Gas Usage: 67747 - 1092856
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:160

borrowerDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000000000000000000000080000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000101000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 3579
Estimated Gas Usage: 67747 - 1092856
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:160

borrowerDeployer.shelf()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000000000000004000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000001004010010020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 3579
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:160

borrowerDeployer.shelf()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 3832
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:160

DependLike_3(borrowerDeployer.shelf()).depend("distributor", reserve_)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 3861
Estimated Gas Usage: 67747 - 1092856
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:166

borrowerDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 3992
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:166

borrowerDeployer.feed()

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000000000000000000000080000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000101000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 4248
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:168

DependLike_3(reserve_).depend("shelf", shelf_)

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000000000000000000000080000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000101000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 4275
Estimated Gas Usage: 67747 - 1092856
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:169

lenderDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000000000000000000000080000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000101000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 4406
Estimated Gas Usage: 67747 - 1092856
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:169

lenderDeployer.assessor()

--------------------
Initial State:

Account: [CREATOR], balance: 0x32a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000800000004000000000000000000000000001004010010020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 4406
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:169

lenderDeployer.assessor()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 4659
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:169

DependLike_3(lenderDeployer.assessor()).depend("navFeed", navFeed)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 4911
Estimated Gas Usage: 67747 - 1092856
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:184

lenderDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 5042
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:184

lenderDeployer.assessorAdmin()

--------------------
Initial State:

Account: [CREATOR], balance: 0x72a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000001000200000000000000000000000000000000000000000000020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 5255
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:184

AuthLike_3(lenderDeployer.assessorAdmin()).rely(poolAdmin1)

--------------------
Initial State:

Account: [CREATOR], balance: 0x72a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000001000200000000000000000000000000000000000000000000020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 5282
Estimated Gas Usage: 67747 - 1092856
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:185

lenderDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0x72a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000001000200000000000000000000000000000000000000000000020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 5413
Estimated Gas Usage: 67747 - 1092856
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:185

lenderDeployer.assessorAdmin()

--------------------
Initial State:

Account: [CREATOR], balance: 0x32a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000800000004000000000000000000000000001004010010020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 5413
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:185

lenderDeployer.assessorAdmin()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 5626
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:185

AuthLike_3(lenderDeployer.assessorAdmin()).rely(poolAdmin2)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 5653
Estimated Gas Usage: 67747 - 1092856
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:186

lenderDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 5784
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:186

lenderDeployer.juniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0x72a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000001000200000000000000000000000000000000000000000000020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 5997
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:186

AuthLike_3(lenderDeployer.juniorMemberlist()).rely(juniorMemberlistAdmin1)

--------------------
Initial State:

Account: [CREATOR], balance: 0x72a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000001000200000000000000000000000000000000000000000000020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 6024
Estimated Gas Usage: 67747 - 1092856
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:187

lenderDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0x72a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000001000200000000000000000000000000000000000000000000020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 6155
Estimated Gas Usage: 67747 - 1092856
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:187

lenderDeployer.juniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0x32a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000800000004000000000000000000000000001004010010020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 6155
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:187

lenderDeployer.juniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 6368
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:187

AuthLike_3(lenderDeployer.juniorMemberlist()).rely(juniorMemberlistAdmin2)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 6395
Estimated Gas Usage: 67747 - 1092856
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:188

lenderDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 6526
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:188

lenderDeployer.seniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0x72a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000001000200000000000000000000000000000000000000000000020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 6739
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:188

AuthLike_3(lenderDeployer.seniorMemberlist()).rely(seniorMemberlistAdmin1)

--------------------
Initial State:

Account: [CREATOR], balance: 0x72a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000001000200000000000000000000000000000000000000000000020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 6766
Estimated Gas Usage: 67747 - 1092856
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:189

lenderDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0x72a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000001000200000000000000000000000000000000000000000000020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 6897
Estimated Gas Usage: 67747 - 1092856
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:189

lenderDeployer.seniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0x32a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000800000004000000000000000000000000001004010010020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 6897
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:189

lenderDeployer.seniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 7110
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:189

AuthLike_3(lenderDeployer.seniorMemberlist()).rely(seniorMemberlistAdmin2)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 7137
Estimated Gas Usage: 67747 - 1092856
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:190

lenderDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 7268
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:190

lenderDeployer.seniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0x72a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000001000200000000000000000000000000000000000000000000020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 7481
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:190

AuthLike_3(lenderDeployer.seniorMemberlist()).rely(seniorMemberlistAdmin3)

--------------------
Initial State:

Account: [CREATOR], balance: 0x72a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000001000200000000000000000000000000000000000000000000020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 7508
Estimated Gas Usage: 67747 - 1092856
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:191

lenderDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0x72a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000001000200000000000000000000000000000000000000000000020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 7639
Estimated Gas Usage: 67747 - 1092856
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:191

lenderDeployer.seniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0x32a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000800000004000000000000000000000000001004010010020004010040011000040000000000, value: 0x0
Caller: [ATTACKER], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 7639
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:191

lenderDeployer.seniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 7852
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:191

AuthLike_3(lenderDeployer.seniorMemberlist()).rely(seniorMemberlistAdmin4)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 8031
Estimated Gas Usage: 67747 - 1092856
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:192

AuthLike_3(navFeed).rely(oracle)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x824c0080005400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000401000204100201040201010201010100000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: denyContract(address,address)
PC address: 8757
Estimated Gas Usage: 2864 - 37525
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/6/0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol:204

AuthLike_3(target).deny(usr)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: denyContract(address,address), txdata: 0xfe0ac3e7909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef9090909090909090909090909090909090909090909090909090909090909090, value: 0x0



---------------------------------------------
For contract 0x4cA805cE8EcE2E63FfC1F9f8F2731D3F48DF89Df.sol
Tool Runtime = 296.62839670601534 seconds
#############################################