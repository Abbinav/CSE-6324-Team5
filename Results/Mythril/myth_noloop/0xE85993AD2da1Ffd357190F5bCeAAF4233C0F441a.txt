==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Jug
Function name: file(bytes32,bytes32,uint256)
PC address: 1214
Estimated Gas Usage: 2096 - 2571
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/12/0xE85993AD2da1Ffd357190F5bCeAAF4233C0F441a.sol:145

require(now == ilks[ilk].rho, "Jug/rho-not-updated")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: file(bytes32,bytes32,uint256), txdata: 0x1a0b287e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Jug
Function name: drip(bytes32)
PC address: 2447
Estimated Gas Usage: 1218 - 1503
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/12/0xE85993AD2da1Ffd357190F5bCeAAF4233C0F441a.sol:160

require(now >= ilks[ilk].rho, "Jug/invalid-now")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: drip(bytes32), txdata: 0x44e2a5a80000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Jug
Function name: drip(bytes32)
PC address: 2706
Estimated Gas Usage: 17253 - 111445
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/12/0xE85993AD2da1Ffd357190F5bCeAAF4233C0F441a.sol:161

vat.ilks(ilk)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: drip(bytes32), txdata: 0x44e2a5a80000000000000000000000000000000000000000000000000000000004941003, value: 0x0
Caller: [SOMEGUY], function: drip(bytes32), txdata: 0x44e2a5a80000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Jug
Function name: drip(bytes32)
PC address: 2787
Estimated Gas Usage: 17263 - 111455
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0xE85993AD2da1Ffd357190F5bCeAAF4233C0F441a.sol:162

base

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: drip(bytes32), txdata: 0x44e2a5a80000000000000001020200000000000000000000040004000004000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Jug
Function name: drip(bytes32)
PC address: 2810
Estimated Gas Usage: 17253 - 111445
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0xE85993AD2da1Ffd357190F5bCeAAF4233C0F441a.sol:162

ilks[ilk].duty

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: e2e2e2e2e2e2e2e2e2e2e2e2deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: drip(bytes32), txdata: 0x44e2a5a80000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Jug
Function name: drip(bytes32)
PC address: 2838
Estimated Gas Usage: 17305 - 111497
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0xE85993AD2da1Ffd357190F5bCeAAF4233C0F441a.sol:162

ilks[ilk].rho

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: e2e2e2e2e2e2e2e2e2e2e2e2deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: drip(bytes32), txdata: 0x44e2a5a8000000000000000000000000000000000000000000000000000000007effffff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Jug
Function name: drip(bytes32)
PC address: 2872
Estimated Gas Usage: 17263 - 111455
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0xE85993AD2da1Ffd357190F5bCeAAF4233C0F441a.sol:163

vat

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: drip(bytes32), txdata: 0x44e2a5a80000000000000001020200000000000000000000040004000004000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Jug
Function name: drip(bytes32)
PC address: 2935
Estimated Gas Usage: 17263 - 111455
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0xE85993AD2da1Ffd357190F5bCeAAF4233C0F441a.sol:163

vow

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: drip(bytes32), txdata: 0x44e2a5a80000000000000001020200000000000000000000040004000004000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Jug
Function name: drip(bytes32)
PC address: 3117
Estimated Gas Usage: 17305 - 111497
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/12/0xE85993AD2da1Ffd357190F5bCeAAF4233C0F441a.sol:163

vat.fold(ilk, vow, diff(rate, prev))

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000008266a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 838383838383838383838383deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: drip(bytes32), txdata: 0x44e2a5a8000000000000000000000000080000000000000000000100040000043e16f583, value: 0x0
Caller: [SOMEGUY], function: drip(bytes32), txdata: 0x44e2a5a80000000000000000000000000000000000000000000000000000000001208002, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Jug
Function name: drip(bytes32)
PC address: 3117
Estimated Gas Usage: 17305 - 111497
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/12/0xE85993AD2da1Ffd357190F5bCeAAF4233C0F441a.sol:163

vat.fold(ilk, vow, diff(rate, prev))

--------------------
Initial State:

Account: [CREATOR], balance: 0x100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: drip(bytes32), txdata: 0x44e2a5a8000000000000000000000000000000000000000000000000000000005effffff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Jug
Function name: drip(bytes32)
PC address: 3117
Estimated Gas Usage: 17305 - 111497
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0xE85993AD2da1Ffd357190F5bCeAAF4233C0F441a.sol:163

vat.fold(ilk, vow, diff(rate, prev))

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: e2e2e2e2e2e2e2e2e2e2e2e2deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: drip(bytes32), txdata: 0x44e2a5a8000000000000000000000000000000000000000000000000000000007effffff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Jug
Function name: drip(bytes32)
PC address: 3164
Estimated Gas Usage: 17263 - 111455
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0xE85993AD2da1Ffd357190F5bCeAAF4233C0F441a.sol:164

ilks[ilk].rho = now

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: drip(bytes32), txdata: 0x44e2a5a80000000000000001020200000000000000000000040004000004000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Jug
Function name: drip(bytes32)
PC address: 4442
Estimated Gas Usage: 6490 - 42140
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/12/0xE85993AD2da1Ffd357190F5bCeAAF4233C0F441a.sol:103

case 0 { z := b }

--------------------
Initial State:

Account: [CREATOR], balance: 0x54140000401000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: file(bytes32,uint256), txdata: 0x29ae81146261736500000000000000000000000000000000000000000000000000000000bf7f82042140840af015112380144fc3850e1800011129fff2ffffffffff4ffe, value: 0x0
Caller: [CREATOR], function: drip(bytes32), txdata: 0x44e2a5a80000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Jug
Function name: drip(bytes32)
PC address: 4472
Estimated Gas Usage: 6549 - 42199
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/12/0xE85993AD2da1Ffd357190F5bCeAAF4233C0F441a.sol:105

for { n := div(n, 2) } n { n := div(n,2) } {
            let xx := mul(x, x)
            if iszero(eq(div(xx, x), x)) { revert(0,0) }
            let xxRound := add(xx, half)
            if lt(xxRound, xx) { revert(0,0) }
            x := div(xxRound, b)
            if mod(n,2) {
              let zx := mul(z, x)
              if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }
              let zxRound := add(zx, half)
              if lt(zxRound, zx) { revert(0,0) }
              z := div(zxRound, b)
            }
          }

--------------------
Initial State:

Account: [CREATOR], balance: 0x101008c0006302a4c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: file(bytes32,uint256), txdata: 0x29ae81146261736500000000000000000000000000000000000000000000000000000000548a1dd23a157fff7fff7e49ffffddffffffffffe7ffffffeb2333bfd8761020, value: 0x0
Caller: [ATTACKER], function: drip(bytes32), txdata: 0x44e2a5a84008000080800000801002002040044000000000101000000480000200000120, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Jug
Function name: drip(bytes32)
PC address: 4596
Estimated Gas Usage: 6483 - 42133
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/12/0xE85993AD2da1Ffd357190F5bCeAAF4233C0F441a.sol:101

case 0 {z := b}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: drip(bytes32), txdata: 0x44e2a5a80000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Jug
Function name: drip(bytes32)
PC address: 4699
Estimated Gas Usage: 17305 - 111497
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_noloop/12/0xE85993AD2da1Ffd357190F5bCeAAF4233C0F441a.sol:128

int(x) - int(y)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: drip(bytes32), txdata: 0x44e2a5a8000000000000000000000000000000000000000000000000000000007fffff7f, value: 0x0



---------------------------------------------
For contract 0xE85993AD2da1Ffd357190F5bCeAAF4233C0F441a.sol
Tool Runtime = 1319.8985322249937 seconds
#############################################