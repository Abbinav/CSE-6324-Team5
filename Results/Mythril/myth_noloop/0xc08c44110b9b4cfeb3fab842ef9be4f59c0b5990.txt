==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: constructor
PC address: 504
Estimated Gas Usage: 529 - 3581
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/12/0xc08c44110b9b4cfeb3fab842ef9be4f59c0b5990.sol:592

require(start.add(duration) > block.timestamp, "TokenVesting: final time is before current time")

--------------------
Initial State:

Account: [CREATOR], balance: 0x21, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000180108004002040080140101000010101014020708160b7bfbf8b25a7fd165c2b41167ba16550870009c008ab99cd02c768ca1a0880102000011000022002044001408081193971dfc00000000001040000200180, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vested(address)
PC address: 4726
Estimated Gas Usage: 4797 - 39834
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/12/0xc08c44110b9b4cfeb3fab842ef9be4f59c0b5990.sol:712

if (block.timestamp < _cliff) {
            return 0;
        } else if (block.timestamp >= _start.add(_duration) && _revoked[address(token)] == 0) {
            return totalBalance;
        } else if (_revoked[address(token)] > 0) {
            return totalBalance.mul(_revoked[address(token)].sub(_start)).div(_duration);
        } else {
            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000001000000000000000008000000c8c8ff53b0233a42398d8f9a80ca6a6e2e5143a56500a84a1219093e06502013b1c38034038e00a45140820081401048e44358422b288021f967040201186090, value: 0x0
Caller: [SOMEGUY], function: vested(address), txdata: 0x7102b7284343434343434343434343430000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vested(address)
PC address: 4769
Estimated Gas Usage: 6542 - 41579
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/12/0xc08c44110b9b4cfeb3fab842ef9be4f59c0b5990.sol:714

block.timestamp >= _start.add(_duration) && _revoked[address(token)] == 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x420000c00000018, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000040e624247490a41bc611e10c6056a6ea44332009c19210008411a7885cd4c901059498a0217010088c02481dc2348802c44e0ff6408030207c82088041b01107c88, value: 0x0
Caller: [CREATOR], function: vested(address), txdata: 0x7102b7284343434343434343434343430000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vested(address)
PC address: 4843
Estimated Gas Usage: 6559 - 41596
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/12/0xc08c44110b9b4cfeb3fab842ef9be4f59c0b5990.sol:714

if (block.timestamp >= _start.add(_duration) && _revoked[address(token)] == 0) {
            return totalBalance;
        } else if (_revoked[address(token)] > 0) {
            return totalBalance.mul(_revoked[address(token)].sub(_start)).div(_duration);
        } else {
            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x18000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000040000000100000000000000000000000000020021486d62904c899332c004b06fc4852d2d4455b1b3d920479c8035a80a62029c628248c28001997156000c92800d7d246045d404a602e5cc119fd4a800c41e1081, value: 0x0
Caller: [CREATOR], function: vested(address), txdata: 0x7102b728c0c0c0c0c0c0c0c0c0c0c0c00000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vested(address)
PC address: 6199
Estimated Gas Usage: 9449 - 45054
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/12/0xc08c44110b9b4cfeb3fab842ef9be4f59c0b5990.sol:467

require(c / a == b, "SafeMath: multiplication overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x3120a248100230081, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000100008000800010000808002010200000002080162b335a40430e0354d1abe0e80ce58a956c28289ca59261a4b2a88307cb65a40167002b4fe20006b0028100001020808d2468eb710e3220a0860881b906030404f, value: 0x0
Caller: [CREATOR], function: vested(address), txdata: 0x7102b7284f4f4f4f4f4f4f4f4f4f4f4f4080004000010801010101000102041010040101, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vested(address)
PC address: 6379
Estimated Gas Usage: 9237 - 44842
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/12/0xc08c44110b9b4cfeb3fab842ef9be4f59c0b5990.sol:443

require(b <= a, errorMessage)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000020008000012040020000000000000000010000000280844801924c96cd7791a1d33ed72a6263652c26e446a51f3b38198210d73a3d818bc0ff40d4003a80c22530600068c69d206401201d2008521004000780008b, value: 0x0
Caller: [CREATOR], function: vested(address), txdata: 0x7102b728a1a1a1a1a1a1a1a1a1a1a1a10000000000000000000000000000008000000040, value: 0x0



---------------------------------------------
For contract 0xc08c44110b9b4cfeb3fab842ef9be4f59c0b5990.sol
Tool Runtime = 873.6356686250074 seconds
#############################################