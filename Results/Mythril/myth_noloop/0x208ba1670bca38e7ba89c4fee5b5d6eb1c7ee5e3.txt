==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CorfiPresale
Function name: constructor
PC address: 432
Estimated Gas Usage: 52086 - 234821
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:320

require(c >= a, "SafeMath: addition overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CorfiPresale
Function name: startPresale()
PC address: 1818
Estimated Gas Usage: 1051 - 1476
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:148

require(msg.sender == owner, "You are not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startPresale(), txdata: 0x04c98b2b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CorfiPresale
Function name: pausePresale()
PC address: 2049
Estimated Gas Usage: 1095 - 1520
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:148

require(msg.sender == owner, "You are not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: pausePresale(), txdata: 0x070f5c09, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CorfiPresale
Function name: claimTeamFeeAndAddLiquidity()
PC address: 2413
Estimated Gas Usage: 1072 - 1497
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:148

require(msg.sender == owner, "You are not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CorfiPresale
Function name: setABS(address)
PC address: 2675
Estimated Gas Usage: 1182 - 1607
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:148

require(msg.sender == owner, "You are not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setABS(address), txdata: 0x4a36a9c00000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CorfiPresale
Function name: SUPER_DUPER_EMERGENCY_ALLOW_REFUNDS_DO_NOT_FUCKING_CALL_IT_FOR_FUN()
PC address: 3248
Estimated Gas Usage: 1116 - 1541
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:148

require(msg.sender == owner, "You are not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: SUPER_DUPER_EMERGENCY_ALLOW_REFUNDS_DO_NOT_FUCKING_CALL_IT_FOR_FUN(), txdata: 0x710d73e0, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CorfiPresale
Function name: lockWithUnicrypt()
PC address: 3640
Estimated Gas Usage: 1051 - 1476
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:148

require(msg.sender == owner, "You are not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lockWithUnicrypt(), txdata: 0x724b6f43, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: lockWithUnicrypt()
PC address: 3887
Estimated Gas Usage: 22782 - 202779
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:181

ABS.uniswapV2Pair()

--------------------
Initial State:

Account: [CREATOR], balance: 0xb41e1ed0000800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setABS(address), txdata: 0x4a36a9c0000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: lockWithUnicrypt(), txdata: 0x724b6f43, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: lockWithUnicrypt()
PC address: 3953
Estimated Gas Usage: 22782 - 202779
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:181

pool = ABS.uniswapV2Pair()

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lockWithUnicrypt(), txdata: 0x724b6f43, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: lockWithUnicrypt()
PC address: 4006
Estimated Gas Usage: 22782 - 202779
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:181

pool = ABS.uniswapV2Pair()

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lockWithUnicrypt(), txdata: 0x724b6f43, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: lockWithUnicrypt()
PC address: 4015
Estimated Gas Usage: 22782 - 202779
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:182

pool

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0
Caller: [CREATOR], function: lockWithUnicrypt(), txdata: 0x724b6f43, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CorfiPresale
Function name: lockWithUnicrypt()
PC address: 4204
Estimated Gas Usage: 22782 - 202779
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:183

liquidityTokens.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lockWithUnicrypt(), txdata: 0x724b6f43, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: lockWithUnicrypt()
PC address: 4267
Estimated Gas Usage: 22782 - 202779
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:184

liquidityUnlock

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lockWithUnicrypt(), txdata: 0x724b6f43, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CorfiPresale
Function name: lockWithUnicrypt()
PC address: 4455
Estimated Gas Usage: 22782 - 202779
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:185

liquidityTokens.approve(address(unicrypt), liquidityBalance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0
Caller: [CREATOR], function: lockWithUnicrypt(), txdata: 0x724b6f43, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: lockWithUnicrypt()
PC address: 4455
Estimated Gas Usage: 22782 - 202779
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:185

liquidityTokens.approve(address(unicrypt), liquidityBalance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lockWithUnicrypt(), txdata: 0x724b6f43, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CorfiPresale
Function name: lockWithUnicrypt()
PC address: 4568
Estimated Gas Usage: 22782 - 202779
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:187

pool

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lockWithUnicrypt(), txdata: 0x724b6f43, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CorfiPresale
Function name: lockWithUnicrypt()
PC address: 4741
Estimated Gas Usage: 22782 - 202779
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:187

unicrypt.depositToken.value(0) (pool, liquidityBalance, timeToLuck)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lockWithUnicrypt(), txdata: 0x724b6f43, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CorfiPresale
Function name: lockWithUnicrypt()
PC address: 4770
Estimated Gas Usage: 22782 - 202779
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:188

lockedLiquidityAmount

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lockWithUnicrypt(), txdata: 0x724b6f43, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: lockWithUnicrypt()
PC address: 4789
Estimated Gas Usage: 22782 - 202779
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:188

lockedLiquidityAmount = lockedLiquidityAmount.add(liquidityBalance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x100800000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lockWithUnicrypt(), txdata: 0x724b6f43, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CorfiPresale
Function name: withdrawTeamTokens()
PC address: 4907
Estimated Gas Usage: 1050 - 1475
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:148

require(msg.sender == owner, "You are not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawTeamTokens(), txdata: 0x953b7ef8, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CorfiPresale
Function name: withdrawTeamTokens()
PC address: 5187
Estimated Gas Usage: 8586 - 29341
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:197

require(block.timestamp >= timeTowithdrawTeamTokens, "Cannot withdraw yet")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0
Caller: [CREATOR], function: withdrawTeamTokens(), txdata: 0x953b7ef8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: withdrawTeamTokens()
PC address: 5624
Estimated Gas Usage: 22107 - 118179
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:205

timeTowithdrawTeamTokens = block.timestamp.add(3 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0
Caller: [CREATOR], function: withdrawTeamTokens(), txdata: 0x953b7ef8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: withdrawTeamTokens()
PC address: 5632
Estimated Gas Usage: 22107 - 118179
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:105

_status = _NOT_ENTERED

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0
Caller: [CREATOR], function: withdrawTeamTokens(), txdata: 0x953b7ef8, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CorfiPresale
Function name: withdrawFromUnicrypt(uint256)
PC address: 5722
Estimated Gas Usage: 1154 - 1579
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:148

require(msg.sender == owner, "You are not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawFromUnicrypt(uint256), txdata: 0x9876fdfa0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CorfiPresale
Function name: getRefund()
PC address: 6276
Estimated Gas Usage: 6059 - 26154
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:170

require(msg.sender == tx.origin)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getRefund(), txdata: 0xb2d5ae44, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CorfiPresale
Function name: getRefund()
PC address: 6344
Estimated Gas Usage: 8610 - 29365
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:173

require(isRefundEnabled || block.timestamp >= refundTime,"Cannot refund")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getRefund(), txdata: 0xb2d5ae44, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CorfiPresale
Function name: withdrawLockedTokensAfter1Year(address,uint256)
PC address: 6772
Estimated Gas Usage: 1209 - 1634
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:148

require(msg.sender == owner, "You are not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x8000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawLockedTokensAfter1Year(address,uint256), txdata: 0xbd05fb7500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CorfiPresale
Function name: withdrawLockedTokensAfter1Year(address,uint256)
PC address: 6894
Estimated Gas Usage: 2040 - 2465
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:300

require(block.timestamp >= liquidityUnlock, "You cannot withdraw yet")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdrawLockedTokensAfter1Year(address,uint256), txdata: 0xbd05fb7500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: withdrawLockedTokensAfter1Year(address,uint256)
PC address: 7204
Estimated Gas Usage: 4588 - 40000
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:301

IERC20(tokenAddress).transfer(owner, tokenAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0
Caller: [CREATOR], function: withdrawLockedTokensAfter1Year(address,uint256), txdata: 0xbd05fb75000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: CorfiPresale
Function name: buyTokens()
PC address: 7522
Estimated Gas Usage: 6056 - 26151
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:222

require(msg.sender == tx.origin)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyTokens(), txdata: 0xd0febe4c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: claimTeamFeeAndAddLiquidity()
PC address: 10068
Estimated Gas Usage: 35878 - 274069
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:275

ABS.unPauseTransferForever()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setABS(address), txdata: 0x4a36a9c0000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CorfiPresale
Function name: claimTeamFeeAndAddLiquidity()
PC address: 10068
Estimated Gas Usage: 35878 - 274069
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:275

ABS.unPauseTransferForever()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: claimTeamFeeAndAddLiquidity()
PC address: 10095
Estimated Gas Usage: 32530 - 235404
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:276

ABS

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CorfiPresale
Function name: claimTeamFeeAndAddLiquidity()
PC address: 10309
Estimated Gas Usage: 35878 - 274069
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:276

ABS.approve(address(uniswap), tokensForUniswap)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lockWithUnicrypt(), txdata: 0x724b6f43, value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: claimTeamFeeAndAddLiquidity()
PC address: 10309
Estimated Gas Usage: 35878 - 274069
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:276

ABS.approve(address(uniswap), tokensForUniswap)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: claimTeamFeeAndAddLiquidity()
PC address: 10421
Estimated Gas Usage: 32530 - 235404
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:280

ABS

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: claimTeamFeeAndAddLiquidity()
PC address: 10662
Estimated Gas Usage: 35878 - 274069
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:277

uniswap.addLiquidityETH
        .value(ETH)
        (
            address(ABS),
            tokensForUniswap,
            tokensForUniswap,
            ETH,
            address(this),
            block.timestamp
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: claimTeamFeeAndAddLiquidity()
PC address: 10757
Estimated Gas Usage: 32530 - 235404
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:289

ABS

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: claimTeamFeeAndAddLiquidity()
PC address: 10819
Estimated Gas Usage: 35878 - 274069
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:289

_burnPool

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: claimTeamFeeAndAddLiquidity()
PC address: 10985
Estimated Gas Usage: 35878 - 274069
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:289

ABS.transfer(_burnPool ,tokensToBurn)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setABS(address), txdata: 0x4a36a9c0000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: claimTeamFeeAndAddLiquidity()
PC address: 10985
Estimated Gas Usage: 35878 - 274069
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:289

ABS.transfer(_burnPool ,tokensToBurn)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: claimTeamFeeAndAddLiquidity()
PC address: 11055
Estimated Gas Usage: 35878 - 274069
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:292

justTrigger = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: claimTeamFeeAndAddLiquidity()
PC address: 11069
Estimated Gas Usage: 35878 - 274069
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:292

justTrigger = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: claimTeamFeeAndAddLiquidity()
PC address: 11076
Estimated Gas Usage: 35878 - 274069
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:294

isStopped

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: claimTeamFeeAndAddLiquidity()
PC address: 11104
Estimated Gas Usage: 32530 - 235404
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:295

isStopped = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: CorfiPresale
Function name: claimTeamFeeAndAddLiquidity()
PC address: 11118
Estimated Gas Usage: 35878 - 274069
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:295

isStopped = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CorfiPresale
Function name: withdrawTeamTokens()
PC address: 11143
Estimated Gas Usage: 12033 - 68105
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/11/0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol:320

require(c >= a, "SafeMath: addition overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimTeamFeeAndAddLiquidity(), txdata: 0x463f5b92, value: 0x0
Caller: [CREATOR], function: withdrawTeamTokens(), txdata: 0x953b7ef8, value: 0x0



---------------------------------------------
For contract 0x208ba1670bca38e7ba89c4fee5b5d6eb1c7ee5e3.sol
Tool Runtime = 1469.2697181500262 seconds
#############################################