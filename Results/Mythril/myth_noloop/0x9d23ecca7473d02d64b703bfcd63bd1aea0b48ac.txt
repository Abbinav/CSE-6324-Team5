==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 1868
Estimated Gas Usage: 16707 - 225989
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:381

_token

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b80000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 2052
Estimated Gas Usage: 28965 - 349898
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:381

IERC20(_token).balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b80000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 2295
Estimated Gas Usage: 28965 - 349898
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:385

_liquidityRewardsDivisor

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000004000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 2306
Estimated Gas Usage: 28965 - 349898
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:387

_liquidityRewardsDivisor

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b80000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 2334
Estimated Gas Usage: 16707 - 225989
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:392

_liquidityRewardsDivisor

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b80000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NodeRunnersLiquidity
Function name: lockedLiquidity()
PC address: 3813
Estimated Gas Usage: 5417 - 75577
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:454

IERC20(_uniswapV2Pair).balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: lockedLiquidity(), txdata: 0xb4398244, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: burnLiquidity()
PC address: 5910
Estimated Gas Usage: 6117 - 76628
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:422

IERC20(_uniswapV2Pair).transfer(address(0), balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0
Caller: [SOMEGUY], function: burnLiquidity(), txdata: 0xda942cbf, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NodeRunnersLiquidity
Function name: burnLiquidity()
PC address: 5910
Estimated Gas Usage: 6117 - 76628
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:422

IERC20(_uniswapV2Pair).transfer(address(0), balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: burnLiquidity(), txdata: 0xda942cbf, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 6355
Estimated Gas Usage: 28965 - 349898
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:415

_token

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000004000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 6539
Estimated Gas Usage: 28965 - 349898
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:415

IERC20(_token).balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 6778
Estimated Gas Usage: 28965 - 349898
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:416

KP3R.worked(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x100080400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 767676767676767676767676deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 7689
Estimated Gas Usage: 37650 - 429804
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:487

_token

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000100002000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b82000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 7751
Estimated Gas Usage: 28965 - 349898
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:487

_uniswapV2Pair

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b80000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 7917
Estimated Gas Usage: 28965 - 349898
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:487

IERC20(_token).transfer(_uniswapV2Pair, liquidityRewards)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b80000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NodeRunnersLiquidity
Function name: lockLiquidity(uint256)
PC address: 7917
Estimated Gas Usage: 11078 - 116530
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:487

IERC20(_token).transfer(_uniswapV2Pair, liquidityRewards)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b80000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: lockLiquidity(uint256), txdata: 0x2bfbd9cf01a082310101010101010101010101010901d12ebe1b195e5aa8748e62bd7735, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 7917
Estimated Gas Usage: 16707 - 225989
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:487

IERC20(_token).transfer(_uniswapV2Pair, liquidityRewards)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b80000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: NodeRunnersLiquidity
Function name: lockLiquidity(uint256)
PC address: 7980
Estimated Gas Usage: 23336 - 240439
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:488

_uniswapV2Pair

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: cfcfcfcfcfcfcfcfcfcfcfcfdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b80000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: lockLiquidity(uint256), txdata: 0x2bfbd9cf3ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 8111
Estimated Gas Usage: 28965 - 349898
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:488

IUniswapV2Pair(_uniswapV2Pair).sync()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b80000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 8111
Estimated Gas Usage: 37650 - 429804
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:488

IUniswapV2Pair(_uniswapV2Pair).sync()

--------------------
Initial State:

Account: [CREATOR], balance: 0x52000000000009001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b80000000000000000000000000000000000000000002000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 8111
Estimated Gas Usage: 37650 - 429804
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:488

IUniswapV2Pair(_uniswapV2Pair).sync()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080400000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b80000000000000000000000000000200000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 8397
Estimated Gas Usage: 16707 - 225989
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:471

_token

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b80000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 8507
Estimated Gas Usage: 28965 - 349898
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:472

_uniswapV2Router

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000004000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NodeRunnersLiquidity
Function name: lockLiquidity(uint256)
PC address: 8636
Estimated Gas Usage: 23336 - 240439
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:472

IUniswapV2Router02(_uniswapV2Router).WETH()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: lockLiquidity(uint256), txdata: 0x2bfbd9cf3ffffffffffffffffffff7fffffffffc00000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 8773
Estimated Gas Usage: 37650 - 429804
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:474

_token

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000100002000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b82000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 8835
Estimated Gas Usage: 28965 - 349898
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:474

_uniswapV2Router

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000004000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 9001
Estimated Gas Usage: 37650 - 429804
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:474

IERC20(_token).approve(_uniswapV2Router, tokenAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b80000000000000000000000000000000000000000000000000000000100000000, value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: NodeRunnersLiquidity
Function name: lockLiquidity(uint256)
PC address: 9001
Estimated Gas Usage: 23336 - 240439
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:474

IERC20(_token).approve(_uniswapV2Router, tokenAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b80000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: lockLiquidity(uint256), txdata: 0x2bfbd9cf07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 9001
Estimated Gas Usage: 28965 - 349898
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:474

IERC20(_token).approve(_uniswapV2Router, tokenAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000004000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 9064
Estimated Gas Usage: 28965 - 349898
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:475

_uniswapV2Router

--------------------
Initial State:

Account: [CREATOR], balance: 0x100080400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 767676767676767676767676deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 9348
Estimated Gas Usage: 28965 - 349898
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:475

IUniswapV2Router02(_uniswapV2Router)
            .swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, uniswapPairPath, address(this), block.timestamp)

--------------------
Initial State:

Account: [CREATOR], balance: 0x100080400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 767676767676767676767676deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 9379
Estimated Gas Usage: 28965 - 349898
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:480

_token

--------------------
Initial State:

Account: [CREATOR], balance: 0x100080400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 767676767676767676767676deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 9441
Estimated Gas Usage: 28965 - 349898
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:480

_uniswapV2Router

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 9607
Estimated Gas Usage: 28965 - 349898
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:480

IERC20(_token).approve(_uniswapV2Router, tokenAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: setLiquidityRewardsDivisor(uint256), txdata: 0xa56c95b80000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 9607
Estimated Gas Usage: 28965 - 349898
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:480

IERC20(_token).approve(_uniswapV2Router, tokenAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 9670
Estimated Gas Usage: 28965 - 349898
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:481

_uniswapV2Router

--------------------
Initial State:

Account: [CREATOR], balance: 0x100080400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 767676767676767676767676deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: NodeRunnersLiquidity
Function name: rewardLiquidityProviders()
PC address: 9733
Estimated Gas Usage: 28965 - 349898
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:482

_token

--------------------
Initial State:

Account: [CREATOR], balance: 0x100080400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 767676767676767676767676deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: rewardLiquidityProviders(), txdata: 0xdb647b76, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: NodeRunnersLiquidity
Function name: lockLiquidity(uint256)
PC address: 9975
Estimated Gas Usage: 23336 - 240439
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/7/0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol:481

IUniswapV2Router02(_uniswapV2Router)
            .addLiquidityETH.value(ethAmount)(_token, tokenAmount, 0, 0, address(this), block.timestamp)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: c1c1c1c1c1c1c1c1c1c1c1c1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: lockLiquidity(uint256), txdata: 0x2bfbd9cf7000c0fffffffffffffffff48401450000c18000001000000110000000000001, value: 0x0



---------------------------------------------
For contract 0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol
Tool Runtime = 1616.001435676997 seconds
#############################################