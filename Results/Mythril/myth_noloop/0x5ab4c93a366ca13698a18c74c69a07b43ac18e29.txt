==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenRecover
Function name: recoverERC20(address,uint256)
PC address: 1110
Estimated Gas Usage: 3738 - 39150
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/12/0x5ab4c93a366ca13698a18c74c69a07b43ac18e29.sol:2882

IERC20(tokenAddress).transfer(owner(), tokenAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40400000201b00002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: recoverERC20(address,uint256), txdata: 0x8980f11f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: recoverERC20(address,uint256), txdata: 0x8980f11f808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef8080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Staking
Function name: withdrawDeposit(uint256)
PC address: 2441
Estimated Gas Usage: 11949 - 33277
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/12/0x5ab4c93a366ca13698a18c74c69a07b43ac18e29.sol:3131

require(_depositDates[depositId].add(_YEAR) < block.timestamp, "deposit withdrawal is locked for a one year from creation")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000040200000000000010020020800000180001000084000020100000208010108080000000000000000000000000001408004028020404080802010801040044020400000000000000000000000000000000000000000000000000000000000000000d08800000000000000000000000000000000000000000000000102000000000000000000000000000000000010, value: 0x0
Caller: [SOMEGUY], function: receive(), txdata: 0xa3e76c0f, value: 0x1
Caller: [SOMEGUY], function: withdrawDeposit(uint256), txdata: 0x33289a460000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DepositToken
Function name: recoverERC20(address,uint256)
PC address: 3362
Estimated Gas Usage: 3783 - 39195
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/12/0x5ab4c93a366ca13698a18c74c69a07b43ac18e29.sol:2882

IERC20(tokenAddress).transfer(owner(), tokenAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1080801000442000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000020008804080082004804000400202401008200200000000000000000000000004104002020180400201400110200020000204080000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: recoverERC20(address,uint256), txdata: 0x8980f11f040404040404040404040404deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0404040404040404040404040404040404040404040404040404040404040404, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Staking
Function name: recoverERC20(address,uint256)
PC address: 4357
Estimated Gas Usage: 3783 - 39195
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/12/0x5ab4c93a366ca13698a18c74c69a07b43ac18e29.sol:2882

IERC20(tokenAddress).transfer(owner(), tokenAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x14c00000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000402004010401000100010102000000000000000800010000000000000002010100000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200804040808020800100802001804004400410040202800a0211108080200100000000000000000000000040, value: 0x0
Caller: [CREATOR], function: receive(), txdata: 0xa3e76c0f, value: 0x0
Caller: [CREATOR], function: recoverERC20(address,uint256), txdata: 0x8980f11f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Staking
Function name: withdrawInterest(uint256)
PC address: 5967
Estimated Gas Usage: 11882 - 33210
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/12/0x5ab4c93a366ca13698a18c74c69a07b43ac18e29.sol:3273

require(_depositDates[depositId].add(_YEAR) < block.timestamp, "interest withdrawal is locked for a one year from creation")

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2ad010014a0040000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000020010000020004800000010000020000004080010000020001200400000102040200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000001200000000300000000000000000000000004, value: 0x0
Caller: [CREATOR], function: receive(), txdata: 0xa3e76c0f, value: 0x1
Caller: [CREATOR], function: withdrawInterest(uint256), txdata: 0x08669aab0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Staking
Function name: withdrawInterestFor(address,uint256)
PC address: 6098
Estimated Gas Usage: 13912 - 35760
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/12/0x5ab4c93a366ca13698a18c74c69a07b43ac18e29.sol:3275

require(_interestTransferDates[depositId].add(_YEAR) < block.timestamp, "no interest to pay yet")

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4001000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000040000000000000000200000040000000000000000800000000000100000000000000000000000000000000000000000000000000000000000000000200000000080000000000000000000000000000000000000000000000000000000000000001800280000000000000000000000000000000000000000000040000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: receive(), txdata: 0xa3e76c0f, value: 0x1
Caller: [CREATOR], function: withdrawInterestFor(address,uint256), txdata: 0x8f1c2c27000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Staking
Function name: receive()
PC address: 7280
Estimated Gas Usage: 81722 - 413945
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x5ab4c93a366ca13698a18c74c69a07b43ac18e29.sol:3235

_wallet

--------------------
Initial State:

Account: [CREATOR], balance: 0x21, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000040010100001004000001000000000000000000000001000000000000040000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000200000000000100000000000000000000000004, value: 0x0
Caller: [SOMEGUY], function: receive(), txdata: 0xa3e76c0f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Staking
Function name: receive()
PC address: 7356
Estimated Gas Usage: 81722 - 413945
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/12/0x5ab4c93a366ca13698a18c74c69a07b43ac18e29.sol:3235

_wallet.transfer(weiAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000102082000000200000000000000000000000004, value: 0x0
Caller: [SOMEGUY], function: receive(), txdata: 0xa3e76c0f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Staking
Function name: receive()
PC address: 7356
Estimated Gas Usage: 81722 - 413945
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x5ab4c93a366ca13698a18c74c69a07b43ac18e29.sol:3235

_wallet.transfer(weiAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40c0000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000040040000000001000001000000000020000000000000000000000040000000000000000000000000000000000000010204004008010002400001008000010000000000000000000000000000000000000000000000000000000000000000000000400810108080200220808000804000000000000000000000401804804080108d00000000000000000000000010, value: 0x0
Caller: [CREATOR], function: recoverERC20(address,uint256), txdata: 0x8980f11f8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d8d, value: 0x0
Caller: [ATTACKER], function: receive(), txdata: 0xa3e76c0f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Staking
Function name: receive()
PC address: 7467
Estimated Gas Usage: 81722 - 413945
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x5ab4c93a366ca13698a18c74c69a07b43ac18e29.sol:1724

_status = _NOT_ENTERED

--------------------
Initial State:

Account: [CREATOR], balance: 0x21, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000040010100001004000001000000000000000000000001000000000000040000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000200000000000100000000000000000000000004, value: 0x0
Caller: [SOMEGUY], function: receive(), txdata: 0xa3e76c0f, value: 0x0



---------------------------------------------
For contract 0x5ab4c93a366ca13698a18c74c69a07b43ac18e29.sol
Tool Runtime = 3266.158036688983 seconds
#############################################