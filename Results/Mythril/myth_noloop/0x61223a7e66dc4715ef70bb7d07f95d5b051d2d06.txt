==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DarkOffersV1
Function name: deposit(uint256)
PC address: 4797
Estimated Gas Usage: 1218 - 1503
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/10/0x61223a7e66dc4715ef70bb7d07f95d5b051d2d06.sol:967

require(now > canWithdrawTime[msg.sender],"!1 days")

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f250000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DarkOffersV1
Function name: getMark(uint256)
PC address: 8826
Estimated Gas Usage: 5882 - 76416
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/10/0x61223a7e66dc4715ef70bb7d07f95d5b051d2d06.sol:936

IUniswapV2Pair(markEthUniLp).getReserves()

--------------------
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getMark(uint256), txdata: 0x3e0089770000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DarkOffersV1
Function name: inCaseLpStuck()
PC address: 10739
Estimated Gas Usage: 7944 - 80551
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/10/0x61223a7e66dc4715ef70bb7d07f95d5b051d2d06.sol:702

target.call.value(value)(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: inCaseLpStuck(), txdata: 0xc1ae771e, value: 0x0



---------------------------------------------
For contract 0x61223a7e66dc4715ef70bb7d07f95d5b051d2d06.sol
Tool Runtime = 4658.02070471202 seconds
#############################################