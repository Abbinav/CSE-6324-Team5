==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BitDefi
Function name: returnRate()
PC address: 3493
Estimated Gas Usage: 224 - 319
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/4/0xeb2988214f6cb6a4738e733adfe0582b1c6369b4.sol:119

if                                       ( block.number < heightEnd20Percent)  return 50

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: returnRate(), txdata: 0x7c2ffbb3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BitDefi
Function name: returnRate()
PC address: 3515
Estimated Gas Usage: 255 - 350
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/4/0xeb2988214f6cb6a4738e733adfe0582b1c6369b4.sol:120

block.number >= heightEnd20Percent  && block.number < heightEnd10Percent

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: returnRate(), txdata: 0x7c2ffbb3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BitDefi
Function name: returnRate()
PC address: 3528
Estimated Gas Usage: 282 - 377
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/4/0xeb2988214f6cb6a4738e733adfe0582b1c6369b4.sol:120

if (block.number >= heightEnd20Percent  && block.number < heightEnd10Percent)  return 100

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: returnRate(), txdata: 0x7c2ffbb3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BitDefi
Function name: returnRate()
PC address: 3550
Estimated Gas Usage: 313 - 408
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/4/0xeb2988214f6cb6a4738e733adfe0582b1c6369b4.sol:121

block.number >= heightEnd10Percent  && block.number < heightEnd05Percent

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: returnRate(), txdata: 0x7c2ffbb3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BitDefi
Function name: returnRate()
PC address: 3563
Estimated Gas Usage: 340 - 435
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/4/0xeb2988214f6cb6a4738e733adfe0582b1c6369b4.sol:121

if (block.number >= heightEnd10Percent  && block.number < heightEnd05Percent)  return 200

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: returnRate(), txdata: 0x7c2ffbb3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BitDefi
Function name: returnRate()
PC address: 3584
Estimated Gas Usage: 368 - 463
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/4/0xeb2988214f6cb6a4738e733adfe0582b1c6369b4.sol:122

if (block.number >= heightEnd05Percent)                                        return 400

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: returnRate(), txdata: 0x7c2ffbb3, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BitDefi
Function name: increaseAllowance(address,uint256)
PC address: 6823
Estimated Gas Usage: 1435 - 1910
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/4/0xeb2988214f6cb6a4738e733adfe0582b1c6369b4.sol:41

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x48000100080403, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: approve(address,uint256), txdata: 0x095ea7b3000000000000000000000000802002010202802080104020048001400104108000000000000000000000000000000004f3d34e8933d9a930e004026a79b50ba8, value: 0x0
Caller: [ATTACKER], function: increaseAllowance(address,uint256), txdata: 0x39509351a7a7a7a7a7a7a7a7a7a7a7a78020020102028020801040200480014001041080fffffffffffffffffffffffffffffffd81181187610b0b514a0402b20b050620, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BitDefi
Function name: decreaseAllowance(address,uint256)
PC address: 7223
Estimated Gas Usage: 1395 - 1870
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/4/0xeb2988214f6cb6a4738e733adfe0582b1c6369b4.sol:35

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x203cf00000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: decreaseAllowance(address,uint256), txdata: 0xa457c2d700000000000000000000000001010101010002000202020000000000010000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0



---------------------------------------------
For contract 0xeb2988214f6cb6a4738e733adfe0582b1c6369b4.sol
Tool Runtime = 2749.373914783995 seconds
#############################################