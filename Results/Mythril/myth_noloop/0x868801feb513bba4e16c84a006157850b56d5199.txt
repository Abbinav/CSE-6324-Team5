==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 4265
Estimated Gas Usage: 1365 - 1840
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/10/0x868801feb513bba4e16c84a006157850b56d5199.sol:92

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b30000000000000000000000000000000000000000000000020000000000000000e0475812a979cc597a1c09421e9347c0e2a7c65b2fd339a9d4edba9101588891, value: 0x0
Caller: [CREATOR], function: increaseApproval(address,uint256), txdata: 0xd73dd6230000000000000000000000000000000000000000000000020000000000000000a000c455878518d502380b400811590f9ea4005264122029154888d08028a874, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MintableToken
Function name: mint(address,uint256,bool)
PC address: 5324
Estimated Gas Usage: 2114 - 2539
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/10/0x868801feb513bba4e16c84a006157850b56d5199.sol:92

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mint(address,uint256,bool), txdata: 0xd1a1beb400000000000000000000000000000420400102000004040101000410200420008138ac865240208880d808050238a0000405332b44f6e7b67c5d26ae58e2f8fd4004082002040401010810080108202001804002012080014020400201800104, value: 0x0
Caller: [CREATOR], function: mint(address,uint256,bool), txdata: 0xd1a1beb400000000000000000000000000000000000000000000000000000000000000008040c8b3b2c0287a888c400203f01ffffc40022a4c81188240482c58118043050101018001010101010101010101018001010101010101010101010101010101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Yasion
Function name: burn(uint256)
PC address: 6099
Estimated Gas Usage: 8196 - 28861
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/10/0x868801feb513bba4e16c84a006157850b56d5199.sol:83

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mint(address,uint256,bool), txdata: 0xd1a1beb4000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa40000000001800000200001000801000411904450104800084800240821d2a040000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: burn(uint256), txdata: 0x42966c68000000000018000002000010008010004119044602654ce55cd01292e41d2a05, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Yasion
Function name: mint(address,uint256,bool)
PC address: 6129
Estimated Gas Usage: 2092 - 2517
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/10/0x868801feb513bba4e16c84a006157850b56d5199.sol:92

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mint(address,uint256,bool), txdata: 0xd1a1beb40000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffad482d2338032d1c0000000101010101010101010101010101010101010101010101010101010101010101, value: 0x0



---------------------------------------------
For contract 0x868801feb513bba4e16c84a006157850b56d5199.sol
Tool Runtime = 2741.82367438497 seconds
#############################################