==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Depository
Function name: constructor
PC address: 339
Estimated Gas Usage: 18648 - 82430
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/11/0x5f1d7707c4c233059e84674ccac35eb68aedc57c.sol:550

require(openingTime_ > block.timestamp, "Depository: opening time is before current time")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Depository
Function name: deposit(address,uint256)
PC address: 1572
Estimated Gas Usage: 2426 - 3041
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/11/0x5f1d7707c4c233059e84674ccac35eb68aedc57c.sol:594

require(block.timestamp <_openingTime, "Depository::deposit: already closed")

--------------------
Initial State:

Account: [CREATOR], balance: 0x800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01, value: 0x0
Caller: [CREATOR], function: addMember(address), txdata: 0xca6d56dc808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(address,uint256), txdata: 0x47e7ef2456565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Depository
Function name: release(address)
PC address: 2979
Estimated Gas Usage: 3186 - 3661
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/11/0x5f1d7707c4c233059e84674ccac35eb68aedc57c.sol:666

if (block.timestamp < _openingTime) {

            return 0;

        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1ca2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01, value: 0x0
Caller: [SOMEGUY], function: release(address), txdata: 0x191655874040404040404040404040400000000000000000000000000200080100808000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Depository
Function name: release(address)
PC address: 3026
Estimated Gas Usage: 4939 - 5414
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/11/0x5f1d7707c4c233059e84674ccac35eb68aedc57c.sol:676

if (block.timestamp >= _openingTime.add(_DURATION)) {

            vestedAmount = totalBalance;

        } else {

            vestedAmount = (totalBalance.mul(block.timestamp.sub(_openingTime)).div(_DURATION));

        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000040043b09, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01, value: 0x0
Caller: [SOMEGUY], function: release(address), txdata: 0x191655870000000000000000000000000000000000000000000000800010010800000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Depository
Function name: release(address)
PC address: 4632
Estimated Gas Usage: 6710 - 7563
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/11/0x5f1d7707c4c233059e84674ccac35eb68aedc57c.sol:48

require(b <= a, errorMessage)

--------------------
Initial State:

Account: [CREATOR], balance: 0x380000000000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 60, value: 0x0
Caller: [SOMEGUY], function: release(address), txdata: 0x191655870f0f0f0f0f0f0f0f0f0f0f0f0000080000000000000000100010200020000000, value: 0x0



---------------------------------------------
For contract 0x5f1d7707c4c233059e84674ccac35eb68aedc57c.sol
Tool Runtime = 377.08750214398606 seconds
#############################################