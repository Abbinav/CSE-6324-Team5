==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: detonateBomb()
PC address: 3661
Estimated Gas Usage: 226 - 321
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:161

require(block.number > DETONATION_TIME, "Not until Xmas")

--------------------
Initial State:

Account: [CREATOR], balance: 0x842000040040000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: detonateBomb(), txdata: 0x06bdfb5d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: cutBrownWire(bytes)
PC address: 4199
Estimated Gas Usage: 456 - 551
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:71

require(block.number > INITIAL_COMMIT_PERIOD_END, "Easy does it")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000400020158, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutBrownWire(bytes), txdata: 0x18d1b6c00000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BombDisposal
Function name: cutBrownWire(bytes)
PC address: 4737
Estimated Gas Usage: 2707 - 6944
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:75

require(commitHash == brownCommits[msg.sender], "Poor commitment")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2003a39, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutBrownWire(bytes), txdata: 0x18d1b6c00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: commitToCutGreenWire(bytes32)
PC address: 5299
Estimated Gas Usage: 329 - 424
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:52

require(block.number < INITIAL_COMMIT_PERIOD_END, "You're too late")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2040000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: commitToCutGreenWire(bytes32), txdata: 0x506795e90000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: cutPurpleWire(string)
PC address: 5492
Estimated Gas Usage: 500 - 595
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:58

require(block.number > INITIAL_COMMIT_PERIOD_END, "Easy does it")

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: cutPurpleWire(string), txdata: 0x58ad495c0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BombDisposal
Function name: cutPurpleWire(string)
PC address: 6030
Estimated Gas Usage: 2751 - 6988
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:62

require(commitHash == purpleCommits[msg.sender], "Poor commitment")

--------------------
Initial State:

Account: [CREATOR], balance: 0x210104000001be3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutPurpleWire(string), txdata: 0x58ad495c0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004002000002000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BombDisposal
Function name: claimDisarmReward()
PC address: 6567
Estimated Gas Usage: 1050 - 1475
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:156

require(msg.sender == theRealJohnMcClane, "Get outta here")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: claimDisarmReward(), txdata: 0x5ec313b3, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: commitToCutBrownWire(bytes32)
PC address: 6804
Estimated Gas Usage: 328 - 423
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:47

require(block.number < INITIAL_COMMIT_PERIOD_END, "You're too late")

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c0000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: commitToCutBrownWire(bytes32), txdata: 0x66551f8e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BombDisposal
Function name: disarmCode()
PC address: 7001
Estimated Gas Usage: 3310 - 4628
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:34

string public disarmCode

--------------------
Initial State:

Account: [CREATOR], balance: 0x2003008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: provideDisarmCode(string), txdata: 0xf244e970000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: disarmCode(), txdata: 0x7ec62e01, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BombDisposal
Function name: disarmCode()
PC address: 7053
Estimated Gas Usage: 3310 - 4628
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:34

string public disarmCode

--------------------
Initial State:

Account: [CREATOR], balance: 0x2003008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: provideDisarmCode(string), txdata: 0xf244e970000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: disarmCode(), txdata: 0x7ec62e01, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: commitToCutPurpleWire(bytes32)
PC address: 7175
Estimated Gas Usage: 285 - 380
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:42

require(block.number < INITIAL_COMMIT_PERIOD_END, "You're too late")

--------------------
Initial State:

Account: [CREATOR], balance: 0x400410c0002038001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: commitToCutPurpleWire(bytes32), txdata: 0x8ff414380000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: cutOrangeWire(bytes2)
PC address: 9845
Estimated Gas Usage: 293 - 388
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:99

require(block.number > INITIAL_COMMIT_PERIOD_END, "Easy does it")

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c0000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: cutOrangeWire(bytes2), txdata: 0xd48af3cd0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BombDisposal
Function name: cutOrangeWire(bytes2)
PC address: 10457
Estimated Gas Usage: 1548 - 2822
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:103

require(firstByte == 0x00, "Try a new nonce")

--------------------
Initial State:

Account: [CREATOR], balance: 0x7bdf6, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutOrangeWire(bytes2), txdata: 0xd48af3cd0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: cutRedOrBlueWire()
PC address: 10783
Estimated Gas Usage: 201 - 296
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:110

require(block.number > INITIAL_COMMIT_PERIOD_END, "Easy does it")

--------------------
Initial State:

Account: [CREATOR], balance: 0x8c0042001001000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BombDisposal
Function name: cutRedOrBlueWire()
PC address: 11469
Estimated Gas Usage: 29394 - 150279
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:114

msg.sender.call("You stay in Wonderland and I show you how deep the rabbit-hole goes")

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0
Caller: [ATTACKER], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0

==== Unchecked return value from external call. ====
SWC ID: 104
Severity: Medium
Contract: BombDisposal
Function name: cutRedOrBlueWire()
PC address: 11469
Estimated Gas Usage: 29461 - 150629
The return value of a message call is not checked.
External calls return a boolean value. If the callee halts with an exception, 'false' is returned and execution continues in the caller. The caller should check whether an exception happened and react accordingly to avoid unexpected behavior. For example it is often desirable to wrap external calls in require() so the transaction is reverted if the call fails.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:114

msg.sender.call("You stay in Wonderland and I show you how deep the rabbit-hole goes")

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000204909a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0
Caller: [SOMEGUY], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BombDisposal
Function name: cutRedOrBlueWire()
PC address: 11591
Estimated Gas Usage: 29461 - 150629
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:115

redBlueAttempted[tx.origin]

--------------------
Initial State:

Account: [CREATOR], balance: 0x21810800020ebfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BombDisposal
Function name: cutRedOrBlueWire()
PC address: 11617
Estimated Gas Usage: 29461 - 150629
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:116

redOrBlueWiresCut += 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x21810800020ebfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BombDisposal
Function name: cutRedOrBlueWire()
PC address: 11637
Estimated Gas Usage: 29461 - 150629
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:116

redOrBlueWiresCut += 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x21810800020ebfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BombDisposal
Function name: cutRedOrBlueWire()
PC address: 11654
Estimated Gas Usage: 29394 - 150279
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:116

redOrBlueWiresCut += 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c10804020fbfba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BombDisposal
Function name: cutRedOrBlueWire()
PC address: 11729
Estimated Gas Usage: 29461 - 150629
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:118

redBlueAttempted[tx.origin] = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x21810800020ebfb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BombDisposal
Function name: cutRedOrBlueWire()
PC address: 11743
Estimated Gas Usage: 29394 - 150279
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:118

redBlueAttempted[tx.origin] = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c10804020fbfba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutRedOrBlueWire(), txdata: 0xe97d8068, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: BombDisposal
Function name: cutGreenWire(string,string,string)
PC address: 11758
Estimated Gas Usage: 806 - 901
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:86

require(block.number > INITIAL_COMMIT_PERIOD_END, "Easy does it")

--------------------
Initial State:

Account: [CREATOR], balance: 0x400c1000000081201, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutGreenWire(string,string,string), txdata: 0xe9d5f1fe000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BombDisposal
Function name: cutGreenWire(string,string,string)
PC address: 12330
Estimated Gas Usage: 3147 - 11992
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:90

require(commitHash == greenCommits[msg.sender], "Poor commitment")

--------------------
Initial State:

Account: [CREATOR], balance: 0x402011102, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: cutGreenWire(string,string,string), txdata: 0xe9d5f1fe000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: BombDisposal
Function name: provideDisarmCode(string)
PC address: 12922
Estimated Gas Usage: 1368 - 1793
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_noloop/3/0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol:123

require(msg.sender == owner)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40007a7ba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: provideDisarmCode(string), txdata: 0xf244e9700000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: BombDisposal
Function name: provideDisarmCode(string)
PC address: 12964
Estimated Gas Usage: 17700 - 78220
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: provideDisarmCode(string), txdata: 0xf244e97000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: provideDisarmCode(string), txdata: 0xf244e97000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000021707070707070707070707070707070707070707070707070707070707070707070, value: 0x0



---------------------------------------------
For contract 0x673fd2220c495d4fe5ef91d65f5689d95f7a72d1.sol
Tool Runtime = 2522.0032669939974 seconds
#############################################