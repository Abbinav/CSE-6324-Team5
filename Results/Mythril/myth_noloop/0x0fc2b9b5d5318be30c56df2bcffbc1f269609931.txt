==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LBS
Function name: name()
PC address: 1297
Estimated Gas Usage: 4194 - 6313
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_noloop/1/0x0fc2b9b5d5318be30c56df2bcffbc1f269609931.sol:80

string public name = "Let's Boycott SUSHI SWRV YAMV3 And Strike Mining"

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000002eff6aef680fe2006266c00c0efff00feafee00000000000000000000000000000000000000000400200000000000000000020000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LBS
Function name: name()
PC address: 1349
Estimated Gas Usage: 4206 - 6325
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_noloop/1/0x0fc2b9b5d5318be30c56df2bcffbc1f269609931.sol:80

string public name = "Let's Boycott SUSHI SWRV YAMV3 And Strike Mining"

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: name(), txdata: 0x06fdde03, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LBS
Function name: increaseApproval(address,uint256)
PC address: 4774
Estimated Gas Usage: 1412 - 1887
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/1/0x0fc2b9b5d5318be30c56df2bcffbc1f269609931.sol:72

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2e0100801000022, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000080808000004040088101210110030801010010018cc4a628a81ac66103489782a2d0d61d2482a8c98c9258a8b1e74b396ab0f60e, value: 0x0
Caller: [ATTACKER], function: increaseApproval(address,uint256), txdata: 0xd73dd623a7a7a7a7a7a7a7a7a7a7a7a78080800000404008810121011003080101001001c0202400880244231d481082829194f15c82804b00864888202241114a9712f2, value: 0x0



---------------------------------------------
For contract 0x0fc2b9b5d5318be30c56df2bcffbc1f269609931.sol
Tool Runtime = 530.0936285019998 seconds
#############################################