==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BasicToken
Function name: transfer(address,uint256)
PC address: 937
Estimated Gas Usage: 1328 - 1613
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/7/0xb6aa337c9005fbf3a10edde47ddde3541adb79cb.sol:26

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3b3, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001020101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: transfer(address,uint256)
PC address: 3914
Estimated Gas Usage: 1328 - 1613
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/7/0xb6aa337c9005fbf3a10edde47ddde3541adb79cb.sol:26

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000010902, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001020101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 3945
Estimated Gas Usage: 1368 - 1843
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/7/0xb6aa337c9005fbf3a10edde47ddde3541adb79cb.sol:32

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b30000000000000000000000000140800008000080800040100204012002000000000000000000000000000000000010000000000000000000000003baeb6eb4cd, value: 0x0
Caller: [SOMEGUY], function: increaseApproval(address,uint256), txdata: 0xd73dd6235e5e5e5e5e5e5e5e5e5e5e5e0140800008000080800040100204012002000000fffffffffffffffffffffffffffff8fffffffffffffffffffffffe2228a4a485, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: xSTAKEfinance
Function name: approveAndCall(address,uint256,bytes)
PC address: 4548
Estimated Gas Usage: 9246 - 67599
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/7/0xb6aa337c9005fbf3a10edde47ddde3541adb79cb.sol:249

spender.receiveApproval(msg.sender, _value, _extraData)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe00292882048001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000084002000002, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000004000100000020000100020400000000020000000000000000000000000001080840808008044000001080040800400220200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: approveAndCall(address,uint256,bytes), txdata: 0xcae9ca51000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: xSTAKEfinance
Function name: transferAnyERC20Token(address,address,uint256)
PC address: 4847
Estimated Gas Usage: 2889 - 37971
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/7/0xb6aa337c9005fbf3a10edde47ddde3541adb79cb.sol:255

ERC20(_tokenAddress).transfer(_to, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000002000008000000800204000080402000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: transferAnyERC20Token(address,address,uint256), txdata: 0xd493b9ac020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef02020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: xSTAKEfinance
Function name: transfer(address,uint256)
PC address: 5909
Estimated Gas Usage: 1373 - 1658
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/7/0xb6aa337c9005fbf3a10edde47ddde3541adb79cb.sol:26

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001020101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: xSTAKEfinance
Function name: increaseApproval(address,uint256)
PC address: 5940
Estimated Gas Usage: 1368 - 1843
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/7/0xb6aa337c9005fbf3a10edde47ddde3541adb79cb.sol:32

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2808400000100081, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b30000000000000000000000001000102004084004800402200408108001100801000000000000000000ca12000020a96f6af2f30240156e09f000001a98c14106, value: 0x0
Caller: [SOMEGUY], function: increaseApproval(address,uint256), txdata: 0xd73dd623a7a7a7a7a7a7a7a7a7a7a7a71000102004084004800402200408108001100801ffffffffffffffffff8aedffffdf89414a200a3e4ff8499e07fffff4734f9f7c, value: 0x0



---------------------------------------------
For contract 0xb6aa337c9005fbf3a10edde47ddde3541adb79cb.sol
Tool Runtime = 1302.743080974993 seconds
#############################################