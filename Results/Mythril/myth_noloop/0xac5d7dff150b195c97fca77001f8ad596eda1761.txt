==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 4117
Estimated Gas Usage: 1365 - 1840
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/4/0xac5d7dff150b195c97fca77001f8ad596eda1761.sol:48

assert(c >= _a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000102002001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x56034000080000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b30000000000000000000000000000000001010000010101010000000000000000c3136d1296a5a56e555e552956554595a4bac76f95cbcf44d168bac8290484c8, value: 0x0
Caller: [SOMEGUY], function: increaseApproval(address,uint256), txdata: 0xd73dd6235e5e5e5e5e5e5e5e5e5e5e5e0000000001010000010101010000000000000000450249163240ac8441420569042c052b045059009040944c470b92201709948a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PausableToken
Function name: increaseApproval(address,uint256)
PC address: 5722
Estimated Gas Usage: 2251 - 3056
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/4/0xac5d7dff150b195c97fca77001f8ad596eda1761.sol:48

assert(c >= _a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b30000000000000000000000000208012080011000000000200000000000000000a500c24004802203d3418b8e9c2adc58524e60fa8ae63199772b2168521aa888, value: 0x0
Caller: [CREATOR], function: increaseApproval(address,uint256), txdata: 0xd73dd623a7a7a7a7a7a7a7a7a7a7a7a70208012080011000000000200000000000000000812402084082000061146a08906602501648504015425488546966c0c218b6f4, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MintableToken
Function name: increaseApproval(address,uint256)
PC address: 7168
Estimated Gas Usage: 1343 - 1818
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/4/0xac5d7dff150b195c97fca77001f8ad596eda1761.sol:48

assert(c >= _a)

--------------------
Initial State:

Account: [CREATOR], balance: 0xcac001231e000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000000000000010101020480009000000000000000000000000000000000000000000000000000000000000000000000000000003040, value: 0x0
Caller: [ATTACKER], function: increaseApproval(address,uint256), txdata: 0xd73dd6235e5e5e5e5e5e5e5e5e5e5e5e0000000001010102048000900000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe268, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: WGOVM
Function name: increaseApproval(address,uint256)
PC address: 8965
Estimated Gas Usage: 2251 - 3056
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/4/0xac5d7dff150b195c97fca77001f8ad596eda1761.sol:48

assert(c >= _a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40020000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000002020202800181040110010108100001810801010000000e10160012840140000000000000000000000000000000000000000008, value: 0x0
Caller: [SOMEGUY], function: increaseApproval(address,uint256), txdata: 0xd73dd6235e5e5e5e5e5e5e5e5e5e5e5e0202020280018104011001010810000181080101fffffff4eff2fff57dff4ffffffffffffffffffffffffffffffffffffffffffa, value: 0x0



---------------------------------------------
For contract 0xac5d7dff150b195c97fca77001f8ad596eda1761.sol
Tool Runtime = 4311.613591344998 seconds
#############################################