==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DGMContract
Function name: setMaxBalance(uint256)
PC address: 3986
Estimated Gas Usage: 6998 - 27423
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_noloop/8/0x81c98bedddea60c10cedcd57be68a44776be9c25.sol:418

_value * dotValue

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000100000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setMaxBalance(uint256), txdata: 0x9d51d9b700004a4c52740000086083c9163810cfe007c4e00f1030208401eec60000002f, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DGMContract
Function name: setMinBalance(uint256)
PC address: 4654
Estimated Gas Usage: 6975 - 27400
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_noloop/8/0x81c98bedddea60c10cedcd57be68a44776be9c25.sol:414

_value * dotValue

--------------------
Initial State:

Account: [CREATOR], balance: 0x1a00400040205, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setMinBalance(uint256), txdata: 0xc91d956c000400008c10580000000000000000000000000d42685401c0e0cf2748bc0390, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DGMContract
Function name: transfer(address,uint256)
PC address: 5283
Estimated Gas Usage: 16092 - 57862
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/8/0x81c98bedddea60c10cedcd57be68a44776be9c25.sol:308

if (_now > stakeStartTime.add(eightYear))
            return;

--------------------
Initial State:

Account: [CREATOR], balance: 0x140040000000a00, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000002020004c01280002005702000892200000040e000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DGMContract
Function name: coinAgeOf(address)
PC address: 6886
Estimated Gas Usage: 1138 - 1233
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/8/0x81c98bedddea60c10cedcd57be68a44776be9c25.sol:371

(now >= stakeStartTime) && (stakeStartTime > 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c1080000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: coinAgeOf(address), txdata: 0xca21d8bd0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DGMContract
Function name: coinAgeOf(address)
PC address: 6900
Estimated Gas Usage: 1158 - 1253
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/8/0x81c98bedddea60c10cedcd57be68a44776be9c25.sol:371

require( (now >= stakeStartTime) && (stakeStartTime > 0) )

--------------------
Initial State:

Account: [CREATOR], balance: 0x2a00000000002000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: coinAgeOf(address), txdata: 0xca21d8bd0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x81c98bedddea60c10cedcd57be68a44776be9c25.sol
Tool Runtime = 9709.867585633998 seconds
#############################################