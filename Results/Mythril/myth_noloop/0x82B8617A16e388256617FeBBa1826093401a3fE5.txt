==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: relyContract(address,address)
PC address: 1260
Estimated Gas Usage: 2777 - 37438
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:197

AuthLike_3(target).rely(usr)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20800000000c19b2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: relyContract(address,address), txdata: 0x373e73f8909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef9090909090909090909090909090909090909090909090909090909090909090, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 2365
Estimated Gas Usage: 63712 - 1019648
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:154

lenderDeployer.reserve()

--------------------
Initial State:

Account: [CREATOR], balance: 0x4122a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000200000200000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 2562
Estimated Gas Usage: 63712 - 1019648
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:155

borrowerDeployer.shelf()

--------------------
Initial State:

Account: [CREATOR], balance: 0x60002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000000000000000100000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 2562
Estimated Gas Usage: 63712 - 1019648
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:155

borrowerDeployer.shelf()

--------------------
Initial State:

Account: [CREATOR], balance: 0xe332a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 2626
Estimated Gas Usage: 63712 - 1019648
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:158

borrowerDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3b2a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 2757
Estimated Gas Usage: 63712 - 1019648
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:158

borrowerDeployer.collector()

--------------------
Initial State:

Account: [CREATOR], balance: 0x60002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000000000000000100000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 2757
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:158

borrowerDeployer.collector()

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f22, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000080000040010000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000100000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 3010
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:158

DependLike_3(borrowerDeployer.collector()).depend("distributor", reserve_)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f22, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000080000040010000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000100000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 3037
Estimated Gas Usage: 63712 - 1019648
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:159

borrowerDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3322, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000080000000000000000000000000000000000000000000240000100000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 3168
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:159

borrowerDeployer.shelf()

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f22, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000080000040010000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000100000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 3421
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:159

DependLike_3(borrowerDeployer.shelf()).depend("lender", reserve_)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f22, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000080000040010000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000100000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 3448
Estimated Gas Usage: 63712 - 1019648
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:160

borrowerDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f22, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000080000040010000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000100000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 3579
Estimated Gas Usage: 63712 - 1019648
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:160

borrowerDeployer.shelf()

--------------------
Initial State:

Account: [CREATOR], balance: 0x60002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000000000000000100000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 3579
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:160

borrowerDeployer.shelf()

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3322, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000080000000000000000000000000000000000000000000240000100000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 3832
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:160

DependLike_3(borrowerDeployer.shelf()).depend("distributor", reserve_)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3322, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000080000000000000000000000000000000000000000000240000100000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 3861
Estimated Gas Usage: 63712 - 1019648
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:165

borrowerDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3322, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000080000000000000000000000000000000000000000000240000100000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 3992
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:165

borrowerDeployer.feed()

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f22, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000080000040010000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000100000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 4248
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:167

DependLike_3(reserve_).depend("shelf", shelf_)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f22, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000080000040010000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000100000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 4275
Estimated Gas Usage: 63712 - 1019648
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:168

lenderDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3f22, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc900000000000000000000000000000000000000000000080000040010000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000100000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 4406
Estimated Gas Usage: 63712 - 1019648
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:168

lenderDeployer.assessor()

--------------------
Initial State:

Account: [CREATOR], balance: 0x4122a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000200000200000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 4406
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:168

lenderDeployer.assessor()

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3322, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000080000000000000000000000000000000000000000000240000100000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 4659
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:168

DependLike_3(lenderDeployer.assessor()).depend("navFeed", navFeed)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3322, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000080000000000000000000000000000000000000000000240000100000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 4886
Estimated Gas Usage: 63712 - 1019648
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:182

lenderDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3322, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000080000000000000000000000000000000000000000000240000100000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 5017
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:182

lenderDeployer.assessorAdmin()

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3b2a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 5230
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:182

AuthLike_3(lenderDeployer.assessorAdmin()).rely(poolAdmin)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3b2a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 5257
Estimated Gas Usage: 63712 - 1019648
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:183

lenderDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3b2a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 5388
Estimated Gas Usage: 63712 - 1019648
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:183

lenderDeployer.juniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0x4122a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000200000200000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 5388
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:183

lenderDeployer.juniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3322, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000080000000000000000000000000000000000000000000240000100000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 5601
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:183

AuthLike_3(lenderDeployer.juniorMemberlist()).rely(juniorMemberlistAdmin1)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3322, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000080000000000000000000000000000000000000000000240000100000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 5628
Estimated Gas Usage: 63712 - 1019648
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:184

lenderDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3322, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000080000000000000000000000000000000000000000000240000100000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 5759
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:184

lenderDeployer.juniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3b2a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 5972
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:184

AuthLike_3(lenderDeployer.juniorMemberlist()).rely(juniorMemberlistAdmin2)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3b2a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 5999
Estimated Gas Usage: 63712 - 1019648
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:185

lenderDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3b2a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 6130
Estimated Gas Usage: 63712 - 1019648
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:185

lenderDeployer.seniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0x4122a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000200000200000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 6130
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:185

lenderDeployer.seniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3322, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000080000000000000000000000000000000000000000000240000100000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 6343
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:185

AuthLike_3(lenderDeployer.seniorMemberlist()).rely(seniorMemberlistAdmin1)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3322, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000080000000000000000000000000000000000000000000240000100000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 6370
Estimated Gas Usage: 63712 - 1019648
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:186

lenderDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3322, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000080000000000000000000000000000000000000000000240000100000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 6501
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:186

lenderDeployer.seniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3b2a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 6714
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:186

AuthLike_3(lenderDeployer.seniorMemberlist()).rely(seniorMemberlistAdmin2)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3b2a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 6741
Estimated Gas Usage: 63712 - 1019648
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:187

lenderDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3b2a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 6872
Estimated Gas Usage: 63712 - 1019648
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:187

lenderDeployer.seniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0x4122a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000200000200000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 6872
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:187

lenderDeployer.seniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3322, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000080000000000000000000000000000000000000000000240000100000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 7085
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:187

AuthLike_3(lenderDeployer.seniorMemberlist()).rely(seniorMemberlistAdmin3)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3322, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000080000000000000000000000000000000000000000000240000100000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: deploy()
PC address: 7112
Estimated Gas Usage: 63712 - 1019648
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:188

lenderDeployer

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3322, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000080000000000000000000000000000000000000000000240000100000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 7243
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:188

lenderDeployer.seniorMemberlist()

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3b2a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 7456
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:188

AuthLike_3(lenderDeployer.seniorMemberlist()).rely(seniorMemberlistAdmin4)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3b2a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: TinlakeRoot
Function name: deploy()
PC address: 7635
Estimated Gas Usage: 63712 - 1019648
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:189

AuthLike_3(navFeed).rely(oracle)

--------------------
Initial State:

Account: [CREATOR], balance: 0xe3b2a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: prepare(address,address,address), txdata: 0x6455cc90000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deploy(), txdata: 0x775c300c, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TinlakeRoot
Function name: denyContract(address,address)
PC address: 8360
Estimated Gas Usage: 2864 - 37525
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/9/0x82B8617A16e388256617FeBBa1826093401a3fE5.sol:201

AuthLike_3(target).deny(usr)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2140000000060bb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: prepare(address,address,address), txdata: 0x6455cc9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: denyContract(address,address), txdata: 0xfe0ac3e7909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef9090909090909090909090909090909090909090909090909090909090909090, value: 0x0



---------------------------------------------
For contract 0x82B8617A16e388256617FeBBa1826093401a3fE5.sol
Tool Runtime = 276.5372043469979 seconds
#############################################