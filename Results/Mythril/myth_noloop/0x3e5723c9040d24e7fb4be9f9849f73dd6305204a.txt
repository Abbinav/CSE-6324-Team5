==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: RetirementYeldTreasury
Function name: extractTokensIfStuck(address,uint256)
PC address: 1345
Estimated Gas Usage: 3656 - 38833
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/6/0x3e5723c9040d24e7fb4be9f9849f73dd6305204a.sol:502

IERC20(_token).transfer(msg.sender, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: extractTokensIfStuck(address,uint256), txdata: 0xa9a1015a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: extractTokensIfStuck(address,uint256), txdata: 0xa9a1015a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RetirementYeldTreasury
Function name: redeemETH()
PC address: 1796
Estimated Gas Usage: 1927 - 2212
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/6/0x3e5723c9040d24e7fb4be9f9849f73dd6305204a.sol:487

require(now >= snapshots[msg.sender].timestamp + timeBetweenRedeems, 'You must wait at least a day after the snapshot to redeem your earnings')

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: redeemETH(), txdata: 0xb8dd934e, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: yeldDAI
Function name: extractETHIfStuck()
PC address: 2394
Estimated Gas Usage: 3565 - 38506
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./new_contracts/m_noloop/6/0x3e5723c9040d24e7fb4be9f9849f73dd6305204a.sol:428

owner().transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1ffffffffffffffff, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: extractETHIfStuck(), txdata: 0x4fe41129, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: yeldDAI
Function name: updatePrice()
PC address: 2477
Estimated Gas Usage: 1868 - 1963
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/6/0x3e5723c9040d24e7fb4be9f9849f73dd6305204a.sol:416

require(checkIfPriceNeedsUpdating(), "The price can't be updated yet")

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040000080084, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updatePrice(), txdata: 0x673a7e28, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: yeldDAI
Function name: extractTokensIfStuck(address,uint256)
PC address: 3823
Estimated Gas Usage: 3723 - 38900
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/6/0x3e5723c9040d24e7fb4be9f9849f73dd6305204a.sol:424

IERC20(_token).transfer(msg.sender, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000010080800180808000100002100002010820800800000000000000000000000001800101200240100008014000400010028001000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: extractTokensIfStuck(address,uint256), txdata: 0xa9a1015a808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef8080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: yeldDAI
Function name: updatePrice()
PC address: 4031
Estimated Gas Usage: 22446 - 83627
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_noloop/6/0x3e5723c9040d24e7fb4be9f9849f73dd6305204a.sol:408

lastPriceUpdate + priceUpdatePeriod

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updatePrice(), txdata: 0x673a7e28, value: 0x0



---------------------------------------------
For contract 0x3e5723c9040d24e7fb4be9f9849f73dd6305204a.sol
Tool Runtime = 2800.1490812690463 seconds
#############################################