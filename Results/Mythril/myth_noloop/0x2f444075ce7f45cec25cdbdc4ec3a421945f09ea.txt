==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Hodler
Function name: hodl(uint256,uint256,uint256)
PC address: 1644
Estimated Gas Usage: 1782 - 2257
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/13/0x2f444075ce7f45cec25cdbdc4ec3a421945f09ea.sol:675

require(_releaseTime > _now)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000008, value: 0x0
Caller: [SOMEGUY], function: hodl(uint256,uint256,uint256), txdata: 0x64c34364080000000000000800000000000000000000000000000000000020000000690001000100010100100102010002800101011001010002000100010001010101010000000000000000000000000000000000000000000000000000000000000003, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Hodler
Function name: hodl(uint256,uint256,uint256)
PC address: 3969
Estimated Gas Usage: 1719 - 2194
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/13/0x2f444075ce7f45cec25cdbdc4ec3a421945f09ea.sol:248

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: hodl(uint256,uint256,uint256), txdata: 0x64c34364000800010040000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000003, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Hodler
Function name: hodl(uint256,uint256,uint256)
PC address: 3970
Estimated Gas Usage: 1729 - 2204
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/13/0x2f444075ce7f45cec25cdbdc4ec3a421945f09ea.sol:248

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000008220, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000020002010100400200010102020008800080000100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: hodl(uint256,uint256,uint256), txdata: 0x64c34364008000100201000004204080084000040108048000014010080102800100014080041004020008101001800404200104084004200801808008010202201080200000000000000000000000000000000000000000000000000000000000000003, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 4122
Estimated Gas Usage: 1368 - 1843
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/13/0x2f444075ce7f45cec25cdbdc4ec3a421945f09ea.sol:248

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b30000000000000000000000000101010101010101010101010101010100000000890c1f2e1c026abf1b5d46c14beb4fffb82d34e7340a10c4c02b34684751373e, value: 0x0
Caller: [CREATOR], function: increaseApproval(address,uint256), txdata: 0xd73dd6230000000000000000000000000101010101010101010101010101010100000000ac150228480010c0215140a20482000088694824540808844209108049200250, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MintableToken
Function name: increaseApproval(address,uint256)
PC address: 5594
Estimated Gas Usage: 1368 - 1843
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/13/0x2f444075ce7f45cec25cdbdc4ec3a421945f09ea.sol:248

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3c018000200000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x290208000408004, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000000010101010101010000010101000801000000009110814730e4452592d022d066115110513bdac67182a82082c1206590cad11c, value: 0x0
Caller: [ATTACKER], function: increaseApproval(address,uint256), txdata: 0xd73dd623a7a7a7a7a7a7a7a7a7a7a7a70001010101010101000001010100080100000000811441205008044a9203e84044315318b608418d12918021a202294101821d10, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CLERK
Function name: increaseApproval(address,uint256)
PC address: 7497
Estimated Gas Usage: 1412 - 1887
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/13/0x2f444075ce7f45cec25cdbdc4ec3a421945f09ea.sol:248

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b3000000000000000000000000018000040108018000040101010080880100080000000000000000000000000000000002000000011e88b76da843727e59eeeaa8, value: 0x0
Caller: [CREATOR], function: increaseApproval(address,uint256), txdata: 0xd73dd623a7a7a7a7a7a7a7a7a7a7a7a70180000401080180000401010100808801000800fffffffffffffffffffffffffffffffdffffffff02aea215204246c032840a0c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Recurly
Function name: hodlerTransfer(address,uint256)
PC address: 8971
Estimated Gas Usage: 2831 - 4999
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/13/0x2f444075ce7f45cec25cdbdc4ec3a421945f09ea.sol:242

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: adminAddRole(address,string), txdata: 0xb25fa92c000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000007472616e736665728010001001014000000210028000020400024008010810012001100000000004, value: 0x0
Caller: [ATTACKER], function: hodlerTransfer(address,uint256), txdata: 0xa0bd1ec147474747474747474747474720108020008020000220808010800200011000208080400408100280002010400008000000010040101040040820010210080002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Recurly
Function name: increaseApproval(address,uint256)
PC address: 9002
Estimated Gas Usage: 1412 - 1887
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/13/0x2f444075ce7f45cec25cdbdc4ec3a421945f09ea.sol:248

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x112000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b3000000000000000000000000040200012020000108400110010001000000000000000000000000000000000000000000c86b4abf52dd797acbd38a7f040be800, value: 0x0
Caller: [CREATOR], function: increaseApproval(address,uint256), txdata: 0xd73dd6230000000000000000000000000402000120200001084001100100010000000000ffffffffffffffffffffffffffffffff59a650a04689030a9a951ac01df80aa8, value: 0x0



---------------------------------------------
For contract 0x2f444075ce7f45cec25cdbdc4ec3a421945f09ea.sol
Tool Runtime = 8663.385688062 seconds
#############################################