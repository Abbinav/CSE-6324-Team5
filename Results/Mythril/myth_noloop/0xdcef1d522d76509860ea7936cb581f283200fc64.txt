==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BasicToken
Function name: increaseApproval(address,uint256)
PC address: 4114
Estimated Gas Usage: 1365 - 1840
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/8/0xdcef1d522d76509860ea7936cb581f283200fc64.sol:66

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20032000c20030001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000000000000200000000000000000000080012000000080894f0fd7ac10104055692a1852000000000400000000000001c7bb708000, value: 0x0
Caller: [CREATOR], function: increaseApproval(address,uint256), txdata: 0xd73dd6235e5e5e5e5e5e5e5e5e5e5e5e0000000020000000000000000000008001200000ff818d18121428f3fbc3cc43646bc27ffffffffbffffffffffffff0a8a43d212, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ERC20Burnable
Function name: increaseApproval(address,uint256)
PC address: 4294
Estimated Gas Usage: 1387 - 1862
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/8/0xdcef1d522d76509860ea7936cb581f283200fc64.sol:66

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000122, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b30000000000000000000000000000000100000000001001010000000000000000b109081600858221b58a2c4480d94aebaaa9238ac9954655373535a9ea5313a4, value: 0x0
Caller: [SOMEGUY], function: increaseApproval(address,uint256), txdata: 0xd73dd6235e5e5e5e5e5e5e5e5e5e5e5e000000010000000000100101000000000000000054160aa3e13c0002a008143c3002b8012989220809104451202525290a121224, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Mintable
Function name: increaseApproval(address,uint256)
PC address: 5882
Estimated Gas Usage: 1365 - 1840
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/8/0xdcef1d522d76509860ea7936cb581f283200fc64.sol:66

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8220000041f000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20004, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000000000000010101010000000100000000000000009b2682c84d9463a5200d225805d1b1c047bc7efff6fe713e767d9fea5451ab14, value: 0x0
Caller: [ATTACKER], function: increaseApproval(address,uint256), txdata: 0xd73dd6235e5e5e5e5e5e5e5e5e5e5e5e0000000001010101000000010000000000000000812a028848b6410500180800001120004401010109018ec189826015abd6a14c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PausableToken
Function name: mint(address,uint256)
PC address: 7173
Estimated Gas Usage: 2925 - 3680
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/8/0xdcef1d522d76509860ea7936cb581f283200fc64.sol:66

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mint(address,uint256), txdata: 0x40c10f190000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffdc790d903f0000, value: 0x0



---------------------------------------------
For contract 0xdcef1d522d76509860ea7936cb581f283200fc64.sol
Tool Runtime = 3636.752867172996 seconds
#############################################