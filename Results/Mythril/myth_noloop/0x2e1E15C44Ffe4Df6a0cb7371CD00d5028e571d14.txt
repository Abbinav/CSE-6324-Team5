==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CrustClaimsBase
Function name: constructor
PC address: 477
Estimated Gas Usage: 47873 - 215465
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:658

cap * (10 ** 18)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CrustClaims
Function name: constructor
PC address: 480
Estimated Gas Usage: 47888 - 215480
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:658

cap * (10 ** 18)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CrustClaims18
Function name: reviewMintRequest(uint32,bool)
PC address: 2795
Estimated Gas Usage: 33918 - 153615
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:706

_nextReviewId

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000042089012, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: c0c0c0c0c0c0c0c0c0c0c0c01000080401080001804000800810000204400020c0c0c0c0c0c0c0c0c0c0c0c0deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010116, value: 0x0
Caller: [CREATOR], function: submitMint(address,uint256), txdata: 0xe78fd9a800000000000000000000000010000000000208800104000000000040008000012888b242c180200089024001c00009432020213620510880300a044080040802, value: 0x0
Caller: [CREATOR], function: reviewMintRequest(uint32,bool), txdata: 0x4b4ccdb043434343434343434343434343434343434343434343434343434343000000008001010101018002018001002001080108010201801001021004010201010201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CrustClaims
Function name: reviewMintRequest(uint32,bool)
PC address: 2819
Estimated Gas Usage: 33918 - 153615
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:706

_nextReviewId = _nextReviewId + 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x3008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef804002, value: 0x0
Caller: [CREATOR], function: submitMint(address,uint256), txdata: 0xe78fd9a800000000000000000000000000000000000000000000000000000000000000006000400000084040008000400000000800108002000410028010400002800401, value: 0x0
Caller: [CREATOR], function: reviewMintRequest(uint32,bool), txdata: 0x4b4ccdb080808080808080808080808080808080808080808080808080808080000000000101010101018001010101010101011001010101010101020101010120400101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CrustClaims
Function name: reviewMintRequest(uint32,bool)
PC address: 2840
Estimated Gas Usage: 33918 - 153615
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:706

_nextReviewId = _nextReviewId + 1

--------------------
Initial State:

Account: [CREATOR], balance: 0x3008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef804002, value: 0x0
Caller: [CREATOR], function: submitMint(address,uint256), txdata: 0xe78fd9a800000000000000000000000000000000000000000000000000000000000000006000400000084040008000400000000800108002000410028010400002800401, value: 0x0
Caller: [CREATOR], function: reviewMintRequest(uint32,bool), txdata: 0x4b4ccdb080808080808080808080808080808080808080808080808080808080000000000101010101018001010101010101011001010101010101020101010120400101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CrustClaims18
Function name: reviewMintRequest(uint32,bool)
PC address: 2885
Estimated Gas Usage: 33918 - 153615
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:707

delete _reviewItems[reviewId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000042089012, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: c0c0c0c0c0c0c0c0c0c0c0c01000080401080001804000800810000204400020c0c0c0c0c0c0c0c0c0c0c0c0deadbeefdeadbeefdeadbeefdeadbeefdeadbeef010116, value: 0x0
Caller: [CREATOR], function: submitMint(address,uint256), txdata: 0xe78fd9a800000000000000000000000010000000000208800104000000000040008000012888b242c180200089024001c00009432020213620510880300a044080040802, value: 0x0
Caller: [CREATOR], function: reviewMintRequest(uint32,bool), txdata: 0x4b4ccdb043434343434343434343434343434343434343434343434343434343000000008001010101018002018001002001080108010201801001021004010201010201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CrustClaims
Function name: reviewMintRequest(uint32,bool)
PC address: 2912
Estimated Gas Usage: 33918 - 153615
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:707

delete _reviewItems[reviewId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x3008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef804002, value: 0x0
Caller: [CREATOR], function: submitMint(address,uint256), txdata: 0xe78fd9a800000000000000000000000000000000000000000000000000000000000000006000400000084040008000400000000800108002000410028010400002800401, value: 0x0
Caller: [CREATOR], function: reviewMintRequest(uint32,bool), txdata: 0x4b4ccdb080808080808080808080808080808080808080808080808080808080000000000101010101018001010101010101011001010101010101020101010120400101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CrustClaims
Function name: reviewMintRequest(uint32,bool)
PC address: 2920
Estimated Gas Usage: 33918 - 153615
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:707

delete _reviewItems[reviewId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x3008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef804002, value: 0x0
Caller: [CREATOR], function: submitMint(address,uint256), txdata: 0xe78fd9a800000000000000000000000000000000000000000000000000000000000000006000400000084040008000400000000800108002000410028010400002800401, value: 0x0
Caller: [CREATOR], function: reviewMintRequest(uint32,bool), txdata: 0x4b4ccdb080808080808080808080808080808080808080808080808080808080000000000101010101018001010101010101011001010101010101020101010120400101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CrustClaims
Function name: claimAll(bytes32)
PC address: 5789
Estimated Gas Usage: 6578 - 76998
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:764

_token.burn(account, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x100040000000ca088, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: claimAll(bytes32), txdata: 0x2e0835900101010101010101010101010101010101010101010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: claimAll(bytes32), txdata: 0x2e0835900101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CrustClaims18
Function name: claimAll(bytes32)
PC address: 5789
Estimated Gas Usage: 6578 - 76998
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:764

_token.burn(account, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: claimAll(bytes32), txdata: 0x2e0835900101010101010101010101010101010101010101010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: claimAll(bytes32), txdata: 0x2e0835900101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CrustClaims24
Function name: claimAll(bytes32)
PC address: 5789
Estimated Gas Usage: 6578 - 76998
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:764

_token.burn(account, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: claimAll(bytes32), txdata: 0x2e0835900101010101010101010101010101010101010101010101010101010101020101, value: 0x0
Caller: [SOMEGUY], function: claimAll(bytes32), txdata: 0x2e0835900101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CrustClaims24Delayed
Function name: claimAll(bytes32)
PC address: 5789
Estimated Gas Usage: 6578 - 76998
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:764

_token.burn(account, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: claimAll(bytes32), txdata: 0x2e0835900101010101010101010101010101010101010101010101010101010101010101, value: 0x0
Caller: [SOMEGUY], function: claimAll(bytes32), txdata: 0x2e0835900101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CrustClaimsBase
Function name: claimAll(bytes32)
PC address: 5789
Estimated Gas Usage: 6578 - 76998
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:764

_token.burn(account, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9090909090909090909090909090909090909090909090909090909090909090909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: claimAll(bytes32), txdata: 0x2e0835900101010101010101010101010101010101010101010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: claimAll(bytes32), txdata: 0x2e0835900101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CrustClaims
Function name: claimAll(bytes32)
PC address: 5789
Estimated Gas Usage: 6578 - 76998
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:764

_token.burn(account, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claimAll(bytes32), txdata: 0x2e0835900101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CrustClaims
Function name: reviewMintRequest(uint32,bool)
PC address: 6239
Estimated Gas Usage: 33918 - 153615
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:732

_token.mint(account, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4c4c4c4c4c4c4c4c4c4c4c4c80048004100802020002000220000000800180024c4c4c4c4c4c4c4c4c4c4c4cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef02802b, value: 0x0
Caller: [CREATOR], function: submitMint(address,uint256), txdata: 0xe78fd9a800000000000000000000000008000200801000022004402000000101802000004c86404000200800020210025010630203204040040180128000818000000100, value: 0x0
Caller: [CREATOR], function: reviewMintRequest(uint32,bool), txdata: 0x4b4ccdb000000000000000000000000000000000000000000000000000000000000000004001011001010101010101000101010480010110018001010100014001800401, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CrustClaims18
Function name: reviewMintRequest(uint32,bool)
PC address: 6239
Estimated Gas Usage: 33918 - 153615
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:732

_token.mint(account, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x180000010000006, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000420800880800000800008010001400101100800000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef040109, value: 0x0
Caller: [CREATOR], function: submitMint(address,uint256), txdata: 0xe78fd9a8000000000000000000000000400400010040200000400000040040102000000005a57209d88a20c05ef42a88211349228d50020c100010110014000100002002, value: 0x0
Caller: [CREATOR], function: reviewMintRequest(uint32,bool), txdata: 0x4b4ccdb000000000000000000000000000000000000000000000000000000000000000000104010101010108010402800810400101014001010420010180041040200108, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CrustClaims24
Function name: reviewMintRequest(uint32,bool)
PC address: 6239
Estimated Gas Usage: 33918 - 153615
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:732

_token.mint(account, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000080008000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01001b, value: 0x0
Caller: [CREATOR], function: submitMint(address,uint256), txdata: 0xe78fd9a80000000000000000000000000000000000000000000000000000010000000000126020a0e02001042008882980e0ca100418015060080120010201104a104008, value: 0x0
Caller: [CREATOR], function: reviewMintRequest(uint32,bool), txdata: 0x4b4ccdb000000000000000000000000000000000000000000000000000000000000000000101010101010101010101400101010101010101010101010120012001010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CrustClaims24Delayed
Function name: reviewMintRequest(uint32,bool)
PC address: 6239
Estimated Gas Usage: 33918 - 153615
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:732

_token.mint(account, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 2c2c2c2c2c2c2c2c2c2c2c2c00000000000000000000000000000000000000002c2c2c2c2c2c2c2c2c2c2c2cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef408023, value: 0x0
Caller: [CREATOR], function: submitMint(address,uint256), txdata: 0xe78fd9a800000000000000000000000000000000000000000000000000000000000000012c80100008800002208080100180808001020020104000000080200202802001, value: 0x0
Caller: [CREATOR], function: reviewMintRequest(uint32,bool), txdata: 0x4b4ccdb080808080808080808080808080808080808080808080808080808080000000000104010102012000010101010101010101040201400420010120010801010201, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CrustClaimsBase
Function name: reviewMintRequest(uint32,bool)
PC address: 6239
Estimated Gas Usage: 33918 - 153615
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:732

_token.mint(account, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000100080c02, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4c4c4c4c4c4c4c4c4c4c4c4c10000840040200000800000400010800028001024c4c4c4c4c4c4c4c4c4c4c4cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef01200b, value: 0x0
Caller: [CREATOR], function: submitMint(address,uint256), txdata: 0xe78fd9a800000000000000000000000080800208010140000004080202400000010100000c01040180000480020040402840014008010108103008100106043484800140, value: 0x0
Caller: [CREATOR], function: reviewMintRequest(uint32,bool), txdata: 0x4b4ccdb000000000000000000000000000000000000000000000000000000000000000008001014080010101080801018020010104200101040100800101018010012004, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CrustClaims
Function name: reviewMintRequest(uint32,bool)
PC address: 6266
Estimated Gas Usage: 33918 - 153615
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/10/0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol:733

_selled = selled

--------------------
Initial State:

Account: [CREATOR], balance: 0x3008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef804002, value: 0x0
Caller: [CREATOR], function: submitMint(address,uint256), txdata: 0xe78fd9a800000000000000000000000000000000000000000000000000000000000000006000400000084040008000400000000800108002000410028010400002800401, value: 0x0
Caller: [CREATOR], function: reviewMintRequest(uint32,bool), txdata: 0x4b4ccdb080808080808080808080808080808080808080808080808080808080000000000101010101018001010101010101011001010101010101020101010120400101, value: 0x0



---------------------------------------------
For contract 0x2e1E15C44Ffe4Df6a0cb7371CD00d5028e571d14.sol
Tool Runtime = 9212.922523126996 seconds
#############################################