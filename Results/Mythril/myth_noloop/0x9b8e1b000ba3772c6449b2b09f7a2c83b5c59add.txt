==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: IndividualLockableToken
Function name: setReleaseTime(address,uint256)
PC address: 3831
Estimated Gas Usage: 1573 - 2188
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x9b8e1b000ba3772c6449b2b09f7a2c83b5c59add.sol:871

require(_release_time >= block.timestamp)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setReleaseTime(address,uint256), txdata: 0x476fe91900000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TheDayOfOceanStory
Function name: setReleaseTime(address,uint256)
PC address: 4282
Estimated Gas Usage: 1529 - 2144
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x9b8e1b000ba3772c6449b2b09f7a2c83b5c59add.sol:871

require(_release_time >= block.timestamp)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400820190000006, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setReleaseTime(address,uint256), txdata: 0x476fe91900000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: IndividualLockableToken
Function name: getFreeBalance(address)
PC address: 6431
Estimated Gas Usage: 1234 - 1519
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x9b8e1b000ba3772c6449b2b09f7a2c83b5c59add.sol:994

if(block.timestamp    >= userLock[_holder].release_time  ) return balanceOf(_holder)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getFreeBalance(address), txdata: 0x8870985b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TheDayOfOceanStory
Function name: getFreeBalance(address)
PC address: 6770
Estimated Gas Usage: 1256 - 1541
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x9b8e1b000ba3772c6449b2b09f7a2c83b5c59add.sol:994

if(block.timestamp    >= userLock[_holder].release_time  ) return balanceOf(_holder)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getFreeBalance(address), txdata: 0x8870985b0000000000000000000000000000000000000000000000000000000080000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TheDayOfOceanStory
Function name: increaseLockBalanceWithReleaseTime(address,uint256,uint256)
PC address: 8209
Estimated Gas Usage: 3505 - 4500
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x9b8e1b000ba3772c6449b2b09f7a2c83b5c59add.sol:937

require(_release_time >= block.timestamp)

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: increaseLockBalanceWithReleaseTime(address,uint256,uint256), txdata: 0x9e20749a000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000001580a8f14848d3448040020000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: IndividualLockableToken
Function name: getLockedBalance(address)
PC address: 9310
Estimated Gas Usage: 1188 - 1473
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x9b8e1b000ba3772c6449b2b09f7a2c83b5c59add.sol:984

if(block.timestamp >= userLock[_holder].release_time) return uint256(0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x530208800000000c0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getLockedBalance(address), txdata: 0xc40868930000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TheDayOfOceanStory
Function name: getLockedBalance(address)
PC address: 9706
Estimated Gas Usage: 1188 - 1473
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x9b8e1b000ba3772c6449b2b09f7a2c83b5c59add.sol:984

if(block.timestamp >= userLock[_holder].release_time) return uint256(0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getLockedBalance(address), txdata: 0xc40868930000000000000000000000000000000000000000000000000000000000000004, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TheDayOfOceanStory
Function name: increaseLockBalance(address,uint256)
PC address: 10203
Estimated Gas Usage: 4414 - 5599
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x9b8e1b000ba3772c6449b2b09f7a2c83b5c59add.sol:918

if (userLock[_holder].release_time <= block.timestamp) {
        userLock[_holder].release_time  = block.timestamp + lock_period;
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: increaseLockBalance(address,uint256), txdata: 0xe6108fc9000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000001438d304c84252e4200410, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TheDayOfOceanStory
Function name: increaseLockBalance(address,uint256)
PC address: 10208
Estimated Gas Usage: 19581 - 62724
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_noloop/1/0x9b8e1b000ba3772c6449b2b09f7a2c83b5c59add.sol:919

block.timestamp + lock_period

--------------------
Initial State:

Account: [CREATOR], balance: 0x201, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: increaseLockBalance(address,uint256), txdata: 0xe6108fc9000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000003a3060a100e1a018200202, value: 0x0



---------------------------------------------
For contract 0x9b8e1b000ba3772c6449b2b09f7a2c83b5c59add.sol
Tool Runtime = 11426.078290296995 seconds
#############################################