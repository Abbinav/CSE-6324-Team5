==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 2340
Estimated Gas Usage: 1387 - 1862
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/7/0x7f2d8dc79b7712ec6549fb975a70d1c306a00187.sol:94

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b3000000000000000000000000021002040104102010200400800404080040100200000000000000000000000000000000000004041a9100c0a001080004800000, value: 0x0
Caller: [CREATOR], function: increaseApproval(address,uint256), txdata: 0xd73dd623a7a7a7a7a7a7a7a7a7a7a7a70210020401041020102004008004040800401002fffffffffffffffffffffffffffffffffffffbfdf210ff9fafff7bfffc800000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MintableToken
Function name: increaseApproval(address,uint256)
PC address: 2811
Estimated Gas Usage: 1343 - 1818
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/7/0x7f2d8dc79b7712ec6549fb975a70d1c306a00187.sol:94

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c008000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b30000000000000000000000001002011011010101010101010101010101012000a7a0b5391b48ad75424258687407756456f694f5b588a3a357abf6c19764d38a, value: 0x0
Caller: [SOMEGUY], function: increaseApproval(address,uint256), txdata: 0xd73dd623a7a7a7a7a7a7a7a7a7a7a7a710020110110101010101010101010101010120008220a5111158a4c541e6c7c8a42041445420942484802121100444048204908c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ChfmToken
Function name: transfer(address,uint256)
PC address: 4326
Estimated Gas Usage: 1329 - 1614
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/7/0x7f2d8dc79b7712ec6549fb975a70d1c306a00187.sol:76

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ChfmToken
Function name: increaseApproval(address,uint256)
PC address: 4899
Estimated Gas Usage: 1387 - 1862
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/7/0x7f2d8dc79b7712ec6549fb975a70d1c306a00187.sol:94

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800405010071, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000008800004048002010101010140010840080080004348464d000000000000000000000000000000000000000000027698b24c5c30, value: 0x0
Caller: [CREATOR], function: increaseApproval(address,uint256), txdata: 0xd73dd6235e5e5e5e5e5e5e5e5e5e5e5e0880000404800201010101014001084008008000bcb7b9b380800001000204001000000008200102a31040b64a0a12aba4c848e0, value: 0x0



---------------------------------------------
For contract 0x7f2d8dc79b7712ec6549fb975a70d1c306a00187.sol
Tool Runtime = 728.7487053689838 seconds
#############################################