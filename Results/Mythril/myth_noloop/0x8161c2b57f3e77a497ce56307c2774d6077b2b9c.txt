==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: rfiSantaSale
Function name: receive()
PC address: 1458
Estimated Gas Usage: 1948 - 2043
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x8161c2b57f3e77a497ce56307c2774d6077b2b9c.sol:170

require(startDate > 0 && now.sub(startDate) <= 2 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [CREATOR], function: receive(), txdata: 0xa3e76c0f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: rfiSantaSale
Function name: receive()
PC address: 1826
Estimated Gas Usage: 6337 - 41654
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x8161c2b57f3e77a497ce56307c2774d6077b2b9c.sol:180

if (now.sub(startDate) <= 1 days) {

       amount = msg.value.mul(25);

       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(ratepereth.mul(10));

    } else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days) {

       amount = msg.value.mul(25);

       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(ratepereth.mul(10));

    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: receive(), txdata: 0xa3e76c0f, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: rfiSantaSale
Function name: receive()
PC address: 2059
Estimated Gas Usage: 7279 - 42596
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x8161c2b57f3e77a497ce56307c2774d6077b2b9c.sol:186

now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100106000c000004, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [ATTACKER], function: receive(), txdata: 0xa3e76c0f, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: rfiSantaSale
Function name: receive()
PC address: 2093
Estimated Gas Usage: 8223 - 43540
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x8161c2b57f3e77a497ce56307c2774d6077b2b9c.sol:186

if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days) {

       amount = msg.value.mul(25);

       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(ratepereth.mul(10));

    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x40690, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: receive(), txdata: 0xa3e76c0f, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: rfiSantaSale
Function name: burnrfiSanta()
PC address: 4110
Estimated Gas Usage: 4539 - 39856
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x8161c2b57f3e77a497ce56307c2774d6077b2b9c.sol:372

require(msg.sender == owner && rfiSantaToken.balanceOf(address(this)) > 0 && now.sub(startDate) > 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: burnrfiSanta(), txdata: 0xbc89fd76, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: rfiSantaSale
Function name: burnrfiSanta()
PC address: 4369
Estimated Gas Usage: 9557 - 114753
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/1/0x8161c2b57f3e77a497ce56307c2774d6077b2b9c.sol:374

rfiSantaToken.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: burnrfiSanta(), txdata: 0xbc89fd76, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: rfiSantaSale
Function name: burnrfiSanta()
PC address: 4561
Estimated Gas Usage: 9557 - 114753
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/1/0x8161c2b57f3e77a497ce56307c2774d6077b2b9c.sol:374

rfiSantaToken.transfer(address(0), rfiSantaToken.balanceOf(address(this)))

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0800000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 767676767676767676767676deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: burnrfiSanta(), txdata: 0xbc89fd76, value: 0x0
Caller: [CREATOR], function: burnrfiSanta(), txdata: 0xbc89fd76, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: rfiSantaSale
Function name: burnrfiSanta()
PC address: 4561
Estimated Gas Usage: 9557 - 114753
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/1/0x8161c2b57f3e77a497ce56307c2774d6077b2b9c.sol:374

rfiSantaToken.transfer(address(0), rfiSantaToken.balanceOf(address(this)))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: burnrfiSanta(), txdata: 0xbc89fd76, value: 0x0
Caller: [CREATOR], function: burnrfiSanta(), txdata: 0xbc89fd76, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: rfiSantaSale
Function name: buyBackETH(address)
PC address: 4652
Estimated Gas Usage: 1248 - 1343
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x8161c2b57f3e77a497ce56307c2774d6077b2b9c.sol:294

now.sub(startDate) > 3 days && !softCapMet

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyBackETH(address), txdata: 0xbe3853c90000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: rfiSantaSale
Function name: buyBackETH(address)
PC address: 4677
Estimated Gas Usage: 1268 - 1363
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x8161c2b57f3e77a497ce56307c2774d6077b2b9c.sol:294

require(now.sub(startDate) > 3 days && !softCapMet)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: buyBackETH(address), txdata: 0xbe3853c90000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: rfiSantaSale
Function name: contribute()
PC address: 5206
Estimated Gas Usage: 1903 - 1998
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x8161c2b57f3e77a497ce56307c2774d6077b2b9c.sol:220

require(startDate > 0 && now.sub(startDate) <= 2 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [CREATOR], function: contribute(), txdata: 0xd7bb99ba, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: rfiSantaSale
Function name: contribute()
PC address: 5574
Estimated Gas Usage: 6292 - 41609
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x8161c2b57f3e77a497ce56307c2774d6077b2b9c.sol:230

if (now.sub(startDate) <= 1 days) {

       amount = msg.value.mul(25);

       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(ratepereth.mul(10));

    } else if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days) {

       amount = msg.value.mul(25);

       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(ratepereth.mul(10));

    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: contribute(), txdata: 0xd7bb99ba, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: rfiSantaSale
Function name: contribute()
PC address: 5807
Estimated Gas Usage: 7234 - 42551
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x8161c2b57f3e77a497ce56307c2774d6077b2b9c.sol:236

now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x100a120800012d52, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [SOMEGUY], function: contribute(), txdata: 0xd7bb99ba, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: rfiSantaSale
Function name: contribute()
PC address: 5841
Estimated Gas Usage: 8178 - 43495
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x8161c2b57f3e77a497ce56307c2774d6077b2b9c.sol:236

if(now.sub(startDate) > 1 days && now.sub(startDate) <= 2 days) {

       amount = msg.value.mul(25);

       _averagePurchaseRate[msg.sender] = _averagePurchaseRate[msg.sender].add(ratepereth.mul(10));

    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startSale(), txdata: 0xb66a0e5d, value: 0x0
Caller: [ATTACKER], function: contribute(), txdata: 0xd7bb99ba, value: 0x16345785d8a0000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: rfiSantaSale
Function name: buyBackETH(address)
PC address: 7611
Estimated Gas Usage: 1179 - 1274
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/1/0x8161c2b57f3e77a497ce56307c2774d6077b2b9c.sol:64

require(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: buyBackETH(address), txdata: 0xbe3853c90000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x8161c2b57f3e77a497ce56307c2774d6077b2b9c.sol
Tool Runtime = 755.6288884890018 seconds
#############################################