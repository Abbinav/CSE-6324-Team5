==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 959
Estimated Gas Usage: 324 - 419
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:117

x / y

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: safeDiv(uint256,uint256), txdata: 0xb5931f7c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Reserve
Function name: safeDiv(uint256,uint256)
PC address: 3360
Estimated Gas Usage: 303 - 398
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:117

x / y

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: safeDiv(uint256,uint256), txdata: 0xb5931f7c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 3509
Estimated Gas Usage: 22036 - 167469
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:237

shelf.balanceRequest()

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: depend(bytes32,address), txdata: 0x9adc339d7368656c66000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 3589
Estimated Gas Usage: 15294 - 140727
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:240

currencyAvailable

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 3713
Estimated Gas Usage: 15294 - 140727
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:244

currencyAvailable

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 3724
Estimated Gas Usage: 15294 - 140727
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:244

currencyAvailable = safeSub(currencyAvailable, currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 3734
Estimated Gas Usage: 22036 - 167469
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:245

shelf

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Reserve
Function name: balance()
PC address: 3775
Estimated Gas Usage: 22036 - 167469
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:246

assessor

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9e9e9e9e9e9e9e9e9e9e9e9edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 3917
Estimated Gas Usage: 22036 - 167469
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:246

assessor.borrowUpdate(currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000020001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: depend(bytes32,address), txdata: 0x9adc339d6173736573736f72000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 3917
Estimated Gas Usage: 22036 - 167469
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:246

assessor.borrowUpdate(currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0
Caller: [CREATOR], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 3917
Estimated Gas Usage: 22036 - 167469
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:246

assessor.borrowUpdate(currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 3954
Estimated Gas Usage: 22036 - 167469
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:249

shelf

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Reserve
Function name: balance()
PC address: 3995
Estimated Gas Usage: 22036 - 167469
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:250

assessor

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9e9e9e9e9e9e9e9e9e9e9e9edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 4137
Estimated Gas Usage: 15294 - 140727
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:250

assessor.repaymentUpdate(currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: depend(bytes32,address), txdata: 0x9adc339d6173736573736f72000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 4137
Estimated Gas Usage: 15294 - 140727
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:250

assessor.repaymentUpdate(currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: balance(), txdata: 0xb69ef8a8, value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 4137
Estimated Gas Usage: 15294 - 140727
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:250

assessor.repaymentUpdate(currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 4709
Estimated Gas Usage: 15294 - 140727
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:230

currency

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 4771
Estimated Gas Usage: 22036 - 167469
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:230

pot

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: rely(address), txdata: 0x65fae35e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 4989
Estimated Gas Usage: 15294 - 140727
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:230

currency.transferFrom(pot, usr, currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9e9e9e9e9e9e9e9e9e9e9e9edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: balance(), txdata: 0xb69ef8a8, value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 4989
Estimated Gas Usage: 22036 - 167469
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:230

currency.transferFrom(pot, usr, currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 4989
Estimated Gas Usage: 22036 - 167469
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:230

currency.transferFrom(pot, usr, currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: rely(address), txdata: 0x65fae35e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 5167
Estimated Gas Usage: 15294 - 140727
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:231

balance_

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Reserve
Function name: payout(uint256)
PC address: 5178
Estimated Gas Usage: 10541 - 66238
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:231

balance_ = safeSub(balance_, currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: payout(uint256), txdata: 0xe11523430000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 5189
Estimated Gas Usage: 15294 - 140727
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:220

currency

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: balance(), txdata: 0xb69ef8a8, value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 5252
Estimated Gas Usage: 15294 - 140727
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:220

pot

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 5469
Estimated Gas Usage: 22036 - 167469
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:220

currency.transferFrom(usr, pot, currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9e9e9e9e9e9e9e9e9e9e9e9edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: balance(), txdata: 0xb69ef8a8, value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 5469
Estimated Gas Usage: 15294 - 140727
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:220

currency.transferFrom(usr, pot, currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Reserve
Function name: balance()
PC address: 5469
Estimated Gas Usage: 22036 - 167469
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:220

currency.transferFrom(usr, pot, currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Reserve
Function name: balance()
PC address: 5647
Estimated Gas Usage: 22036 - 167469
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:221

balance_

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9e9e9e9e9e9e9e9e9e9e9e9edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: balance(), txdata: 0xb69ef8a8, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Reserve
Function name: deposit(uint256)
PC address: 5658
Estimated Gas Usage: 10564 - 66261
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/12/0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol:221

balance_ = safeAdd(balance_, currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 252525252525252525252525deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f250000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x573a8a054e0C80F0E9B1e96E8a2198BB46c999D6.sol
Tool Runtime = 2194.49207447801 seconds
#############################################