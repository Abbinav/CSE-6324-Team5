==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: StakePool
Function name: stake(uint256)
PC address: 5264
Estimated Gas Usage: 41187 - 247395
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:449

IERC20(stakeToken).transferFrom(_msgSender(), address(this), amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x402011881, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000100000008a1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 434343434343434343434343deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawReward(), txdata: 0xc885bc58, value: 0x0
Caller: [ATTACKER], function: stake(uint256), txdata: 0xa694fc3a0000000000000000000000000000000000000000000843008022080148145020, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakePool
Function name: stake(uint256)
PC address: 5459
Estimated Gas Usage: 41187 - 247395
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:455

totalStakedAmount

--------------------
Initial State:

Account: [CREATOR], balance: 0x60000083409, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x880400000400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawReward(), txdata: 0xc885bc58, value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a000000000000000000000000000000000000000000000a944850a00000420004, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakePool
Function name: stake(uint256)
PC address: 5478
Estimated Gas Usage: 41187 - 247395
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:455

totalStakedAmount = totalStakedAmount.add(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4f4f4f4f4f4f4f4f4f4f4f4fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: stake(uint256), txdata: 0xa694fc3a0000000000000000000000000000000000000000000709804001094f9d42703b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakePool
Function name: stake(uint256)
PC address: 5559
Estimated Gas Usage: 41187 - 247395
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:459

stakingDuration

--------------------
Initial State:

Account: [CREATOR], balance: 0x60000083409, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x880400000400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawReward(), txdata: 0xc885bc58, value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a000000000000000000000000000000000000000000000a944850a00000420004, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakePool
Function name: stake(uint256)
PC address: 5581
Estimated Gas Usage: 41187 - 247395
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:458

currentStake.stakingPeriodEndTime = block.timestamp.add(
            stakingDuration
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4f4f4f4f4f4f4f4f4f4f4f4fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: stake(uint256), txdata: 0xa694fc3a0000000000000000000000000000000000000000000709804001094f9d42703b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakePool
Function name: stake(uint256)
PC address: 5591
Estimated Gas Usage: 41187 - 247395
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:462

currentStake.stakeAmount

--------------------
Initial State:

Account: [CREATOR], balance: 0x60000083409, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x880400000400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawReward(), txdata: 0xc885bc58, value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a000000000000000000000000000000000000000000000a944850a00000420004, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakePool
Function name: stake(uint256)
PC address: 5612
Estimated Gas Usage: 41187 - 247395
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:462

currentStake.stakeAmount =  currentStake.stakeAmount // add stake amount by lp
            .add(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4f4f4f4f4f4f4f4f4f4f4f4fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: stake(uint256), txdata: 0xa694fc3a0000000000000000000000000000000000000000000709804001094f9d42703b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakePool
Function name: stake(uint256)
PC address: 5622
Estimated Gas Usage: 41187 - 247395
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:465

currentStake.totalStakedAmountByUser

--------------------
Initial State:

Account: [CREATOR], balance: 0x60000083409, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x880400000400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawReward(), txdata: 0xc885bc58, value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a000000000000000000000000000000000000000000000a944850a00000420004, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakePool
Function name: stake(uint256)
PC address: 5643
Estimated Gas Usage: 41187 - 247395
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:465

currentStake.totalStakedAmountByUser = currentStake.totalStakedAmountByUser // add stake amount to sum of all stakes by user
            .add(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4f4f4f4f4f4f4f4f4f4f4f4fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: stake(uint256), txdata: 0xa694fc3a0000000000000000000000000000000000000000000709804001094f9d42703b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakePool
Function name: stake(uint256)
PC address: 5683
Estimated Gas Usage: 41187 - 247395
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:469

stakeToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x60000083409, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x880400000400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawReward(), txdata: 0xc885bc58, value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a000000000000000000000000000000000000000000000a944850a00000420004, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakePool
Function name: stake(uint256)
PC address: 7906
Estimated Gas Usage: 41187 - 247395
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:557

stakeToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4f4f4f4f4f4f4f4f4f4f4f4fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: stake(uint256), txdata: 0xa694fc3a0000000000000000000000000000000000000000000709804001094f9d42703b, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StakePool
Function name: stake(uint256)
PC address: 8035
Estimated Gas Usage: 41187 - 247395
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:557

IERC20(stakeToken).totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000c0000010601, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a00000000000000000000000000000000000000000002081a8004006514c80200, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakePool
Function name: stake(uint256)
PC address: 8101
Estimated Gas Usage: 41187 - 247395
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:558

stakeToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x60000083409, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x880400000400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: withdrawReward(), txdata: 0xc885bc58, value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a000000000000000000000000000000000000000000000a944850a00000420004, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StakePool
Function name: withdrawReward()
PC address: 8230
Estimated Gas Usage: 11296 - 101175
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:558

IERC20Capped(stakeToken).cap()

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdrawReward(), txdata: 0xc885bc58, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: StakePool
Function name: stake(uint256)
PC address: 8876
Estimated Gas Usage: 41187 - 247395
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:570

userToStakes[user].lastInteractionBlockNumber = block.number

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4f4f4f4f4f4f4f4f4f4f4f4fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: stake(uint256), txdata: 0xa694fc3a0000000000000000000000000000000000000000000709804001094f9d42703b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakePool
Function name: stake(uint256)
PC address: 8975
Estimated Gas Usage: 22498 - 167649
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:39

require(c >= a, "SafeMath: addition overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x98, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stake(uint256), txdata: 0xa694fc3a000000000000000000000000000000000000000000080520090570b8439f8045, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: StakePool
Function name: unstake()
PC address: 9105
Estimated Gas Usage: 3118 - 3781
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:89

if (a == 0) {
            return 0;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x80042, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a0000000000000000000000000000000000000000000820830e00018304212824, value: 0x0
Caller: [CREATOR], function: unstake(), txdata: 0x2def6620, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: StakePool
Function name: unstake()
PC address: 9131
Estimated Gas Usage: 3169 - 3832
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:94

c / a

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a00000000000000000000000000000000000000000001c0b2aa110210228a22f0, value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: StakePool
Function name: unstake()
PC address: 9141
Estimated Gas Usage: 3197 - 3860
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:94

require(c / a == b, "SafeMath: multiplication overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x81000000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000008, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: stake(uint256), txdata: 0xa694fc3a0000000000000000000000000000000000000000000804082004203120014432, value: 0x0
Caller: [SOMEGUY], function: unstake(), txdata: 0x2def6620, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: StakePool
Function name: unstake()
PC address: 9321
Estimated Gas Usage: 2171 - 2834
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/2/0x929d0e043578acbe7ea8ad7e0804329236655969.sol:69

require(b <= a, errorMessage)

--------------------
Initial State:

Account: [CREATOR], balance: 0x21002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a0000000000000000000000000000000000000000000501024012094004044138, value: 0x0
Caller: [ATTACKER], function: unstake(), txdata: 0x2def6620, value: 0x0



---------------------------------------------
For contract 0x929d0e043578acbe7ea8ad7e0804329236655969.sol
Tool Runtime = 3257.6257456239982 seconds
#############################################