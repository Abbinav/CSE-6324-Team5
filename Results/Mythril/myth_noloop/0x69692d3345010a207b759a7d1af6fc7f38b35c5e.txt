==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: 0x72c68108a82e82617b93d1be0d7975d762035015
Function name: constructor
PC address: 84
Estimated Gas Usage: 201 - 2974
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/5/0x69692d3345010a207b759a7d1af6fc7f38b35c5e.sol:1419

constructor(
        uint256 _minDeltaTwap,
        address _initialDistributionAddress,
        address _burnReservesAddress,
        address _teamAddress,
        address _devAddress,
        address _marketingAddress
    ) 
    public
    Ownable()
    ERC20("chads.vc", "CHADS")
    {
        setMinDeltaTwap(_minDeltaTwap);
        initialDistributionAddress = _initialDistributionAddress;
        burnReservesAddress = _burnReservesAddress;
        teamAddress = _teamAddress;
        devAddress = _devAddress;
        marketingAddress = _marketingAddress;
        _createBurnReservesVault(_burnReservesAddress);
        _distributeTokens(_initialDistributionAddress, _teamAddress, _devAddress, _marketingAddress);
        _initializePair();
        _pause();
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenTimelock
Function name: release(address)
PC address: 283
Estimated Gas Usage: 1026 - 1121
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/5/0x69692d3345010a207b759a7d1af6fc7f38b35c5e.sol:739

require(block.timestamp >= releaseTime)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000004, value: 0x0
Caller: [SOMEGUY], function: release(address), txdata: 0x191655870000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1402
Estimated Gas Usage: 3727 - 38574
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/5/0x69692d3345010a207b759a7d1af6fc7f38b35c5e.sol:646

if (block.timestamp < cliff) {
            return 0;
        } else if (block.timestamp >= start.add(duration)) {
            return totalBalance;
        } else {
            return totalBalance.mul(block.timestamp.sub(start)).div(duration);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x8c2c090a2816034, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: vestedAmount(address), txdata: 0x384711cc8080808080808080808080800100040000024040200010000000000000204000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 1444
Estimated Gas Usage: 5469 - 40316
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/5/0x69692d3345010a207b759a7d1af6fc7f38b35c5e.sol:648

if (block.timestamp >= start.add(duration)) {
            return totalBalance;
        } else {
            return totalBalance.mul(block.timestamp.sub(start)).div(duration);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000ed, value: 0x0
Caller: [ATTACKER], function: vestedAmount(address), txdata: 0x384711cc8080808080808080808080800101010101010101010101010101010100200120, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 2085
Estimated Gas Usage: 7443 - 42668
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/5/0x69692d3345010a207b759a7d1af6fc7f38b35c5e.sol:250

require(c / a == b, "SafeMath: multiplication overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001080000d0fc00080000080000000020800880405e76cbcbff7f65d71b0f67f79f5cffe5d2e4e9f2b7fafab8fdfaf7fe6ffe3b092291ba34080008000010024a14034000010c2490a00b060000000001828080c180, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc0202020202020202020202020101010101040120010140010100048001044020, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: vestedAmount(address)
PC address: 2265
Estimated Gas Usage: 7231 - 42456
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_noloop/5/0x69692d3345010a207b759a7d1af6fc7f38b35c5e.sol:225

require(b <= a, errorMessage)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000001000000000000668263168ac7938ce521fb630555c5da10dc3eda7940e78dccbc8835cec7e75d000000000000000000024000000000000000000000000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: vestedAmount(address), txdata: 0x384711cc4f4f4f4f4f4f4f4f4f4f4f4f0101000100010000000000000100000100000000, value: 0x0



---------------------------------------------
For contract 0x69692d3345010a207b759a7d1af6fc7f38b35c5e.sol
Tool Runtime = 1539.867554892 seconds
#############################################