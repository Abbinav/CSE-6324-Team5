==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Voting
Function name: getScore(address)
PC address: 1246
Estimated Gas Usage: 23824 - 440256
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/3/0x4fbb8b1876858260cb0ea5e21a83c48de6f6cac0.sol:34

AMPLContract.balanceOf(account)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getScore(address), txdata: 0xd47875d00000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Voting
Function name: getScore(address)
PC address: 1416
Estimated Gas Usage: 23824 - 440256
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_noloop/3/0x4fbb8b1876858260cb0ea5e21a83c48de6f6cac0.sol:39

totalKMPL + totalAMPL / 1000

--------------------
Initial State:

Account: [CREATOR], balance: 0x100044136, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getScore(address), txdata: 0xd47875d00000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Voting
Function name: getStaked(address,address)
PC address: 1753
Estimated Gas Usage: 8716 - 181803
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/3/0x4fbb8b1876858260cb0ea5e21a83c48de6f6cac0.sol:44

geyser.token()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getStaked(address,address), txdata: 0xf379dfd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Voting
Function name: getStaked(address,address)
PC address: 1967
Estimated Gas Usage: 8716 - 181803
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_noloop/3/0x4fbb8b1876858260cb0ea5e21a83c48de6f6cac0.sol:45

lpContract.balanceOf(account)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000400020ebeb0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getScore(address), txdata: 0xd47875d00000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: getStaked(address,address), txdata: 0xf379dfd075757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575757575, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Voting
Function name: getScore(address)
PC address: 2025
Estimated Gas Usage: 23824 - 440256
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_noloop/3/0x4fbb8b1876858260cb0ea5e21a83c48de6f6cac0.sol:45

lp += lpContract.balanceOf(account)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getScore(address), txdata: 0xd47875d00000000000000000000000000000000000000000000000102111010000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Voting
Function name: getStaked(address,address)
PC address: 2386
Estimated Gas Usage: 8716 - 181803
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_noloop/3/0x4fbb8b1876858260cb0ea5e21a83c48de6f6cac0.sol:48

lp * reserve

--------------------
Initial State:

Account: [CREATOR], balance: 0x1008800000241a2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40040400000008, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getScore(address), txdata: 0xd47875d00000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: getStaked(address,address), txdata: 0xf379dfd07575757575757575757575750c001000221ae484c8962e0408000c82757575757575757575757575757575757575757575757575757575757575757575757575, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Voting
Function name: getStaked(address,address)
PC address: 2394
Estimated Gas Usage: 8631 - 181437
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/3/0x4fbb8b1876858260cb0ea5e21a83c48de6f6cac0.sol:48

lp * reserve / lpContract.totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getStaked(address,address), txdata: 0xf379dfd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x4fbb8b1876858260cb0ea5e21a83c48de6f6cac0.sol
Tool Runtime = 126.18935093600885 seconds
#############################################