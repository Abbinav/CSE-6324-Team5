==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 4840
Estimated Gas Usage: 1368 - 1843
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/12/0xb0e99627bc29adef1178f16117bf495351e81997.sol:78

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b3000000000000000000000000000001800408100200010800000800400000102000000021101101258890100000002000000883a180c024008001000000003074, value: 0x0
Caller: [SOMEGUY], function: increaseApproval(address,uint256), txdata: 0xd73dd6230000000000000000000000000000018004081002000108000008004000001020ffffffe07137bf6b3bb1f7ffffffe7fffff9be268047f5ffc7ff3fffffffe7c4, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Pausable
Function name: increaseApproval(address,uint256)
PC address: 5574
Estimated Gas Usage: 1368 - 1843
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/12/0xb0e99627bc29adef1178f16117bf495351e81997.sol:78

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2082a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200110, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: approve(address,uint256), txdata: 0x095ea7b30000000000000000000000000000080000000001000200080000010200000000d070649b1c99ac8eab82d1426f16bbab6b059b9a43d4e32393bf7f3f7decdfd5, value: 0x0
Caller: [ATTACKER], function: increaseApproval(address,uint256), txdata: 0xd73dd62300000000000000000000000000000800000000010002000800000102000000003040008014892582b1421000080021210200310ac2032d20b04100c08213402d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PausableToken
Function name: increaseApproval(address,uint256)
PC address: 6256
Estimated Gas Usage: 2271 - 3076
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/12/0xb0e99627bc29adef1178f16117bf495351e81997.sol:78

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000020002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b30000000000000000000000000000000400000000000100000101040100010100c706351b4a345677a82495000003a5d8a399512a250b214bfdfa1148ffb8be64, value: 0x0
Caller: [SOMEGUY], function: increaseApproval(address,uint256), txdata: 0xd73dd6230606060606060606060606060000000400000000000100000101040100010100401c602206204c22340000000000a100a110012a050a215802060000004d41a4, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DexTradeCoin
Function name: increaseApproval(address,uint256)
PC address: 7358
Estimated Gas Usage: 2293 - 3098
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_noloop/12/0xb0e99627bc29adef1178f16117bf495351e81997.sol:78

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b3000000000000000000000000050110010001014000810401200100101810012000000000000000000000000000000232488550b10aa024b765134d68047106c8, value: 0x0
Caller: [CREATOR], function: increaseApproval(address,uint256), txdata: 0xd73dd6230000000000000000000000000501100100010140008104012001001018100120fffffffffffffffffffffffffffffddac980d3a309205d80513438480420fc0a, value: 0x0



---------------------------------------------
For contract 0xb0e99627bc29adef1178f16117bf495351e81997.sol
Tool Runtime = 2974.992900454963 seconds
#############################################