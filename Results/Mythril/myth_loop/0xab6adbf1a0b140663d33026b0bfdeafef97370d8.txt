==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Core
Function name: collectProtocolIncome(address)
PC address: 3554
Estimated Gas Usage: 24616 - 152317
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:632

dusd.totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],uint256,bool), txdata: 0x6a8c5b070000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: collectProtocolIncome(address), txdata: 0x4e7ea4920707070707070707070707070707070707070707070707070707070707070707, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: systemCoins(uint256)
PC address: 6996
Estimated Gas Usage: 1167 - 1262
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:504

address[] public systemCoins

--------------------
Initial State:

Account: [CREATOR], balance: 0x52880000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: systemCoins(uint256), txdata: 0xa019c64e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: peaksAddresses(uint256)
PC address: 7847
Estimated Gas Usage: 1101 - 1196
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:522

address[] public peaksAddresses

--------------------
Initial State:

Account: [CREATOR], balance: 0xe86b08000402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: peaksAddresses(uint256), txdata: 0xcc3d44e20000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: setPeakStatus(address,uint256,uint8)
PC address: 8449
Estimated Gas Usage: 8441 - 30047
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:691

peaks[peak].state = state

--------------------
Initial State:

Account: [CREATOR], balance: 0x1851000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],uint256,bool), txdata: 0x6a8c5b0700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: setPeakStatus(address,uint256,uint8), txdata: 0xde8f810b070707070707070707070707000000000000000000000000000000000000000007070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: feed(uint256)
PC address: 8610
Estimated Gas Usage: 1144 - 1239
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:505

uint[] public feed

--------------------
Initial State:

Account: [CREATOR], balance: 0x80080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: feed(uint256), txdata: 0xf59dfdfb0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Core
Function name: dusdToUsd(uint256,bool)
PC address: 8799
Estimated Gas Usage: 480 - 856
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:167

a * b

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,uint256,uint256), txdata: 0xa6b63eb800000000000000000000000020100208401001011002400001404001800180800000000000000000000000000404010440014002010202100110101040040101000000000000000000000000000840200101080801010001010440011001010100000000000000000000000000000000000000000000000000000000000010460000000000000000000000000000000000000000000000000000000000000812, value: 0x0
Caller: [CREATOR], function: dusdToUsd(uint256,bool), txdata: 0x40779694c41400000000263d8296007de85ea5e8dc96080d87b211323725988583e1020f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol
Tool Runtime = 3058.1696590680076 seconds
#############################################