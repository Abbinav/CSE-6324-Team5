==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DtaPool
Function name: transferAmount(address,uint256,string)
PC address: 4103
Estimated Gas Usage: 17212 - 97364
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/loops10/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:226

_token.transfer(addr, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: transferAmount(address,uint256,string), txdata: 0x1169e0d40000000000000000000000000000000000000000000000000000000000000003002e0010208008010801800810800480042000000100010140100220100402020000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DtaPool
Function name: transferAmount(address,uint256,string)
PC address: 4230
Estimated Gas Usage: 16283 - 95040
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops10/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:227

pledgors[addr].receiveDate = _date

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 030303030303030303030303deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: transferAmount(address,uint256,string), txdata: 0x1169e0d4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DtaPool
Function name: transferAmount(address,uint256,string)
PC address: 4303
Estimated Gas Usage: 16690 - 96098
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops10/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:228

pledgors[addr].profit += _amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x400402aa, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: e0e0e0e0e0e0e0e0e0e0e0e0deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: transferAmount(address,uint256,string), txdata: 0x1169e0d4000000000000000000000000000000000000000000000000000000000000000182008000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: DtaPool
Function name: transferAmount(address,uint256,string)
PC address: 4310
Estimated Gas Usage: 16283 - 95040
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops10/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:228

pledgors[addr].profit += _amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 030303030303030303030303deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: transferAmount(address,uint256,string), txdata: 0x1169e0d4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DtaPool
Function name: pledgor(uint256)
PC address: 4331
Estimated Gas Usage: 1146 - 1241
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops10/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:40

Pledgor[] public pledgor

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: pledgor(uint256), txdata: 0x32555d160000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DtaPool
Function name: dateList(uint256)
PC address: 7240
Estimated Gas Usage: 1167 - 1262
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops10/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:57

uint[] public dateList

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: dateList(uint256), txdata: 0x757a2ecb0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DtaPool
Function name: pllist(uint256)
PC address: 7275
Estimated Gas Usage: 1189 - 1284
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops10/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:44

address[] public pllist

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: pllist(uint256), txdata: 0x7e964eec0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DtaPool
Function name: snapshot(uint256)
PC address: 7413
Estimated Gas Usage: 1101 - 1196
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops10/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:55

Snapshot[] public snapshot

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: snapshot(uint256), txdata: 0x8f1dd8090000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DtaPool
Function name: approveUser(address)
PC address: 8303
Estimated Gas Usage: 2785 - 37867
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/loops10/0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol:188

_token.approve(addr,21000000)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: fdfdfdfdfdfdfdfdfdfdfdfddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: approveUser(address), txdata: 0xd624fdb60000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol
Tool Runtime = 10874.684372304997 seconds
#############################################