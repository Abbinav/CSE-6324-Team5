==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RebasedController
Function name: setRebaseLocked(bool)
PC address: 1614
Estimated Gas Usage: 1174 - 1599
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/m_loop/loop6/0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol:275

require(isOwner())

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setRebaseLocked(bool), txdata: 0x05919e7d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RebasedController
Function name: addTransaction(address,bytes)
PC address: 1700
Estimated Gas Usage: 1394 - 1819
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/m_loop/loop6/0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol:275

require(isOwner())

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addTransaction(address,bytes), txdata: 0x126e19be00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RebasedController
Function name: canRebase()
PC address: 2876
Estimated Gas Usage: 1949 - 2704
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/m_loop/loop6/0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol:418

(!rebaseLocked || isOwner()) && lastRebaseTimestampSec.add(minRebaseTimeIntervalSec) < now

--------------------
Initial State:

Account: [CREATOR], balance: 0x40041000040059288, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: canRebase(), txdata: 0x329ceacd, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RebasedController
Function name: removeTransaction(uint256)
PC address: 2928
Estimated Gas Usage: 1211 - 1636
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/m_loop/loop6/0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol:275

require(isOwner())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: removeTransaction(uint256), txdata: 0x46c3bd1f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RebasedController
Function name: setTransactionEnabled(uint256,bool)
PC address: 3411
Estimated Gas Usage: 1178 - 1603
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/m_loop/loop6/0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol:275

require(isOwner())

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setTransactionEnabled(uint256,bool), txdata: 0x6e9dde9900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RebasedController
Function name: renounceOwnership()
PC address: 3585
Estimated Gas Usage: 1085 - 1510
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/m_loop/loop6/0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol:275

require(isOwner())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RebasedController
Function name: transactions(uint256)
PC address: 3865
Estimated Gas Usage: 1100 - 1195
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop6/0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol:339

Transaction[] public transactions

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transactions(uint256), txdata: 0x9ace38c20000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RebasedController
Function name: transactions(uint256)
PC address: 3961
Estimated Gas Usage: 6003 - 8266
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop6/0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol:339

Transaction[] public transactions

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addTransaction(address,bytes), txdata: 0x126e19be00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: transactions(uint256), txdata: 0x9ace38c20000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RebasedController
Function name: transactions(uint256)
PC address: 4013
Estimated Gas Usage: 6003 - 8266
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop6/0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol:339

Transaction[] public transactions

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addTransaction(address,bytes), txdata: 0x126e19be00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: transactions(uint256), txdata: 0x9ace38c20000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RebasedController
Function name: setMarketOracle(address)
PC address: 4119
Estimated Gas Usage: 1194 - 1619
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/m_loop/loop6/0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol:275

require(isOwner())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setMarketOracle(address), txdata: 0x9e30bac50000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RebasedController
Function name: rebase()
PC address: 4245
Estimated Gas Usage: 256 - 351
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/m_loop/loop6/0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol:428

require(tx.origin == msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400010000000c0200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RebasedController
Function name: rebase()
PC address: 4264
Estimated Gas Usage: 3807 - 4562
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop6/0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol:429

require(canRebase(), "Rebase not allowed")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RebasedController
Function name: rebase()
PC address: 4264
Estimated Gas Usage: 2083 - 2838
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/m_loop/loop6/0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol:429

require(canRebase(), "Rebase not allowed")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RebasedController
Function name: rebase()
PC address: 4686
Estimated Gas Usage: 23350 - 135869
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop6/0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol:439

assert(supplyAfterRebase <= MAX_SUPPLY)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RebasedController
Function name: transferOwnership(address)
PC address: 5615
Estimated Gas Usage: 1260 - 1685
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/m_loop/loop6/0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol:275

require(isOwner())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: RebasedController
Function name: renounceOwnership()
PC address: 6145
Estimated Gas Usage: 2873 - 3958
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/m_loop/loop6/0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol:275

require(isOwner())

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setRebaseLocked(bool), txdata: 0x05919e7d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: RebasedController
Function name: getRebaseValues()
PC address: 6741
Estimated Gas Usage: 5413 - 42096
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop6/0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol:144

a - b

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getRebaseValues(), txdata: 0x3148235a, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: RebasedController
Function name: removeTransaction(uint256)
PC address: 7486
Estimated Gas Usage: 32658 - 133933
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addTransaction(address,bytes), txdata: 0x126e19be00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: removeTransaction(uint256), txdata: 0x46c3bd1f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x41630a33d4d6e3767e26aaf50277ab2a235edea3.sol
Tool Runtime = 1387.898230967001 seconds
#############################################