==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BurnBase
Function name: multiTransfer(address[],uint256[])
PC address: 2442
Estimated Gas Usage: 1131 - 6962
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops6/0x40941b4ac3bb204c4dfd37cd5124ed7d4dbe5228.sol:133

amounts[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d5450000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BurnBase
Function name: decreaseAllowance(address,uint256)
PC address: 6380
Estimated Gas Usage: 1373 - 1848
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops6/0x40941b4ac3bb204c4dfd37cd5124ed7d4dbe5228.sol:36

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x42ff6020000000da0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: decreaseAllowance(address,uint256), txdata: 0xa457c2d700000000000000000000000000000000000002000201020000000000000000000000000000000000400000000000000000000000000000004000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BurnBase
Function name: increaseAllowance(address,uint256)
PC address: 6411
Estimated Gas Usage: 1435 - 1910
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops6/0x40941b4ac3bb204c4dfd37cd5124ed7d4dbe5228.sol:42

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1040000000003, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4920400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b3000000000000000000000000010120800180012081050402818002818104201000000000000006f0079a19d6007dc000017a34eaa1f2c7f736d0041000000004, value: 0x0
Caller: [SOMEGUY], function: increaseAllowance(address,uint256), txdata: 0x39509351a7a7a7a7a7a7a7a7a7a7a7a70101208001800120810504028180028181042010fffffffffffffa17fa09f312ffc09fffff10d52aa6860008e28ffbf7fffffffc, value: 0x0



---------------------------------------------
For contract 0x40941b4ac3bb204c4dfd37cd5124ed7d4dbe5228.sol
Tool Runtime = 4183.92003872199 seconds
#############################################