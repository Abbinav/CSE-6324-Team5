==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: SpringField
Function name: rewards(address)
PC address: 2640
Estimated Gas Usage: 3855 - 4520
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:864

for (uint256 k = lastSavedBlock; k < block.number; k++) {

                reward =

                    reward +

                    stakes[adrs][j]

                        .amount

                        .mul(blockrate.div(10**blockDecimals))

                        .div(blockdata[lastSavedBlock]);

            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800000008, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: enter(uint256), txdata: 0xa59f3e0c54020884080420100828086f5000215040718c30488002000000002000000020, value: 0x0
Caller: [ATTACKER], function: rewards(address), txdata: 0x0700037d717171717171717171717171deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: SpringField
Function name: unstake()
PC address: 3612
Estimated Gas Usage: 14307 - 36269
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:768

for (

                uint256 i = stakes[msg.sender][j].blockNumber;

                i < block.number;

                i++

            ) {

                reward = reward.add(

                    stakes[msg.sender][j]

                        .amount

                        .mul(blockrate.div(10**blockDecimals))

                        .div(blockdata[i])

                );

            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000002, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enter(uint256), txdata: 0xa59f3e0c000000000000000008008000000000000000c0000000000000210200c1012000, value: 0x0
Caller: [SOMEGUY], function: unstake(), txdata: 0x2def6620, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: SpringField
Function name: getrewards()
PC address: 5018
Estimated Gas Usage: 14307 - 36269
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:710

for (

                uint256 i = stakes[msg.sender][j].blockNumber;

                i < block.number;

                i++

            ) {

                reward = reward.add(

                    stakes[msg.sender][j]

                        .amount

                        .mul(blockrate.div(10**blockDecimals))

                        .div(blockdata[i])

                );

            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000020000020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enter(uint256), txdata: 0xa59f3e0c00050180289280b50002218212500920000200000228103c00142800400a0108, value: 0x0
Caller: [SOMEGUY], function: getrewards(), txdata: 0x59cf9350, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SpringField
Function name: enter(uint256)
PC address: 7420
Estimated Gas Usage: 71493 - 380460
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:664

token.allowance(msg.sender, address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: enter(uint256), txdata: 0xa59f3e0c0b8452070c0481008000144624882a910020402c045080c080902a8d15a3a400, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SpringField
Function name: enter(uint256)
PC address: 7970
Estimated Gas Usage: 71493 - 380460
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:672

token.transferFrom(msg.sender, address(this), _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 050505050505050505050505deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000010000000000000000000000000200000008000800000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: enter(uint256), txdata: 0xa59f3e0c402d0110033e800240000d08001000000102800406090dd7054a86361ca00000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SpringField
Function name: enter(uint256)
PC address: 7970
Estimated Gas Usage: 71493 - 380460
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:672

token.transferFrom(msg.sender, address(this), _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x48040043405a801, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000040000000000800004000400004102000080401000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: enter(uint256), txdata: 0xa59f3e0c20c5081053010001010000040484000c68010310002001210340310120092822, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SpringField
Function name: stakers(uint256)
PC address: 8265
Estimated Gas Usage: 1188 - 1283
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:556

address[] public stakers

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: stakers(uint256), txdata: 0xfd5e6dd10000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 120
Severity: Low
Contract: SpringField
Function name: enter(uint256)
PC address: 10106
Estimated Gas Usage: 42648 - 185200
A control flow decision is made based on The block.number environment variable.
The block.number environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:808

for (uint256 j = block.number; j > lastSavedBlock; j--) {

                for (uint256 k = 0; k < stakeCount[stakers[i]]; k++) {

                    blockdata[j] = blockdata[j].add(

                        stakes[stakers[i]][k].amount

                    );

                }

            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: enter(uint256), txdata: 0xa59f3e0c0000000010080002000800000080020000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SpringField
Function name: enter(uint256)
PC address: 11165
Estimated Gas Usage: 71493 - 380460
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:457

_totalSupply

--------------------
Initial State:

Account: [CREATOR], balance: 0x400001000aa020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 040404040404040404040404deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000402000001000000000080000000000000000000000000000000000000000004000000000000000008100000040000000000040000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: enter(uint256), txdata: 0xa59f3e0c00001200018040000221002050000000081e8058d81810006b000fffbfe43f5e, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SpringField
Function name: enter(uint256)
PC address: 11184
Estimated Gas Usage: 71493 - 380460
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:457

_totalSupply = _totalSupply.add(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 131313131313131313131313deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: enter(uint256), txdata: 0xa59f3e0c0000000000400020000008000000000013502080c00000000000000000800100, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SpringField
Function name: enter(uint256)
PC address: 11252
Estimated Gas Usage: 71493 - 380460
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:459

_balances[account]

--------------------
Initial State:

Account: [CREATOR], balance: 0x400001000aa020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 040404040404040404040404deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000402000001000000000080000000000000000000000000000000000000000004000000000000000008100000040000000000040000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: enter(uint256), txdata: 0xa59f3e0c00001200018040000221002050000000081e8058d81810006b000fffbfe43f5e, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SpringField
Function name: enter(uint256)
PC address: 11331
Estimated Gas Usage: 71493 - 380460
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x48c7c3392e1c542641d14516f2bda078e242df79.sol:459

_balances[account] = _balances[account].add(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 131313131313131313131313deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: enter(uint256), txdata: 0xa59f3e0c0000000000400020000008000000000013502080c00000000000000000800100, value: 0x0



---------------------------------------------
For contract 0x48c7c3392e1c542641d14516f2bda078e242df79.sol
Tool Runtime = 3634.113215008998 seconds
#############################################