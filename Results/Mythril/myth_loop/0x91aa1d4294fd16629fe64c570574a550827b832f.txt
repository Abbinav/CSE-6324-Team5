==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: EthPiptSwap
Function name: convertOddToCvpAndSendToPayout(address[])
PC address: 3734
Estimated Gas Usage: 660 - 3437
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_loop/7/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:968

msg.sender == tx.origin && !Address.isContract(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: convertOddToCvpAndSendToPayout(address[]), txdata: 0x0b2a9b000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EthPiptSwap
Function name: receive()
PC address: 6674
Estimated Gas Usage: 4531 - 4721
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:1114

feeAmounts[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000002, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbaffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: setFees(uint256[],uint256[],address,address), txdata: 0xbbf8eadc0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: receive(), txdata: 0xa3e76c0f, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: EthPiptSwap
Function name: setDefaultSlippage(uint256)
PC address: 7058
Estimated Gas Usage: 1212 - 1637
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_loop/7/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:760

require(_owner == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setDefaultSlippage(uint256), txdata: 0x44bd1afd0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: EthPiptSwap
Function name: setTokensSettings(address[],address[],bool[])
PC address: 7326
Estimated Gas Usage: 1668 - 2093
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_loop/7/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:760

require(_owner == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000009, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: setTokensSettings(address[],address[],bool[]), txdata: 0x4d923532000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: EthPiptSwap
Function name: renounceOwnership()
PC address: 8647
Estimated Gas Usage: 1151 - 1576
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_loop/7/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:760

require(_owner == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: renounceOwnership(), txdata: 0x715018a6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EthPiptSwap
Function name: feeLevels(uint256)
PC address: 8962
Estimated Gas Usage: 1079 - 1174
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:810

uint256[] public feeLevels

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: feeLevels(uint256), txdata: 0x857af01b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EthPiptSwap
Function name: feeAmounts(uint256)
PC address: 11274
Estimated Gas Usage: 1145 - 1240
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:811

uint256[] public feeAmounts

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: feeAmounts(uint256), txdata: 0xa2e641370000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: EthPiptSwap
Function name: receive()
PC address: 11348
Estimated Gas Usage: 255 - 350
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_loop/7/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:854

if (msg.sender != tx.origin) {
            return;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: receive(), txdata: 0xa3e76c0f, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: EthPiptSwap
Function name: setFees(uint256[],uint256[],address,address)
PC address: 18575
Estimated Gas Usage: 1564 - 1989
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_loop/7/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:849

msg.sender == feeManager || msg.sender == owner()

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setFees(uint256[],uint256[],address,address), txdata: 0xbbf8eadc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: EthPiptSwap
Function name: setFees(uint256[],uint256[],address,address)
PC address: 18637
Estimated Gas Usage: 1584 - 2009
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_loop/7/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:849

require(msg.sender == feeManager || msg.sender == owner(), "NOT_FEE_MANAGER")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: eaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeadeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setFees(uint256[],uint256[],address,address), txdata: 0xbbf8eadc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EthPiptSwap
Function name: calcSwapEthToPiptInputs(uint256,address[],uint256)
PC address: 19578
Estimated Gas Usage: 4703 - 43832
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:1053

_tokens[0]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: calcSwapEthToPiptInputs(uint256,address[],uint256), txdata: 0xc6135f43000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: EthPiptSwap
Function name: transferOwnership(address)
PC address: 21823
Estimated Gas Usage: 1238 - 1663
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_loop/7/0x91aa1d4294fd16629fe64c570574a550827b832f.sol:760

require(_owner == _msgSender(), "Ownable: caller is not the owner")

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferOwnership(address), txdata: 0xf2fde38b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x91aa1d4294fd16629fe64c570574a550827b832f.sol
Tool Runtime = 10861.362260827002 seconds
#############################################