==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Vesting
Function name: addTokenGrant(address,uint256,uint128,uint16,uint16)
PC address: 3851
Estimated Gas Usage: 41604 - 202555
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/loops8/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol:485

token.transferFrom(colonyMultiSig, address(this), _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: addTokenGrant(address,uint256,uint128,uint16,uint16), txdata: 0xda09118e000000000000000000000000000001000000000102000001002000000000100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020c4efc3030003a000000b887023ce20000000000000000000000000000000000000000000000000000000000000022e0000000000000000000000000000000000000000000000000000000000000004, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vesting
Function name: addTokenGrant(address,uint256,uint128,uint16,uint16)
PC address: 4103
Estimated Gas Usage: 41604 - 202555
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops8/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol:496

tokenGrants[_recipient] = grant

--------------------
Initial State:

Account: [CREATOR], balance: 0x20002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: addTokenGrant(address,uint256,uint128,uint16,uint16), txdata: 0xda09118e0000000000000000000000000002000200010000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffdfdfff7ffffffff9fffdd7fffef00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vesting
Function name: addTokenGrant(address,uint256,uint128,uint16,uint16)
PC address: 4120
Estimated Gas Usage: 41615 - 202566
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops8/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol:496

tokenGrants[_recipient] = grant

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000186, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addTokenGrant(address,uint256,uint128,uint16,uint16), txdata: 0xda09118e0000000000000000000000000000000400010000080000000000000000000000010101010101010101010101010101010101010101010101010101010101010100000000000000000000000000000000fffff925ffffffeffffffbfffffff80000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vesting
Function name: addTokenGrant(address,uint256,uint128,uint16,uint16)
PC address: 4165
Estimated Gas Usage: 41604 - 202555
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops8/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol:496

tokenGrants[_recipient] = grant

--------------------
Initial State:

Account: [CREATOR], balance: 0x20002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: addTokenGrant(address,uint256,uint128,uint16,uint16), txdata: 0xda09118e0000000000000000000000000002000200010000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffdfdfff7ffffffff9fffdd7fffef00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vesting
Function name: addTokenGrant(address,uint256,uint128,uint16,uint16)
PC address: 4183
Estimated Gas Usage: 41615 - 202566
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops8/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol:496

tokenGrants[_recipient] = grant

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000186, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addTokenGrant(address,uint256,uint128,uint16,uint16), txdata: 0xda09118e0000000000000000000000000000000400010000080000000000000000000000010101010101010101010101010101010101010101010101010101010101010100000000000000000000000000000000fffff925ffffffeffffffbfffffff80000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vesting
Function name: addTokenGrant(address,uint256,uint128,uint16,uint16)
PC address: 4200
Estimated Gas Usage: 41604 - 202555
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops8/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol:496

tokenGrants[_recipient] = grant

--------------------
Initial State:

Account: [CREATOR], balance: 0x20002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: addTokenGrant(address,uint256,uint128,uint16,uint16), txdata: 0xda09118e0000000000000000000000000002000200010000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffdfdfff7ffffffff9fffdd7fffef00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vesting
Function name: addTokenGrant(address,uint256,uint128,uint16,uint16)
PC address: 4218
Estimated Gas Usage: 41615 - 202566
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops8/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol:496

tokenGrants[_recipient] = grant

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000186, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addTokenGrant(address,uint256,uint128,uint16,uint16), txdata: 0xda09118e0000000000000000000000000000000400010000080000000000000000000000010101010101010101010101010101010101010101010101010101010101010100000000000000000000000000000000fffff925ffffffeffffffbfffffff80000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vesting
Function name: addTokenGrant(address,uint256,uint128,uint16,uint16)
PC address: 4235
Estimated Gas Usage: 41604 - 202555
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops8/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol:496

tokenGrants[_recipient] = grant

--------------------
Initial State:

Account: [CREATOR], balance: 0x20002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: addTokenGrant(address,uint256,uint128,uint16,uint16), txdata: 0xda09118e0000000000000000000000000002000200010000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffdfdfff7ffffffff9fffdd7fffef00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vesting
Function name: addTokenGrant(address,uint256,uint128,uint16,uint16)
PC address: 4253
Estimated Gas Usage: 41615 - 202566
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops8/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol:496

tokenGrants[_recipient] = grant

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000186, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addTokenGrant(address,uint256,uint128,uint16,uint16), txdata: 0xda09118e0000000000000000000000000000000400010000080000000000000000000000010101010101010101010101010101010101010101010101010101010101010100000000000000000000000000000000fffff925ffffffeffffffbfffffff80000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vesting
Function name: addTokenGrant(address,uint256,uint128,uint16,uint16)
PC address: 4270
Estimated Gas Usage: 41604 - 202555
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops8/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol:496

tokenGrants[_recipient] = grant

--------------------
Initial State:

Account: [CREATOR], balance: 0x20002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: addTokenGrant(address,uint256,uint128,uint16,uint16), txdata: 0xda09118e0000000000000000000000000002000200010000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffdfdfff7ffffffff9fffdd7fffef00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000401, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vesting
Function name: addTokenGrant(address,uint256,uint128,uint16,uint16)
PC address: 4288
Estimated Gas Usage: 41615 - 202566
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops8/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol:496

tokenGrants[_recipient] = grant

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000186, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: addTokenGrant(address,uint256,uint128,uint16,uint16), txdata: 0xda09118e0000000000000000000000000000000400010000080000000000000000000000010101010101010101010101010101010101010101010101010101010101010100000000000000000000000000000000fffff925ffffffeffffffbfffffff80000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Vesting
Function name: addTokenGrant(address,uint256,uint128,uint16,uint16)
PC address: 4333
Estimated Gas Usage: 41604 - 202555
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops8/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol:496

tokenGrants[_recipient] = grant

--------------------
Initial State:

Account: [CREATOR], balance: 0x20002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: addTokenGrant(address,uint256,uint128,uint16,uint16), txdata: 0xda09118e0000000000000000000000000002000200010000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffdfdfff7ffffffff9fffdd7fffef00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000401, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Vesting
Function name: claimVestedTokens()
PC address: 5588
Estimated Gas Usage: 1112 - 1397
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops8/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol:549

if (now < tokenGrant.startTime) {
      return (0, 0);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x801, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010104010101010402080180010401010202040100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: claimVestedTokens(), txdata: 0xe74f3fbb, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Vesting
Function name: claimVestedTokens()
PC address: 5674
Estimated Gas Usage: 2930 - 3545
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops8/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol:557

if (elapsedMonths < tokenGrant.vestingCliff) {
      return (0, 0);
    }

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010000000000080000000000010000000000000100000000000000000000000008, value: 0x0
Caller: [CREATOR], function: claimVestedTokens(), txdata: 0xe74f3fbb, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Vesting
Function name: claimVestedTokens()
PC address: 6025
Estimated Gas Usage: 1990 - 2275
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops8/0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol:134

require((z = x - y) <= x, "ds-math-sub-underflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000800000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: claimVestedTokens(), txdata: 0xe74f3fbb, value: 0x0



---------------------------------------------
For contract 0xcfaf813c03838d43f133afa2a425b6a1d1b86558.sol
Tool Runtime = 5334.809803590993 seconds
#############################################