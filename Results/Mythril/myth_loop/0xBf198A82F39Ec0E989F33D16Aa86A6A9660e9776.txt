==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DegoOpenSale
Function name: constructor
PC address: 550
Estimated Gas Usage: 150866 - 683676
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops8/0xBf198A82F39Ec0E989F33D16Aa86A6A9660e9776.sol:776

now + 7 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DegoOpenSale
Function name: constructor
PC address: 606
Estimated Gas Usage: 150866 - 683676
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops8/0xBf198A82F39Ec0E989F33D16Aa86A6A9660e9776.sol:777

now + 7 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DegoOpenSale
Function name: constructor
PC address: 662
Estimated Gas Usage: 150866 - 683676
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops8/0xBf198A82F39Ec0E989F33D16Aa86A6A9660e9776.sol:778

now + 7 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: DegoOpenSale
Function name: constructor
PC address: 718
Estimated Gas Usage: 150866 - 683676
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops8/0xBf198A82F39Ec0E989F33D16Aa86A6A9660e9776.sol:779

now + 14 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DegoOpenSale
Function name: getStage()
PC address: 5665
Estimated Gas Usage: 1245 - 1530
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops8/0xBf198A82F39Ec0E989F33D16Aa86A6A9660e9776.sol:856

now >= startTime && _stageSoldAmount[i] < _stageCondition[i].maxSoldAmount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getStage(), txdata: 0xfcaa7664, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DegoOpenSale
Function name: getStage()
PC address: 5728
Estimated Gas Usage: 1262 - 1547
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops8/0xBf198A82F39Ec0E989F33D16Aa86A6A9660e9776.sol:856

if(now >= startTime && _stageSoldAmount[i] < _stageCondition[i].maxSoldAmount ){
                return i;
            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getStage(), txdata: 0xfcaa7664, value: 0x0



---------------------------------------------
For contract 0xBf198A82F39Ec0E989F33D16Aa86A6A9660e9776.sol
Tool Runtime = 2271.435463809001 seconds
#############################################