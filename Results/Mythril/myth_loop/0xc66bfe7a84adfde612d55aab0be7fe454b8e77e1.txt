==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BValveStaking
Function name: updateReward(uint256,uint256)
PC address: 1641
Estimated Gas Usage: 2021 - 2446
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops8/0xc66bfe7a84adfde612d55aab0be7fe454b8e77e1.sol:1560

poolList[_pid]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateReward(uint256,uint256), txdata: 0x0b50cd3e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BValveStaking
Function name: poolList(uint256)
PC address: 1825
Estimated Gas Usage: 1102 - 1197
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops8/0xc66bfe7a84adfde612d55aab0be7fe454b8e77e1.sol:1070

PoolList[] public poolList

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: poolList(uint256), txdata: 0x2a48235b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BValveStaking
Function name: decreaseRewardSupply(uint256,uint256)
PC address: 4608
Estimated Gas Usage: 2020 - 2445
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops8/0xc66bfe7a84adfde612d55aab0be7fe454b8e77e1.sol:1606

poolList[_pid]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: decreaseRewardSupply(uint256,uint256), txdata: 0x49ed393c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BValveStaking
Function name: pendingRewardsFromPool(uint256,address)
PC address: 6256
Estimated Gas Usage: 1370 - 2508
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops8/0xc66bfe7a84adfde612d55aab0be7fe454b8e77e1.sol:1248

poolList[_pid]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: pendingRewardsFromPool(uint256,address), txdata: 0x93fcd29100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BValveStaking
Function name: addRewardSupply(uint256,uint256)
PC address: 7310
Estimated Gas Usage: 2064 - 2489
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops8/0xc66bfe7a84adfde612d55aab0be7fe454b8e77e1.sol:1582

poolList[_pid]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addRewardSupply(uint256,uint256), txdata: 0x97bc4e5c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: BValveStaking
Function name: addRewardSupply(uint256,uint256)
PC address: 7467
Estimated Gas Usage: 21503 - 82448
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops8/0xc66bfe7a84adfde612d55aab0be7fe454b8e77e1.sol:1592

pool.rewardRemains += _addAmount

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addPool(address,address,uint256,uint256), txdata: 0xc20632ba0000000000000000000000000000000000000000040100080100000000080002000000000000000000000000000008020000000008002002800101800800012020808080400401021080012010020202000002021080800202044008020040008010001140210013e40a41090104b00106b0080d28008a202009140804106500, value: 0x0
Caller: [CREATOR], function: addRewardSupply(uint256,uint256), txdata: 0x97bc4e5c0000000000000000000000000000000000000000000000000000000000000000a0010606d00700620636000b0061d4140082593560588280417810218710a500, value: 0x0



---------------------------------------------
For contract 0xc66bfe7a84adfde612d55aab0be7fe454b8e77e1.sol
Tool Runtime = 242.36028885201085 seconds
#############################################