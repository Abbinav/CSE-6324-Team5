==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MStableStrat
Function name: exchangeRewardForWant(bool)
PC address: 3392
Estimated Gas Usage: 13045 - 119896
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:866

balProxy.smartSwapExactIn(
            mta,
            musd,
            exchangeAll ? swapAmt : swapAmt.mul(8000).div(DENOM),
            0,
            numPools
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: withdrawAll(), txdata: 0x853828b6, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MStableStrat
Function name: exchangeRewardForWant(bool)
PC address: 3789
Estimated Gas Usage: 13045 - 119896
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:875

balProxy.smartSwapExactIn(
            musd,
            want,
            swapAmt,
            0,
            numPools
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 565656565656565656565656affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f2534c656530000000000000000000000000901d12ec01b195e5aa8748e62bd7735, value: 0x0
Caller: [CREATOR], function: withdrawAll(), txdata: 0x853828b6, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MStableStrat
Function name: deposit(uint256)
PC address: 14011
Estimated Gas Usage: 13671 - 188469
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:688

controller.earn(address(this), amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 565656565656565656565656deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f2534c656530000000000000000000000000901d12ebe1b195e5aa8749082bd7735, value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f2534c656530000000000000000000000000901d12ebe1b195e5aa8748e62bd7735, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MStableStrat
Function name: deposit(uint256)
PC address: 14011
Estimated Gas Usage: 18600 - 263091
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:688

controller.earn(address(this), amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f2534c656530000000000000000000000000901d12ebe1b195e5aa8748e62bd7735, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MStableStrat
Function name: deposit(uint256)
PC address: 14040
Estimated Gas Usage: 18570 - 262966
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:691

musdcBpt

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 565656565656565656565656deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: deposit(uint256), txdata: 0xb6b55f2534c656530000000000000000000000000901d12ebe1b195e5aa8748e62bd7735, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MStableStrat
Function name: deposit(uint256)
PC address: 14102
Estimated Gas Usage: 13671 - 188469
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:691

want

--------------------
Initial State:

Account: [CREATOR], balance: 0x41080000001102, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: bdbdbdbdbdbdbdbdbdbdbdbddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f2538c656530000000000000000000000000901d12ebe23195e5aa8748e62bd7735, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MStableStrat
Function name: deposit(uint256)
PC address: 14277
Estimated Gas Usage: 18600 - 263091
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:691

musdcBpt.joinswapExternAmountIn(address(want), amount, 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f2534c656530000000000000000000000000901d12ebe1b195e5aa8748e62bd7735, value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f2534c656530000000000000000000000000901d12ebe1b195e5aa8748e62bd7735, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MStableStrat
Function name: deposit(uint256)
PC address: 14277
Estimated Gas Usage: 18600 - 263091
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:691

musdcBpt.joinswapExternAmountIn(address(want), amount, 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 565656565656565656565656deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f2534c656530000000000000000000000000901d12ebe1b195e5aa8748e62bd7735, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MStableStrat
Function name: deposit(uint256)
PC address: 14341
Estimated Gas Usage: 18570 - 262966
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:694

mPool

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f2534c656530000000000000000000000000901d12ebe1b195e5aa8748e62bd7735, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MStableStrat
Function name: deposit(uint256)
PC address: 14483
Estimated Gas Usage: 13671 - 188469
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:694

mPool.stake(bptTokenAmt)

--------------------
Initial State:

Account: [CREATOR], balance: 0x41080000001102, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: bdbdbdbdbdbdbdbdbdbdbdbddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f2538c656530000000000000000000000000901d12ebe23195e5aa8748e62bd7735, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MStableStrat
Function name: earned()
PC address: 15240
Estimated Gas Usage: 5409 - 75662
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:719

mtaGov.earned(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: earned(), txdata: 0xd6f19262, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MStableStrat
Function name: deposit(uint256)
PC address: 16755
Estimated Gas Usage: 18570 - 262966
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:885

mta

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f2534c656530000000000000000000000000901d12ebe1b195e5aa8748e62bd7735, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MStableStrat
Function name: deposit(uint256)
PC address: 17020
Estimated Gas Usage: 18600 - 263091
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:887

mtaGov

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 565656565656565656565656deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f2534c656530000000000000000000000000901d12ebe1b195e5aa8748e62bd7735, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MStableStrat
Function name: deposit(uint256)
PC address: 17272
Estimated Gas Usage: 18600 - 263091
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:889

mtaGov

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f2534c656530000000000000000000000000901d12ebe1b195e5aa8748e62bd7735, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MStableStrat
Function name: deposit(uint256)
PC address: 17426
Estimated Gas Usage: 18600 - 263091
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:889

mtaGov.createLock(mtaBal, 1632580257)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f2534c656530000000000000000000000000901d12ebe1b195e5aa8748e62bd7735, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MStableStrat
Function name: deposit(uint256)
PC address: 17458
Estimated Gas Usage: 18570 - 262966
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:892

mtaGov

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(uint256), txdata: 0xb6b55f2534c656530000000000000000000000000901d12ebe1b195e5aa8748e62bd7735, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: MStableStrat
Function name: deposit(uint256)
PC address: 17600
Estimated Gas Usage: 18600 - 263091
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:892

mtaGov.increaseLockAmount(mtaBal)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 565656565656565656565656deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: deposit(uint256), txdata: 0xb6b55f2534c656530000000000000000000000000901d12ebe1b195e5aa8748e62bd7735, value: 0x0



---------------------------------------------
For contract 0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol
Tool Runtime = 5230.806169791002 seconds
#############################################