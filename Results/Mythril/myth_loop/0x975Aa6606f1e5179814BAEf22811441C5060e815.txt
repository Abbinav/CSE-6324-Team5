==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: RewardDecayAggregator
Function name: claimReward()
PC address: 470
Estimated Gas Usage: 5340 - 75219
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1457

rewarders[i].getRewardEx(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8080808080808080808080808080808080808080808080808080808080808080808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: claimReward(), txdata: 0xb88a802f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RewardDecayAggregator
Function name: claimReward()
PC address: 470
Estimated Gas Usage: 5340 - 75219
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1457

rewarders[i].getRewardEx(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claimReward(), txdata: 0xb88a802f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RewardDecayAggregator
Function name: earned()
PC address: 766
Estimated Gas Usage: 5645 - 75805
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1463

rewarders[i].earned(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fdfffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fdfffffffffffffd, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: earned(), txdata: 0xd6f19262, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RewardDecayAggregator
Function name: rewarders(uint256)
PC address: 870
Estimated Gas Usage: 278 - 373
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1448

StakingRewardsDecay[2] public rewarders

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: rewarders(uint256), txdata: 0xfcf8770f0000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakingRewardsDecay
Function name: earned(address)
PC address: 4084
Estimated Gas Usage: 5714 - 6377
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1325

epochs[uint256(i)]

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: earned(address), txdata: 0x008cc2620000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: StakingRewardsDecay
Function name: earned(address)
PC address: 4176
Estimated Gas Usage: 16746 - 20244
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1324

i--

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(address,uint256), txdata: 0xcd6dc68700000000000000000000000001000001000200000100000000800100000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: earned(address), txdata: 0x008cc2626d6d6d6d6d6d6d6d6d6d6d6d0000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakingRewardsDecay
Function name: stake(address,uint256,address)
PC address: 6637
Estimated Gas Usage: 7982 - 28172
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1058

require(block.timestamp >= getStartTime(), "not start")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(address,uint256), txdata: 0xcd6dc68700000000000000000000000001010202010201010101010201010202010201010000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: stake(address,uint256,address), txdata: 0x294091cd010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakingRewardsDecay
Function name: getRewardPerHour()
PC address: 7299
Estimated Gas Usage: 3626 - 3816
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1187

for (
            uint256 i = currentEpoch;
            i < EPOCHCOUNT && epochs[i].starttime <= block.timestamp;
            i++
        ) {
            res = i;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(address,uint256), txdata: 0xcd6dc68700000000000000000000000001010104010201010101010101010101010101010000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: getRewardPerHour(), txdata: 0xe2c50b4b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakingRewardsDecay
Function name: initAllEpochs(uint256[],uint256,uint256)
PC address: 7576
Estimated Gas Usage: 3346 - 6546
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1117

assert(rewards.length == EPOCHCOUNT)

--------------------
Initial State:

Account: [CREATOR], balance: 0x404000402c2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initAllEpochs(uint256[],uint256,uint256), txdata: 0x2ff68520000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakingRewardsDecay
Function name: approveEpochsConsistency()
PC address: 9422
Estimated Gas Usage: 2815 - 3240
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1163

epochs[0]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approveEpochsConsistency(), txdata: 0x5c96732c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakingRewardsDecay
Function name: getEpochRewardRate(uint256)
PC address: 10020
Estimated Gas Usage: 1214 - 1309
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1128

epochs[epochIdx]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getEpochRewardRate(uint256), txdata: 0x5ff45b430000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakingRewardsDecay
Function name: getEpochStartTime(uint256)
PC address: 10062
Estimated Gas Usage: 1105 - 1200
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1132

epochs[epochIdx]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getEpochStartTime(uint256), txdata: 0x633e9e090000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakingRewardsDecay
Function name: withdraw(address,uint256,address)
PC address: 10630
Estimated Gas Usage: 7982 - 28172
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1058

require(block.timestamp >= getStartTime(), "not start")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(address,uint256), txdata: 0xcd6dc68700000000000000000000000001010101010101011001010101010101010101010000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: withdraw(address,uint256,address), txdata: 0x69328dec6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakingRewardsDecay
Function name: getEpochFinishTime(uint256)
PC address: 11918
Estimated Gas Usage: 1148 - 1243
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1136

epochs[epochIdx]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getEpochFinishTime(uint256), txdata: 0xa6c991230000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakingRewardsDecay
Function name: epochs(uint256)
PC address: 12771
Estimated Gas Usage: 1123 - 1218
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1007

EpochData[] public epochs

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: epochs(uint256), txdata: 0xc6b61e4c0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakingRewardsDecay
Function name: getStartTime()
PC address: 12880
Estimated Gas Usage: 1066 - 1161
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1054

epochs[0]

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c0000140001900, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getStartTime(), txdata: 0xc828371e, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StakingRewardsDecay
Function name: getPairInfo(bytes32,address)
PC address: 14508
Estimated Gas Usage: 12513 - 153692
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1263

IAdapter(desc.adapter).calc(gem, locked, desc.factor)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: registerPairDesc(address,address,uint256,bytes32), txdata: 0x00bee4780000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000001000800000000, value: 0x0
Caller: [ATTACKER], function: getPairInfo(bytes32,address), txdata: 0xd420354b00000000000001000000000000000000000000000000000000010008000000008080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StakingRewardsDecay
Function name: getRewardPerHour()
PC address: 15597
Estimated Gas Usage: 2763 - 2858
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1279

epochs[calcCurrentEpoch()]

--------------------
Initial State:

Account: [CREATOR], balance: 0x140000102002040, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getRewardPerHour(), txdata: 0xe2c50b4b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakingRewardsDecay
Function name: initRewardAmount(uint256,uint256,uint256,uint256)
PC address: 17509
Estimated Gas Usage: 3025 - 3450
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1088

require(starttime >= block.timestamp, "starttime > block.timestamp")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(address,uint256), txdata: 0xcd6dc68700000000000000000000000001010101010101020101010101010101010101010000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: initRewardAmount(uint256,uint256,uint256,uint256), txdata: 0x41e58d260101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: StakingRewardsDecay
Function name: getReward()
PC address: 17981
Estimated Gas Usage: 7857 - 28047
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops5/0x975Aa6606f1e5179814BAEf22811441C5060e815.sol:1058

require(block.timestamp >= getStartTime(), "not start")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(address,uint256), txdata: 0xcd6dc68700000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getReward(), txdata: 0x3d18b912, value: 0x0



---------------------------------------------
For contract 0x975Aa6606f1e5179814BAEf22811441C5060e815.sol
Tool Runtime = 3212.989559905007 seconds
#############################################