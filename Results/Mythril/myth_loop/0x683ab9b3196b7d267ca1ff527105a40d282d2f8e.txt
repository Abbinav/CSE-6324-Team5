mythril.mythril.mythril_analyzer [CRITICAL]: Exception occurred, aborting analysis. Please report this issue to the Mythril GitHub page.
Traceback (most recent call last):
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/mythril/mythril_analyzer.py", line 162, in fire_lasers
    custom_modules_directory=self.custom_modules_directory,
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/analysis/symbolic.py", line 166, in __init__
    world_state=world_state,
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/svm.py", line 175, in sym_exec
    self._execute_transactions(created_account.address)
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/svm.py", line 216, in _execute_transactions
    execute_message_call(self, address)
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/transaction/symbolic.py", line 108, in execute_message_call
    laser_evm.exec()
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/svm.py", line 253, in exec
    new_states, op_code = self.execute_state(global_state)
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/svm.py", line 346, in execute_state
    ).evaluate(global_state)
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/instructions.py", line 260, in evaluate
    result = instruction_mutator(global_state)
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/instructions.py", line 192, in wrapper
    new_global_states = self.call_on_state_copy(func, func_obj, global_state)
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/instructions.py", line 127, in call_on_state_copy
    return func(func_obj, global_state_copy)
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/instructions.py", line 919, in balance_
    address.value, self.dynamic_loader
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/state/world_state.py", line 125, in accounts_exist_or_load
    code=dynamic_loader.dynld(addr),
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/support/loader.py", line 67, in dynld
    raise ValueError("Cannot load from the chain when eth is None")
ValueError: Cannot load from the chain when eth is None

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LidSimplifiedPresaleAccess
Function name: getAccessTime(address,uint256)
PC address: 2433
Estimated Gas Usage: 3763 - 39031
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:108

a + b

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getAccessTime(address,uint256), txdata: 0xfa04fcfb0000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 1145 - 1240
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:784

uint[] public bonusRangeBP

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: bonusRangeBP(uint256), txdata: 0x8b03a1850000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3192
Estimated Gas Usage: 1103 - 1198
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1266

address[] public tokenPools

--------------------
Initial State:

Account: [CREATOR], balance: 0x100008042, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tokenPools(uint256), txdata: 0x00c0f9160000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LidSimplifiedPresaleRedeemer
Function name: setDeposit(address,uint256,uint256)
PC address: 3956
Estimated Gas Usage: 17567 - 58562
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:840

bonusRangeBP[currentBonusIndex]

--------------------
Initial State:

Account: [CREATOR], balance: 0x10c0002020f08, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,uint256,uint256[],uint256[],address,address), txdata: 0xa0bee36e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000005000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: setDeposit(address,uint256,uint256), txdata: 0xa13a75caa0a0a0a0a0a0a0a0a0a0a0a00000000000000000000000000000000000000000500446f3762c4020240201000000c800a110020608c844122514871601800041a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LidSimplifiedPresale
Function name: sendToUniswap()
PC address: 4841
Estimated Gas Usage: 10138 - 114954
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1298

require(isPresaleEnded(), "Presale has not yet ended.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x101040022001008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cvalue: 0x0
Caller: [ATTACKER], function: sendToUniswap(), txdata: 0x44cbe5de, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateReedemable(address,uint256,uint256)
PC address: 5027
Estimated Gas Usage: 350 - 445
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:887

if (finalEndTime >= now) return 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: calculateReedemable(address,uint256,uint256), txdata: 0xc6db01ad000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: LidSimplifiedPresale
Function name: sendToUniswap()
PC address: 5161
Estimated Gas Usage: 15184 - 105533
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1369

require(msg.sender == tx.origin, "Sender must be origin - no contract calls.")

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00881c200000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: sendToUniswap(), txdata: 0x44cbe5de, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 1144 - 1239
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:783

uint[] public bonusRangeStart

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: bonusRangeStart(uint256), txdata: 0xd578d8730000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 1190 - 1285
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:962

IStakeHandler[] public stakeHandlers

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stakeHandlers(uint256), txdata: 0x4bd5fd5d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 2909 - 3334
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1112

stakeHandlers[stakeHandlers.length-1]

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(address), txdata: 0xc4d66de8000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: unregisterStakeHandler(uint256), txdata: 0x568b19ed6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LidSimplifiedPresale
Function name: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address)
PC address: 7322
Estimated Gas Usage: 139297 - 655439
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1336

token.totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cvalue: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LidSimplifiedPresale
Function name: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address)
PC address: 7514
Estimated Gas Usage: 139297 - 655439
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1336

token.approve(address(uniswapRouter), token.totalSupply())

--------------------
Initial State:

Account: [CREATOR], balance: 0x28201002800000081, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: isPresaleEnded(), txdata: 0x7decf27f, value: 0x0
Caller: [ATTACKER], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45c007f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f01010101010101010101010101010101010101017f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LidSimplifiedPresale
Function name: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address)
PC address: 7514
Estimated Gas Usage: 139297 - 655439
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1336

token.approve(address(uniswapRouter), token.totalSupply())

--------------------
Initial State:

Account: [CREATOR], balance: 0x410800000c0008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: isPresaleEnded(), txdata: 0x7decf27f, value: 0x0
Caller: [ATTACKER], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45c007f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f01010101010101010101010101010101010101017f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LidSimplifiedPresale
Function name: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address)
PC address: 7597
Estimated Gas Usage: 139297 - 655439
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:279

initializing = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c10804000e3db2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: isPresaleEnded(), txdata: 0x7decf27f, value: 0x0
Caller: [ATTACKER], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45c007f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f01010101010101010101010101010101010101017f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LidSimplifiedPresale
Function name: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address)
PC address: 7611
Estimated Gas Usage: 139297 - 655439
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:279

initializing = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LidSimplifiedPresale
Function name: issueTokens()
PC address: 7950
Estimated Gas Usage: 10138 - 114954
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1298

require(isPresaleEnded(), "Presale has not yet ended.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000000001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cvalue: 0x0
Caller: [SOMEGUY], function: issueTokens(), txdata: 0x60ab5852, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LidStaking
Function name: distribute(uint256)
PC address: 8942
Estimated Gas Usage: 18941 - 129642
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1080

lidToken.transferFrom(msg.sender, address(this), amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(uint256,uint256,uint256,uint256,address,address), txdata: 0x439cc54c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: distribute(uint256), txdata: 0x91c05b0b00a0823100000000000000004000000030ab9130ace030ac0d2aaaaaaaaaaaab, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LidStaking
Function name: distribute(uint256)
PC address: 8942
Estimated Gas Usage: 18941 - 129642
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1080

lidToken.transferFrom(msg.sender, address(this), amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40094000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: distribute(uint256), txdata: 0x91c05b0b0000808080000200000080000100000080000000080000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LidSimplifiedPresale
Function name: isPresaleEnded()
PC address: 10103
Estimated Gas Usage: 7634 - 77934
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1446

timer.isStarted()

--------------------
Initial State:

Account: [CREATOR], balance: 0x141040000023caa, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cvalue: 0x0
Caller: [ATTACKER], function: isPresaleEnded(), txdata: 0x7decf27f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LidSimplifiedPresale
Function name: isPresaleEnded()
PC address: 10175
Estimated Gas Usage: 7526 - 77545
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1446

now > endTime && endTime != 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x40018020024000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000402040801008800108808001200804800000800400002003bfd840024041f0000000000000000000000000008004040120010280010120800880201008000408000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: isPresaleEnded(), txdata: 0x7decf27f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LidSimplifiedPresale
Function name: redeem()
PC address: 11425
Estimated Gas Usage: 10137 - 114953
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1298

require(isPresaleEnded(), "Presale has not yet ended.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cvalue: 0x0
Caller: [CREATOR], function: redeem(), txdata: 0xbe040fb0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 13062
Estimated Gas Usage: 1122 - 1217
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1267

uint[] public tokenPoolBPs

--------------------
Initial State:

Account: [CREATOR], balance: 0x100008042, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tokenPoolBPs(uint256), txdata: 0xe668d6d80000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit()
PC address: 13542
Estimated Gas Usage: 10974 - 116120
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1292

require(!isPresaleEnded(), "Presale has ended.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000001040000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020808000400120080240012002000040800100022004081002dfffffffa190020000000000000000000000008080084040014010028080400440808001011040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: deposit(), txdata: 0xd0e30db0, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit()
PC address: 14264
Estimated Gas Usage: 23464 - 218724
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1412

require(now >= access.getAccessTime(msg.sender, timer.startTime()), "Time must be at least access time.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000000280, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001959888510040c9250000000000000000000000000002200102010080800101010002010202000201000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: deposit(), txdata: 0xd0e30db0, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit()
PC address: 14264
Estimated Gas Usage: 23464 - 218724
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:1412

require(now >= access.getAccessTime(msg.sender, timer.startTime()), "Time must be at least access time.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000000280, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001959888510040c9250000000000000000000000000002200102010080800101010002010202000201000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: deposit(), txdata: 0xd0e30db0, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: LidSimplifiedPresale
Function name: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address)
PC address: 16688
Estimated Gas Usage: 29500 - 94327
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:358

require(account != address(0), "Roles: account is the zero address")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2008020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cvalue: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LidSimplifiedPresale
Function name: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address)
PC address: 17598
Estimated Gas Usage: 139297 - 655439
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:554

_owner = newOwner

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LidSimplifiedPresale
Function name: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address)
PC address: 17651
Estimated Gas Usage: 139297 - 655439
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops5/0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol:554

_owner = newOwner

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x683ab9b3196b7d267ca1ff527105a40d282d2f8e.sol
Tool Runtime = 4004.391952506994 seconds
#############################################