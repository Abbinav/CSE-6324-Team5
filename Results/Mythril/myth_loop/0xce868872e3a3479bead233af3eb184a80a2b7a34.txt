==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVaultStorage
Function name: spenders(uint256)
PC address: 611
Estimated Gas Usage: 1056 - 1151
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:51

address[] public spenders

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: spenders(uint256), txdata: 0x87cab37e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenRegistery
Function name: spenders(uint256)
PC address: 4501
Estimated Gas Usage: 1145 - 1240
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:51

address[] public spenders

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: spenders(uint256), txdata: 0x87cab37e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenSpenders
Function name: spenders(uint256)
PC address: 4707
Estimated Gas Usage: 1145 - 1240
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:51

address[] public spenders

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: spenders(uint256), txdata: 0x87cab37e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenVault
Function name: spenders(uint256)
PC address: 7386
Estimated Gas Usage: 1167 - 1262
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:51

address[] public spenders

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: spenders(uint256), txdata: 0x87cab37e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVault
Function name: depositeToken(address,address,uint256)
PC address: 12549
Estimated Gas Usage: 3092 - 38852
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:376

_token.transfer(_to, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x21eb0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: depositeToken(address,address,uint256), txdata: 0xc1bc42bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001020101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: depositeToken(address,address,uint256), txdata: 0xc1bc42bbbdbdbdbdbdbdbdbdbdbdbdbddeadbeefdeadbeefdeadbeefdeadbeefdeadbeefbdbdbdbdbdbdbdbdbdbdbdbd0901d12ebe1b195e5aa8748e62bd7734ae19b51fbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbd, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVault
Function name: depositeToken(address,address,uint256)
PC address: 12944
Estimated Gas Usage: 3117 - 38972
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/1/0xce868872e3a3479bead233af3eb184a80a2b7a34.sol:379

_token.transferFrom(_from, _to, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20eb8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: depositeToken(address,address,uint256), txdata: 0xc1bc42bb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001020101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: depositeToken(address,address,uint256), txdata: 0xc1bc42bbbdbdbdbdbdbdbdbdbdbdbdbddeadbeefdeadbeefdeadbeefdeadbeefdeadbeefbdbdbdbdbdbdbdbdbdbdbdbd0102010101010101010101010101010101010101bdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbd, value: 0x0



---------------------------------------------
For contract 0xce868872e3a3479bead233af3eb184a80a2b7a34.sol
Tool Runtime = 598.8606898049911 seconds
#############################################