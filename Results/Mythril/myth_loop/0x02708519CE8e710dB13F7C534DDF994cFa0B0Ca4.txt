==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CurveSusdPeak
Function name: portfolioValueWithFeed(uint256[])
PC address: 5904
Estimated Gas Usage: 9671 - 120926
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop8/0x02708519CE8e710dB13F7C534DDF994cFa0B0Ca4.sol:771

curveToken.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x18001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: portfolioValueWithFeed(uint256[]), txdata: 0x7b34a1f3000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000200000000000000000000000000208000000000000000000000000000000000000000000000000044002000200800010010801081001000000088080040220100101024008024001000010014040800000000000408080024040200110802010108040400404010200800408022080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CurveSusdPeak
Function name: harvest(bool,uint256)
PC address: 9788
Estimated Gas Usage: 6680 - 79710
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop8/0x02708519CE8e710dB13F7C534DDF994cFa0B0Ca4.sol:672

crv.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: harvest(bool,uint256), txdata: 0xd02221a301010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CurveSusdPeak
Function name: stake()
PC address: 14391
Estimated Gas Usage: 5229 - 74922
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop8/0x02708519CE8e710dB13F7C534DDF994cFa0B0Ca4.sol:839

gauge.deposit(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(), txdata: 0x3a4b66f1, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CurveSusdPeak
Function name: portfolioValueWithFeed(uint256[])
PC address: 15126
Estimated Gas Usage: 5963 - 81109
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop8/0x02708519CE8e710dB13F7C534DDF994cFa0B0Ca4.sol:833

_feed[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000801, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: portfolioValueWithFeed(uint256[]), txdata: 0x7b34a1f30000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x02708519CE8e710dB13F7C534DDF994cFa0B0Ca4.sol
Tool Runtime = 10848.402050399003 seconds
#############################################