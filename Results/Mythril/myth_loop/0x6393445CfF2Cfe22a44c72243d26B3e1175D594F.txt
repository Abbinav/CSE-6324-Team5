==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CsmClaim
Function name: withDrawAll(address)
PC address: 1666
Estimated Gas Usage: 4556 - 74200
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/8/0x6393445CfF2Cfe22a44c72243d26B3e1175D594F.sol:360

token.transfer(msg.sender, balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addPendingClaims(address[]), txdata: 0x3cbeb67d0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: withDrawAll(address), txdata: 0x09f21f6a020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CsmClaim
Function name: withDrawAll(address)
PC address: 1666
Estimated Gas Usage: 4556 - 74200
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/8/0x6393445CfF2Cfe22a44c72243d26B3e1175D594F.sol:360

token.transfer(msg.sender, balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3f6, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withDrawAll(address), txdata: 0x09f21f6a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CsmClaim
Function name: claim()
PC address: 3096
Estimated Gas Usage: 21431 - 134022
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/8/0x6393445CfF2Cfe22a44c72243d26B3e1175D594F.sol:370

_token.transfer(from, rewardAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7d7d7d7d7d7d7d7d7d7d7d7ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addPendingClaims(address[]), txdata: 0x3cbeb67d00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CsmClaim
Function name: claim()
PC address: 3096
Estimated Gas Usage: 21431 - 134022
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/8/0x6393445CfF2Cfe22a44c72243d26B3e1175D594F.sol:370

_token.transfer(from, rewardAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000022, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addPendingClaims(address[]), txdata: 0x3cbeb67d00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CsmClaim
Function name: claim()
PC address: 3232
Estimated Gas Usage: 21431 - 134022
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/8/0x6393445CfF2Cfe22a44c72243d26B3e1175D594F.sol:371

delete _pendingClaimAddress[from]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7d7d7d7d7d7d7d7d7d7d7d7ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addPendingClaims(address[]), txdata: 0x3cbeb67d000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000200000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: CsmClaim
Function name: claim()
PC address: 3319
Estimated Gas Usage: 21431 - 134022
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/8/0x6393445CfF2Cfe22a44c72243d26B3e1175D594F.sol:372

_claimedAddresses[from] = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 7d7d7d7d7d7d7d7d7d7d7d7ddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: addPendingClaims(address[]), txdata: 0x3cbeb67d000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000200000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: claim(), txdata: 0x4e71d92d, value: 0x0



---------------------------------------------
For contract 0x6393445CfF2Cfe22a44c72243d26B3e1175D594F.sol
Tool Runtime = 538.5851693190052 seconds
#############################################