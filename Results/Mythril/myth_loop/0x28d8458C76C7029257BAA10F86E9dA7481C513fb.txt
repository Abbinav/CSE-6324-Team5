==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Proxy
Function name: fallback
PC address: 333
Estimated Gas Usage: 4194 - 75392
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:168

target.setMessageSender(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0xa0a14200001c12, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: setTarget(address), txdata: 0x776d1a01000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x80000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Proxy
Function name: fallback
PC address: 371
Estimated Gas Usage: 4056 - 75254
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:175

sload(target_slot)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Proxy
Function name: fallback
PC address: 373
Estimated Gas Usage: 4056 - 75254
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:175

call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Proxy
Function name: fallback
PC address: 373
Estimated Gas Usage: 4194 - 75392
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:175

call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x80000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FeePoolState
Function name: constructor
PC address: 465
Estimated Gas Usage: 18351 - 84720
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:280

now + setupDuration

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FeePoolEternalStorage
Function name: constructor
PC address: 833
Estimated Gas Usage: 20507 - 87743
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:280

now + setupDuration

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FeePool
Function name: constructor
PC address: 882
Estimated Gas Usage: 47476 - 195795
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:280

now + setupDuration

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FeePoolState
Function name: importIssuerData(address[],uint256[],uint256,uint256)
PC address: 1584
Estimated Gas Usage: 2363 - 2788
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:284

require(now < setupExpiryTime, "Can only perform this action during setup")

--------------------
Initial State:

Account: [CREATOR], balance: 0x43d23509fffae92a8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x43d225082ffae92a1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: importIssuerData(address[],uint256[],uint256,uint256), txdata: 0x39a3f63f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FeePoolState
Function name: importIssuerData(address[],uint256[],uint256,uint256)
PC address: 1945
Estimated Gas Usage: 2705 - 3320
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:1477

accountIssuanceLedger[accounts[i]][periodToInsert]

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: importIssuerData(address[],uint256[],uint256,uint256), txdata: 0x39a3f63f000000000000000000000000000000000000000000000000000000000000004100000000000000000000000000000000000000000000000000000000000000410800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000108800104020001088000108010040102020800, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AddressResolver
Function name: rebuildCaches(address[])
PC address: 2428
Estimated Gas Usage: 2097 - 36473
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:439

destinations[i].rebuildCache()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x401000010, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: importAddresses(bytes32[],address[]), txdata: 0xab0b8f7700000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000249737375657200000000000000000000000000000000000000000000000000001002001000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: rebuildCaches(address[]), txdata: 0x766f781500000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AddressResolver
Function name: rebuildCaches(address[])
PC address: 2428
Estimated Gas Usage: 3756 - 72413
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:439

destinations[i].rebuildCache()

--------------------
Initial State:

Account: [CREATOR], balance: 0x800004000b8488, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: rebuildCaches(address[]), txdata: 0x766f78150000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FeePoolState
Function name: accountIssuanceLedger(address,uint256)
PC address: 2879
Estimated Gas Usage: 375 - 660
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:1364

mapping(address => IssuanceData[FEE_PERIOD_LENGTH]) public accountIssuanceLedger

--------------------
Initial State:

Account: [CREATOR], balance: 0x804000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000002, value: 0x0
Caller: [SOMEGUY], function: accountIssuanceLedger(address,uint256), txdata: 0x7de6554500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AddressResolver
Function name: areAddressesImported(bytes32[],address[])
PC address: 3088
Estimated Gas Usage: 698 - 793
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:447

destinations[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000040, value: 0x0
Caller: [ATTACKER], function: areAddressesImported(bytes32[],address[]), txdata: 0x9f42102f0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EternalStorage
Function name: getBytesValue(bytes32)
PC address: 4142
Estimated Gas Usage: 3439 - 4947
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:1597

return BytesStorage[record]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000220020804020210400208201020040802011008000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: setBytesValue(bytes32,bytes), txdata: 0xc9a52d2c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: getBytesValue(bytes32), txdata: 0x44bfa56e0000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EternalStorage
Function name: getBytesValue(bytes32)
PC address: 4194
Estimated Gas Usage: 3439 - 4947
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:1597

return BytesStorage[record]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000220020804020210400208201020040802011008000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: setBytesValue(bytes32,bytes), txdata: 0xc9a52d2c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: getBytesValue(bytes32), txdata: 0x44bfa56e0000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FeePoolEternalStorage
Function name: getBytesValue(bytes32)
PC address: 4416
Estimated Gas Usage: 3417 - 4925
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:1597

return BytesStorage[record]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000002010200000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: setBytesValue(bytes32,bytes), txdata: 0xc9a52d2c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: getBytesValue(bytes32), txdata: 0x44bfa56e0000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FeePoolEternalStorage
Function name: getBytesValue(bytes32)
PC address: 4468
Estimated Gas Usage: 3417 - 4925
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:1597

return BytesStorage[record]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000002010200000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: setBytesValue(bytes32,bytes), txdata: 0xc9a52d2c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: getBytesValue(bytes32), txdata: 0x44bfa56e0000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EternalStorage
Function name: getStringValue(bytes32)
PC address: 5857
Estimated Gas Usage: 3417 - 4925
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:1571

return StringStorage[record]

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000102010000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setStringValue(bytes32,string), txdata: 0xf586606600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: getStringValue(bytes32), txdata: 0xa209a29c0000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EternalStorage
Function name: getStringValue(bytes32)
PC address: 5909
Estimated Gas Usage: 3417 - 4925
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:1571

return StringStorage[record]

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000102010000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setStringValue(bytes32,string), txdata: 0xf586606600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: getStringValue(bytes32), txdata: 0xa209a29c0000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FeePoolEternalStorage
Function name: getStringValue(bytes32)
PC address: 6137
Estimated Gas Usage: 3417 - 4925
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:1571

return StringStorage[record]

--------------------
Initial State:

Account: [CREATOR], balance: 0x45, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000004010010000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: setStringValue(bytes32,string), txdata: 0xf586606600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: getStringValue(bytes32), txdata: 0xa209a29c0000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: FeePoolEternalStorage
Function name: getStringValue(bytes32)
PC address: 6189
Estimated Gas Usage: 3417 - 4925
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:1571

return StringStorage[record]

--------------------
Initial State:

Account: [CREATOR], balance: 0x45, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000004010010000000000000000000000000000000000000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: setStringValue(bytes32,string), txdata: 0xf586606600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: getStringValue(bytes32), txdata: 0xa209a29c0000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FeePoolEternalStorage
Function name: importFeeWithdrawalData(address[],uint256[])
PC address: 6536
Estimated Gas Usage: 2375 - 2800
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:284

require(now < setupExpiryTime, "Can only perform this action during setup")

--------------------
Initial State:

Account: [CREATOR], balance: 0x82, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: bebebebebebebebebebebebedeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: importFeeWithdrawalData(address[],uint256[]), txdata: 0xb3ffbd9e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: EternalStorage
Function name: deleteBytesValue(bytes32)
PC address: 7068
Estimated Gas Usage: 12388 - 53098
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2084081, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000202100140404008020204010102010101100802000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setBytesValue(bytes32,bytes), txdata: 0xc9a52d2c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: deleteBytesValue(bytes32), txdata: 0x0c55d9250000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: FeePoolEternalStorage
Function name: importFeeWithdrawalData(address[],uint256[])
PC address: 7089
Estimated Gas Usage: 6425 - 77110
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:1666

this.setUIntValue(keccak256(abi.encodePacked(LAST_FEE_WITHDRAWAL, accounts[i])), feePeriodIDs[i])

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000002066084, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: importFeeWithdrawalData(address[],uint256[]), txdata: 0xb3ffbd9e00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: EternalStorage
Function name: deleteStringValue(bytes32)
PC address: 7140
Estimated Gas Usage: 12364 - 53074
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x21000c0002081505, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000410080000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setStringValue(bytes32,string), txdata: 0xf586606600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: deleteStringValue(bytes32), txdata: 0xba69fcaa0000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: EternalStorage
Function name: setBytesValue(bytes32,bytes)
PC address: 7212
Estimated Gas Usage: 17763 - 78473
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000010002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x210002001000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000402408080204001010240808002808080108004000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setBytesValue(bytes32,bytes), txdata: 0xc9a52d2c0000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: setBytesValue(bytes32,bytes), txdata: 0xc9a52d2c0000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: EternalStorage
Function name: setStringValue(bytes32,string)
PC address: 7340
Estimated Gas Usage: 17785 - 78495
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x2010400010069, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2010400010062, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000108010100000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setStringValue(bytes32,string), txdata: 0xf58660660000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: setStringValue(bytes32,string), txdata: 0xf58660660000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000000086, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: FeePoolEternalStorage
Function name: deleteBytesValue(bytes32)
PC address: 7961
Estimated Gas Usage: 12411 - 53121
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000840020000000000000000000000000000000000000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: setBytesValue(bytes32,bytes), txdata: 0xc9a52d2c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: deleteBytesValue(bytes32), txdata: 0x0c55d9250000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: FeePoolEternalStorage
Function name: deleteStringValue(bytes32)
PC address: 8033
Estimated Gas Usage: 12364 - 53074
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8c0000000108, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000001010400480020108018040040101011001200801000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: setStringValue(bytes32,string), txdata: 0xf586606600000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: deleteStringValue(bytes32), txdata: 0xba69fcaa0000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: FeePoolEternalStorage
Function name: setBytesValue(bytes32,bytes)
PC address: 8105
Estimated Gas Usage: 17763 - 78473
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000401800101040401010104800108010420012080000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setBytesValue(bytes32,bytes), txdata: 0xc9a52d2c0000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: setBytesValue(bytes32,bytes), txdata: 0xc9a52d2c0000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: FeePoolEternalStorage
Function name: setStringValue(bytes32,string)
PC address: 8233
Estimated Gas Usage: 17785 - 78495
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000008002010080000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setStringValue(bytes32,string), txdata: 0xf58660660000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000000020, value: 0x0
Caller: [ATTACKER], function: setStringValue(bytes32,string), txdata: 0xf58660660000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: FeePool
Function name: importFeePeriod(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 12090
Estimated Gas Usage: 11602 - 33677
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop4/0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol:284

require(now < setupExpiryTime, "Can only perform this action during setup")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: importFeePeriod(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256), txdata: 0xb10090bvalue: 0x0



---------------------------------------------
For contract 0x28d8458C76C7029257BAA10F86E9dA7481C513fb.sol
Tool Runtime = 20433.251541969996 seconds
#############################################