==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenStake
Function name: constructor
PC address: 195
Estimated Gas Usage: 54353 - 241615
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/3/0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol:100

aprPercentage * thousand

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenStake
Function name: _staker(address,uint256)
PC address: 2923
Estimated Gas Usage: 1481 - 1766
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol:86

mapping(address => Stake[]) public _staker

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setOpenLockForce(bool), txdata: 0x58bf7b5c0101010101010101010101000000000000000000000000010101010101010101, value: 0x0
Caller: [ATTACKER], function: _staker(address,uint256), txdata: 0x1e49758c00000000000000000000000000000000000000000000000000000000000000008000000000000000000000204000081002402080088004000804800201010110, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenStake
Function name: stakeCanClaim(address,uint256)
PC address: 3101
Estimated Gas Usage: 1536 - 1821
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol:168

_staker[account][id]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setFreeze(bool), txdata: 0xc0d5536f0101010101010101010101000000000000000000000000010101010101010101, value: 0x0
Caller: [SOMEGUY], function: stakeCanClaim(address,uint256), txdata: 0x2198e5eec0c0c0c0c0c0c0c0c0c0c0c000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenStake
Function name: withdrawToken(uint256)
PC address: 5044
Estimated Gas Usage: 4516 - 40304
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/3/0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol:194

ERC20(_token).transfer(msg.sender, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a6a6a6a6a6a6a6a6a6a6a6a6deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdrawToken(uint256), txdata: 0x50baa6220000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: withdrawToken(uint256), txdata: 0x50baa622a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: TokenStake
Function name: setAPR(uint256)
PC address: 5668
Estimated Gas Usage: 13171 - 53877
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/3/0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol:211

aprPercentage * thousand

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setAPR(uint256), txdata: 0x854303cf0185822000000004b92880000200001000049002ac045891ccb001196015b804, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenStake
Function name: _activeAddress(uint256)
PC address: 5732
Estimated Gas Usage: 1293 - 1388
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol:87

address [] public _activeAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: _activeAddress(uint256), txdata: 0x912ce8c30000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TokenStake
Function name: setOpenLockForce(address,uint256,bool)
PC address: 6003
Estimated Gas Usage: 2577 - 3192
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol:207

_staker[account][stakeId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setOpenLockForce(address,uint256,bool), txdata: 0xaec1fb2c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0xa605e1e5627cd55f31c10623e3b1697bcfef07622.sol
Tool Runtime = 1394.8596255010052 seconds
#############################################