==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BtswapRouter
Function name: fallback
PC address: 567
Estimated Gas Usage: 915 - 1340
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:488

assert(msg.sender == WETH)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BtswapRouter
Function name: removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)
PC address: 6123
Estimated Gas Usage: 445 - 540
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:892

require(deadline >= block.timestamp, "BtswapRouter: EXPIRED")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: removeLiquidityETH(address,uint256,uint256,uint256,address,uint256), txdata: 0x02751cec000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: BtswapRouter
Function name: getAmountOut(uint256,uint256,uint256)
PC address: 6655
Estimated Gas Usage: 2953 - 38411
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:834

IBtswapFactory(factory).getAmountOut(amountIn, reserveIn, reserveOut)

--------------------
Initial State:

Account: [CREATOR], balance: 0xc000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffff, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8080808080808080808080800000000000000000000000008080808080808080808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de95000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002808040020804082020102080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x1
Caller: [ATTACKER], function: getAmountOut(uint256,uint256,uint256), txdata: 0x054d50d4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BtswapRouter
Function name: swapExactTokensForETH(uint256,uint256,address[],address,uint256)
PC address: 6733
Estimated Gas Usage: 602 - 697
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:892

require(deadline >= block.timestamp, "BtswapRouter: EXPIRED")

--------------------
Initial State:

Account: [CREATOR], balance: 0x40007bff8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: swapExactTokensForETH(uint256,uint256,address[],address,uint256), txdata: 0x18cbafe500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BtswapRouter
Function name: swapExactTokensForETH(uint256,uint256,address[],address,uint256)
PC address: 6919
Estimated Gas Usage: 1509 - 1934
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:742

path[path.length - 1]

--------------------
Initial State:

Account: [CREATOR], balance: 0x48ff0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: swapExactTokensForETH(uint256,uint256,address[],address,uint256), txdata: 0x18cbafe500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BtswapRouter
Function name: removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)
PC address: 8906
Estimated Gas Usage: 18132 - 263847
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:624

IBtswapPairToken(pair).permit(msg.sender, address(this), value, deadline, v, r, s)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32), txdata: 0x2195995c000000000000000000000000010101010202020201010101020202020101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000109afcb4400000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000008000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BtswapRouter
Function name: swapExactTokensForTokens(uint256,uint256,address[],address,uint256)
PC address: 8981
Estimated Gas Usage: 601 - 696
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:892

require(deadline >= block.timestamp, "BtswapRouter: EXPIRED")

--------------------
Initial State:

Account: [CREATOR], balance: 0x7afba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: swapExactTokensForTokens(uint256,uint256,address[],address,uint256), txdata: 0x38ed173900000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BtswapRouter
Function name: swapTokensForExactETH(uint256,uint256,address[],address,uint256)
PC address: 9912
Estimated Gas Usage: 623 - 718
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:892

require(deadline >= block.timestamp, "BtswapRouter: EXPIRED")

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000040002a7be, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: swapTokensForExactETH(uint256,uint256,address[],address,uint256), txdata: 0x4a25d94a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BtswapRouter
Function name: swapTokensForExactETH(uint256,uint256,address[],address,uint256)
PC address: 10098
Estimated Gas Usage: 1530 - 1955
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:732

path[path.length - 1]

--------------------
Initial State:

Account: [CREATOR], balance: 0x4025e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: swapTokensForExactETH(uint256,uint256,address[],address,uint256), txdata: 0x4a25d94a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BtswapRouter
Function name: swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)
PC address: 11723
Estimated Gas Usage: 576 - 671
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:892

require(deadline >= block.timestamp, "BtswapRouter: EXPIRED")

--------------------
Initial State:

Account: [CREATOR], balance: 0x402078f9a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256), txdata: 0x5c11d79500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BtswapRouter
Function name: swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)
PC address: 11850
Estimated Gas Usage: 627 - 722
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:791

path[0]

--------------------
Initial State:

Account: [CREATOR], balance: 0xb3c4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256), txdata: 0x5c11d79500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BtswapRouter
Function name: swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)
PC address: 11942
Estimated Gas Usage: 758 - 853
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:791

path[1]

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000a5de, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256), txdata: 0x5c11d79500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BtswapRouter
Function name: swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)
PC address: 12711
Estimated Gas Usage: 598 - 693
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:892

require(deadline >= block.timestamp, "BtswapRouter: EXPIRED")

--------------------
Initial State:

Account: [CREATOR], balance: 0x4208000000007ab90, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256), txdata: 0x791ac94700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BtswapRouter
Function name: swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)
PC address: 12897
Estimated Gas Usage: 1505 - 1930
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:819

path[path.length - 1]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1079e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256), txdata: 0x791ac94700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BtswapRouter
Function name: swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)
PC address: 13175
Estimated Gas Usage: 1731 - 2156
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:820

path[1]

--------------------
Initial State:

Account: [CREATOR], balance: 0x7173a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256), txdata: 0x791ac94700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BtswapRouter
Function name: swapExactETHForTokens(uint256,address[],address,uint256)
PC address: 14544
Estimated Gas Usage: 527 - 622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:892

require(deadline >= block.timestamp, "BtswapRouter: EXPIRED")

--------------------
Initial State:

Account: [CREATOR], balance: 0x100050005a318, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: swapExactETHForTokens(uint256,address[],address,uint256), txdata: 0x7ff36ab50000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BtswapRouter
Function name: swapExactETHForTokens(uint256,address[],address,uint256)
PC address: 14725
Estimated Gas Usage: 1420 - 1845
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:723

path[0]

--------------------
Initial State:

Account: [CREATOR], balance: 0x20005fe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: swapExactETHForTokens(uint256,address[],address,uint256), txdata: 0x7ff36ab50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: BtswapRouter
Function name: getAmountIn(uint256,uint256,uint256)
PC address: 16256
Estimated Gas Usage: 2973 - 38431
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:838

IBtswapFactory(factory).getAmountIn(amountOut, reserveIn, reserveOut)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8080808080808080808080800008804080401000800840018080808080808080808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de95000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002400210000002008000080000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x1
Caller: [ATTACKER], function: getAmountIn(uint256,uint256,uint256), txdata: 0x85f8c259000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BtswapRouter
Function name: swapTokensForExactTokens(uint256,uint256,address[],address,uint256)
PC address: 16334
Estimated Gas Usage: 622 - 717
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:892

require(deadline >= block.timestamp, "BtswapRouter: EXPIRED")

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000004000787be, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: swapTokensForExactTokens(uint256,uint256,address[],address,uint256), txdata: 0x8803dbee00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BtswapRouter
Function name: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)
PC address: 17256
Estimated Gas Usage: 30919 - 454758
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:492

factory

--------------------
Initial State:

Account: [CREATOR], balance: 0x8a0a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8080808080808080808080800000000000000000000000008080808080808080808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de95000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002800002400000008010100000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BtswapRouter
Function name: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)
PC address: 17317
Estimated Gas Usage: 30919 - 454758
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:492

factory

--------------------
Initial State:

Account: [CREATOR], balance: 0x8a0a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8080808080808080808080800000000000000000000000008080808080808080808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de95000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002800002400000008010100000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BtswapRouter
Function name: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)
PC address: 17577
Estimated Gas Usage: 51336 - 756900
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:492

IBtswapFactory(factory).pairFor(factory, tokenA, tokenB)

--------------------
Initial State:

Account: [CREATOR], balance: 0x66014, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de95000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000003800000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: BtswapRouter
Function name: pairFor(address,address)
PC address: 17577
Estimated Gas Usage: 3797 - 39585
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:492

IBtswapFactory(factory).pairFor(factory, tokenA, tokenB)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40c004200000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0xfffff, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: f9f9f9f9f9f9f9f9f9f9f9f9000000000000000000000000f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de95000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x1
Caller: [ATTACKER], function: pairFor(address,address), txdata: 0x96ed28f900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: BtswapRouter
Function name: quote(uint256,uint256,uint256)
PC address: 17842
Estimated Gas Usage: 2974 - 38432
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:830

IBtswapFactory(factory).quote(amountA, reserveA, reserveB)

--------------------
Initial State:

Account: [CREATOR], balance: 0xc00, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0808080808080808080808080480044010400001000004000808080808080808080808080808080808080808deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de95000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002400810020000004000084000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x1
Caller: [ATTACKER], function: quote(uint256,uint256,uint256), txdata: 0xad615dec000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BtswapRouter
Function name: removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)
PC address: 17920
Estimated Gas Usage: 440 - 535
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:892

require(deadline >= block.timestamp, "BtswapRouter: EXPIRED")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256), txdata: 0xaf2979eb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BtswapRouter
Function name: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)
PC address: 18508
Estimated Gas Usage: 524 - 619
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:892

require(deadline >= block.timestamp, "BtswapRouter: EXPIRED")

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000783ba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de950000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BtswapRouter
Function name: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)
PC address: 18689
Estimated Gas Usage: 1417 - 1842
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:803

path[0]

--------------------
Initial State:

Account: [CREATOR], balance: 0x7fe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de950000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001300000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BtswapRouter
Function name: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)
PC address: 19000
Estimated Gas Usage: 30919 - 454758
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:805

IBtswapETH(WETH).deposit.value(amountIn)()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de95000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000200010102041002000001deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BtswapRouter
Function name: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)
PC address: 19145
Estimated Gas Usage: 4815 - 40181
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:806

path[1]

--------------------
Initial State:

Account: [CREATOR], balance: 0x21400400000fbe80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de950000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BtswapRouter
Function name: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)
PC address: 19317
Estimated Gas Usage: 30919 - 454758
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:806

IBtswapETH(WETH).transfer(pairFor(path[0], path[1]), amountIn)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de95000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000200010102041002000001deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BtswapRouter
Function name: removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)
PC address: 20112
Estimated Gas Usage: 520 - 615
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:892

require(deadline >= block.timestamp, "BtswapRouter: EXPIRED")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: removeLiquidity(address,address,uint256,uint256,uint256,address,uint256), txdata: 0xbaa2abde0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BtswapRouter
Function name: removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)
PC address: 20454
Estimated Gas Usage: 12716 - 188073
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:581

IBtswapPairToken(pair).transferFrom(msg.sender, pair, liquidity)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: removeLiquidity(address,address,uint256,uint256,uint256,address,uint256), txdata: 0xbaa2abde000000000000000000000000020201010101020202020301010301020201020100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000109afcb440000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000800000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BtswapRouter
Function name: removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)
PC address: 20454
Estimated Gas Usage: 18122 - 263837
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:581

IBtswapPairToken(pair).transferFrom(msg.sender, pair, liquidity)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32), txdata: 0x2195995c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009afcbvalue: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BtswapRouter
Function name: removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)
PC address: 20671
Estimated Gas Usage: 18132 - 263847
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:582

IBtswapPairToken(pair).burn(to)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32), txdata: 0x2195995c000000000000000000000000010101010202020201010101020202020101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000109afcb440000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000b000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BtswapRouter
Function name: removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)
PC address: 20747
Estimated Gas Usage: 12716 - 188073
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:583

BT

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: removeLiquidity(address,address,uint256,uint256,uint256,address,uint256), txdata: 0xbaa2abde000000000000000000000000010101020202020101010102020202030101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000109afcb440000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000c00000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BtswapRouter
Function name: removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)
PC address: 20985
Estimated Gas Usage: 18122 - 263837
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:583

IBtswapToken(BT).liquidity(msg.sender, pair)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 80808080808080808080808000000000000000000000000080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32), txdata: 0x2195995c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009afcbvalue: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BtswapRouter
Function name: removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)
PC address: 20985
Estimated Gas Usage: 12706 - 188063
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:583

IBtswapToken(BT).liquidity(msg.sender, pair)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: removeLiquidity(address,address,uint256,uint256,uint256,address,uint256), txdata: 0xbaa2abde00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009afcb4400000000000000000000000000000000000000000000000000000001840000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000860000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BtswapRouter
Function name: removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)
PC address: 21049
Estimated Gas Usage: 12716 - 188073
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:584

factory

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: removeLiquidity(address,address,uint256,uint256,uint256,address,uint256), txdata: 0xbaa2abde000000000000000000000000010101020202020101010102020202030101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000109afcb440000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000c00000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BtswapRouter
Function name: weth(address)
PC address: 22535
Estimated Gas Usage: 9728 - 115630
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:856

IBtswapFactory(factory).getPair(token, WETH)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: weth(address), txdata: 0xbe20492f0000000000000000000000000101010101010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BtswapRouter
Function name: isPair(address)
PC address: 26363
Estimated Gas Usage: 6123 - 110420
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:883

IBtswapPairToken(pair).token1()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: isPair(address), txdata: 0xe5e31b130000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BtswapRouter
Function name: addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)
PC address: 26699
Estimated Gas Usage: 527 - 622
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:892

require(deadline >= block.timestamp, "BtswapRouter: EXPIRED")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256), txdata: 0xe8evalue: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BtswapRouter
Function name: addLiquidityETH(address,uint256,uint256,uint256,address,uint256)
PC address: 27418
Estimated Gas Usage: 465 - 560
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:892

require(deadline >= block.timestamp, "BtswapRouter: EXPIRED")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1475e2d00000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addLiquidityETH(address,uint256,uint256,uint256,address,uint256), txdata: 0xf305d719000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: BtswapRouter
Function name: swapETHForExactTokens(uint256,address[],address,uint256)
PC address: 28632
Estimated Gas Usage: 570 - 665
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:892

require(deadline >= block.timestamp, "BtswapRouter: EXPIRED")

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000000003c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: swapETHForExactTokens(uint256,address[],address,uint256), txdata: 0xfb3bdb410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BtswapRouter
Function name: swapETHForExactTokens(uint256,address[],address,uint256)
PC address: 28813
Estimated Gas Usage: 1463 - 1888
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:752

path[0]

--------------------
Initial State:

Account: [CREATOR], balance: 0x9fe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: swapETHForExactTokens(uint256,address[],address,uint256), txdata: 0xfb3bdb410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BtswapRouter
Function name: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)
PC address: 33081
Estimated Gas Usage: 30919 - 454758
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:767

factory

--------------------
Initial State:

Account: [CREATOR], balance: 0x8a0a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8080808080808080808080800000000000000000000000008080808080808080808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de95000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002800002400000008010100000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BtswapRouter
Function name: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)
PC address: 33924
Estimated Gas Usage: 30919 - 454758
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:775

factory

--------------------
Initial State:

Account: [CREATOR], balance: 0x8a0a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8080808080808080808080800000000000000000000000008080808080808080808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de95000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002800002400000008010100000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BtswapRouter
Function name: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)
PC address: 34148
Estimated Gas Usage: 30919 - 454758
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:777

BT

--------------------
Initial State:

Account: [CREATOR], balance: 0x8a0a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8080808080808080808080800000000000000000000000008080808080808080808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de95000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002800002400000008010100000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: BtswapRouter
Function name: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)
PC address: 34446
Estimated Gas Usage: 51336 - 756900
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:777

IBtswapToken(BT).swap(msg.sender, input, amountInput, output)

--------------------
Initial State:

Account: [CREATOR], balance: 0xa, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 80808080808080808080808080808080808080808080808080808080808080808080808080808080808080800000000000000000000000000000000000000000808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de95000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000003000340042000804010008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BtswapRouter
Function name: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)
PC address: 34446
Estimated Gas Usage: 30919 - 454758
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:777

IBtswapToken(BT).swap(msg.sender, input, amountInput, output)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8a0a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8080808080808080808080800000000000000000000000008080808080808080808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de95000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002800002400000008010100000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: BtswapRouter
Function name: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)
PC address: 34966
Estimated Gas Usage: 30919 - 454758
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:780

pair.swap(amount0Out, amount1Out, to, new bytes(0))

--------------------
Initial State:

Account: [CREATOR], balance: 0x8a0a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 8080808080808080808080800000000000000000000000008080808080808080808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256), txdata: 0xb6f9de95000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002800002400000008010100000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BtswapRouter
Function name: addLiquidityETH(address,uint256,uint256,uint256,address,uint256)
PC address: 36782
Estimated Gas Usage: 12501 - 153582
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol:518

assert(amountAOptimal <= amountADesired)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addLiquidityETH(address,uint256,uint256,uint256,address,uint256), txdata: 0xf305d719000000000000000000000000010101010101010101010101010101010000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0xa4dc97a565e2364cdeb4efe38c0f153bccb62b01.sol
Tool Runtime = 10950.277746933018 seconds
#############################################