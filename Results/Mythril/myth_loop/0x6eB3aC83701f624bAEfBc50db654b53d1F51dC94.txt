==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SupplySchedule
Function name: constructor
PC address: 162
Estimated Gas Usage: 24306 - 144905
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:1452

200 * SafeDecimalMath.unit()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SupplySchedule
Function name: constructor
PC address: 165
Estimated Gas Usage: 24306 - 144905
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:1452

uint public minterReward = 200 * SafeDecimalMath.unit()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Proxy
Function name: fallback
PC address: 333
Estimated Gas Usage: 4194 - 75392
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:264

target.setMessageSender(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3822, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000001000040, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setTarget(address), txdata: 0x776d1a01000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x80000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Proxy
Function name: fallback
PC address: 371
Estimated Gas Usage: 4056 - 75254
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:271

sload(target_slot)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Proxy
Function name: fallback
PC address: 373
Estimated Gas Usage: 4056 - 75254
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:271

call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Proxy
Function name: fallback
PC address: 373
Estimated Gas Usage: 4194 - 75392
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:271

call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x80000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SupplySchedule
Function name: constructor
PC address: 475
Estimated Gas Usage: 24306 - 144905
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:112

owner = _owner

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SupplySchedule
Function name: constructor
PC address: 635
Estimated Gas Usage: 24306 - 144905
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:1483

lastMintEvent = _lastMintEvent

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SupplySchedule
Function name: constructor
PC address: 642
Estimated Gas Usage: 24306 - 144905
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:1484

weekCounter = _currentWeek

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 01010101010101010101010101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SupplySchedule
Function name: mintableSupply()
PC address: 1889
Estimated Gas Usage: 1168 - 1544
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:1574

now - lastMintEvent

--------------------
Initial State:

Account: [CREATOR], balance: 0x2008204, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000480081001010202014020010100400002048001fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8, value: 0x0
Caller: [CREATOR], function: mintableSupply(), txdata: 0xcc5c095c, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SupplySchedule
Function name: isMintable()
PC address: 1895
Estimated Gas Usage: 986 - 1081
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:1574

if (now - lastMintEvent > MINT_PERIOD_DURATION) {
            return true;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000400031000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: isMintable(), txdata: 0x46b45af7, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SupplySchedule
Function name: terminalInflationSupply(uint256,uint256)
PC address: 4528
Estimated Gas Usage: 5966 - 110073
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:1555

SafeDecimalMath.unit()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setSynthetixProxy(address), txdata: 0x95896b760000000000000000000000000101080101010101010101010104802000010101, value: 0x0
Caller: [ATTACKER], function: terminalInflationSupply(uint256,uint256), txdata: 0xb3b2bcc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SupplySchedule
Function name: terminalInflationSupply(uint256,uint256)
PC address: 4528
Estimated Gas Usage: 5966 - 110073
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:1555

SafeDecimalMath.unit()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: terminalInflationSupply(uint256,uint256), txdata: 0xb3b2bcc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SupplySchedule
Function name: mintableSupply()
PC address: 4737
Estimated Gas Usage: 3059 - 3154
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:1505

while (remainingWeeksToMint > 0) {
            currentWeek++;

            if (currentWeek < SUPPLY_DECAY_START) {
                // If current week is before supply decay we add initial supply to mintableSupply
                totalAmount = totalAmount.add(INITIAL_WEEKLY_SUPPLY);
                remainingWeeksToMint--;
            } else if (currentWeek <= SUPPLY_DECAY_END) {
                // if current week before supply decay ends we add the new supply for the week
                // diff between current week and (supply decay start week - 1)
                uint decayCount = currentWeek.sub(SUPPLY_DECAY_START - 1);

                totalAmount = totalAmount.add(tokenDecaySupplyForWeek(decayCount));
                remainingWeeksToMint--;
            } else {
                // Terminal supply is calculated on the total supply of Synthetix including any new supply
                // We can compound the remaining week's supply at the fixed terminal rate
                uint totalSupply = IERC20(synthetixProxy).totalSupply();
                uint currentTotalSupply = totalSupply.add(totalAmount);

                totalAmount = totalAmount.add(terminalInflationSupply(currentTotalSupply, remainingWeeksToMint));
                remainingWeeksToMint = 0;
            }
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: mintableSupply(), txdata: 0xcc5c095c, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SupplySchedule
Function name: mintableSupply()
PC address: 4742
Estimated Gas Usage: 3395 - 3771
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:1506

currentWeek++

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, value: 0x0
Caller: [SOMEGUY], function: setMinterReward(uint256), txdata: 0x4ae26521000000000000000000000000000000000000000000000002d80ebc5ad0200001, value: 0x0
Caller: [ATTACKER], function: mintableSupply(), txdata: 0xcc5c095c, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SupplySchedule
Function name: weeksSinceLastIssuance()
PC address: 5279
Estimated Gas Usage: 1115 - 1210
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:394

require(b <= a, "SafeMath: subtraction overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000020, value: 0x0
Caller: [CREATOR], function: weeksSinceLastIssuance(), txdata: 0xdbd3a6a7, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SupplySchedule
Function name: tokenDecaySupplyForWeek(uint256)
PC address: 5508
Estimated Gas Usage: 6979 - 79589
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:1417

SafeDecimalMath.unit()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: tokenDecaySupplyForWeek(uint256), txdata: 0x4e070f500000000000000000000000000000000000000000000000000000000000000034, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: SupplySchedule
Function name: tokenDecaySupplyForWeek(uint256)
PC address: 5508
Estimated Gas Usage: 4681 - 74981
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:1417

SafeDecimalMath.unit()

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: tokenDecaySupplyForWeek(uint256), txdata: 0x4e070f500000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: SupplySchedule
Function name: recordMintEvent(uint256)
PC address: 5736
Estimated Gas Usage: 4779 - 39671
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:379

require(c >= a, "SafeMath: addition overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x40001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000004, value: 0x0
Caller: [ATTACKER], function: recordMintEvent(uint256), txdata: 0x7e7961d71010101010101010101010101010101010101010101010101010101010101010, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SupplySchedule
Function name: terminalInflationSupply(uint256,uint256)
PC address: 5880
Estimated Gas Usage: 5966 - 110073
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/1/0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol:417

a * b

--------------------
Initial State:

Account: [CREATOR], balance: 0x400810000000c0c02, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000010, value: 0x0
Caller: [SOMEGUY], function: terminalInflationSupply(uint256,uint256), txdata: 0xb3b2bcc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x6eB3aC83701f624bAEfBc50db654b53d1F51dC94.sol
Tool Runtime = 5245.946105395997 seconds
#############################################