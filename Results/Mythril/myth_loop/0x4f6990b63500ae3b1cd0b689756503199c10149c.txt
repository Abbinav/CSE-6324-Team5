==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 8519
Estimated Gas Usage: 24090 - 137339
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:614

totalAssets

--------------------
Initial State:

Account: [CREATOR], balance: 0xe00000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],uint256,bool), txdata: 0x6a8c5b07000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000000000000000000000000000000000000000004240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: mint(uint256,address), txdata: 0x94bf804d28102000000000000000000000000000000000000000000000000000000000008c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 8627
Estimated Gas Usage: 24090 - 137339
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:540

dusd

--------------------
Initial State:

Account: [CREATOR], balance: 0xe00000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],uint256,bool), txdata: 0x6a8c5b07000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000000000000000000000000000000000000000004240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: mint(uint256,address), txdata: 0x94bf804d28102000000000000000000000000000000000000000000000000000000000008c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 8756
Estimated Gas Usage: 34211 - 203411
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:540

dusd.totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000000002, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],uint256,bool), txdata: 0x6a8c5b07000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000005620000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: mint(uint256,address), txdata: 0x94bf804d0001f28420200c8019c622834a080a4a4b004fefffffffd71effeffffff9e3fe8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 8830
Estimated Gas Usage: 34211 - 203411
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:542

inDeficit

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000086400000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],uint256,bool), txdata: 0x6a8c5b07000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000000000000000000000000000000000000000006080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: mint(uint256,address), txdata: 0x94bf804d11cf4010000000000000000000000000000000000000000000000000003250068c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 8932
Estimated Gas Usage: 34211 - 203411
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:544

inDeficit = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000086400000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],uint256,bool), txdata: 0x6a8c5b07000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000000000000000000000000000000000000000006080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: mint(uint256,address), txdata: 0x94bf804d11cf4010000000000000000000000000000000000000000000000000003250068c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 9002
Estimated Gas Usage: 34211 - 203411
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:546

totalAssets

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000086400000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],uint256,bool), txdata: 0x6a8c5b07000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000000000000000000000000000000000000000006080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: mint(uint256,address), txdata: 0x94bf804d11cf4010000000000000000000000000000000000000000000000000003250068c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 9134
Estimated Gas Usage: 24090 - 137339
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:547

inDeficit

--------------------
Initial State:

Account: [CREATOR], balance: 0xe00000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],uint256,bool), txdata: 0x6a8c5b07000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000000000000000000000000000000000000000004240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: mint(uint256,address), txdata: 0x94bf804d28102000000000000000000000000000000000000000000000000000000000008c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: systemCoins(uint256)
PC address: 9429
Estimated Gas Usage: 1101 - 1196
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:509

address[] public systemCoins

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: systemCoins(uint256), txdata: 0xa019c64e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: peaksAddresses(uint256)
PC address: 10280
Estimated Gas Usage: 1145 - 1240
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:527

address[] public peaksAddresses

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: peaksAddresses(uint256), txdata: 0xcc3d44e20000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: setPeakStatus(address,uint256,uint8)
PC address: 10882
Estimated Gas Usage: 8464 - 30070
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:798

peaks[peak].state = state

--------------------
Initial State:

Account: [CREATOR], balance: 0x44000000002000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],uint256,bool), txdata: 0x6a8c5b070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002010201808004010404008000024080080000820000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: setPeakStatus(address,uint256,uint8), txdata: 0xde8f810b070707070707070707070707000000000000000000000000000000000000000007070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: feed(uint256)
PC address: 11845
Estimated Gas Usage: 1122 - 1217
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:510

uint[] public feed

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: feed(uint256), txdata: 0xf59dfdfb0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Core
Function name: dusdToUsd(uint256,bool)
PC address: 13347
Estimated Gas Usage: 1328 - 2034
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop1/0x4f6990b63500ae3b1cd0b689756503199c10149c.sol:167

a * b

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,uint256,uint256), txdata: 0xa6b63eb800000000000000000000000010010101010101010404010120010201010101010000000000000000000000000101010101010101010801010101012001010101000000000000000000000000010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000821, value: 0x0
Caller: [ATTACKER], function: dusdToUsd(uint256,bool), txdata: 0x40779694d00000000000004bdf46205e80306336ac632e947383262e918cbd019a1923000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x4f6990b63500ae3b1cd0b689756503199c10149c.sol
Tool Runtime = 3528.3520999620087 seconds
#############################################