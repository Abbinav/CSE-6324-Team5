==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HelixNebulaV2
Function name: LockAddress(uint256)
PC address: 4971
Estimated Gas Usage: 4671 - 5286
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:149

if(LockedAddresses[i].ExpireTime>block.timestamp){
                    LockedAddresses[i].ExpireTime=LockedAddresses[i].ExpireTime + _days*24*3600;
                }else{
                    LockedAddresses[i].ExpireTime=block.timestamp + _days*24*3600;
                }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LockAddress(uint256), txdata: 0x2777e69a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: LockAddress(uint256), txdata: 0x2777e69a2727272727272727272727272727272727272727272727272727272727272727, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: HelixNebulaV2
Function name: LockAddress(uint256)
PC address: 4978
Estimated Gas Usage: 20768 - 82277
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:150

_days*24

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LockAddress(uint256), txdata: 0x2777e69a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: LockAddress(uint256), txdata: 0x2777e69a3000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: HelixNebulaV2
Function name: LockAddress(uint256)
PC address: 4979
Estimated Gas Usage: 12360 - 33165
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:150

_days*24*3600

--------------------
Initial State:

Account: [CREATOR], balance: 0x201000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: LockAddress(uint256), txdata: 0x2777e69a00260000000000000000000000004000000000000000000000123806200d01ea, value: 0x0
Caller: [ATTACKER], function: LockAddress(uint256), txdata: 0x2777e69a000955aac9072aaadaaab806bab7001564000555857035cb76ac001560f98000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: HelixNebulaV2
Function name: LockAddress(uint256)
PC address: 5013
Estimated Gas Usage: 12360 - 33165
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:150

LockedAddresses[i].ExpireTime + _days*24*3600

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: LockAddress(uint256), txdata: 0x2777e69a009e280000800000000000000002020028000000000000556993acb5ea88a0d5, value: 0x0
Caller: [CREATOR], function: LockAddress(uint256), txdata: 0x2777e69a02f010a00000000008080800200008000101140800009005280d080003154040, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: HelixNebulaV2
Function name: LockAddress(uint256)
PC address: 5061
Estimated Gas Usage: 20768 - 82277
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:152

_days*24

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LockAddress(uint256), txdata: 0x2777e69a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: LockAddress(uint256), txdata: 0x2777e69a3000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: HelixNebulaV2
Function name: LockAddress(uint256)
PC address: 5062
Estimated Gas Usage: 10646 - 31356
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:152

_days*24*3600

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: LockAddress(uint256), txdata: 0x2777e69a0014040000008000000000000000000000000000b100000d00000001a08240a0, value: 0x0
Caller: [ATTACKER], function: LockAddress(uint256), txdata: 0x2777e69a200356ad603ab2aac0ac2b5ab15b00055616b600002000000ab8000085570431, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: HelixNebulaV2
Function name: LockAddress(uint256)
PC address: 5064
Estimated Gas Usage: 10646 - 31356
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:152

block.timestamp + _days*24*3600

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: LockAddress(uint256), txdata: 0x2777e69a0102000000210000000000000000000000373e04c0accc8ccccc80c891d10501, value: 0x0
Caller: [SOMEGUY], function: LockAddress(uint256), txdata: 0x2777e69a00e3400390002d8700000000020009dc268000013800c04060000408811f2820, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: HelixNebulaV2
Function name: LockAddress(uint256)
PC address: 5141
Estimated Gas Usage: 18128 - 79212
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:157

_days*24

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: LockAddress(uint256), txdata: 0x2777e69a3000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: HelixNebulaV2
Function name: LockAddress(uint256)
PC address: 5142
Estimated Gas Usage: 18128 - 79212
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:157

_days*24*3600

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: LockAddress(uint256), txdata: 0x2777e69a002000000000000000c3018e38e38e38e38e38e38e38e38e38e3b1c71c72bcf4, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: HelixNebulaV2
Function name: LockAddress(uint256)
PC address: 5144
Estimated Gas Usage: 18128 - 79212
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:157

block.timestamp+_days*24*3600

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: LockAddress(uint256), txdata: 0x2777e69a0100000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HelixNebulaV2
Function name: IsLockAddress(address)
PC address: 5526
Estimated Gas Usage: 4659 - 5274
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:171

if(LockedAddresses[i].ExpireTime>block.timestamp){
                   return true;
                }else{
                    return false;
                }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: LockAddress(uint256), txdata: 0x2777e69a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: IsLockAddress(address), txdata: 0x3afd497c272727272727272727272727deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: HelixNebulaV2
Function name: SendTransaction(address,address)
PC address: 6107
Estimated Gas Usage: 10340 - 11945
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:315

ETHPrice/(Hamount*5)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: SetHelixStorage(address), txdata: 0xb7b4e580000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: SendTransaction(address,address), txdata: 0x5517bd5db7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: HelixNebulaV2
Function name: SendTransaction(address,address)
PC address: 6295
Estimated Gas Usage: 28016 - 106045
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:322

balances[Pool_Address]-minpoolcap

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: SetHelixStorage(address), txdata: 0xb7b4e580000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: SendTransaction(address,address), txdata: 0x5517bd5db7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7750343f8327fc50b77cd805974c08f08700f79f9, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: HelixNebulaV2
Function name: SendTransaction(address,address)
PC address: 6301
Estimated Gas Usage: 28016 - 106045
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:322

totalSupply+Hamount-(balances[Pool_Address]-minpoolcap)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: SetHelixStorage(address), txdata: 0xb7b4e580000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: SendTransaction(address,address), txdata: 0x5517bd5db7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7bb1a016f07400696eda537658a7d76e35c61f31a, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: HelixNebulaV2
Function name: LockedAddresses(uint256)
PC address: 9448
Estimated Gas Usage: 1123 - 1218
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:105

LockedAddress[] public LockedAddresses

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: LockedAddresses(uint256), txdata: 0xba4e92c90000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: HelixNebulaV2
Function name: GetEOGPrice()
PC address: 10835
Estimated Gas Usage: 7200 - 43838
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:306

EIP20Interface(Weth_Address).balanceOf(Pool_Address)*10**7

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002912353f479fde7f2e, value: 0x0
Caller: [ATTACKER], function: GetEOGPrice(), txdata: 0xfd827f5b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HelixNebulaV2
Function name: SendTransaction(address,address)
PC address: 11017
Estimated Gas Usage: 2099 - 2524
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:63

require((z = x - y) <= x, 'ds-math-sub-underflow')

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: SetHelixStorage(address), txdata: 0xb7b4e580000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: SendTransaction(address,address), txdata: 0x5517bd5db7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HelixNebulaV2
Function name: SendTransaction(address,address)
PC address: 11173
Estimated Gas Usage: 2138 - 2563
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:283

if(block.timestamp.sub(ReleaseTime)<oneDaytime*30){     
          return 10;    //first month: 10 EOG token Per 1 ETH Help
      }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: SetHelixStorage(address), txdata: 0xb7b4e580000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: SendTransaction(address,address), txdata: 0x5517bd5db7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HelixNebulaV2
Function name: SendTransaction(address,address)
PC address: 11214
Estimated Gas Usage: 3072 - 3497
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:286

if(block.timestamp.sub(ReleaseTime)<oneDaytime*60){     
          return 8;    //second month: 8 EOG token Per 1 ETH Help
      }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: SetHelixStorage(address), txdata: 0xb7b4e580000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: SendTransaction(address,address), txdata: 0x5517bd5db7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HelixNebulaV2
Function name: SendTransaction(address,address)
PC address: 11255
Estimated Gas Usage: 4006 - 4431
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:289

if(block.timestamp.sub(ReleaseTime)<oneDaytime*90){     
          return 6;    //third month: 6 EOG token Per 1 ETH Help
      }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: SetHelixStorage(address), txdata: 0xb7b4e580000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: SendTransaction(address,address), txdata: 0x5517bd5db7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HelixNebulaV2
Function name: SendTransaction(address,address)
PC address: 11296
Estimated Gas Usage: 4940 - 5365
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:292

if(block.timestamp.sub(ReleaseTime)<oneDaytime*120){     
          return 4;    //fourth month: 4 EOG token Per 1 ETH Help
      }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: SetHelixStorage(address), txdata: 0xb7b4e580000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: SendTransaction(address,address), txdata: 0x5517bd5db7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HelixNebulaV2
Function name: SendTransaction(address,address)
PC address: 11337
Estimated Gas Usage: 5874 - 6299
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:295

if(block.timestamp.sub(ReleaseTime)<oneDaytime*150){     
          return 2;    //fifth month: 2 EOG token Per 1 ETH Help
      }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: SetHelixStorage(address), txdata: 0xb7b4e580000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: SendTransaction(address,address), txdata: 0x5517bd5db7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HelixNebulaV2
Function name: SendTransaction(address,address)
PC address: 11378
Estimated Gas Usage: 6808 - 7233
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop5/0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol:298

if(block.timestamp.sub(ReleaseTime)>oneDaytime*150){     
          return 1;    //after five month: 1 EOG token Per 1 ETH Help
      }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: SetHelixStorage(address), txdata: 0xb7b4e580000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: SendTransaction(address,address), txdata: 0x5517bd5db7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7b7, value: 0x0



---------------------------------------------
For contract 0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9.sol
Tool Runtime = 3852.471362297998 seconds
#############################################