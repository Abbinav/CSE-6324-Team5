==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: systemCoins(uint256)
PC address: 6871
Estimated Gas Usage: 1123 - 1218
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:504

address[] public systemCoins

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: systemCoins(uint256), txdata: 0xa019c64e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: peaksAddresses(uint256)
PC address: 6933
Estimated Gas Usage: 1145 - 1240
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:522

address[] public peaksAddresses

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: peaksAddresses(uint256), txdata: 0xcc3d44e20000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Core
Function name: harvest()
PC address: 7137
Estimated Gas Usage: 19079 - 126780
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:595

dusd.totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],uint256,bool), txdata: 0x6a8c5b070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: harvest(), txdata: 0x4641257d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: setPeakStatus(address,uint256,uint8)
PC address: 7789
Estimated Gas Usage: 8486 - 30092
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:690

peaks[peak].state = state

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],uint256,bool), txdata: 0x6a8c5b070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080400808808020200480401080804000208040030000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: setPeakStatus(address,uint256,uint8), txdata: 0xde8f810b070707070707070707070707000000000000000000000000000000000000000007070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707070707, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: feed(uint256)
PC address: 8445
Estimated Gas Usage: 1144 - 1239
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:505

uint[] public feed

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: feed(uint256), txdata: 0xf59dfdfb0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Core
Function name: dusdToUsd(uint256,bool)
PC address: 8634
Estimated Gas Usage: 480 - 856
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/8/0x05977619e19fbc2f94bde352a78353b54dd918df.sol:167

a * b

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000020000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setFee(uint256,uint256), txdata: 0x52f7c98800000000000000000000000000000000000000000000000000000000000019100000000000000000000000000000000000000000000000000000000000000720, value: 0x0
Caller: [SOMEGUY], function: dusdToUsd(uint256,bool), txdata: 0x4077969480401757000005843601800005281480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x05977619e19fbc2f94bde352a78353b54dd918df.sol
Tool Runtime = 3283.6744982240198 seconds
#############################################