==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Comptroller
Function name: earned(address)
PC address: 1375
Estimated Gas Usage: 5497 - 75278
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop4/0xf79b548ff56E661ee19a59303178E444E9e81FCc.sol:524

dusd.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0930, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: earned(address), txdata: 0x008cc2620000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Comptroller
Function name: allocations(uint256)
PC address: 1807
Estimated Gas Usage: 1079 - 1174
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop4/0xf79b548ff56E661ee19a59303178E444E9e81FCc.sol:488

uint[] public allocations

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000042, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: allocations(uint256), txdata: 0x0a2642bf0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Comptroller
Function name: harvest()
PC address: 2150
Estimated Gas Usage: 6352 - 76108
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop4/0xf79b548ff56E661ee19a59303178E444E9e81FCc.sol:506

dusd.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: harvest(), txdata: 0x4641257d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Comptroller
Function name: harvest()
PC address: 2268
Estimated Gas Usage: 4579 - 73959
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop4/0xf79b548ff56E661ee19a59303178E444E9e81FCc.sol:509

address[] memory _beneficiaries = beneficiaries

--------------------
Initial State:

Account: [CREATOR], balance: 0x1202, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: harvest(), txdata: 0x4641257d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Comptroller
Function name: harvest()
PC address: 2297
Estimated Gas Usage: 6352 - 76108
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop4/0xf79b548ff56E661ee19a59303178E444E9e81FCc.sol:509

address[] memory _beneficiaries = beneficiaries

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: harvest(), txdata: 0x4641257d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Comptroller
Function name: beneficiaries(uint256)
PC address: 3775
Estimated Gas Usage: 1122 - 1217
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop4/0xf79b548ff56E661ee19a59303178E444E9e81FCc.sol:487

address[] public beneficiaries

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000042, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: beneficiaries(uint256), txdata: 0xefeb5e580000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0xf79b548ff56E661ee19a59303178E444E9e81FCc.sol
Tool Runtime = 2583.2980621809984 seconds
#############################################