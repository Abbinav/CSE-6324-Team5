==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: YugiFarming
Function name: updateReward(uint256,uint256)
PC address: 1724
Estimated Gas Usage: 2021 - 2446
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0xb21188c0d4eea42ab6fb93df0ba7d4cbfc20b4ed.sol:1556

poolList[_pid]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateReward(uint256,uint256), txdata: 0x0b50cd3e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: YugiFarming
Function name: poolList(uint256)
PC address: 1908
Estimated Gas Usage: 1102 - 1197
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0xb21188c0d4eea42ab6fb93df0ba7d4cbfc20b4ed.sol:1064

PoolList[] public poolList

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: poolList(uint256), txdata: 0x2a48235b0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: YugiFarming
Function name: decreaseRewardSupply(uint256,uint256)
PC address: 5904
Estimated Gas Usage: 2042 - 2467
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0xb21188c0d4eea42ab6fb93df0ba7d4cbfc20b4ed.sol:1602

poolList[_pid]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: decreaseRewardSupply(uint256,uint256), txdata: 0x49ed393c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: YugiFarming
Function name: pendingRewardsFromPool(uint256,address)
PC address: 6377
Estimated Gas Usage: 1394 - 2627
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0xb21188c0d4eea42ab6fb93df0ba7d4cbfc20b4ed.sol:1244

poolList[_pid]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: pendingRewardsFromPool(uint256,address), txdata: 0x93fcd29100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: YugiFarming
Function name: addRewardSupply(uint256,uint256)
PC address: 7519
Estimated Gas Usage: 2064 - 2489
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0xb21188c0d4eea42ab6fb93df0ba7d4cbfc20b4ed.sol:1578

poolList[_pid]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addRewardSupply(uint256,uint256), txdata: 0x97bc4e5c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: YugiFarming
Function name: addRewardSupply(uint256,uint256)
PC address: 7676
Estimated Gas Usage: 21503 - 82448
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/7/0xb21188c0d4eea42ab6fb93df0ba7d4cbfc20b4ed.sol:1588

pool.rewardRemains += _addAmount

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addPool(address,address,address,uint256,uint256), txdata: 0xaf15f53200000000000000000000000000000000000000000000000000040800000108010000000000000000000000000002000000020002000000000002000000000000000000000000000000000000000004000000000100000400000004000400040020200202000208020401000002040101400000000400000404010010801020404080200002200220000110800200000480808002201000018002080880082001, value: 0x0
Caller: [CREATOR], function: addRewardSupply(uint256,uint256), txdata: 0x97bc4e5c0000000000000000000000000000000000000000000000000000000000000000c000000000000002200800800024800000108120000000000000010000000010, value: 0x0



---------------------------------------------
For contract 0xb21188c0d4eea42ab6fb93df0ba7d4cbfc20b4ed.sol
Tool Runtime = 273.0926636469958 seconds
#############################################