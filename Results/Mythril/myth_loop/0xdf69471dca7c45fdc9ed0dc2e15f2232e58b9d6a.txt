==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: uniswapV2Call(address,uint256,uint256,bytes)
PC address: 1868
Estimated Gas Usage: 2086 - 5193
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:1212

require(msg.sender == uniswap_pair, "bad msg.sender")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000081040082000024002010401040801010102010200000000000000000000000002, value: 0x0
Caller: [SOMEGUY], function: uniswapV2Call(address,uint256,uint256,bytes), txdata: 0x10d1e85c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005e, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: addTransaction(address,bytes)
PC address: 3491
Estimated Gas Usage: 1615 - 2040
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:860

require(msg.sender == gov)

--------------------
Initial State:

Account: [CREATOR], balance: 0x205cd48, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000080100000000001080000020804008040820000000000000000000000000000008, value: 0x0
Caller: [SOMEGUY], function: addTransaction(address,bytes), txdata: 0x126e19be8080808080808080808080808080808080808080808080808080808080800000000000000000000000000000000000000000000000000000000000000000001e, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: setRebaseTimingParameters(uint256,uint256,uint256)
PC address: 3927
Estimated Gas Usage: 1494 - 1919
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:860

require(msg.sender == gov)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000040000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000400000000000020410000000000000000102010400000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: setRebaseTimingParameters(uint256,uint256,uint256), txdata: 0x16250fd4010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: setRebaseLag(uint256)
PC address: 4080
Estimated Gas Usage: 1303 - 1728
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:860

require(msg.sender == gov)

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c0080500060000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000800000000400000000000000100000000000000100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: setRebaseLag(uint256), txdata: 0x20ce83891010101010101010101010101010101010101010101010101010101010101010, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: removeTransaction(uint256)
PC address: 4285
Estimated Gas Usage: 1303 - 1728
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:860

require(msg.sender == gov)

--------------------
Initial State:

Account: [CREATOR], balance: 0x420c0040142060000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000800000800000000000000000000020000000000400000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: removeTransaction(uint256), txdata: 0x46c3bd1f8080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: _acceptGov()
PC address: 4749
Estimated Gas Usage: 1117 - 1542
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:1107

require(msg.sender == pendingGov, "!pending")

--------------------
Initial State:

Account: [CREATOR], balance: 0x7fe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000020000000000020000000000000010800000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: _acceptGov(), txdata: 0x4bda2e20, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: setReserveContract(address)
PC address: 5387
Estimated Gas Usage: 1329 - 1754
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:860

require(msg.sender == gov)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000800000000004080410000000010102100100010400000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: setReserveContract(address), txdata: 0x527a52c88080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: setDeviationThreshold(uint256)
PC address: 5644
Estimated Gas Usage: 1302 - 1727
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:860

require(msg.sender == gov)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000800002000004020410000000000102000000000400000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: setDeviationThreshold(uint256), txdata: 0x53a15edc8080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: init_twap()
PC address: 5894
Estimated Gas Usage: 6820 - 76885
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:1123

require(blockTimestamp > 0, "no trades")

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000020000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000900200040101000004080002000002100004020000000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: init_twap(), txdata: 0x57466c8b, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: setRebaseMintPerc(uint256)
PC address: 6147
Estimated Gas Usage: 1303 - 1728
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:860

require(msg.sender == gov)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000040000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000800000000010020404100008000000000102010400000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: setRebaseMintPerc(uint256), txdata: 0x6bf9ace78080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: setTransactionEnabled(uint256,bool)
PC address: 6314
Estimated Gas Usage: 1450 - 1875
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:860

require(msg.sender == gov)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000005000e0000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000800000002000020400000000000000100000000100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: setTransactionEnabled(uint256,bool), txdata: 0x6e9dde9980808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: _setPendingGov(address)
PC address: 6545
Estimated Gas Usage: 1307 - 1732
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:860

require(msg.sender == gov)

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0080000060001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000800000020200020000004000000000000000000100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: _setPendingGov(address), txdata: 0x73f03dff8080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: getCurrentTWAP()
PC address: 6847
Estimated Gas Usage: 7707 - 78573
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:1468

(priceCumulative - priceCumulativeLast) / timeElapsed

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000020000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000018040040200020202020804000010000000010100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getCurrentTWAP(), txdata: 0x832a3035, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: KASSIAHOTELRebaser
Function name: getCurrentTWAP()
PC address: 6848
Estimated Gas Usage: 7717 - 78583
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:1468

(priceCumulative - priceCumulativeLast) / timeElapsed

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000800000000200000000000000000000000001000100000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: getCurrentTWAP(), txdata: 0x832a3035, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: KASSIAHOTELRebaser
Function name: transactions(uint256)
PC address: 6966
Estimated Gas Usage: 1315 - 1410
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:913

Transaction[] public transactions

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000040000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000800000000004010104000000000000000100400200000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: transactions(uint256), txdata: 0x9ace38c2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KASSIAHOTELRebaser
Function name: transactions(uint256)
PC address: 7062
Estimated Gas Usage: 6607 - 8777
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:913

Transaction[] public transactions

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000901001002004010004040004000801000020000000000000000000000000000081, value: 0x0
Caller: [CREATOR], function: addTransaction(address,bytes), txdata: 0x126e19be00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: transactions(uint256), txdata: 0x9ace38c20000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: KASSIAHOTELRebaser
Function name: transactions(uint256)
PC address: 7114
Estimated Gas Usage: 6607 - 8777
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:913

Transaction[] public transactions

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000901001002004010004040004000801000020000000000000000000000000000081, value: 0x0
Caller: [CREATOR], function: addTransaction(address,bytes), txdata: 0x126e19be00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: transactions(uint256), txdata: 0x9ace38c20000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: rebase()
PC address: 7259
Estimated Gas Usage: 213 - 308
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:1153

require(msg.sender == tx.origin)

--------------------
Initial State:

Account: [CREATOR], balance: 0x7fe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000028000000000000000000100000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: rebase(), txdata: 0xaf14052c, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: setMaxSlippageFactor(uint256)
PC address: 8836
Estimated Gas Usage: 1280 - 1705
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:860

require(msg.sender == gov)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000800000000004020800000000000102000000020400000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: setMaxSlippageFactor(uint256), txdata: 0xb60e1e3effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: setTargetRate(uint256)
PC address: 9075
Estimated Gas Usage: 1279 - 1704
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:860

require(msg.sender == gov)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000800000000000020404100000000000000102010400000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: setTargetRate(uint256), txdata: 0xcdabdaac8080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: getCurrentTWAP()
PC address: 10327
Estimated Gas Usage: 5876 - 75941
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops9/0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol:652

if (blockTimestampLast != blockTimestamp) {
              // subtraction overflow is desired
              uint32 timeElapsed = blockTimestamp - blockTimestampLast;
              // addition overflow is desired
              // counterfactual
              priceCumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;
          }

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000400080020401080002010001000000012000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: getCurrentTWAP(), txdata: 0x832a3035, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: Low
Contract: KASSIAHOTELRebaser
Function name: removeTransaction(uint256)
PC address: 16555
Estimated Gas Usage: 32750 - 134025
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation.  This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010108000000000008000800000002401080800000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: addTransaction(address,bytes), txdata: 0x126e19be00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: removeTransaction(uint256), txdata: 0x46c3bd1f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0xdf69471dca7c45fdc9ed0dc2e15f2232e58b9d6a.sol
Tool Runtime = 1786.159231415004 seconds
#############################################