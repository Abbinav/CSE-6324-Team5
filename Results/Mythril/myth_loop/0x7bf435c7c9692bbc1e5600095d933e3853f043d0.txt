==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: EMTC
Function name: multipleAirdrop(address[],uint256[])
PC address: 5755
Estimated Gas Usage: 3119 - 9563
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:322

_values[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000002040826, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: multipleAirdrop(address[],uint256[]), txdata: 0x4a73a2800000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EMTC
Function name: getCanBuyAmount(uint256)
PC address: 6648
Estimated Gas Usage: 3744 - 4780
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:265

42 * nowStage ** 2

--------------------
Initial State:

Account: [CREATOR], balance: 0x1092000000080115, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000081008800804020008100004082010400080040100000000000000000000000080800004000000000100000000000000010000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: getCanBuyAmount(uint256), txdata: 0x9f9186631010404040000104048002010008020420200200010240200000104020100101, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EMTC
Function name: getCanBuyAmount(uint256)
PC address: 6649
Estimated Gas Usage: 3744 - 4780
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:265

42 * nowStage ** 2 + 43128

--------------------
Initial State:

Account: [CREATOR], balance: 0x4400640a2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd00000000000000000000000000800000000000000001200000000000000000000000000000000000000000000901d12ebe1b195e5aa8748e62bd7734ae19b51f0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: getCanBuyAmount(uint256), txdata: 0x9f9186630000000000000000000000001000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EMTC
Function name: getCanBuyAmount(uint256)
PC address: 6650
Estimated Gas Usage: 3744 - 4780
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:265

42 * nowStage ** 2 + 43128 - 2352 * nowStage

--------------------
Initial State:

Account: [CREATOR], balance: 0x803, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000400042e000204800000040020040234001000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: getCanBuyAmount(uint256), txdata: 0x9f9186630000000000000000000000000000000000000000000000000000000000000080, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: EMTC
Function name: getCanBuyAmount(uint256)
PC address: 6652
Estimated Gas Usage: 3744 - 4780
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:265

ethAmount*(42 * nowStage ** 2 + 43128 - 2352 * nowStage)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getCanBuyAmount(uint256), txdata: 0x9f918663002400001000000000000b615095f807c7500091d48308c0000387aac8a4c837, value: 0x0



---------------------------------------------
For contract 0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol
Tool Runtime = 7465.303179469003 seconds
#############################################