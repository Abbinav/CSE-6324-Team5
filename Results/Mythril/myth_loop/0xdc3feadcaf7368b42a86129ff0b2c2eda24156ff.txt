==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: addJp
Function name: fallback
PC address: 259
Estimated Gas Usage: 2587 - 37574
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/6/0xdc3feadcaf7368b42a86129ff0b2c2eda24156ff.sol:1052

gameContract.addJP.value(msg.value)(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0xa00000002000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffffffffffff, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x80080002, value: 0x1
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x1

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: x2jpCredit
Function name: payDeposits(uint256)
PC address: 9217
Estimated Gas Usage: 2040 - 2135
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/6/0xdc3feadcaf7368b42a86129ff0b2c2eda24156ff.sol:636

deposits[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: payDeposits(uint256), txdata: 0xab65ab830101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: x2jpCredit
Function name: credits(uint256)
PC address: 9829
Estimated Gas Usage: 1103 - 1198
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/6/0xdc3feadcaf7368b42a86129ff0b2c2eda24156ff.sol:342

Credit[] public credits

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: credits(uint256), txdata: 0x036a1c220000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: x2jpCredit
Function name: getPayment(uint256)
PC address: 10664
Estimated Gas Usage: 2137 - 2232
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/6/0xdc3feadcaf7368b42a86129ff0b2c2eda24156ff.sol:798

deposits[depositIndex]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getPayment(uint256), txdata: 0x3280a836ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: x2jpCredit
Function name: creditPayouts(uint256)
PC address: 10941
Estimated Gas Usage: 1146 - 1241
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/6/0xdc3feadcaf7368b42a86129ff0b2c2eda24156ff.sol:344

CreditPayout[] public creditPayouts

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: creditPayouts(uint256), txdata: 0x37651e790000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: x2jpCredit
Function name: depositors(address,uint256)
PC address: 11136
Estimated Gas Usage: 1242 - 1527
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/6/0xdc3feadcaf7368b42a86129ff0b2c2eda24156ff.sol:312

mapping (address => uint[]) public depositors

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: depositors(address,uint256), txdata: 0x466c01b800000000000000000000000000000000004001000000400401011000018002020000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: x2jpCredit
Function name: getUserDeposit(address,uint256)
PC address: 11284
Estimated Gas Usage: 1270 - 1555
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/6/0xdc3feadcaf7368b42a86129ff0b2c2eda24156ff.sol:748

depositors[depositor][depositNumber]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getUserDeposit(address,uint256), txdata: 0x6071105800000000000000000000000002800800028080000000000400001004048040024000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: x2jpCredit
Function name: getUserCredit(address,uint256)
PC address: 12534
Estimated Gas Usage: 1346 - 1631
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/6/0xdc3feadcaf7368b42a86129ff0b2c2eda24156ff.sol:780

creditors[creditor][creditNumber]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getUserCredit(address,uint256), txdata: 0x83c9c65300000000000000000000000000000000004001000000400401011000018002020000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: x2jpCredit
Function name: getDeposit(uint256)
PC address: 14253
Estimated Gas Usage: 1138 - 1233
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/6/0xdc3feadcaf7368b42a86129ff0b2c2eda24156ff.sol:728

deposits[_id]

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getDeposit(uint256), txdata: 0x9f9fb9680000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: x2jpCredit
Function name: deposits(uint256)
PC address: 14472
Estimated Gas Usage: 1167 - 1262
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/6/0xdc3feadcaf7368b42a86129ff0b2c2eda24156ff.sol:308

Deposit[] public deposits

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposits(uint256), txdata: 0xb02c43d00000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: x2jpCredit
Function name: creditors(address,uint256)
PC address: 15378
Estimated Gas Usage: 1306 - 1591
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/6/0xdc3feadcaf7368b42a86129ff0b2c2eda24156ff.sol:348

mapping (address => uint[]) public creditors

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: creditors(address,uint256), txdata: 0xf39cada800000000000000000000000000000000000000040101010002040000020000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0xdc3feadcaf7368b42a86129ff0b2c2eda24156ff.sol
Tool Runtime = 1464.9875824619958 seconds
#############################################