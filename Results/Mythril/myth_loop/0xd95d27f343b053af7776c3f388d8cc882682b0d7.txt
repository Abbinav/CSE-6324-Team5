==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LockupContract
Function name: lockedAllocationData(address,uint256)
PC address: 3295
Estimated Gas Usage: 1221 - 1506
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:891

mapping(address => uint256[]) public lockedAllocationData

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: lockedAllocationData(address,uint256), txdata: 0x0603f03900000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CLIContribution
Function name: contributions(uint256)
PC address: 3504
Estimated Gas Usage: 1191 - 1286
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:1565

Contribution[] public contributions

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: contributions(uint256), txdata: 0x1cee07000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: CLIContribution
Function name: isInitialized()
PC address: 4333
Estimated Gas Usage: 3720 - 39318
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:497

management.contractRegistry(
                CONTRACT_FORWARDER
            )

--------------------
Initial State:

Account: [CREATOR], balance: 0x5404080000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3fffffff, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: e0e0e0e0e0e0e0e0e0e0e0e0deadbeefdeadbeefdeadbeefdeadbeefdeadbeefe0e0e0e0e0e0e0e0e0e0e0e001, value: 0x0
Caller: [CREATOR], function: forward(), txdata: 0xd264e05e, value: 0x1
Caller: [ATTACKER], function: isInitialized(), txdata: 0x392e53cd, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CLIAllocator
Function name: unlockManuallyLockedBalances(address)
PC address: 4560
Estimated Gas Usage: 7088 - 111911
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:1316

management.contractRegistry(CONTRACT_LOCKUP)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unlockManuallyLockedBalances(address), txdata: 0x03fdab490000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CLIAllocator
Function name: unlockManuallyLockedBalances(address)
PC address: 4785
Estimated Gas Usage: 7088 - 111911
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:1318

lockupContract.setManuallyLockedForAddress(
            _holder,
            0
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unlockManuallyLockedBalances(address), txdata: 0x03fdab490000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: unlockManuallyLockedBalances(address), txdata: 0x03fdab49fdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfdfd, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CLIToken
Function name: transferFrom(address,address,uint256)
PC address: 4906
Estimated Gas Usage: 27854 - 166305
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:1459

LockupContract(
                management.contractRegistry(CONTRACT_LOCKUP)
            ).isTransferAllowed(
                _address,
                _value,
                _time,
                _holderBalance
            )

--------------------
Initial State:

Account: [CREATOR], balance: 0x8211, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x11, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000008f0427b50400c10556c45798c34f73ae2632820000000000000000000000000040010480808001014040400801010108010408400000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CLIToken
Function name: burn(uint256)
PC address: 7147
Estimated Gas Usage: 23073 - 173290
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:1460

management.contractRegistry(CONTRACT_LOCKUP)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2040000000048010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: burn(uint256), txdata: 0x42966c680000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CLIToken
Function name: burn(uint256)
PC address: 7382
Estimated Gas Usage: 23073 - 173290
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:1459

LockupContract(
                management.contractRegistry(CONTRACT_LOCKUP)
            ).isTransferAllowed(
                _address,
                _value,
                _time,
                _holderBalance
            )

--------------------
Initial State:

Account: [CREATOR], balance: 0x400480000044, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000008fae27b50457c10556c45798c34f73ae263282a600000000000000000000000000008000000420800080108000000200800000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: burn(uint256), txdata: 0x42966c680000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CLIToken
Function name: transfer(address,uint256)
PC address: 9364
Estimated Gas Usage: 19714 - 134281
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop8/0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol:1459

LockupContract(
                management.contractRegistry(CONTRACT_LOCKUP)
            ).isTransferAllowed(
                _address,
                _value,
                _time,
                _holderBalance
            )

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000000000000000010000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0xd95d27f343b053af7776c3f388d8cc882682b0d7.sol
Tool Runtime = 6404.655647138003 seconds
#############################################