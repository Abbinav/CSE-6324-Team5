==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GAMMA
Function name: tokenURI(uint256)
PC address: 7155
Estimated Gas Usage: 3423 - 4931
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:17

mapping(uint256 => string) public tokenURI

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: tokenURI(uint256), txdata: 0xc87b56dd0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GAMMA
Function name: tokenURI(uint256)
PC address: 7207
Estimated Gas Usage: 3423 - 4931
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:17

mapping(uint256 => string) public tokenURI

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: tokenURI(uint256), txdata: 0xc87b56dd0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: GAMMA
Function name: purchase(uint256)
PC address: 7762
Estimated Gas Usage: 46001 - 224654
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:58

owner.call.value(msg.value)("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x20104200000000042, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8400018000002, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000000008804020400480400800800810800810102080080280808002808008010080, value: 0x0
Caller: [CREATOR], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000001, value: 0x21

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 8019
Estimated Gas Usage: 46074 - 225010
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:67

balanceOf[from]--

--------------------
Initial State:

Account: [CREATOR], balance: 0x8020500944002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000000000040000000000000020004000000000000100000000000000000000040040, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000001, value: 0x21

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GAMMA
Function name: transferFrom(address,address,uint256)
PC address: 8027
Estimated Gas Usage: 43350 - 187107
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:67

balanceOf[from]--

--------------------
Initial State:

Account: [CREATOR], balance: 0x4a0a6e08908, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000002040408040024000200800004010010804808010088041034080000080018080, value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd515151515151515151515151000000000000000000000000000000000000000051515151515151515151515100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 8031
Estimated Gas Usage: 46001 - 224654
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:67

balanceOf[from]--

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000001, value: 0x21

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 8099
Estimated Gas Usage: 46074 - 225010
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:68

balanceOf[to]++

--------------------
Initial State:

Account: [CREATOR], balance: 0x8020500944002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000000000040000000000000020004000000000000100000000000000000000040040, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000001, value: 0x21

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GAMMA
Function name: transferFrom(address,address,uint256)
PC address: 8106
Estimated Gas Usage: 43350 - 187107
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:68

balanceOf[to]++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd515151515151515151515151000000000000000000000000000000000000000051515151515151515151515100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 8110
Estimated Gas Usage: 46001 - 224654
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:68

balanceOf[to]++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000001, value: 0x21

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 8140
Estimated Gas Usage: 46074 - 225010
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:69

getApproved[tokenId] = address(0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8020500944002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000000000040000000000000020004000000000000100000000000000000000040040, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000001, value: 0x21

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 8193
Estimated Gas Usage: 46001 - 224654
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:69

getApproved[tokenId] = address(0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000001, value: 0x21

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 8222
Estimated Gas Usage: 46074 - 225010
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:70

ownerOf[tokenId] = to

--------------------
Initial State:

Account: [CREATOR], balance: 0x8020500944002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000000000040000000000000020004000000000000100000000000000000000040040, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000001, value: 0x21

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 8275
Estimated Gas Usage: 46001 - 224654
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:70

ownerOf[tokenId] = to

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000001, value: 0x21

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 8308
Estimated Gas Usage: 46074 - 225010
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:71

sale[tokenId].forSale = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x8020500944002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000000000040000000000000020004000000000000100000000000000000000040040, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000001, value: 0x21

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 8322
Estimated Gas Usage: 46001 - 224654
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:71

sale[tokenId].forSale = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000001, value: 0x21

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 8411
Estimated Gas Usage: 46001 - 224654
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:72

tokenOfOwnerByIndex[from][tokenId - 1] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000001, value: 0x21

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 8499
Estimated Gas Usage: 46001 - 224654
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol:73

tokenOfOwnerByIndex[to][tokenId - 1] = tokenId

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000001, value: 0x21



---------------------------------------------
For contract 0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol
Tool Runtime = 3181.892452305008 seconds
#############################################