==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ValidatorShare
Function name: updateCommissionRate(uint256)
PC address: 3530
Estimated Gas Usage: 23583 - 203060
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:1618

stakeManager.ownerOf(validatorId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0xc0a0088820022744, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [CREATOR], function: drain(address,address,uint256), txdata: 0xabf59fc90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: updateCommissionRate(uint256), txdata: 0x00fa3d500000000000000000000000000000000000000000000000000000000000000040, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ValidatorShare
Function name: updateCommissionRate(uint256)
PC address: 3862
Estimated Gas Usage: 23594 - 203071
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:1634

stakeManager.epoch()

--------------------
Initial State:

Account: [CREATOR], balance: 0x8800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCommissionRate(uint256), txdata: 0x00fa3d500000000000000000000000000000000000000000000000000000000000000006, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ValidatorShare
Function name: updateCommissionRate(uint256)
PC address: 3862
Estimated Gas Usage: 23594 - 203071
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:1634

stakeManager.epoch()

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000104440200, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [CREATOR], function: drain(address,address,uint256), txdata: 0xabf59fc90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: updateCommissionRate(uint256), txdata: 0x00fa3d500000000000000000000000000000000000000000000000000000000000000010, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: ValidatorShare
Function name: updateCommissionRate(uint256)
PC address: 4066
Estimated Gas Usage: 23594 - 203071
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:1638

stakeManager.withdrawalDelay()

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000040d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateCommissionRate(uint256), txdata: 0x00fa3d500000000000000000000000000000000000000000000000000000000000000005, value: 0x0
Caller: [ATTACKER], function: updateCommissionRate(uint256), txdata: 0x00fa3d500000000000000000000000000000000000000000000000000000000000000005, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ValidatorShare
Function name: updateCommissionRate(uint256)
PC address: 4066
Estimated Gas Usage: 23583 - 203060
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:1638

stakeManager.withdrawalDelay()

--------------------
Initial State:

Account: [CREATOR], balance: 0x40200040000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4022033aa8020cd40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [CREATOR], function: drain(address,address,uint256), txdata: 0xabf59fc90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: updateCommissionRate(uint256), txdata: 0x00fa3d500000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ValidatorShare
Function name: updateCommissionRate(uint256)
PC address: 4497
Estimated Gas Usage: 23594 - 203071
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:1643

stakingLogger.logUpdateCommissionRate(validatorId, newCommissionRate, commissionRate)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000100200000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(uint256,address,address), txdata: 0xb4988fd00000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: updateCommissionRate(uint256), txdata: 0x00fa3d500000000000000000000000000000000000000000000000000000000000000005, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ValidatorShare
Function name: updateCommissionRate(uint256)
PC address: 4497
Estimated Gas Usage: 23594 - 203071
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:1643

stakingLogger.logUpdateCommissionRate(validatorId, newCommissionRate, commissionRate)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [CREATOR], function: drain(address,address,uint256), txdata: 0xabf59fc90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: updateCommissionRate(uint256), txdata: 0x00fa3d50000000000000000000000000000000000000000000000000000000000000000a, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ValidatorShare
Function name: updateCommissionRate(uint256)
PC address: 4524
Estimated Gas Usage: 23583 - 203060
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:1644

commissionRate = newCommissionRate

--------------------
Initial State:

Account: [CREATOR], balance: 0x11001480000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCommissionRate(uint256), txdata: 0x00fa3d500000000000000000000000000000000000000000000000000000000000000005, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: ValidatorShare
Function name: updateCommissionRate(uint256)
PC address: 4531
Estimated Gas Usage: 23583 - 203060
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:1645

lastCommissionUpdate = epoch

--------------------
Initial State:

Account: [CREATOR], balance: 0x11001480000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCommissionRate(uint256), txdata: 0x00fa3d500000000000000000000000000000000000000000000000000000000000000005, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StakingInfo
Function name: getValidatorContractAddress(uint256)
PC address: 4677
Estimated Gas Usage: 4798 - 75184
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:1337

IStakeManagerLocal(
            registry.getStakeManagerAddress()
        )
            .validators(validatorId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getValidatorContractAddress(uint256), txdata: 0x178d46aa0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Registry
Function name: addPredicate(address,uint8)
PC address: 5182
Estimated Gas Usage: 3209 - 4674
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:460

predicates[predicate]._type = _type

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: f3f3f3f3f3f3f3f3f3f3f3f3aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: addPredicate(address,uint8), txdata: 0x3af395e500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StakingInfo
Function name: getAccountStateRoot()
PC address: 5757
Estimated Gas Usage: 4316 - 73956
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:1328

IStakeManagerLocal(registry.getStakeManagerAddress())
            .accountStateRoot()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getAccountStateRoot(), txdata: 0x4b6b87ce, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Registry
Function name: mapToken(address,address,bool)
PC address: 7958
Estimated Gas Usage: 23362 - 120966
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:443

IWithdrawManager(contractMap[WITHDRAW_MANAGER]).createExitQueue(_rootToken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000006112, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: cfcfcfcfcfcfcfcfcfcfcfcfdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: updateContractMap(bytes32,address), txdata: 0x2026cfdc261885af88107524c32b47256ca1d87cafbd893a7e8cc972ae41fdfb0270335e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: mapToken(address,address,bool), txdata: 0xe117694bacacacacacacacacacacacac0000000000000000000000000000000000000100acacacacacacacacacacacac00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ValidatorShare
Function name: drain(address,address,uint256)
PC address: 8031
Estimated Gas Usage: 2134 - 36745
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:1912

destination.transfer(amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [ATTACKER], function: initialize(uint256,address,address), txdata: 0xb4988fd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: drain(address,address,uint256), txdata: 0xabf59fc9b4b4b4b4b4b4b4b4b4b4b4b40000000000000000000000000000000000000000b4b4b4b4b4b4b4b4b4b4b4b4deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: ValidatorShare
Function name: drain(address,address,uint256)
PC address: 8225
Estimated Gas Usage: 3026 - 38108
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:1914

ERC20(token).transfer(destination, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateCommissionRate(uint256), txdata: 0x00fa3d500000000000000000000000000000000000000000000000000000000000000005, value: 0x0
Caller: [CREATOR], function: drain(address,address,uint256), txdata: 0xabf59fc9afafafafafafafafafafafafdeadbeefdeadbeefdeadbeefdeadbeefdeadbeefafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafaf, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StakingInfo
Function name: getStakerDetails(uint256)
PC address: 8763
Estimated Gas Usage: 4983 - 75844
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:1301

stakeManager.validators(validatorId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4040020000010000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getStakerDetails(uint256), txdata: 0x78daaf690000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ValidatorShare
Function name: buyVoucher(uint256,uint256)
PC address: 15371
Estimated Gas Usage: 27139 - 89381
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:1780

_amount % rate.mul(shares).div(precision)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: buyVoucher(uint256,uint256), txdata: 0x6ab1507100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StakingInfo
Function name: totalValidatorStake(uint256)
PC address: 15847
Estimated Gas Usage: 4773 - 75159
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/6/0x5052053d958c763e96d4908990e74df2e04299eb.sol:1314

IStakeManagerLocal(
            registry.getStakeManagerAddress()
        )
            .validators(validatorId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: totalValidatorStake(uint256), txdata: 0xca7d34b60000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x5052053d958c763e96d4908990e74df2e04299eb.sol
Tool Runtime = 9446.37512623999 seconds
#############################################