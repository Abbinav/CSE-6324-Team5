==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AkropolisTokenVesting
Function name: constructor
PC address: 688
Estimated Gas Usage: 8760 - 32821
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:423

require(start.add(duration) > block.timestamp, "TokenVesting: final time is before current time")

--------------------
Initial State:

Account: [CREATOR], balance: 0x5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000002f2013befd37f50154ce16837e3fc02d84da7dde9dc9fdd0635e8020040304400990d27b8412c112001800128c20010014800000000280180861644063adc0138, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: constructor
PC address: 692
Estimated Gas Usage: 8776 - 32930
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:423

require(start.add(duration) > block.timestamp, "TokenVesting: final time is before current time")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000010440010201010010400210042080800280010146b540a034d62c0a27aedb156a764127245e387aa9d09aea32130600192f1a0e0a03c74901075281ff295e9db1c8a21015ef8022a94a68e42af7fd2023cbbf0343, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 1101 - 1196
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:571

bytes32[] public allOperations

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000040000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: allOperations(uint256), txdata: 0x431ab2330000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AkropolisTokenVesting
Function name: allOperations(uint256)
PC address: 3552
Estimated Gas Usage: 1124 - 1219
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:571

bytes32[] public allOperations

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000430ee0058904ca0528860aa00a0a00f34abcae1d70159b5800b72113506ca32811f9314140fc00fe289c08affa1000075c4c000000300490000104025049b22851, value: 0x0
Caller: [CREATOR], function: allOperations(uint256), txdata: 0x431ab2330202020202020202020202020202020202020202020202020202020202020202, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: release(address)
PC address: 3646
Estimated Gas Usage: 9079 - 44636
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:128

require(b <= a, "SafeMath: subtraction overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000040000000000000102000000000000000008000c005545140a80522a0184a010368466d7ae3df6e00994008b90825624706001d84035052c0280071600858034221c1491a82084401273ff85278e4262c760c0, value: 0x0
Caller: [ATTACKER], function: release(address), txdata: 0x191655870202020202020202020202020000000010000000000000020000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenVesting
Function name: revoke(address)
PC address: 4258
Estimated Gas Usage: 21369 - 150117
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:531

token.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000200000000000108200000008080000000000002180f22999480258c2e30954ae32002749e44c91aba3b1413044aa8405194893fd010cf6801803e4a00001085222044242c41830208002cf20dba1840fb00bd8cac7806830b88653462110ed642437ea15ec08cf0a41c74a67c170000d43ad701, value: 0x0
Caller: [CREATOR], function: revoke(address), txdata: 0x74a8f103c0c0c0c0c0c0c0c0c0c0c0c00000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: release(address)
PC address: 4412
Estimated Gas Usage: 4710 - 39747
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:534

if (block.timestamp < _cliff) {
            return 0;
        } else if (block.timestamp >= _start.add(_duration) || _revoked[address(token)]) {
            return totalBalance;
        } else {
            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000011280921a296056eaa2361840142a21202362891026b151d58acc58d9466251c04690908217a0f84801e4805d680af218224e76f00000d0847a9441831cd60300bc, value: 0x0
Caller: [ATTACKER], function: release(address), txdata: 0x191655878989898989898989898989890000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: release(address)
PC address: 4454
Estimated Gas Usage: 6452 - 41489
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:536

block.timestamp >= _start.add(_duration) || _revoked[address(token)]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000010000000008008c32cbea8225808001868804c0ea8130a590c07fb9d19922c2c906a10000040210a909fa061d07c08088c800054800a008ca1990a02197400002c1d1002182, value: 0x0
Caller: [SOMEGUY], function: release(address), txdata: 0x191655878c8c8c8c8c8c8c8c8c8c8c8c0000000000000000000000200000000000000004, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: release(address)
PC address: 4538
Estimated Gas Usage: 6469 - 41506
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:536

if (block.timestamp >= _start.add(_duration) || _revoked[address(token)]) {
            return totalBalance;
        } else {
            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1008000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000008000000000000000000002020000000000000043003f200404b7c2108b44208708a8783209083ec118a820dc810008c14a90810104c0e04621984c59241c8398f8080026130082480b8810247f00098102859f80, value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x191655874343434343434343434343432000000000000000000000000000000000000004, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 1144 - 1239
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:570

address[] public beneficiaries

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: beneficiaries(uint256), txdata: 0xefeb5e580000000000000000000000001000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: TokenVesting
Function name: revoke(address)
PC address: 4896
Estimated Gas Usage: 21369 - 150117
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:285

address(token).call(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20008100082, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000140000004021004400000000000000000004200000013033894849186462c4dc4c0249109061998a028045c025626ec465026d2a040061612140d9f04bce1c48d99f381383c6a1a0110208085effbb3bbf5400488fff00d631009112a802582434115b0faba118da7e880500ec564144cd080, value: 0x0
Caller: [CREATOR], function: revoke(address), txdata: 0x74a8f103c0c0c0c0c0c0c0c0c0c0c0c0affeaf7eaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: revoke(address), txdata: 0x74a8f103c0c0c0c0c0c0c0c0c0c0c0c0deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: TokenVesting
Function name: release(address)
PC address: 4896
Estimated Gas Usage: 16959 - 109920
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:285

address(token).call(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000400000870, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000008008d4083000000801400020084040800240044984c691d4c33711502020641f11c00d8bcc0a5b41416a739c08842fe08420803803509b2c08e170814007ddcc1800350a188048c73ec2013219cc102f83e9c248, value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x191655870303030303030303030303030020040000042001000000000001001000000010, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TokenVesting
Function name: release(address)
PC address: 5258
Estimated Gas Usage: 9263 - 44820
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:152

require(c / a == b, "SafeMath: multiplication overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x202, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000200000006bdb2ff6c9495416ad91b5baaecb6df58ea35cdfde9435fb7fffa3b19a297fdd2bdbfc15c011dd707d8f15b8fff77ffd1f7ff481ff83ee70398c8702f9b9d6d940, value: 0x0
Caller: [SOMEGUY], function: release(address), txdata: 0x191655878c8c8c8c8c8c8c8c8c8c8c8c0000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AkropolisTokenVesting
Function name: beneficiaries(uint256)
PC address: 7189
Estimated Gas Usage: 1144 - 1239
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:570

address[] public beneficiaries

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000068000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0404040404040404040404040404040404040404040404040404040404040404207513641ddedb60e41e160616397d89cd0c74b76c148922495d93e8a640c42404b0651c613e722ccc9000052203030881f98c0009ec0916c2a840816884012408, value: 0x0
Caller: [ATTACKER], function: beneficiaries(uint256), txdata: 0xefeb5e588000100000000002000000000000000100000000000000004000000004000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AkropolisTokenVesting
Function name: release()
PC address: 10185
Estimated Gas Usage: 9846 - 45733
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:128

require(b <= a, "SafeMath: subtraction overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0xfe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0d0d0d0d0d0d0d0d0d0d0d0d00000000000000000000000000000000000000000121000b5ba3d93928e9699833bd420935ac02602aad93456048b4700ce2a9510d77000924605151094b0688202102015d18009fe2a40500a9d864c04528604f81, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AkropolisTokenVesting
Function name: release()
PC address: 13051
Estimated Gas Usage: 5477 - 40844
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:534

if (block.timestamp < _cliff) {
            return 0;
        } else if (block.timestamp >= _start.add(_duration) || _revoked[address(token)]) {
            return totalBalance;
        } else {
            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000020000100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000061005089229440080002910c409710096f8c0e70f0330006842090061c381398231fafd7e0410919fffe97240029b0794090180080041080400c2ffc0218512047, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AkropolisTokenVesting
Function name: release()
PC address: 13093
Estimated Gas Usage: 7219 - 42586
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:536

block.timestamp >= _start.add(_duration) || _revoked[address(token)]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 24242424242424242424242400000000000000000000000000000000000000003c1abe5a5c324054864665fe74b7cfd199c0716b480b9850054e800149c7af532428a30de60ddfbd9bd14b41008444af001faf0678fb80020c000403bc1d97ae47, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AkropolisTokenVesting
Function name: release()
PC address: 13177
Estimated Gas Usage: 7236 - 42603
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:536

if (block.timestamp >= _start.add(_duration) || _revoked[address(token)]) {
            return totalBalance;
        } else {
            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x41, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000004000000000af1336548f2d9401090ebe4291808918c5ad04629c439491f185425365c2e6a1202d0c5031822e7f14029088878183013d050c01804534b4452000312c9e2ca121, value: 0x0
Caller: [SOMEGUY], function: release(), txdata: 0x86d1a69f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AkropolisTokenVesting
Function name: release(address)
PC address: 13535
Estimated Gas Usage: 17005 - 109966
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:285

address(token).call(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080021020000080020000401020400820208020108c310c52334a90eddc620c376d8b83d272a10f0b4d490b2383285b31e169de5222c1f3f06699a984008ff40048004d02f0aad83ebb22c090004228401b8014b434, value: 0x0
Caller: [CREATOR], function: release(address), txdata: 0x191655878c8c8c8c8c8c8c8c8c8c8c8c0000200008000001000010200210000000008002, value: 0x0
Caller: [ATTACKER], function: release(address), txdata: 0x191655878c8c8c8c8c8c8c8c8c8c8c8cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AkropolisTokenVesting
Function name: release(address)
PC address: 13535
Estimated Gas Usage: 17005 - 109966
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:285

address(token).call(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4080100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000008040404049681551b92e054243b441980f034b90489a88496caa6820d81c2805d08c5703f68e81b7421bfb800fec43105484c891983309c0078027e89011243b0184312e, value: 0x0
Caller: [SOMEGUY], function: release(address), txdata: 0x191655870303030303030303030303030000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AkropolisTokenVesting
Function name: release()
PC address: 13952
Estimated Gas Usage: 10030 - 45917
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:152

require(c / a == b, "SafeMath: multiplication overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x21410c010001624c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 040404040404040404040404000000000000000000000000000000000000004096843c421200828b810773c082100100250210235422491495c3e5b815a9d5c8048284501064985c001985099e32203fe106100234e1e97272402080342a111811, value: 0x0
Caller: [ATTACKER], function: release(), txdata: 0x86d1a69f, value: 0x0



---------------------------------------------
For contract 0x1d44b41a742d2b008a8faf655451aa015a59f248.sol
Tool Runtime = 5579.565563874996 seconds
#############################################