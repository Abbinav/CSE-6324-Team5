==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Ethertime
Function name: getActualLotteryId(uint256)
PC address: 5214
Estimated Gas Usage: 22459 - 30125
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/8/0x92c780cc0c885320cc4582f7eef3618f4b2756d2.sol:992

Lottery memory lottery = _lotteries[lotteryId]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createLottery(string,uint256,uint256,uint256,uint8,bool), txdata: 0xe5f865ca000000000000000000000000000000000000000000000000000000000000004810808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000808080804080010480400004018082802080800080400800000000000000000000000000000000000000000000000000000000000000000000000000000040808080808080808080808080808080808080808080808080, value: 0x0
Caller: [SOMEGUY], function: getActualLotteryId(uint256), txdata: 0x06c069ae0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Ethertime
Function name: createOrder(address,uint256,uint256,uint256)
PC address: 9902
Estimated Gas Usage: 4062 - 4772
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/8/0x92c780cc0c885320cc4582f7eef3618f4b2756d2.sol:642

require(expiredDate > now)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createOrder(address,uint256,uint256,uint256), txdata: 0x6f652e1a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000071100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Ethertime
Function name: getLotteryInfo(uint256)
PC address: 10660
Estimated Gas Usage: 21386 - 31401
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/8/0x92c780cc0c885320cc4582f7eef3618f4b2756d2.sol:812

Lottery memory lottery = _lotteries[id]

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createLottery(string,uint256,uint256,uint256,uint8,bool), txdata: 0xe5f865ca000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000000020800004840188800080208001808000800040108080000080000080400004002081000984019100008021004200800200004029010000008000008100000500000000000000000000000000000000000000000000000000000000000000000020800002800080800080020204808000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: getLotteryInfo(uint256), txdata: 0x76b3c8a80000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Ethertime
Function name: getLotteryInfo(uint256)
PC address: 10712
Estimated Gas Usage: 21386 - 31401
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/8/0x92c780cc0c885320cc4582f7eef3618f4b2756d2.sol:812

Lottery memory lottery = _lotteries[id]

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createLottery(string,uint256,uint256,uint256,uint8,bool), txdata: 0xe5f865ca000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000000020800004840188800080208001808000800040108080000080000080400004002081000984019100008021004200800200004029010000008000008100000500000000000000000000000000000000000000000000000000000000000000000020800002800080800080020204808000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: getLotteryInfo(uint256), txdata: 0x76b3c8a80000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Ethertime
Function name: finalizeLotteries()
PC address: 11389
Estimated Gas Usage: 3669 - 4049
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/8/0x92c780cc0c885320cc4582f7eef3618f4b2756d2.sol:504

if (_lotteries[lotteryId].end < now) {

                if (_players[lotteryId].length > 0) {

                    uint256 lastIndex = _players[lotteryId].length.sub(1);

                    uint256 blockNumber = _players[lotteryId][lastIndex].blockNumber;

                    if (block.number.sub(blockNumber) == 1) {

                        continue;

                    }

                }

                finalizeLottery(_lotteries[lotteryId]);

            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createLottery(string,uint256,uint256,uint256,uint8,bool), txdata: 0xe5f865ca000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: finalizeLotteries(), txdata: 0x7ae55852, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Ethertime
Function name: confirmOrder(uint256)
PC address: 11792
Estimated Gas Usage: 2957 - 3572
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/8/0x92c780cc0c885320cc4582f7eef3618f4b2756d2.sol:676

require(order.expiredDate > now)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createOrder(address,uint256,uint256,uint256), txdata: 0x6f652e1a000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000240100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110, value: 0x0
Caller: [ATTACKER], function: confirmOrder(uint256), txdata: 0x8ac7d79c0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Ethertime
Function name: confirmOrder(uint256)
PC address: 12846
Estimated Gas Usage: 42928 - 176657
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/8/0x92c780cc0c885320cc4582f7eef3618f4b2756d2.sol:710

msg.sender.transfer(remainder)

--------------------
Initial State:

Account: [CREATOR], balance: 0xd408000000040000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createOrder(address,uint256,uint256,uint256), txdata: 0x6f652e1a000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [CREATOR], function: confirmOrder(uint256), txdata: 0x8ac7d79c0000000000000000000000000000000000000000000000000000000000000001, value: 0x1

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Ethertime
Function name: createLottery(string,uint256,uint256,uint256,uint8,bool)
PC address: 15029
Estimated Gas Usage: 8790 - 33700
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/8/0x92c780cc0c885320cc4582f7eef3618f4b2756d2.sol:410

Lottery({

            id: _lastLotteryId,

            name: name,

            owner: msg.sender,

            price: price,

            begin: begin,

            end: end,

            number: 1,

            pot: 0,

            status: LotteryStatus.Open,

            prizeType: prizeType,

            parentId: None,

            childId: None,

            isContinued: true,

            winNumber: 0,

            blockNumberForRandom: 0,

            blockHashForRandom: 0x0,

            withDiscount: withDiscount,

            winningsCount: None,

            isPayedOut: false,

            alreadyPayedCount: 0,

            remainder: 0

         })

--------------------
Initial State:

Account: [CREATOR], balance: 0x500000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createLottery(string,uint256,uint256,uint256,uint8,bool), txdata: 0xe5f865ca000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Ethertime
Function name: finalizeLotteries()
PC address: 17233
Estimated Gas Usage: 35373 - 97945
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/8/0x92c780cc0c885320cc4582f7eef3618f4b2756d2.sol:42

require(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createLottery(string,uint256,uint256,uint256,uint8,bool), txdata: 0xe5f865ca0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: finalizeLotteries(), txdata: 0x7ae55852, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Ethertime
Function name: finalizeLotteries()
PC address: 17273
Estimated Gas Usage: 35656 - 98228
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/8/0x92c780cc0c885320cc4582f7eef3618f4b2756d2.sol:54

require(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createLottery(string,uint256,uint256,uint256,uint8,bool), txdata: 0xe5f865ca0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007f1d69fef3baa52b3da7f6af3755e97d7dfca000008000000000000000000003c80c1006ea88108209c2c8a821a080c0180f90000010908058802284020598e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: finalizeLotteries(), txdata: 0x7ae55852, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Ethertime
Function name: finalizeLotteries()
PC address: 22378
Estimated Gas Usage: 35121 - 97693
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/8/0x92c780cc0c885320cc4582f7eef3618f4b2756d2.sol:1190

if (end < now)

            (begin, end) = getPeriodBorders(begin, end, now)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createLottery(string,uint256,uint256,uint256,uint8,bool), txdata: 0xe5f865ca000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: finalizeLotteries(), txdata: 0x7ae55852, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Ethertime
Function name: finalizeLotteries()
PC address: 23551
Estimated Gas Usage: 35175 - 97747
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/8/0x92c780cc0c885320cc4582f7eef3618f4b2756d2.sol:1260

if (end < currentTime) {

            uint256 period = end.sub(begin);

            uint256 n = currentTime.sub(end);

            n = n.div(period);

            n = n.add(1);

            uint256 delta = n.mul(period);

            begin = begin.add(delta);

            end = end.add(delta);

        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: createLottery(string,uint256,uint256,uint256,uint8,bool), txdata: 0xe5f865ca000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000001f3fdfffffb1cff8fffffffffffffffbfffffffffffc800000000000000000005200c000001c0000800020020000008000801000002000007db5af69f23816ab00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: finalizeLotteries(), txdata: 0x7ae55852, value: 0x0



---------------------------------------------
For contract 0x92c780cc0c885320cc4582f7eef3618f4b2756d2.sol
Tool Runtime = 10952.735813861 seconds
#############################################