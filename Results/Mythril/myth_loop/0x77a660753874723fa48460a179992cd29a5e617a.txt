==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: OptionsToken
Function name: storeOptions(address,uint256)
PC address: 4002
Estimated Gas Usage: 7156 - 27771
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:343

optionsOwner[recipient] += amount

--------------------
Initial State:

Account: [CREATOR], balance: 0x8010000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: storeOptions(address,uint256), txdata: 0x36610cb900000000000000000000000000000010011002400110200000000000000020018000000000000000000000000000000000240000004000008000000000000040, value: 0x0
Caller: [CREATOR], function: storeOptions(address,uint256), txdata: 0x36610cb9020202020202020202020202000000100110024001102000000000000000200180000000000000000000000000000000005c0000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: increaseApproval(address,uint256)
PC address: 4114
Estimated Gas Usage: 1365 - 1840
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:118

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x40000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b30000000000000000000000000004402040010000000000010400000000000000000000000000000000000000000000000004f849c5402000ac9558c9ac836499, value: 0x0
Caller: [SOMEGUY], function: increaseApproval(address,uint256), txdata: 0xd73dd6235e5e5e5e5e5e5e5e5e5e5e5e0004402040010000000000010400000000000000fffffffffffffffffffffffffffffffffffc80170b1fe3ff8891418904ee21b1, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MintableToken
Function name: increaseApproval(address,uint256)
PC address: 5882
Estimated Gas Usage: 1365 - 1840
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:118

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000020800a1c11, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: approve(address,uint256), txdata: 0x095ea7b30000000000000000000000000000000401000008010001010000000000000000e486981a13e42f41884407800240000000000000000000100000480090444443, value: 0x0
Caller: [ATTACKER], function: increaseApproval(address,uint256), txdata: 0xd73dd6235e5e5e5e5e5e5e5e5e5e5e5e00000004010000080100010100000000000000001bfee926b41bd0c2003df87ffdbffffffffffffffffffff7ffffb7ff6fc5bedd, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FTIToken
Function name: contract_addr(uint256)
PC address: 6593
Estimated Gas Usage: 345 - 440
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:374

address[5] public contract_addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x44003000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: contract_addr(uint256), txdata: 0xd31270e40000000000000000000000000000000000000000000000000000000000000008, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: OptionsToken
Function name: increaseApproval(address,uint256)
PC address: 6614
Estimated Gas Usage: 1365 - 1840
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:118

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b30000000000000000000000000000000000200400000001000000000000000000cdf26c5bdbc953571c8821d119c141000000000080001dda0a493f4a00ffffeb, value: 0x0
Caller: [CREATOR], function: increaseApproval(address,uint256), txdata: 0xd73dd6235e5e5e5e5e5e5e5e5e5e5e5e00000000002004000000010000000000000000008081a000090b46112a1a3008ec3ebeffffffffff7fffe225f5b6e0409b000015, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ContractableToken
Function name: contract_addr(uint256)
PC address: 7330
Estimated Gas Usage: 300 - 395
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:374

address[5] public contract_addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: contract_addr(uint256), txdata: 0xd31270e40000000000000000000000000000000000000000000000000000000000000008, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: FTIToken
Function name: increaseApproval(address,uint256)
PC address: 7828
Estimated Gas Usage: 1365 - 1840
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:118

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x50000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0xc140200000000001, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: approve(address,uint256), txdata: 0x095ea7b30000000000000000000000000002000000010008000100400000000000000000b073935e38b23228db3ad239ae23e75570759d65adfddf767fffd38c28d82d4a, value: 0x0
Caller: [ATTACKER], function: increaseApproval(address,uint256), txdata: 0xd73dd6235e5e5e5e5e5e5e5e5e5e5e5e000200000001000800010040000000000000000060211240602632281006806260010015202508ac6002022480005239ea5364d2, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ContractableToken
Function name: increaseApproval(address,uint256)
PC address: 8565
Estimated Gas Usage: 1387 - 1862
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x77a660753874723fa48460a179992cd29a5e617a.sol:118

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1101, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000008400180400110000810400820001010102040800000000000000000000000000000200ab0411049900000000000000000000004, value: 0x0
Caller: [SOMEGUY], function: increaseApproval(address,uint256), txdata: 0xd73dd623a7a7a7a7a7a7a7a7a7a7a7a70840018040011000081040082000101010204080ffffffffffffffffffffffffffffe7fa97df77ba77fffffffffffffffffffffc, value: 0x0



---------------------------------------------
For contract 0x77a660753874723fa48460a179992cd29a5e617a.sol
Tool Runtime = 3920.17906107 seconds
#############################################