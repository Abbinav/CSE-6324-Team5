==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: setPeakStatus(address,uint8)
PC address: 5195
Estimated Gas Usage: 3306 - 4722
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:773

peaks[peak].state = state

--------------------
Initial State:

Account: [CREATOR], balance: 0x40500000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: setPeakStatus(address,uint8), txdata: 0x4a6b989971717171717171717171717100000000000000000000000000000000000000007171717171717171717171717171717171717171717171717171717171717107, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 9197
Estimated Gas Usage: 17984 - 110807
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:571

totalAssets

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: mint(uint256,address), txdata: 0x94bf804d99a450d2c99408c08a080241902065013c2c2832c020081a5208a4088a08414a7171717171717171717171717171717171717171717171717171717171717171, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 9216
Estimated Gas Usage: 17984 - 110807
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:571

totalAssets = totalAssets.add(usdDelta)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: mint(uint256,address), txdata: 0x94bf804d99a450d2c99408c08a080241902065013c2c2832c020081a5208a4088a08414a7171717171717171717171717171717171717171717171717171717171717171, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 9304
Estimated Gas Usage: 28105 - 176879
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:500

dusd

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: mint(uint256,address), txdata: 0x94bf804d174621034040220000a0242b088084a42cbc0507402810108002048021403504aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 9433
Estimated Gas Usage: 28105 - 176879
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:500

dusd.totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: mint(uint256,address), txdata: 0x94bf804d1088a04100000000080244401004000010000005114000100084020100001080fefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefe, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 9494
Estimated Gas Usage: 17984 - 110807
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:501

totalAssets

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: mint(uint256,address), txdata: 0x94bf804d99a450d2c99408c08a080241902065013c2c2832c020081a5208a4088a08414a7171717171717171717171717171717171717171717171717171717171717171, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 9595
Estimated Gas Usage: 28105 - 176879
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:504

inDeficit = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: mint(uint256,address), txdata: 0x94bf804d174621034040220000a0242b088084a42cbc0507402810108002048021403504aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 9609
Estimated Gas Usage: 28105 - 176879
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:504

inDeficit = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: mint(uint256,address), txdata: 0x94bf804d174621034040220000a0242b088084a42cbc0507402810108002048021403504aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 9679
Estimated Gas Usage: 28105 - 176879
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:506

totalAssets

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: mint(uint256,address), txdata: 0x94bf804d174621034040220000a0242b088084a42cbc0507402810108002048021403504aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 9811
Estimated Gas Usage: 17984 - 110807
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:507

inDeficit

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: mint(uint256,address), txdata: 0x94bf804d99a450d2c99408c08a080241902065013c2c2832c020081a5208a4088a08414a7171717171717171717171717171717171717171717171717171717171717171, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: systemCoins(uint256)
PC address: 10106
Estimated Gas Usage: 1123 - 1218
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:472

address[] public systemCoins

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: systemCoins(uint256), txdata: 0xa019c64e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: peaksAddresses(uint256)
PC address: 10963
Estimated Gas Usage: 1101 - 1196
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:487

address[] public peaksAddresses

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: peaksAddresses(uint256), txdata: 0xcc3d44e20000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Core
Function name: dusdToUsd(uint256,bool)
PC address: 14235
Estimated Gas Usage: 1350 - 2056
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop8/0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol:167

a * b

--------------------
Initial State:

Account: [CREATOR], balance: 0x1020040148008209, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,uint256,uint256), txdata: 0xa6b63eb8000000000000000000000000010102010100010201010101010101020101011000000000000000000000000080010440400001800108100001014001010240010000000000000000000000000001012001000201000000010104208004100180000000000000000000000000000000000000000000000000000000000000040c0000000000000000000000000000000000000000000000000000000000000314, value: 0x0
Caller: [SOMEGUY], function: dusdToUsd(uint256,bool), txdata: 0x4077969401200007c10867410200a44418080000014418a214100306e3854000800100200000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x4a10ee6cb6508a3f38278153f846ec8f7885570d.sol
Tool Runtime = 3439.817221822006 seconds
#############################################