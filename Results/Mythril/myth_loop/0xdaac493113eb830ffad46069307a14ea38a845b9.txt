==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: BasicToken
Function name: transfer(address,uint256)
PC address: 1048
Estimated Gas Usage: 10598 - 184986
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:160

IterableMapping.iterate_getValue(balances, msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000110, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000000101010101010101010101010101010101010101000000000001ffffffffe417fd9cfd6eefbfff3dfb8dc83efffffffddc4b2c64, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BasicToken
Function name: transfer(address,uint256)
PC address: 1048
Estimated Gas Usage: 10598 - 184986
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:160

IterableMapping.iterate_getValue(balances, msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000004000212f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000010101010101010101800101010101010101010192103821823289190304f9fffd7ffffffffc33ea702ffffffffd1febffffffff, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BasicToken
Function name: transfer(address,uint256)
PC address: 1259
Estimated Gas Usage: 10598 - 184986
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:160

IterableMapping.insert(balances, msg.sender, IterableMapping.iterate_getValue(balances, msg.sender).sub(_value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000004000212f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000010101010101010101800101010101010101010192103821823289190304f9fffd7ffffffffc33ea702ffffffffd1febffffffff, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: IterableMapping
Function name: iterate_get(IterableMapping.itmap storage,uint256)
PC address: 1412
Estimated Gas Usage: 1146 - 1241
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:62

self.keys[keyIndex]

--------------------
Initial State:

Account: [CREATOR], balance: 0x102000400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: iterate_get(IterableMapping.itmap storage,uint256), txdata: 0x75a3e8e800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BasicToken
Function name: transfer(address,uint256)
PC address: 1512
Estimated Gas Usage: 10598 - 184986
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:161

IterableMapping.iterate_getValue(balances, _to)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000004000212f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000010101010101010101800101010101010101010192103821823289190304f9fffd7ffffffffc33ea702ffffffffd1febffffffff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: IterableMapping
Function name: iterate_start(IterableMapping.itmap storage)
PC address: 1546
Estimated Gas Usage: 1239 - 1615
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:55

keyIndex++

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000100000200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: iterate_start(IterableMapping.itmap storage), txdata: 0xa21ab7160000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StandardToken
Function name: transferFrom(address,address,uint256)
PC address: 1562
Estimated Gas Usage: 17944 - 213472
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:227

allowed[_from][msg.sender]

--------------------
Initial State:

Account: [CREATOR], balance: 0x810c0040016802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000010000000001000000000100120404004000000000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: BasicToken
Function name: transfer(address,uint256)
PC address: 1723
Estimated Gas Usage: 10598 - 184986
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:161

IterableMapping.insert(balances, _to, IterableMapping.iterate_getValue(balances, _to).add(_value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000004000212f, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000010101010101010101800101010101010101010192103821823289190304f9fffd7ffffffffc33ea702ffffffffd1febffffffff, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StandardToken
Function name: transferFrom(address,address,uint256)
PC address: 1832
Estimated Gas Usage: 17944 - 213472
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:230

IterableMapping.iterate_getValue(balances, _from)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000020002400280400408404008008004400820020200000000000000000000000010200280802010040001100220080840400210100000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StandardToken
Function name: transferFrom(address,address,uint256)
PC address: 1832
Estimated Gas Usage: 17944 - 213472
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:230

IterableMapping.iterate_getValue(balances, _from)

--------------------
Initial State:

Account: [CREATOR], balance: 0x810c0040016802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000010000000001000000000100120404004000000000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BasicToken
Function name: transfer(address,uint256)
PC address: 1904
Estimated Gas Usage: 3771 - 73180
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:106

assert(_b <= _a)

--------------------
Initial State:

Account: [CREATOR], balance: 0xbc0482402000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: BasicToken
Function name: transfer(address,uint256)
PC address: 1934
Estimated Gas Usage: 7238 - 146056
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:115

assert(c >= _a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000010003a59e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000000101010101010101010101010101010101010101a30605084864263806000000000000000404090082200400824dfffffbffffff, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StandardToken
Function name: transferFrom(address,address,uint256)
PC address: 2043
Estimated Gas Usage: 17944 - 213472
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:230

IterableMapping.insert(balances, _from, IterableMapping.iterate_getValue(balances, _from).sub(_value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x800011001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200110500000000a, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000801080808001000400010000080140001000200000000000000000000000000001010101010101010100014001010101010101020000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000020000008000000000000000000000000000000000000000000000001010101010101010101010101010101020101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StandardToken
Function name: transferFrom(address,address,uint256)
PC address: 2043
Estimated Gas Usage: 17944 - 213472
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:230

IterableMapping.insert(balances, _from, IterableMapping.iterate_getValue(balances, _from).sub(_value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x810c0040016802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000010000000001000000000100120404004000000000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StandardToken
Function name: transferFrom(address,address,uint256)
PC address: 2296
Estimated Gas Usage: 17944 - 213472
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:231

IterableMapping.iterate_getValue(balances, _to)

--------------------
Initial State:

Account: [CREATOR], balance: 0x810c0040016802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000010000000001000000000100120404004000000000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: IBRIDGE
Function name: transferFrom(address,address,uint256)
PC address: 2451
Estimated Gas Usage: 17989 - 213517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:227

allowed[_from][msg.sender]

--------------------
Initial State:

Account: [CREATOR], balance: 0x40402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000480000000000204020800040200082000000000000000000000000000000001010101010101010101010201010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StandardToken
Function name: transferFrom(address,address,uint256)
PC address: 2507
Estimated Gas Usage: 17944 - 213472
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:231

IterableMapping.insert(balances, _to, IterableMapping.iterate_getValue(balances, _to).add(_value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x810c0040016802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000010000000001000000000100120404004000000000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StandardToken
Function name: transferFrom(address,address,uint256)
PC address: 2693
Estimated Gas Usage: 17944 - 213472
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:234

allowed[_from][msg.sender]

--------------------
Initial State:

Account: [CREATOR], balance: 0x810c0040016802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000010000000001000000000100120404004000000000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: IBRIDGE
Function name: transferFrom(address,address,uint256)
PC address: 2721
Estimated Gas Usage: 17989 - 213517
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:230

IterableMapping.iterate_getValue(balances, _from)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080040000021500, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000400000000040000001804010000001401010200000000000000000000000000004010101010101014001010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: IBRIDGE
Function name: transferFrom(address,address,uint256)
PC address: 2721
Estimated Gas Usage: 17989 - 213517
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:230

IterableMapping.iterate_getValue(balances, _from)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000480000000000204020800040200082000000000000000000000000000000001010101010101010101010201010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StandardToken
Function name: transferFrom(address,address,uint256)
PC address: 2834
Estimated Gas Usage: 17944 - 213472
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:234

allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x810c0040016802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000010000000001000000000100120404004000000000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: IBRIDGE
Function name: transferFrom(address,address,uint256)
PC address: 2932
Estimated Gas Usage: 17989 - 213517
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:230

IterableMapping.insert(balances, _from, IterableMapping.iterate_getValue(balances, _from).sub(_value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200000000006000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000402010100100010100002000100110800804040000000000000000000000000001020201010101010102020101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: IBRIDGE
Function name: transferFrom(address,address,uint256)
PC address: 2932
Estimated Gas Usage: 17989 - 213517
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:230

IterableMapping.insert(balances, _from, IterableMapping.iterate_getValue(balances, _from).sub(_value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x40402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000480000000000204020800040200082000000000000000000000000000000001010101010101010101010201010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: IBRIDGE
Function name: transferFrom(address,address,uint256)
PC address: 3185
Estimated Gas Usage: 17989 - 213517
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:231

IterableMapping.iterate_getValue(balances, _to)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000480000000000204020800040200082000000000000000000000000000000001010101010101010101010201010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: IBRIDGE
Function name: transferFrom(address,address,uint256)
PC address: 3396
Estimated Gas Usage: 17989 - 213517
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:231

IterableMapping.insert(balances, _to, IterableMapping.iterate_getValue(balances, _to).add(_value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x40402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000480000000000204020800040200082000000000000000000000000000000001010101010101010101010201010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: IBRIDGE
Function name: transferFrom(address,address,uint256)
PC address: 3582
Estimated Gas Usage: 17989 - 213517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:234

allowed[_from][msg.sender]

--------------------
Initial State:

Account: [CREATOR], balance: 0x40402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000480000000000204020800040200082000000000000000000000000000000001010101010101010101010201010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: IBRIDGE
Function name: transferFrom(address,address,uint256)
PC address: 3723
Estimated Gas Usage: 17989 - 213517
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:234

allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000480000000000204020800040200082000000000000000000000000000000001010101010101010101010201010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StandardToken
Function name: transfer(address,uint256)
PC address: 4324
Estimated Gas Usage: 10598 - 184986
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:160

IterableMapping.iterate_getValue(balances, msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0xc4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000080000100804001000400081000080000000101005481820ccb1b10905d8ca118a9d65a59c91248c0cbc09820a04848b042965504, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StandardToken
Function name: transfer(address,uint256)
PC address: 4324
Estimated Gas Usage: 10598 - 184986
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:160

IterableMapping.iterate_getValue(balances, msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80021432, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001010101010101010101010101010101010101014e4a04805200c210d800168081002001c05131901c002b76d918a9a0e8a0220c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: StandardToken
Function name: transfer(address,uint256)
PC address: 4535
Estimated Gas Usage: 10598 - 184986
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:160

IterableMapping.insert(balances, msg.sender, IterableMapping.iterate_getValue(balances, msg.sender).sub(_value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000080000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000801001400401200001000001000100088001000000000000000000000000000001010101800101010180010101010101010110010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000010101010101010101010101010101010101010183e0400811023c80a80573090002d9070c004000008ba6a85514202055555490, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StandardToken
Function name: transfer(address,uint256)
PC address: 4535
Estimated Gas Usage: 10598 - 184986
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:160

IterableMapping.insert(balances, msg.sender, IterableMapping.iterate_getValue(balances, msg.sender).sub(_value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x80021432, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001010101010101010101010101010101010101014e4a04805200c210d800168081002001c05131901c002b76d918a9a0e8a0220c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StandardToken
Function name: transfer(address,uint256)
PC address: 4788
Estimated Gas Usage: 10598 - 184986
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:161

IterableMapping.iterate_getValue(balances, _to)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80021432, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001010101010101010101010101010101010101014e4a04805200c210d800168081002001c05131901c002b76d918a9a0e8a0220c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: StandardToken
Function name: transfer(address,uint256)
PC address: 4999
Estimated Gas Usage: 10598 - 184986
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:161

IterableMapping.insert(balances, _to, IterableMapping.iterate_getValue(balances, _to).add(_value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x80021432, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001010101010101010101010101010101010101014e4a04805200c210d800168081002001c05131901c002b76d918a9a0e8a0220c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: IBRIDGE
Function name: transfer(address,uint256)
PC address: 5607
Estimated Gas Usage: 10643 - 185031
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:160

IterableMapping.iterate_getValue(balances, msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000c0000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb0000000000000000000000000101010101010101010101010101010101010101810100000008001200000040014608c8010164005248140c09602b0c66cc9244, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: IBRIDGE
Function name: transfer(address,uint256)
PC address: 5607
Estimated Gas Usage: 10643 - 185031
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:160

IterableMapping.iterate_getValue(balances, msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001010101010101010101010101010101010101011022e50800208d10a00825b3442144080121010050000e200000040000000821, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: IBRIDGE
Function name: transfer(address,uint256)
PC address: 5818
Estimated Gas Usage: 10643 - 185031
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. theyâ€™re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:160

IterableMapping.insert(balances, msg.sender, IterableMapping.iterate_getValue(balances, msg.sender).sub(_value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000000000000000100000000010880000000000000000000000000000002080204024040102040200204048010200420800000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb56565656565656565656565601010101010101010101010101010101010101016d0204af8e84c700520549010a41404006930a80348498fea4d0800000049206, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: IBRIDGE
Function name: transfer(address,uint256)
PC address: 5818
Estimated Gas Usage: 10643 - 185031
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:160

IterableMapping.insert(balances, msg.sender, IterableMapping.iterate_getValue(balances, msg.sender).sub(_value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001010101010101010101010101010101010101011022e50800208d10a00825b3442144080121010050000e200000040000000821, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: transfer(address,uint256)
PC address: 5823
Estimated Gas Usage: 3771 - 73180
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:106

assert(_b <= _a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x101080020000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: StandardToken
Function name: transfer(address,uint256)
PC address: 5853
Estimated Gas Usage: 7238 - 146056
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:115

assert(c >= _a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000808, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001010101010101010101010101010101010101018c049020a2104200551108894200088a4a000a96381429132a28a05190920001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: IBRIDGE
Function name: transfer(address,uint256)
PC address: 6071
Estimated Gas Usage: 10643 - 185031
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:161

IterableMapping.iterate_getValue(balances, _to)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001010101010101010101010101010101010101011022e50800208d10a00825b3442144080121010050000e200000040000000821, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: IBRIDGE
Function name: transfer(address,uint256)
PC address: 6282
Estimated Gas Usage: 10643 - 185031
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:161

IterableMapping.insert(balances, _to, IterableMapping.iterate_getValue(balances, _to).add(_value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001010101010101010101010101010101010101011022e50800208d10a00825b3442144080121010050000e200000040000000821, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: IBRIDGE
Function name: transfer(address,uint256)
PC address: 7648
Estimated Gas Usage: 3816 - 73225
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:106

assert(_b <= _a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: IBRIDGE
Function name: transfer(address,uint256)
PC address: 7678
Estimated Gas Usage: 7283 - 146101
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0xdaac493113eb830ffad46069307a14ea38a845b9.sol:115

assert(c >= _a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000400a6920, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000010101010101010101010101010101010101010100c4463000d22500002110300000a70000080300818072800000000000000001, value: 0x0



---------------------------------------------
For contract 0xdaac493113eb830ffad46069307a14ea38a845b9.sol
Tool Runtime = 1334.9494932660018 seconds
#############################################