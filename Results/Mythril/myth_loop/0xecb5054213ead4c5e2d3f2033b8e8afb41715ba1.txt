==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GAMMA
Function name: mint(uint256,string,bool)
PC address: 4698
Estimated Gas Usage: 50781 - 213560
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol:50

balanceOf[msg.sender]++

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000010400008010000800200000002004001040004100000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000003900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GAMMA
Function name: tokenURI(uint256)
PC address: 5942
Estimated Gas Usage: 3401 - 4909
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol:17

mapping(uint256 => string) public tokenURI

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: tokenURI(uint256), txdata: 0xc87b56dd0000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GAMMA
Function name: tokenURI(uint256)
PC address: 5994
Estimated Gas Usage: 3401 - 4909
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol:17

mapping(uint256 => string) public tokenURI

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: tokenURI(uint256), txdata: 0xc87b56dd0000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GAMMA
Function name: purchase(uint256)
PC address: 6806
Estimated Gas Usage: 35676 - 173852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol:77

balanceOf[from]--

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateSale(uint256,uint256,bool), txdata: 0x53571325000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000200000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GAMMA
Function name: transferFrom(address,address,uint256)
PC address: 6814
Estimated Gas Usage: 33009 - 136006
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol:77

balanceOf[from]--

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 6818
Estimated Gas Usage: 35676 - 173852
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol:77

balanceOf[from]--

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000401014004040104010101020401080108012001010102010401010101010140, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 6886
Estimated Gas Usage: 35676 - 173852
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol:78

balanceOf[to]++

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000401014004040104010101020401080108012001010102010401010101010140, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GAMMA
Function name: transferFrom(address,address,uint256)
PC address: 6893
Estimated Gas Usage: 33009 - 136006
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol:78

balanceOf[to]++

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd0000000000000000000000000000000000000022284000000000214088baa8ce0000000000000000000000000000000000000022284000000000214088baa8ce0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 6897
Estimated Gas Usage: 35603 - 173496
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol:78

balanceOf[to]++

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000040102, value: 0x0
Caller: [CREATOR], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: GAMMA
Function name: purchase(uint256)
PC address: 6927
Estimated Gas Usage: 35676 - 173852
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol:79

getApproved[tokenId] = address(0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateSale(uint256,uint256,bool), txdata: 0x53571325000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000200000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 6980
Estimated Gas Usage: 35603 - 173496
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol:79

getApproved[tokenId] = address(0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000004080000000200180010080002000010000800000000000800001400000a00200, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000002, value: 0x21

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 7009
Estimated Gas Usage: 35676 - 173852
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol:80

ownerOf[tokenId] = to

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000401014004040104010101020401080108012001010102010401010101010140, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 7062
Estimated Gas Usage: 35603 - 173496
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol:80

ownerOf[tokenId] = to

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000040102, value: 0x0
Caller: [CREATOR], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 7095
Estimated Gas Usage: 35676 - 173852
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol:81

sale[tokenId].forSale = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000401014004040104010101020401080108012001010102010401010101010140, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: GAMMA
Function name: purchase(uint256)
PC address: 7109
Estimated Gas Usage: 35603 - 173496
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol:81

sale[tokenId].forSale = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: mint(uint256,string,bool), txdata: 0x82e3515c000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000004080000000200180010080002000010000800000000000800001400000a00200, value: 0x0
Caller: [SOMEGUY], function: purchase(uint256), txdata: 0xefef39a10000000000000000000000000000000000000000000000000000000000000002, value: 0x21



---------------------------------------------
For contract 0xecb5054213ead4c5e2d3f2033b8e8afb41715ba1.sol
Tool Runtime = 8352.17176854299 seconds
#############################################