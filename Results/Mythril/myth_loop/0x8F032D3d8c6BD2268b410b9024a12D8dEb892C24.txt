==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CurveFiProtocol_Y
Function name: yTokens(uint256)
PC address: 13200
Estimated Gas Usage: 1190 - 1285
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops3/0x8F032D3d8c6BD2268b410b9024a12D8dEb892C24.sol:1741

address[] public yTokens

--------------------
Initial State:

Account: [CREATOR], balance: 0x42, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: yTokens(uint256), txdata: 0x998397d10000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CurveFiProtocol_Y
Function name: optimalProportions()
PC address: 17093
Estimated Gas Usage: 13205 - 153193
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops3/0x8F032D3d8c6BD2268b410b9024a12D8dEb892C24.sol:1648

curveFiToken.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: optimalProportions(), txdata: 0xfe9dee61, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: CurveFiProtocol_Y
Function name: optimalProportions()
PC address: 17343
Estimated Gas Usage: 13205 - 153193
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops3/0x8F032D3d8c6BD2268b410b9024a12D8dEb892C24.sol:1649

curveFiLPGauge.balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: optimalProportions(), txdata: 0xfe9dee61, value: 0x0
Caller: [CREATOR], function: optimalProportions(), txdata: 0xfe9dee61, value: 0x0



---------------------------------------------
For contract 0x8F032D3d8c6BD2268b410b9024a12D8dEb892C24.sol
Tool Runtime = 1497.0133916159975 seconds
#############################################