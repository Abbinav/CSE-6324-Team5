==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CryptochromeFirstPresale
Function name: isActive()
PC address: 3268
Estimated Gas Usage: 1054 - 1149
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops10/0xf1a8793cfc1ae7fe721aa9bfe1b930bec145602d.sol:91

now >= startTime && now < endTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: isActive(), txdata: 0x22f3e2d4, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CryptochromeFirstPresale
Function name: getBonusValue(uint256)
PC address: 7572
Estimated Gas Usage: 2916 - 3292
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops10/0xf1a8793cfc1ae7fe721aa9bfe1b930bec145602d.sol:75

startTime + 24 hours

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000002079c30, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4f4f4f4f4f4f4f4f4f4f4f4fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setTimeSpan(uint256,uint256), txdata: 0xb62d444fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff43010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: getBonusValue(uint256), txdata: 0x3e6df7a34f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CryptochromeFirstPresale
Function name: getBonusValue(uint256)
PC address: 7579
Estimated Gas Usage: 1113 - 1208
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops10/0xf1a8793cfc1ae7fe721aa9bfe1b930bec145602d.sol:75

if (now < (startTime + 24 hours)) {
           return (tokens*10/100);
          
       }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getBonusValue(uint256), txdata: 0x3e6df7a30000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CryptochromeFirstPresale
Function name: getBonusValue(uint256)
PC address: 7585
Estimated Gas Usage: 2916 - 3292
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops10/0xf1a8793cfc1ae7fe721aa9bfe1b930bec145602d.sol:76

tokens*10

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getBonusValue(uint256), txdata: 0x3e6df7a34000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CryptochromeFirstPresale
Function name: getBonusValue(uint256)
PC address: 7610
Estimated Gas Usage: 2916 - 3292
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops10/0xf1a8793cfc1ae7fe721aa9bfe1b930bec145602d.sol:79

startTime + 2 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4f4f4f4f4f4f4f4f4f4f4f4faffeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: setTimeSpan(uint256,uint256), txdata: 0xb62d444ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed3010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: getBonusValue(uint256), txdata: 0x3e6df7a3afafafafafafafafafafafafafafafafafafafafafafafafafafafafafafafaf, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CryptochromeFirstPresale
Function name: getBonusValue(uint256)
PC address: 7617
Estimated Gas Usage: 1944 - 2039
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops10/0xf1a8793cfc1ae7fe721aa9bfe1b930bec145602d.sol:79

if (now < (startTime + 2 days)) {
           return (tokens*5/100);
           
       }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getBonusValue(uint256), txdata: 0x3e6df7a30000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CryptochromeFirstPresale
Function name: getBonusValue(uint256)
PC address: 7623
Estimated Gas Usage: 2916 - 3292
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops10/0xf1a8793cfc1ae7fe721aa9bfe1b930bec145602d.sol:80

tokens*5

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getBonusValue(uint256), txdata: 0x3e6df7a38000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CryptochromeFirstPresale
Function name: getBonusValue(uint256)
PC address: 7648
Estimated Gas Usage: 2916 - 3292
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops10/0xf1a8793cfc1ae7fe721aa9bfe1b930bec145602d.sol:83

startTime + 3 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 4f4f4f4f4f4f4f4f4f4f4f4fdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setTimeSpan(uint256,uint256), txdata: 0xb62d444fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9810000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: getBonusValue(uint256), txdata: 0x3e6df7a34f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CryptochromeFirstPresale
Function name: getBonusValue(uint256)
PC address: 7655
Estimated Gas Usage: 2775 - 2870
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops10/0xf1a8793cfc1ae7fe721aa9bfe1b930bec145602d.sol:83

if (now < (startTime + 3 days)) {
           return ((tokens * 250)/10000);
           
       }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getBonusValue(uint256), txdata: 0x3e6df7a30000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: CryptochromeFirstPresale
Function name: getBonusValue(uint256)
PC address: 7662
Estimated Gas Usage: 2916 - 3292
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops10/0xf1a8793cfc1ae7fe721aa9bfe1b930bec145602d.sol:84

tokens * 250

--------------------
Initial State:

Account: [CREATOR], balance: 0x403e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getBonusValue(uint256), txdata: 0x3e6df7a3840621cea1111e38088440d6b5c015a02000216ddec004211001555555555564, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: CryptochromeFirstPresale
Function name: allocatetokens()
PC address: 9833
Estimated Gas Usage: 2803 - 2898
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops10/0xf1a8793cfc1ae7fe721aa9bfe1b930bec145602d.sol:106

require(isActive())

--------------------
Initial State:

Account: [CREATOR], balance: 0x40041000040000600, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: allocatetokens(), txdata: 0xa0bc2022, value: 0xb1a2bc2ec50000

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CryptochromeFirstPresale
Function name: allocatetokens()
PC address: 9855
Estimated Gas Usage: 5257 - 5352
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops10/0xf1a8793cfc1ae7fe721aa9bfe1b930bec145602d.sol:107

msg.value/EXCHANGE_RATE

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: efefefefefefefefefefefefdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: setExchangeRate(uint256), txdata: 0xdb068e0e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: allocatetokens(), txdata: 0xa0bc2022, value: 0xb1a2bc2ec50000



---------------------------------------------
For contract 0xf1a8793cfc1ae7fe721aa9bfe1b930bec145602d.sol
Tool Runtime = 5679.919661847001 seconds
#############################################