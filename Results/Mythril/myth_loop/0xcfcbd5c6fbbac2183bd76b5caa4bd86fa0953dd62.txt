==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ApacheNetwork
Function name: multiTransfer(address[],uint256[])
PC address: 2448
Estimated Gas Usage: 1131 - 6962
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop7/0xcfcbd5c6fbbac2183bd76b5caa4bd86fa0953dd62.sol:131

amounts[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d5450000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ApacheNetwork
Function name: decreaseAllowance(address,uint256)
PC address: 6390
Estimated Gas Usage: 1373 - 1848
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop7/0xcfcbd5c6fbbac2183bd76b5caa4bd86fa0953dd62.sol:36

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x210800000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: decreaseAllowance(address,uint256), txdata: 0xa457c2d700000000000000000000000002000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: ApacheNetwork
Function name: findPercent(uint256)
PC address: 6421
Estimated Gas Usage: 1231 - 1326
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop7/0xcfcbd5c6fbbac2183bd76b5caa4bd86fa0953dd62.sol:42

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20101000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: findPercent(uint256), txdata: 0x99702507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80, value: 0x0



---------------------------------------------
For contract 0xcfcbd5c6fbbac2183bd76b5caa4bd86fa0953dd62.sol
Tool Runtime = 3688.965231515991 seconds
#############################################