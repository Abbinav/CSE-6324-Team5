==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: WhiteListStorage
Function name: tokenToTransferringRuleArray(uint8,uint256)
PC address: 1710
Estimated Gas Usage: 1263 - 1548
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/5/0x055225ac7a4c2a91fbba70fa219a7f254d17cd8f.sol:79

mapping(uint8 => TransferringRule[]) public tokenToTransferringRuleArray

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: tokenToTransferringRuleArray(uint8,uint256), txdata: 0x64a522a500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: RegisteryWhiteList
Function name: tokenToTransferringRuleArray(uint8,uint256)
PC address: 5616
Estimated Gas Usage: 1263 - 1548
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/5/0x055225ac7a4c2a91fbba70fa219a7f254d17cd8f.sol:79

mapping(uint8 => TransferringRule[]) public tokenToTransferringRuleArray

--------------------
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tokenToTransferringRuleArray(uint8,uint256), txdata: 0x64a522a500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: WhiteList
Function name: tokenToTransferringRuleArray(uint8,uint256)
PC address: 12049
Estimated Gas Usage: 1264 - 1549
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/5/0x055225ac7a4c2a91fbba70fa219a7f254d17cd8f.sol:79

mapping(uint8 => TransferringRule[]) public tokenToTransferringRuleArray

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tokenToTransferringRuleArray(uint8,uint256), txdata: 0x64a522a500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x055225ac7a4c2a91fbba70fa219a7f254d17cd8f.sol
Tool Runtime = 374.7230056980043 seconds
#############################################