==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: TOKENBOX
Function name: lockState(address,uint256)
PC address: 4015
Estimated Gas Usage: 1230 - 1515
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop4/0xd210336b5918dbc8425442528f12d4d65fd093ea.sol:319

lockInfo[_holder][_idx]

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000020000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: lockState(address,uint256), txdata: 0x46cf1bb500000000000000000000000000000000000100010101010002010001010000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: TOKENBOX
Function name: transfer(address,uint256)
PC address: 10592
Estimated Gas Usage: 4878 - 6298
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop4/0xd210336b5918dbc8425442528f12d4d65fd093ea.sol:301

if (lockInfo[_holder][i].releaseTime <= now) {
                _balances[_holder] = _balances[_holder].add(lockInfo[_holder][i].balance);
                emit Unlock(_holder, lockInfo[_holder][i].balance);
                lockInfo[_holder][i].balance = 0;

                if (i != lockInfo[_holder].length - 1) {
                    lockInfo[_holder][i] = lockInfo[_holder][lockInfo[_holder].length - 1];
                    i--;
                }
                lockInfo[_holder].length--;

            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lock(address,uint256,uint256), txdata: 0xe2ab691d000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000004040400440044004404001044080400440800004400440404000000400400004, value: 0x0
Caller: [ATTACKER], function: transfer(address,uint256), txdata: 0xa9059cbb69696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969696969, value: 0x0



---------------------------------------------
For contract 0xd210336b5918dbc8425442528f12d4d65fd093ea.sol
Tool Runtime = 3323.0300060439913 seconds
#############################################