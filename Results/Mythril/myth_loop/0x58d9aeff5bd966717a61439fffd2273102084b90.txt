==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 513
Estimated Gas Usage: 93596 - 473488
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:371

lib_math.OneDay() * 60

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 515
Estimated Gas Usage: 93596 - 473488
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:371

now + lib_math.OneDay() * 60

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 520
Estimated Gas Usage: 93596 - 473488
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:371

_lotteryTime = now + lib_math.OneDay() * 60

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 545
Estimated Gas Usage: 93596 - 473488
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:375

specialRewardsDescMapping[0] = 100

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: InternalModule
Function name: _contractOwners(uint256)
PC address: 550
Estimated Gas Usage: 1034 - 1129
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:26

address payable[] public _contractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: _contractOwners(uint256), txdata: 0x5a49f4710000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 571
Estimated Gas Usage: 93596 - 473488
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:377

specialRewardsDescMapping[1] = 5

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 597
Estimated Gas Usage: 93596 - 473488
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:379

specialRewardsDescMapping[2] = 5

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 623
Estimated Gas Usage: 93596 - 473488
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:381

specialRewardsDescMapping[3] = 5

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 649
Estimated Gas Usage: 93596 - 473488
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:383

specialRewardsDescMapping[4] = 5

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: constructor
PC address: 675
Estimated Gas Usage: 93596 - 473488
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:385

specialRewardsDescMapping[5] = 5

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 2126
Estimated Gas Usage: 3755 - 4275
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:449

if ( now > _lotteryTime ) {





            address payable payAddress = address( uint160( address(owner) ) );





            if ( address(this).balance <= amount + 10 ether ) {

                payAddress.transfer( address(this).balance );

            } else {

                payAddress.transfer( amount + 10 ether );

            }





            WinningThePrize();



            return true;

        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 2142
Estimated Gas Usage: 16031 - 71790
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:461

amount + 10 ether

--------------------
Initial State:

Account: [CREATOR], balance: 0x2030000000040000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea90000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffff538de7c18800000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 2889
Estimated Gas Usage: 44368 - 236240
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:497

_lotteryTime += (amount / 1 ether) * lib_math.OneHours()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000040200000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100020804, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 3057
Estimated Gas Usage: 44368 - 236240
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:505

_lotteryTime += lib_math.OneHours()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000040200000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100020804, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 3058
Estimated Gas Usage: 51797 - 298136
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:505

_lotteryTime += lib_math.OneHours()

--------------------
Initial State:

Account: [CREATOR], balance: 0xa00000000a4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016810d02010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 3064
Estimated Gas Usage: 44368 - 236240
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:505

_lotteryTime += lib_math.OneHours()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000040200000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100020804, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 3165
Estimated Gas Usage: 51797 - 298136
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:513

lib_math.OneHours()

--------------------
Initial State:

Account: [CREATOR], balance: 0x4a18100000000110c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a384000201, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 3165
Estimated Gas Usage: 44368 - 236240
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:513

lib_math.OneHours()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000040200000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100020804, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 3224
Estimated Gas Usage: 51797 - 298136
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:513

_winningThePrizeHours

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000040000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e00d8000c88000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 3225
Estimated Gas Usage: 51797 - 298136
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:513

_winningThePrizeHours * lib_math.OneHours()

--------------------
Initial State:

Account: [CREATOR], balance: 0x401000000c0003086, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e0002007100204, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 3229
Estimated Gas Usage: 44368 - 236240
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:513

_lotteryTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000040200000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100020804, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 3230
Estimated Gas Usage: 51797 - 298136
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:513

_lotteryTime - now

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000080, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 3236
Estimated Gas Usage: 44266 - 235857
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:513

if ( _lotteryTime - now > _winningThePrizeHours * lib_math.OneHours() ) {

            _lotteryTime = now + _winningThePrizeHours * lib_math.OneHours();

        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 3335
Estimated Gas Usage: 51797 - 298136
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:515

lib_math.OneHours()

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000040000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e00d8000c88000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 3394
Estimated Gas Usage: 51797 - 298136
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:515

_winningThePrizeHours

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000040000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e00d8000c88000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 3395
Estimated Gas Usage: 51797 - 298136
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:515

_winningThePrizeHours * lib_math.OneHours()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000010004004, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 3397
Estimated Gas Usage: 51797 - 298136
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:515

now + _winningThePrizeHours * lib_math.OneHours()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011a0018000010002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: API_AddLatestAddress(address,uint256)
PC address: 3402
Estimated Gas Usage: 51797 - 298136
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:515

_lotteryTime = now + _winningThePrizeHours * lib_math.OneHours()

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000040000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: API_AddLatestAddress(address,uint256), txdata: 0x07796ea9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e00d8000c88000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LuckAssetsPoolA
Function name: _contractOwners(uint256)
PC address: 3489
Estimated Gas Usage: 1079 - 1174
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:26

address payable[] public _contractOwners = [

        address(0xc99D13544297d5baD9e0b0Ca0E94A4E614312F33)

    ]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2943582900000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: _contractOwners(uint256), txdata: 0x5a49f4710000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: API_Reboot()
PC address: 4404
Estimated Gas Usage: 16202 - 91800
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:659

_winningThePrizeHours

--------------------
Initial State:

Account: [CREATOR], balance: 0x400c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: API_Reboot(), txdata: 0x9ae0bf2b, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LuckAssetsPoolA
Function name: API_Reboot()
PC address: 4405
Estimated Gas Usage: 16202 - 91800
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:659

_winningThePrizeHours * lib_math.OneHours()

--------------------
Initial State:

Account: [CREATOR], balance: 0x200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: API_Reboot(), txdata: 0x9ae0bf2b, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LuckAssetsPoolA
Function name: API_Reboot()
PC address: 4407
Estimated Gas Usage: 16202 - 91800
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:659

now + _winningThePrizeHours * lib_math.OneHours()

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: API_Reboot(), txdata: 0x9ae0bf2b, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LuckAssetsPoolA
Function name: API_Reboot()
PC address: 4412
Estimated Gas Usage: 16202 - 91800
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:659

_lotteryTime = now + _winningThePrizeHours * lib_math.OneHours()

--------------------
Initial State:

Account: [CREATOR], balance: 0x400c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: AddAuthAddress(address), txdata: 0x785df1a1000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: API_Reboot(), txdata: 0x9ae0bf2b, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LuckAssetsPoolA
Function name: _investList(uint256)
PC address: 4986
Estimated Gas Usage: 1145 - 1240
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/5/0x58d9aeff5bd966717a61439fffd2273102084b90.sol:331

Invest[] public _investList

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: _investList(uint256), txdata: 0xa3280ffe0000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x58d9aeff5bd966717a61439fffd2273102084b90.sol
Tool Runtime = 533.360195108995 seconds
#############################################