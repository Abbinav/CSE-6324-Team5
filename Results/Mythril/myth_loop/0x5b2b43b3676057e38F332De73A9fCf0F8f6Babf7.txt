==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 959
Estimated Gas Usage: 324 - 419
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:553

x / y

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: safeDiv(uint256,uint256), txdata: 0xb5931f7c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Shelf
Function name: recover(uint256,address,uint256)
PC address: 3327
Estimated Gas Usage: 19088 - 231582
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1484

pile.accrue(loan)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Shelf
Function name: recover(uint256,address,uint256)
PC address: 3498
Estimated Gas Usage: 19088 - 231582
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1486

pile.debt(loan)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Shelf
Function name: recover(uint256,address,uint256)
PC address: 3498
Estimated Gas Usage: 19088 - 231582
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1486

pile.debt(loan)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: recover(uint256,address,uint256)
PC address: 3562
Estimated Gas Usage: 19088 - 231582
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1488

currency

--------------------
Initial State:

Account: [CREATOR], balance: 0x200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Shelf
Function name: recover(uint256,address,uint256)
PC address: 3808
Estimated Gas Usage: 19088 - 231582
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1488

currency.transferFrom(usr, address(this), currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000020002000000000002000200020000000202020000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000000000000000000000000000000000000080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Shelf
Function name: recover(uint256,address,uint256)
PC address: 3808
Estimated Gas Usage: 19088 - 231582
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1488

currency.transferFrom(usr, address(this), currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000000000000000000000000000000000000002020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: recover(uint256,address,uint256)
PC address: 3808
Estimated Gas Usage: 19088 - 231582
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1488

currency.transferFrom(usr, address(this), currencyAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: recover(uint256,address,uint256)
PC address: 3986
Estimated Gas Usage: 19088 - 231582
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1490

ceiling

--------------------
Initial State:

Account: [CREATOR], balance: 0x200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Shelf
Function name: recover(uint256,address,uint256)
PC address: 4136
Estimated Gas Usage: 19088 - 231582
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1490

ceiling.repay(loan, loanDebt)

--------------------
Initial State:

Account: [CREATOR], balance: 0x9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: recover(uint256,address,uint256)
PC address: 4136
Estimated Gas Usage: 19088 - 231582
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1490

ceiling.repay(loan, loanDebt)

--------------------
Initial State:

Account: [CREATOR], balance: 0x200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: recover(uint256,address,uint256)
PC address: 4163
Estimated Gas Usage: 19088 - 231582
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1492

pile

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1200020080000081010000002040202000000081080044020024000040140010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Shelf
Function name: recover(uint256,address,uint256)
PC address: 4313
Estimated Gas Usage: 19088 - 231582
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1492

pile.decDebt(loan, loanDebt)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: recover(uint256,address,uint256)
PC address: 4313
Estimated Gas Usage: 19088 - 231582
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1492

pile.decDebt(loan, loanDebt)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: recover(uint256,address,uint256)
PC address: 4349
Estimated Gas Usage: 19088 - 231582
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1494

distributor

--------------------
Initial State:

Account: [CREATOR], balance: 0x200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: recover(uint256,address,uint256)
PC address: 4480
Estimated Gas Usage: 19088 - 231582
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1494

distributor.balance()

--------------------
Initial State:

Account: [CREATOR], balance: 0x1080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Shelf
Function name: issue(address,uint256)
PC address: 12054
Estimated Gas Usage: 23974 - 158679
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1414

title.issue(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000101000000000000040101010101020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: issue(address,uint256), txdata: 0x867904b40000000000000000000000008cce8cca8cce8cee8cce8cca8cceaeeeaffeaf760000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Shelf
Function name: issue(address,uint256)
PC address: 12054
Estimated Gas Usage: 23974 - 158679
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1414

title.issue(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: issue(address,uint256), txdata: 0x867904b400000000000000000000000080808080808040808080808080808080808080800000000008000110aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa20100804, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: issue(address,uint256)
PC address: 12135
Estimated Gas Usage: 23974 - 158679
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1415

nftlookup[nft] = loan

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: issue(address,uint256), txdata: 0x867904b400000000000000000000000004000010000400001000000100400080200280808000000101201000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: issue(address,uint256)
PC address: 12167
Estimated Gas Usage: 23974 - 158679
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1416

shelf[loan].registry = registry_

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000080000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000101000000000000000401010100010101044000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: issue(address,uint256), txdata: 0x867904b440404040404040404040404080808080808080808080808080808080808080800000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00800006, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: issue(address,uint256)
PC address: 12220
Estimated Gas Usage: 23974 - 158679
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1416

shelf[loan].registry = registry_

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: issue(address,uint256), txdata: 0x867904b400000000000000000000000004000010000400001000000100400080200280808000000101201000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: issue(address,uint256)
PC address: 12247
Estimated Gas Usage: 23974 - 158679
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1417

shelf[loan].tokenId = token_

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: issue(address,uint256), txdata: 0x867904b400000000000000000000000004000010000400001000000100400080200280808000000101201000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000010, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Shelf
Function name: depend(bytes32,address)
PC address: 12782
Estimated Gas Usage: 7320 - 27935
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1391

currency.approve(lender, uint(0))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000001014000000100002001080200000000200000000000010102010101040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: depend(bytes32,address), txdata: 0x9adc339d73756273637269626572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: depend(bytes32,address)
PC address: 12809
Estimated Gas Usage: 12868 - 103415
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1392

currency

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9a9a9a9a9a9a9a9a9a9a9a9adeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: depend(bytes32,address), txdata: 0x9adc339d6c656e64657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Shelf
Function name: depend(bytes32,address)
PC address: 13035
Estimated Gas Usage: 12868 - 103415
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1392

currency.approve(addr, uint(-1))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1020202000200020202020200020002000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: depend(bytes32,address), txdata: 0x9adc339d6c656e64657200000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Shelf
Function name: depend(bytes32,address)
PC address: 13035
Estimated Gas Usage: 12868 - 103415
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1392

currency.approve(addr, uint(-1))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: depend(bytes32,address), txdata: 0x9adc339d6c656e64657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: depend(bytes32,address)
PC address: 13035
Estimated Gas Usage: 12868 - 103415
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1392

currency.approve(addr, uint(-1))

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9a9a9a9a9a9a9a9a9a9a9a9adeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: depend(bytes32,address), txdata: 0x9adc339d6c656e64657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: depend(bytes32,address)
PC address: 13067
Estimated Gas Usage: 12868 - 103415
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1393

lender = addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9a9a9a9a9a9a9a9a9a9a9a9adeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: depend(bytes32,address), txdata: 0x9adc339d6c656e64657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: depend(bytes32,address)
PC address: 13120
Estimated Gas Usage: 12868 - 103415
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1393

lender = addr

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9a9a9a9a9a9a9a9a9a9a9a9adeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: depend(bytes32,address), txdata: 0x9adc339d6c656e64657200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Shelf
Function name: safeDiv(uint256,uint256)
PC address: 14283
Estimated Gas Usage: 325 - 420
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:553

x / y

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: safeDiv(uint256,uint256), txdata: 0xb5931f7c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 15479
Estimated Gas Usage: 9282 - 83001
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000008000000000000000000000021002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: lock(uint256), txdata: 0xdd4670640000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: lock(uint256)
PC address: 15617
Estimated Gas Usage: 11681 - 120106
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1514

subscriber

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9a9a9a9a9a9a9a9a9a9a9a9a00000000000000000000000000000000000000009a9a9a9a9a9a9a9a9a9a9a9adeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: depend(bytes32,address), txdata: 0x9adc339d73756273637269626572000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: lock(uint256), txdata: 0xdd4670640000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: lock(uint256)
PC address: 15681
Estimated Gas Usage: 9282 - 83001
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1515

subscriber

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9a9a9a9a9a9a9a9a9a9a9a9a00000000000000000000000000000000000000009a9a9a9a9a9a9a9a9a9a9a9adeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: depend(bytes32,address), txdata: 0x9adc339d73756273637269626572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: lock(uint256), txdata: 0xdd4670640000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 15823
Estimated Gas Usage: 11681 - 120106
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1515

subscriber.unlockEvent(loan)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000006440, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x64c0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: depend(bytes32,address), txdata: 0x9adc339d7375627363726962657200000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: lock(uint256), txdata: 0xdd4670640000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 15823
Estimated Gas Usage: 11681 - 120106
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1515

subscriber.unlockEvent(loan)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: depend(bytes32,address), txdata: 0x9adc339d73756273637269626572000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: lock(uint256), txdata: 0xdd4670640000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: lock(uint256)
PC address: 15823
Estimated Gas Usage: 9282 - 83001
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1515

subscriber.unlockEvent(loan)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 9a9a9a9a9a9a9a9a9a9a9a9a00000000000000000000000000000000000000009a9a9a9a9a9a9a9a9a9a9a9adeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: depend(bytes32,address), txdata: 0x9adc339d73756273637269626572000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: lock(uint256), txdata: 0xdd4670640000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: lock(uint256)
PC address: 15871
Estimated Gas Usage: 9282 - 83001
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1517

shelf[loan].registry

--------------------
Initial State:

Account: [CREATOR], balance: 0x81080000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: lock(uint256), txdata: 0xdd4670640000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: lock(uint256)
PC address: 15952
Estimated Gas Usage: 11681 - 120106
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1517

shelf[loan].tokenId

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: depend(bytes32,address), txdata: 0x9adc339d7375627363726962657200000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: lock(uint256), txdata: 0xdd4670648000408000000204affeaffeaffeaffeaffeaffeaffeaffeaffeaffe10010800, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 16139
Estimated Gas Usage: 9282 - 83001
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1517

NFTLike_2(shelf[loan].registry).transferFrom(msg.sender, address(this), shelf[loan].tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lock(uint256), txdata: 0xdd4670640000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: lock(uint256)
PC address: 16139
Estimated Gas Usage: 9282 - 83001
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1517

NFTLike_2(shelf[loan].registry).transferFrom(msg.sender, address(this), shelf[loan].tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x81080000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: lock(uint256), txdata: 0xdd4670640000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Shelf
Function name: claim(uint256,address)
PC address: 16724
Estimated Gas Usage: 6861 - 45548
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1534

NFTLike_2(shelf[loan].registry).transferFrom(address(this), usr, shelf[loan].tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: issue(address,uint256), txdata: 0x867904b4000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000, value: 0x0
Caller: [CREATOR], function: claim(uint256,address), txdata: 0xddd5e1b271e928af000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefb4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4b4, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Shelf
Function name: recover(uint256,address,uint256)
PC address: 17412
Estimated Gas Usage: 19088 - 231582
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/1/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1538

balances[loan]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: recover(uint256,address,uint256), txdata: 0x08e45dc1000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol
Tool Runtime = 6603.327301272999 seconds
#############################################