==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: USDTPool
Function name: exit()
PC address: 2611
Estimated Gas Usage: 26561 - 107226
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop1/0x80c09d3cc108fa52b7b63cdcc071daebc059a494.sol:329

require(block.timestamp >= starttime,"not start")

--------------------
Initial State:

Account: [CREATOR], balance: 0x40180000400050802, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: exit(), txdata: 0xe9fad8ee, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: USDTPool
Function name: getReward()
PC address: 3184
Estimated Gas Usage: 25635 - 106110
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop1/0x80c09d3cc108fa52b7b63cdcc071daebc059a494.sol:329

require(block.timestamp >= starttime,"not start")

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: USDTPool
Function name: stake(uint256)
PC address: 4949
Estimated Gas Usage: 25694 - 106169
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop1/0x80c09d3cc108fa52b7b63cdcc071daebc059a494.sol:329

require(block.timestamp >= starttime,"not start")

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000100000842, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256), txdata: 0xa694fc3a0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: USDTPool
Function name: lastTimeRewardApplicable()
PC address: 7195
Estimated Gas Usage: 1068 - 1163
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop1/0x80c09d3cc108fa52b7b63cdcc071daebc059a494.sol:48

a < b ? a : b

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: lastTimeRewardApplicable(), txdata: 0x80faa57d, value: 0x0



---------------------------------------------
For contract 0x80c09d3cc108fa52b7b63cdcc071daebc059a494.sol
Tool Runtime = 375.6976500299934 seconds
#############################################