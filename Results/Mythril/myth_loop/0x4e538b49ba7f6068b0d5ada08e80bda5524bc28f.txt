==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GotScammed
Function name: swapExactTokensForTokens(address[])
PC address: 816
Estimated Gas Usage: 2067 - 2492
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops2/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol:57

require(block.timestamp < time, "Expired")

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c1000440000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: queue(), txdata: 0xe10d29ee, value: 0x0
Caller: [SOMEGUY], function: swapExactTokensForTokens(address[]), txdata: 0x55f95ba00000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: GotScammed
Function name: swapExactTokensForTokens(address[])
PC address: 942
Estimated Gas Usage: 2118 - 2543
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops2/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol:58

path[0]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1400000000ff7b4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x340000000003, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: queue(), txdata: 0xe10d29ee, value: 0x0
Caller: [ATTACKER], function: swapExactTokensForTokens(address[]), txdata: 0x55f95ba00000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: GotScammed
Function name: queue()
PC address: 2120
Estimated Gas Usage: 1048 - 1143
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/loops2/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol:50

require(block.timestamp >= time, "Queue Full")

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: queue(), txdata: 0xe10d29ee, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: GotScammed
Function name: queue()
PC address: 2300
Estimated Gas Usage: 11953 - 52378
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops2/0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol:52

block.timestamp + 600

--------------------
Initial State:

Account: [CREATOR], balance: 0x402000000200a8000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: queue(), txdata: 0xe10d29ee, value: 0x0



---------------------------------------------
For contract 0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol
Tool Runtime = 47.61758525999903 seconds
#############################################