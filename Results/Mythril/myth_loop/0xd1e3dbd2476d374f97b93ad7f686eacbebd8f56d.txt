==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 3120
Estimated Gas Usage: 35008 - 255139
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:295

assetContract

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: bulkWithdraw(address[],uint256[],uint256[],bytes32[]), txdata: 0xf592c79c0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x1

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 3260
Estimated Gas Usage: 35008 - 255139
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:295

assetContract.isAlreadyMinted(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bulkWithdraw(address[],uint256[],uint256[],bytes32[]), txdata: 0xf592c79c0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x1

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 3573
Estimated Gas Usage: 17708 - 110728
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:296

assetContract.safeTransferFrom(address(this), _to, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x7, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x48004000840000004, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a6a6a6a6a6a6a6a6a6a6a6a6deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdraw(address,uint256,uint256,bytes32), txdata: 0x4250a6f30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000400000000, value: 0x0
Caller: [CREATOR], function: bulkWithdraw(address[],uint256[],uint256[],bytes32[]), txdata: 0xf592c79c000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SPLCardGateway
Function name: withdraw(address,uint256,uint256,bytes32)
PC address: 3573
Estimated Gas Usage: 17377 - 144583
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:296

assetContract.safeTransferFrom(address(this), _to, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw(address,uint256,uint256,bytes32), txdata: 0x4250a6f30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 3573
Estimated Gas Usage: 35008 - 255139
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:296

assetContract.safeTransferFrom(address(this), _to, _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 808080808080808080808080deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: bulkWithdraw(address[],uint256[],uint256[],bytes32[]), txdata: 0xf592c79c0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x1

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SPLCardGateway
Function name: bulkWithdraw(address[],uint256[],uint256[],bytes32[])
PC address: 3890
Estimated Gas Usage: 18512 - 145718
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:303

_to.transfer(_supportEther)

--------------------
Initial State:

Account: [CREATOR], balance: 0x56b3a9c0a18203e02, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: bulkWithdraw(address[],uint256[],uint256[],bytes32[]), txdata: 0xf592c79c000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SPLCardGateway
Function name: withdraw(address,uint256,uint256,bytes32)
PC address: 3890
Estimated Gas Usage: 17377 - 144583
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:303

_to.transfer(_supportEther)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a6a6a6a6a6a6a6a6a6a6a6a6deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdraw(address,uint256,uint256,bytes32), txdata: 0x4250a6f30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x1

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SPLCardGateway
Function name: withdraw(address,uint256,uint256,bytes32)
PC address: 4209
Estimated Gas Usage: 16573 - 109593
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:276

eventHashTransacted[_eventHash] = _desired

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdraw(address,uint256,uint256,bytes32), txdata: 0x4250a6f30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SPLCardGateway
Function name: withdraw(address,uint256,uint256,bytes32)
PC address: 4223
Estimated Gas Usage: 16573 - 109593
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:276

eventHashTransacted[_eventHash] = _desired

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 020202020202020202020202deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdraw(address,uint256,uint256,bytes32), txdata: 0x4250a6f30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SPLCardGateway
Function name: bulkDeposit(uint256[])
PC address: 5181
Estimated Gas Usage: 14881 - 156286
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:139

_paused

--------------------
Initial State:

Account: [CREATOR], balance: 0x142028009, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: bulkDeposit(uint256[]), txdata: 0xeeeb0198000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SPLCardGateway
Function name: bulkDeposit(uint256[])
PC address: 5456
Estimated Gas Usage: 14881 - 156286
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:280

assetContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2140000140000049, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: bulkDeposit(uint256[]), txdata: 0xeeeb0198000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: SPLCardGateway
Function name: bulkDeposit(uint256[])
PC address: 5456
Estimated Gas Usage: 7697 - 78447
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:280

assetContract.ownerOf(_tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x5140000a24520680a, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw(address,uint256,uint256,bytes32), txdata: 0x4250a6f3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000400000100000000000000000400000000000000000000000000000002, value: 0x1
Caller: [ATTACKER], function: bulkDeposit(uint256[]), txdata: 0xeeeb019800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001a6a6a6a6a6a6a6a6deadbeefdeadbeefdeadbeefdeadbeefdeadbeefa6a6a6a6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SPLCardGateway
Function name: bulkDeposit(uint256[])
PC address: 5654
Estimated Gas Usage: 14881 - 156286
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:282

assetContract

--------------------
Initial State:

Account: [CREATOR], balance: 0x142028009, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: bulkDeposit(uint256[]), txdata: 0xeeeb0198000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: SPLCardGateway
Function name: bulkDeposit(uint256[])
PC address: 5900
Estimated Gas Usage: 14881 - 156286
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:282

assetContract.safeTransferFrom(msg.sender, address(this), _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a6a6a6a6a6a6a6a6a6a6a6a6deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdraw(address,uint256,uint256,bytes32), txdata: 0x4250a6f30000000000000000000000000420100200000000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000004, value: 0x1
Caller: [CREATOR], function: bulkDeposit(uint256[]), txdata: 0xeeeb0198000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020404040404040404affeaffeaffeaffeaffeaffeaffeaffeaffeaffe040404040404040404040404affeaffeaffeaffeaffeaffeaffeaffeaffeaffe04040404, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: SPLCardGateway
Function name: deposit(uint256)
PC address: 5900
Estimated Gas Usage: 7329 - 78079
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:282

assetContract.safeTransferFrom(msg.sender, address(this), _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deposit(uint256), txdata: 0xb6b55f250000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SPLCardGateway
Function name: bulkDeposit(uint256[])
PC address: 5900
Estimated Gas Usage: 14881 - 156286
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:282

assetContract.safeTransferFrom(msg.sender, address(this), _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x142028009, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 202020202020202020202020deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: bulkDeposit(uint256[]), txdata: 0xeeeb0198000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: SPLCardGateway
Function name: bulkDeposit(uint256[])
PC address: 5900
Estimated Gas Usage: 7697 - 78447
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:282

assetContract.safeTransferFrom(msg.sender, address(this), _tokenId)

--------------------
Initial State:

Account: [CREATOR], balance: 0x6000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x402c0801824208440, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: withdraw(address,uint256,uint256,bytes32), txdata: 0x4250a6f3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010004040101044008080008408020021004000000000804082010001008000080, value: 0x1
Caller: [ATTACKER], function: bulkDeposit(uint256[]), txdata: 0xeeeb019800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001a6a6a6a6a6a6a6a6deadbeefdeadbeefdeadbeefdeadbeefdeadbeefa6a6a6a6, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: SPLCardGateway
Function name: withdraw(address,uint256,uint256,bytes32)
PC address: 6589
Estimated Gas Usage: 17377 - 144583
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/3/0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol:26

role.bearer[account]

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: a6a6a6a6a6a6a6a6a6a6a6a6deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: withdraw(address,uint256,uint256,bytes32), txdata: 0x4250a6f30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x1



---------------------------------------------
For contract 0xd1e3dbd2476d374f97b93ad7f686eacbebd8f56d.sol
Tool Runtime = 10905.976468665001 seconds
#############################################