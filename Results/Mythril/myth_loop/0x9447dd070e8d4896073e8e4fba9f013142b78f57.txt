==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ERC20
Function name: transferFromAllowance(address,uint256)
PC address: 946
Estimated Gas Usage: 8648 - 66714
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./new_contracts/m_loop/1/0x9447dd070e8d4896073e8e4fba9f013142b78f57.sol:102

address(uint160(_addr)).transfer(_amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x818010800400213, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b3000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef4000000000000000002000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: transferFromAllowance(address,uint256), txdata: 0xa4a36a985e5e5e5e5e5e5e5e5e5e5e5edeadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LIZVIP
Function name: totalVipCount(uint256)
PC address: 4732
Estimated Gas Usage: 322 - 417
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/1/0x9447dd070e8d4896073e8e4fba9f013142b78f57.sol:115

uint32[5] public totalVipCount = [0,0,0,0,0]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: totalVipCount(uint256), txdata: 0xbb8ef02b0000000000000000000000000000000000000000000000000000000000000008, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LIZVIP
Function name: vipLevelToDown(address,uint256)
PC address: 4791
Estimated Gas Usage: 1240 - 1525
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/1/0x9447dd070e8d4896073e8e4fba9f013142b78f57.sol:117

mapping (address => address[]) public vipLevelToDown

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: vipLevelToDown(address,uint256), txdata: 0xcfb07dcd00000000000000000000000000000000001000010101100004000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x9447dd070e8d4896073e8e4fba9f013142b78f57.sol
Tool Runtime = 2024.3110415790006 seconds
#############################################