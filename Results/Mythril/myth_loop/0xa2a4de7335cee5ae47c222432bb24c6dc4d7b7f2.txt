==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SantaPepeLamboDelivery
Function name: name()
PC address: 1938
Estimated Gas Usage: 4225 - 6344
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop6/0xa2a4de7335cee5ae47c222432bb24c6dc4d7b7f2.sol:130

return _name

--------------------
Initial State:

Account: [CREATOR], balance: 0x80002000801, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb00000000000000000000000001010101010101010101800101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: name(), txdata: 0x06fdde03, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: SantaPepeLamboDelivery
Function name: name()
PC address: 1990
Estimated Gas Usage: 4237 - 6356
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop6/0xa2a4de7335cee5ae47c222432bb24c6dc4d7b7f2.sol:130

return _name

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: name(), txdata: 0x06fdde03, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SantaPepeLamboDelivery
Function name: multiTransfer(address[],uint256[])
PC address: 2448
Estimated Gas Usage: 1131 - 6962
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop6/0xa2a4de7335cee5ae47c222432bb24c6dc4d7b7f2.sol:260

amounts[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x194004c05043e081, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d5450000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SantaPepeLamboDelivery
Function name: decreaseAllowance(address,uint256)
PC address: 6390
Estimated Gas Usage: 1373 - 1848
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop6/0xa2a4de7335cee5ae47c222432bb24c6dc4d7b7f2.sol:70

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x401000da832, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: decreaseAllowance(address,uint256), txdata: 0xa457c2d700000000000000000000000001000200000202000201020000010001000002010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: SantaPepeLamboDelivery
Function name: findTwoPointFivePercent(uint256)
PC address: 6421
Estimated Gas Usage: 1187 - 1282
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop6/0xa2a4de7335cee5ae47c222432bb24c6dc4d7b7f2.sol:82

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2a000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x83, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: findTwoPointFivePercent(uint256), txdata: 0x294c58f0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0, value: 0x0



---------------------------------------------
For contract 0xa2a4de7335cee5ae47c222432bb24c6dc4d7b7f2.sol
Tool Runtime = 3200.8385536720016 seconds
#############################################