==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: API_Syntax_Chain
Function name: multiTransfer(address[],uint256[])
PC address: 2529
Estimated Gas Usage: 1064 - 6895
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xecbc624bebc96fcae982f417dd1ac12b38b52c51.sol:280

amounts[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x40120048220026817, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d5450000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: API_Syntax_Chain
Function name: decreaseAllowance(address,uint256)
PC address: 6519
Estimated Gas Usage: 1373 - 1848
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xecbc624bebc96fcae982f417dd1ac12b38b52c51.sol:78

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1a0c0802000918, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: decreaseAllowance(address,uint256), txdata: 0xa457c2d700000000000000000000000000000100000000000000000001008000000000000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: API_Syntax_Chain
Function name: findOnePercentb(uint256)
PC address: 6550
Estimated Gas Usage: 1210 - 1305
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/3/0xecbc624bebc96fcae982f417dd1ac12b38b52c51.sol:90

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: findOnePercentb(uint256), txdata: 0x0dbc27ebffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c, value: 0x0



---------------------------------------------
For contract 0xecbc624bebc96fcae982f417dd1ac12b38b52c51.sol
Tool Runtime = 3553.593686424021 seconds
#############################################