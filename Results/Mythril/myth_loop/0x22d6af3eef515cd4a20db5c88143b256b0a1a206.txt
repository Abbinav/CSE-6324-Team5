mythril.mythril.mythril_analyzer [CRITICAL]: Exception occurred, aborting analysis. Please report this issue to the Mythril GitHub page.
Traceback (most recent call last):
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/mythril/mythril_analyzer.py", line 162, in fire_lasers
    custom_modules_directory=self.custom_modules_directory,
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/analysis/symbolic.py", line 166, in __init__
    world_state=world_state,
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/svm.py", line 175, in sym_exec
    self._execute_transactions(created_account.address)
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/svm.py", line 216, in _execute_transactions
    execute_message_call(self, address)
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/transaction/symbolic.py", line 108, in execute_message_call
    laser_evm.exec()
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/svm.py", line 253, in exec
    new_states, op_code = self.execute_state(global_state)
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/svm.py", line 346, in execute_state
    ).evaluate(global_state)
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/instructions.py", line 260, in evaluate
    result = instruction_mutator(global_state)
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/instructions.py", line 192, in wrapper
    new_global_states = self.call_on_state_copy(func, func_obj, global_state)
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/instructions.py", line 127, in call_on_state_copy
    return func(func_obj, global_state_copy)
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/instructions.py", line 919, in balance_
    address.value, self.dynamic_loader
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/laser/ethereum/state/world_state.py", line 125, in accounts_exist_or_load
    code=dynamic_loader.dynld(addr),
  File "/home/ubuntu/.local/lib/python3.6/site-packages/mythril/support/loader.py", line 67, in dynld
    raise ValueError("Cannot load from the chain when eth is None")
ValueError: Cannot load from the chain when eth is None

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LidSimplifiedPresaleAccess
Function name: getAccessTime(address,uint256)
PC address: 1225
Estimated Gas Usage: 3741 - 39009
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:108

a + b

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getAccessTime(address,uint256), txdata: 0xfa04fcfb0000000000000000000000000000000000000000000000000000000000000000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 1145 - 1240
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:784

uint[] public bonusRangeBP

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: bonusRangeBP(uint256), txdata: 0x8b03a1850000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 1103 - 1198
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1226

address[] public tokenPools

--------------------
Initial State:

Account: [CREATOR], balance: 0x100008042, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tokenPools(uint256), txdata: 0x00c0f9160000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LidSimplifiedPresaleRedeemer
Function name: setDeposit(address,uint256,uint256)
PC address: 3956
Estimated Gas Usage: 17567 - 58562
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:840

bonusRangeBP[currentBonusIndex]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(uint256,uint256,uint256[],uint256[],address,address), txdata: 0xa0bee36e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000210000000000000000000000000000000000000000000000000000000000000003000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000101010101010101010101010101010101010101, value: 0x0
Caller: [ATTACKER], function: setDeposit(address,uint256,uint256), txdata: 0xa13a75caa0a0a0a0a0a0a0a0a0a0a0a00000000000000000000000000000000000000000c283450a9015a5040240170991004a300841a0000101201b0924810059200833a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateReedemable(address,uint256,uint256)
PC address: 5027
Estimated Gas Usage: 350 - 445
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:887

if (finalEndTime >= now) return 0

--------------------
Initial State:

Account: [CREATOR], balance: 0xa000008000010b4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: calculateReedemable(address,uint256,uint256), txdata: 0xc6db01ad000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LidSimplifiedPresale
Function name: sendToUniswap()
PC address: 5356
Estimated Gas Usage: 10116 - 114932
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1262

require(isPresaleEnded(), "Presale has not yet ended.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x21010000000e3dba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cvalue: 0x0
Caller: [ATTACKER], function: sendToUniswap(), txdata: 0x44cbe5de, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: LidSimplifiedPresale
Function name: sendToUniswap()
PC address: 5676
Estimated Gas Usage: 15162 - 105511
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1333

require(msg.sender == tx.origin, "Sender must be origin - no contract calls.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x3108100000000040, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: sendToUniswap(), txdata: 0x44cbe5de, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 1144 - 1239
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:783

uint[] public bonusRangeStart

--------------------
Initial State:

Account: [CREATOR], balance: 0x120080000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: bonusRangeStart(uint256), txdata: 0xd578d8730000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 1190 - 1285
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:961

IStakeHandler[] public stakeHandlers

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stakeHandlers(uint256), txdata: 0x4bd5fd5d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 2909 - 3334
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------
Initial State:

Account: [CREATOR], balance: 0x20401000d0806, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4002040400004002, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(address), txdata: 0xc4d66de8000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: unregisterStakeHandler(uint256), txdata: 0x568b19ed6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d6d, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LidSimplifiedPresale
Function name: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address)
PC address: 7971
Estimated Gas Usage: 139275 - 655417
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1300

token.totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LidSimplifiedPresale
Function name: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address)
PC address: 8163
Estimated Gas Usage: 139275 - 655417
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1300

token.approve(address(uniswapRouter), token.totalSupply())

--------------------
Initial State:

Account: [CREATOR], balance: 0x100002008804, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000400000000000000000000001, value: 0x0
Caller: [CREATOR], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45c00f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f30101010101010101010101010101010101010101f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3deadbeefdeadbeefdeadbeefdeadbeefdeadbeeff3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3f3, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LidSimplifiedPresale
Function name: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address)
PC address: 8163
Estimated Gas Usage: 139275 - 655417
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1300

token.approve(address(uniswapRouter), token.totalSupply())

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000001000e8100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cvalue: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LidSimplifiedPresale
Function name: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address)
PC address: 8246
Estimated Gas Usage: 139275 - 655417
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:279

initializing = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x1604f8000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000004000, value: 0x0
Caller: [CREATOR], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef03030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LidSimplifiedPresale
Function name: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address)
PC address: 8260
Estimated Gas Usage: 139275 - 655417
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:279

initializing = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LidSimplifiedPresale
Function name: issueTokens()
PC address: 8599
Estimated Gas Usage: 10116 - 114932
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1262

require(isPresaleEnded(), "Presale has not yet ended.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000c00020e2bb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cvalue: 0x0
Caller: [ATTACKER], function: issueTokens(), txdata: 0x60ab5852, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LidStaking
Function name: distribute(uint256)
PC address: 8942
Estimated Gas Usage: 18941 - 129642
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1079

lidToken.transferFrom(msg.sender, address(this), amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(uint256,uint256,uint256,uint256,address,address), txdata: 0x439cc54c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110000801402000100180040104100804800020000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: distribute(uint256), txdata: 0x91c05b0b02044034802040402040010140012004f034bef5eeadbef7eece8ef3deb9def6, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LidStaking
Function name: distribute(uint256)
PC address: 8942
Estimated Gas Usage: 18941 - 129642
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1079

lidToken.transferFrom(msg.sender, address(this), amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: distribute(uint256), txdata: 0x91c05b0b0001000000080000020202000100008000800000000000000000000080000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LidSimplifiedPresale
Function name: isPresaleEnded()
PC address: 11275
Estimated Gas Usage: 7721 - 78021
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1459

timer.isStarted()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cvalue: 0x0
Caller: [ATTACKER], function: isPresaleEnded(), txdata: 0x7decf27f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LidSimplifiedPresale
Function name: isPresaleEnded()
PC address: 11347
Estimated Gas Usage: 7613 - 77632
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1459

now > endTime && endTime != 0

--------------------
Initial State:

Account: [CREATOR], balance: 0xbf7fea00003e000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cvalue: 0x0
Caller: [ATTACKER], function: isPresaleEnded(), txdata: 0x7decf27f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LidSimplifiedPresale
Function name: redeem()
PC address: 13190
Estimated Gas Usage: 10159 - 114975
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1262

require(isPresaleEnded(), "Presale has not yet ended.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1474604000e291a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cvalue: 0x0
Caller: [ATTACKER], function: redeem(), txdata: 0xbe040fb0, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15577
Estimated Gas Usage: 1144 - 1239
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1227

uint[] public tokenPoolBPs

--------------------
Initial State:

Account: [CREATOR], balance: 0x100008042, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: tokenPoolBPs(uint256), txdata: 0xe668d6d80000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit(address)
PC address: 16399
Estimated Gas Usage: 44008 - 350009
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1409

timer.startTime()

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000083ca8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa010000000000000000000000000001010000000000000000000000000000000001, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit(address)
PC address: 16589
Estimated Gas Usage: 44008 - 350009
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1409

access.getAccessTime(msg.sender, timer.startTime())

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit()
PC address: 16654
Estimated Gas Usage: 16081 - 141417
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1409

require(now >= access.getAccessTime(msg.sender, timer.startTime()), "Time must be at least access time.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x400023c00, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(), txdata: 0xd0e30db0, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit()
PC address: 16654
Estimated Gas Usage: 16081 - 141417
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1409

require(now >= access.getAccessTime(msg.sender, timer.startTime()), "Time must be at least access time.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x800a880000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(address), txdata: 0xc4d66de80000000000000000000000000200000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: deposit(), txdata: 0xd0e30db0, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit()
PC address: 16789
Estimated Gas Usage: 16124 - 141460
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1410

require(msg.sender != referrer, "Sender cannot be referrer.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fbcfffe7cc000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(), txdata: 0xd0e30db0, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit()
PC address: 17346
Estimated Gas Usage: 21233 - 182074
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1414

now > endTime && endTime != 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: deposit(), txdata: 0xd0e30db0, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit()
PC address: 17360
Estimated Gas Usage: 21256 - 182097
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1414

require(!(now > endTime && endTime != 0), "Presale Ended, time over limit.")

--------------------
Initial State:

Account: [CREATOR], balance: 0x800420000008004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(), txdata: 0xd0e30db0, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit(address)
PC address: 17473
Estimated Gas Usage: 32593 - 298164
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1416

maxBuyPerAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x34100000200000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit(address)
PC address: 17484
Estimated Gas Usage: 43994 - 349995
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1416

redeemer

--------------------
Initial State:

Account: [CREATOR], balance: 0x10400020e0738, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit(address)
PC address: 17836
Estimated Gas Usage: 32593 - 298164
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1420

referralBP

--------------------
Initial State:

Account: [CREATOR], balance: 0x34100000200000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit(address)
PC address: 17867
Estimated Gas Usage: 44008 - 350009
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1425

hardcap

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000100022100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit(address)
PC address: 17977
Estimated Gas Usage: 32593 - 298164
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1431

redeemer

--------------------
Initial State:

Account: [CREATOR], balance: 0x34100000200000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit(address)
PC address: 18238
Estimated Gas Usage: 43994 - 349995
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1431

redeemer.setDeposit(msg.sender, depositEther.sub(fee), address(this).balance.sub(fee))

--------------------
Initial State:

Account: [CREATOR], balance: 0x10400020e0738, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit(address)
PC address: 18378
Estimated Gas Usage: 30090 - 261145
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1434

if (referrer != address(0x0) && referrer != msg.sender) {
                earnedReferrals[referrer] = earnedReferrals[referrer].add(fee);
                referralCounts[referrer] = referralCounts[referrer].add(1);
                referrer.transfer(fee);
            } else {
                lidFund.transfer(fee);
            }

--------------------
Initial State:

Account: [CREATOR], balance: 0x3daa, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa010000000000000000000000000101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit(address)
PC address: 18447
Estimated Gas Usage: 32593 - 298164
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1435

earnedReferrals[referrer]

--------------------
Initial State:

Account: [CREATOR], balance: 0x34100000200000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit(address)
PC address: 18528
Estimated Gas Usage: 44008 - 350009
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1435

earnedReferrals[referrer] = earnedReferrals[referrer].add(fee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000100022100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit(address)
PC address: 18599
Estimated Gas Usage: 44008 - 350009
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1436

referralCounts[referrer]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000100022100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit(address)
PC address: 18680
Estimated Gas Usage: 44008 - 350009
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1436

referralCounts[referrer] = referralCounts[referrer].add(1)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000100022100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit(address)
PC address: 18729
Estimated Gas Usage: 44008 - 350009
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1437

referrer.transfer(fee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000100022100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit(address)
PC address: 18764
Estimated Gas Usage: 32593 - 298164
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1439

lidFund

--------------------
Initial State:

Account: [CREATOR], balance: 0x34100000200000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit(address)
PC address: 18840
Estimated Gas Usage: 44008 - 350009
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1439

lidFund.transfer(fee)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000100022100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: LidSimplifiedPresale
Function name: deposit(address)
PC address: 18948
Estimated Gas Usage: 43994 - 349995
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:594

_guardCounter

--------------------
Initial State:

Account: [CREATOR], balance: 0x10400020e0738, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: deposit(address), txdata: 0xf340fa010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Dependence on tx.origin ====
SWC ID: 115
Severity: Low
Contract: LidSimplifiedPresale
Function name: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address)
PC address: 19359
Estimated Gas Usage: 29478 - 94305
Use of tx.origin as a part of authorization control.
The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:358

require(account != address(0), "Roles: account is the zero address")

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cvalue: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LidSimplifiedPresale
Function name: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address)
PC address: 20269
Estimated Gas Usage: 139275 - 655417
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:554

_owner = newOwner

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LidSimplifiedPresale
Function name: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address)
PC address: 20322
Estimated Gas Usage: 139275 - 655417
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:554

_owner = newOwner

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(uint256,uint256,uint256,uint256,uint256,address,address,address,address,address,address,address), txdata: 0x5eb45cdeadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol
Tool Runtime = 6917.062665173988 seconds
#############################################