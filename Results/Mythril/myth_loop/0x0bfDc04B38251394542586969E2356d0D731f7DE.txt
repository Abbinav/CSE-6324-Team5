==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Proxy
Function name: fallback
PC address: 333
Estimated Gas Usage: 4194 - 75392
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:1575

target.setMessageSender(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: setTarget(address), txdata: 0x776d1a01000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x80000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Proxy
Function name: fallback
PC address: 371
Estimated Gas Usage: 4056 - 75254
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:1582

sload(target_slot)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Proxy
Function name: fallback
PC address: 373
Estimated Gas Usage: 4056 - 75254
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:1582

call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Proxy
Function name: fallback
PC address: 373
Estimated Gas Usage: 4194 - 75392
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:1582

call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x80000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VirtualSynth
Function name: settle(address)
PC address: 2141
Estimated Gas Usage: 41524 - 264437
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:2760

_totalSupply

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000004084000040840020020021008200080100400000000000000000000000000000002004000040000400100101000000000000800000000000000000000000002, value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd808080808080808080808080200080020280400200000400020802012000020180808080808080808080808080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: settle(address), txdata: 0x6a256b292323232323232323232323230101010101010101010101010101010101010101, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: AddressResolver
Function name: rebuildCaches(address[])
PC address: 2428
Estimated Gas Usage: 2097 - 36473
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:250

destinations[i].rebuildCache()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: importAddresses(bytes32[],address[]), txdata: 0xab0b8f7700000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000240020808400001020010008008200810088001202080100410084001001080104008020200000000080000000000000000000000000010000000100080000000, value: 0x0
Caller: [ATTACKER], function: rebuildCaches(address[]), txdata: 0x766f781500000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AddressResolver
Function name: rebuildCaches(address[])
PC address: 2428
Estimated Gas Usage: 3756 - 72413
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:250

destinations[i].rebuildCache()

--------------------
Initial State:

Account: [CREATOR], balance: 0x100040000000204, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [ATTACKER], function: rebuildCaches(address[]), txdata: 0x766f78150000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000280808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: VirtualSynth
Function name: settle(address)
PC address: 2769
Estimated Gas Usage: 41524 - 264437
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:3088

IERC20(address(synth)).transfer(account, balanceUnderlying(account))

--------------------
Initial State:

Account: [CREATOR], balance: 0x1210108000001b022, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000040040000010200401000000040020004002020000000000000000000000000010, value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872ddadadadadadadadadadadadad0000000000800000000010000000000000000000adadadadadadadadadadadad00000000000000000000004000000040800420040000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: settle(address), txdata: 0x6a256b290000000000000000000000000101010101010101010101000101010100010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VirtualSynth
Function name: settle(address)
PC address: 2769
Estimated Gas Usage: 41524 - 264437
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:3088

IERC20(address(synth)).transfer(account, balanceUnderlying(account))

--------------------
Initial State:

Account: [CREATOR], balance: 0x800090025280a52, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000400080010040020000100000000000000000000000000000000000000000000000000000040080400000000000000000400000400000000000000000000000004, value: 0x0
Caller: [SOMEGUY], function: settle(address), txdata: 0x6a256b298080808080808080808080800101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VirtualSynth
Function name: settle(address)
PC address: 2912
Estimated Gas Usage: 41524 - 264437
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:2767

_balances[account]

--------------------
Initial State:

Account: [CREATOR], balance: 0x20020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: settle(address), txdata: 0x6a256b298080808080808080808080800101010101010101010101010101010101010101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AddressResolver
Function name: areAddressesImported(bytes32[],address[])
PC address: 3088
Estimated Gas Usage: 698 - 793
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:258

destinations[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2180000040013001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: areAddressesImported(bytes32[],address[]), txdata: 0x9f42102f0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VirtualSynth
Function name: settle(address)
PC address: 4689
Estimated Gas Usage: 41524 - 264437
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:3011

initialSupply

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000004084000040840020020021008200080100400000000000000000000000000000002004000040000400100101000000000000800000000000000000000000002, value: 0x0
Caller: [CREATOR], function: transferFrom(address,address,uint256), txdata: 0x23b872dd808080808080808080808080200080020280400200000400020802012000020180808080808080808080808080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: settle(address), txdata: 0x6a256b292323232323232323232323230101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VirtualSynth
Function name: settle(address)
PC address: 4712
Estimated Gas Usage: 41524 - 264437
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:3017

settled

--------------------
Initial State:

Account: [CREATOR], balance: 0x800090025280a52, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000400080010040020000100000000000000000000000000000000000000000000000000000040080400000000000000000400000400000000000000000000000004, value: 0x0
Caller: [SOMEGUY], function: settle(address), txdata: 0x6a256b298080808080808080808080800101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VirtualSynth
Function name: settle(address)
PC address: 5319
Estimated Gas Usage: 41524 - 264437
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:3030

initialSupply

--------------------
Initial State:

Account: [CREATOR], balance: 0x800090025280a52, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000400080010040020000100000000000000000000000000000000000000000000000000000040080400000000000000000400000400000000000000000000000004, value: 0x0
Caller: [SOMEGUY], function: settle(address), txdata: 0x6a256b298080808080808080808080800101010101010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: VirtualSynth
Function name: readyToSettle()
PC address: 5702
Estimated Gas Usage: 5429 - 75639
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:3007

exchanger().maxSecsLeftInWaitingPeriod(address(this), currencyKey)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: readyToSettle(), txdata: 0x78f2ac26, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: VirtualSynth
Function name: settle(address)
PC address: 5991
Estimated Gas Usage: 41524 - 264437
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:3045

exchanger().settle(address(this), currencyKey)

--------------------
Initial State:

Account: [CREATOR], balance: 0x28205000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000200200400100000000200000000000100000204000000000000000000000000000001000100000400000000000210080000000000000000000000000000000040, value: 0x0
Caller: [CREATOR], function: settle(address), txdata: 0x6a256b298080808080808080808080800101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VirtualSynth
Function name: settle(address)
PC address: 6076
Estimated Gas Usage: 41524 - 264437
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:3047

synth

--------------------
Initial State:

Account: [CREATOR], balance: 0x800090025280a52, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000400080010040020000100000000000000000000000000000000000000000000000000000040080400000000000000000400000400000000000000000000000004, value: 0x0
Caller: [SOMEGUY], function: settle(address), txdata: 0x6a256b298080808080808080808080800101010101010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: VirtualSynth
Function name: settle(address)
PC address: 6260
Estimated Gas Usage: 41524 - 264437
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:3047

IERC20(address(synth)).balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000008000020000000000200008004400102800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: transferFrom(address,address,uint256), txdata: 0x23b872dd808080808080808080808080020000000000000000000000000010000000400080808080808080808080808002000000000000000000000000001000000040000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: settle(address), txdata: 0x6a256b292323232323232323232323230101010101011001010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VirtualSynth
Function name: settle(address)
PC address: 6321
Estimated Gas Usage: 41524 - 264437
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:3047

settledAmount = IERC20(address(synth)).balanceOf(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x800090025280a52, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000400080010040020000100000000000000000000000000000000000000000000000000000040080400000000000000000400000400000000000000000000000004, value: 0x0
Caller: [SOMEGUY], function: settle(address), txdata: 0x6a256b298080808080808080808080800101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VirtualSynth
Function name: settle(address)
PC address: 6366
Estimated Gas Usage: 41524 - 264437
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:3049

settledAmount

--------------------
Initial State:

Account: [CREATOR], balance: 0x800090025280a52, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000400080010040020000100000000000000000000000000000000000000000000000000000040080400000000000000000400000400000000000000000000000004, value: 0x0
Caller: [SOMEGUY], function: settle(address), txdata: 0x6a256b298080808080808080808080800101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: VirtualSynth
Function name: settle(address)
PC address: 6540
Estimated Gas Usage: 41524 - 264437
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:2910

_totalSupply

--------------------
Initial State:

Account: [CREATOR], balance: 0x20020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080, value: 0x0
Caller: [SOMEGUY], function: settle(address), txdata: 0x6a256b298080808080808080808080800101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VirtualSynth
Function name: settle(address)
PC address: 6559
Estimated Gas Usage: 41524 - 264437
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:2910

_totalSupply = _totalSupply.sub(value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x800090025280a52, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000400080010040020000100000000000000000000000000000000000000000000000000000040080400000000000000000400000400000000000000000000000004, value: 0x0
Caller: [SOMEGUY], function: settle(address), txdata: 0x6a256b298080808080808080808080800101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VirtualSynth
Function name: settle(address)
PC address: 6627
Estimated Gas Usage: 41524 - 264437
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:2911

_balances[account]

--------------------
Initial State:

Account: [CREATOR], balance: 0x800090025280a52, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000400080010040020000100000000000000000000000000000000000000000000000000000040080400000000000000000400000400000000000000000000000004, value: 0x0
Caller: [SOMEGUY], function: settle(address), txdata: 0x6a256b298080808080808080808080800101010101010101010101010101010101010101, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: VirtualSynth
Function name: settle(address)
PC address: 6706
Estimated Gas Usage: 41524 - 264437
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops1/0x0bfDc04B38251394542586969E2356d0D731f7DE.sol:2911

_balances[account] = _balances[account].sub(value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x800090025280a52, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 0000000000000000000000000400080010040020000100000000000000000000000000000000000000000000000000000040080400000000000000000400000400000000000000000000000004, value: 0x0
Caller: [SOMEGUY], function: settle(address), txdata: 0x6a256b298080808080808080808080800101010101010101010101010101010101010101, value: 0x0



---------------------------------------------
For contract 0x0bfDc04B38251394542586969E2356d0D731f7DE.sol
Tool Runtime = 9554.006965876993 seconds
#############################################