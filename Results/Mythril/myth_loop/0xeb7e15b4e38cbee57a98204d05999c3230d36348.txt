==== Delegatecall to user-supplied address ====
SWC ID: 112
Severity: High
Contract: InitializableUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 636
Estimated Gas Usage: 8539 - 66863
The contract delegates execution to another contract with a user-supplied address.
The smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1305

_logic.delegatecall(_data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(address,bytes), txdata: 0xd1f57894000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100, value: 0x0

==== Delegatecall to user-supplied address ====
SWC ID: 112
Severity: High
Contract: InitializableUpgradeabilityProxy
Function name: fallback
PC address: 775
Estimated Gas Usage: 1780 - 38179
The contract delegates execution to another contract with a user-supplied address.
The smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420fffff, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(address,bytes), txdata: 0xd1f57894000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x01010101, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: kRoles
Function name: operators(uint256)
PC address: 898
Estimated Gas Usage: 1122 - 1217
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:770

address[] public operators

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: operators(uint256), txdata: 0xe28d49060000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: CanReclaimTokens
Function name: recoverTokens(address)
PC address: 1028
Estimated Gas Usage: 3893 - 39214
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:826

msg.sender.call.value(address(this).balance)("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x445000280000401, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(address), txdata: 0xc4d66de8000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: recoverTokens(address), txdata: 0x16114acd6d6d6d6d6d6d6d6d6d6d6d6d0000000000000000000000000000000000000000, value: 0x0

==== Delegatecall to user-supplied address ====
SWC ID: 112
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: upgradeToAndCall(address,bytes)
PC address: 1349
Estimated Gas Usage: 9261 - 66288
The contract delegates execution to another contract with a user-supplied address.
The smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1251

newImplementation.delegatecall(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420fffff, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,bytes), txdata: 0xcf7a1d770000000000000000000000000000000000000000000000000000000000000040000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: upgradeToAndCall(address,bytes), txdata: 0x4f1ef286000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: CanReclaimTokens
Function name: operators(uint256)
PC address: 1895
Estimated Gas Usage: 1100 - 1195
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:770

address[] public operators

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: operators(uint256), txdata: 0xe28d49060000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Delegatecall to user-supplied address ====
SWC ID: 112
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,bytes)
PC address: 2425
Estimated Gas Usage: 8605 - 66929
The contract delegates execution to another contract with a user-supplied address.
The smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1305

_logic.delegatecall(_data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(address,bytes), txdata: 0xd1f57894000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100, value: 0x0

==== Delegatecall to user-supplied address ====
SWC ID: 112
Severity: High
Contract: InitializableAdminUpgradeabilityProxy
Function name: fallback
PC address: 2802
Estimated Gas Usage: 2664 - 39063
The contract delegates execution to another contract with a user-supplied address.
The smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1030

delegatecall(gas, implementation, 0, calldatasize, 0, 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420fffff, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,bytes), txdata: 0xcf7a1d77000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: InitializableAdminUpgradeabilityProxy
Function name: initialize(address,address,bytes)
PC address: 2997
Estimated Gas Usage: 14685 - 93007
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1273

sstore(slot, newAdmin)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,bytes), txdata: 0xcf7a1d77000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1
Function name: recoverTokens(address)
PC address: 3529
Estimated Gas Usage: 3939 - 39260
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:826

msg.sender.call.value(address(this).balance)("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x400040c02, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1020000000000002, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(string,address), txdata: 0x7ab4339d00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000000080, value: 0x0
Caller: [ATTACKER], function: recoverTokens(address), txdata: 0x16114acdc1c1c1c1c1c1c1c1c1c1c1c10000000000000000000000000000000000000000, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: LiquidityPoolV1
Function name: recoverTokens(address)
PC address: 3529
Estimated Gas Usage: 4012 - 39616
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:826

msg.sender.call.value(address(this).balance)("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [ATTACKER], function: initialize(string,address), txdata: 0x7ab4339d00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000010020000000000000020011020, value: 0x0
Caller: [ATTACKER], function: recoverTokens(address), txdata: 0x16114acdc1c1c1c1c1c1c1c1c1c1c1c10000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidityPoolV1
Function name: register(address)
PC address: 5101
Estimated Gas Usage: 40537 - 282565
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1371

_kToken.underlying()

--------------------
Initial State:

Account: [CREATOR], balance: 0x40b00000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x3c0000400000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(string,address), txdata: 0x7ab4339d00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000080800440000000000480, value: 0x0
Caller: [ATTACKER], function: register(address), txdata: 0x4420e486c1c1c1c1c1c1c1c1c1c1c1c10000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LiquidityPoolV1
Function name: registeredTokens(uint256)
PC address: 10354
Estimated Gas Usage: 1145 - 1240
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1339

address[] public registeredTokens

--------------------
Initial State:

Account: [CREATOR], balance: 0x10002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: registeredTokens(uint256), txdata: 0x9a0ba2ea0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LiquidityPoolV1
Function name: migrate(address)
PC address: 12133
Estimated Gas Usage: 3777 - 38673
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1483

_newLP.renounceOperator()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000040002060522, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(string,address), txdata: 0x7ab4339d00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000021000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: migrate(address), txdata: 0xce5494bbc1c1c1c1c1c1c1c1c1c1c1c1deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: LiquidityPoolV1
Function name: operators(uint256)
PC address: 13504
Estimated Gas Usage: 1145 - 1240
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:770

address[] public operators

--------------------
Initial State:

Account: [CREATOR], balance: 0x42, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: operators(uint256), txdata: 0xe28d49060000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: LiquidityPoolV1
Function name: underlyingBalance(address,address)
PC address: 14287
Estimated Gas Usage: 7652 - 78805
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1458

kTokens[_token].totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x1
Caller: [SOMEGUY], function: underlyingBalance(address,address), txdata: 0xfc5eb0df000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000016353fffe2c9047ebdeecb67d59ffa0000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LiquidityPoolV1
Function name: VERSION()
PC address: 14437
Estimated Gas Usage: 3309 - 4627
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1341

string public VERSION

--------------------
Initial State:

Account: [CREATOR], balance: 0x2800001001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(string,address), txdata: 0x7ab4339d000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: VERSION(), txdata: 0xffa1ad74, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: LiquidityPoolV1
Function name: VERSION()
PC address: 14489
Estimated Gas Usage: 3309 - 4627
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/loops10/0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol:1341

string public VERSION

--------------------
Initial State:

Account: [CREATOR], balance: 0x2800001001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(string,address), txdata: 0x7ab4339d000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: VERSION(), txdata: 0xffa1ad74, value: 0x0



---------------------------------------------
For contract 0xeb7e15b4e38cbee57a98204d05999c3230d36348.sol
Tool Runtime = 11241.010183175997 seconds
#############################################