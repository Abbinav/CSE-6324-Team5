==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LockedTokenVault
Function name: claim()
PC address: 1034
Estimated Gas Usage: 2838 - 2933
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop7/0x3fefa465e68720b21a79aa00a1f2b1c3048c4909.sol:459

if (timePast < _RELEASE_DURATION_) {
            uint256 remainingTime = _RELEASE_DURATION_.sub(timePast);
            remainingToken = originBalances[holder]
                .sub(DecimalMath.mul(originBalances[holder], _CLIFF_RATE_))
                .mul(remainingTime)
                .div(_RELEASE_DURATION_);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LockedTokenVault
Function name: claim()
PC address: 1279
Estimated Gas Usage: 1066 - 1161
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop7/0x3fefa465e68720b21a79aa00a1f2b1c3048c4909.sol:449

if (block.timestamp < _START_RELEASE_TIME_) {
            return 0;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000001000b1500, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LockedTokenVault
Function name: claim()
PC address: 1942
Estimated Gas Usage: 10176 - 67563
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop7/0x3fefa465e68720b21a79aa00a1f2b1c3048c4909.sol:431

claimedBalances[msg.sender]

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 717171717171717171717171deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0
Caller: [CREATOR], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: LockedTokenVault
Function name: claim()
PC address: 2022
Estimated Gas Usage: 9868 - 66786
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop7/0x3fefa465e68720b21a79aa00a1f2b1c3048c4909.sol:431

claimedBalances[msg.sender] = claimedBalances[msg.sender].add(claimableToken)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 717171717171717171717171deadbeefdeadbeefdeadbeefdeadbeefdeadbeef01, value: 0x0
Caller: [CREATOR], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: LockedTokenVault
Function name: claim()
PC address: 5099
Estimated Gas Usage: 1974 - 2069
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop7/0x3fefa465e68720b21a79aa00a1f2b1c3048c4909.sol:53

require(b <= a, "SUB_ERROR")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: claim(), txdata: 0x4e71d92d, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: LockedTokenVault
Function name: claim()
PC address: 6183
Estimated Gas Usage: 18453 - 76131
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/m_loop/loop7/0x3fefa465e68720b21a79aa00a1f2b1c3048c4909.sol:307

address(token).call(data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 717171717171717171717171deadbeefdeadbeefdeadbeefdeadbeefdeadbeef71972eb021347fdc341fa00cf86e0a2c0a94b231f72e006500d90020400040003b, value: 0x0
Caller: [SOMEGUY], function: claim(), txdata: 0x4e71d92d, value: 0x0
Caller: [ATTACKER], function: claim(), txdata: 0x4e71d92d, value: 0x0



---------------------------------------------
For contract 0x3fefa465e68720b21a79aa00a1f2b1c3048c4909.sol
Tool Runtime = 7108.2436754110095 seconds
#############################################