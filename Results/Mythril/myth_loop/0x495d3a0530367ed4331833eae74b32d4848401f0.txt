==== Delegatecall to user-supplied address ====
SWC ID: 112
Severity: High
Contract: OwnedUpgradeabilityProxy
Function name: fallback
PC address: 180
Estimated Gas Usage: 1844 - 40826
The contract delegates execution to another contract with a user-supplied address.
The smart contract delegates execution to a user-supplied address.This could allow an attacker to execute arbitrary code in the context of this contract account and manipulate the state of the contract account or execute actions on its behalf.
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:913

delegatecall(gas, _impl, ptr, calldatasize, 0, 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x81, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MarketRegistry
Function name: resolveDispute(address,uint256)
PC address: 7744
Estimated Gas Usage: 10350 - 81765
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2420

IMarket(_marketAddress).resolveDispute.value(ethDepositedInPool)(true, _result)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewMarketCurrency(address,uint64), txdata: 0xc8f46afe00000000000000000000000000000000000000000000000020010202800100200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: resolveDispute(address,uint256), txdata: 0x0357e76faaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeefaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MarketRegistry
Function name: resolveDispute(address,uint256)
PC address: 7744
Estimated Gas Usage: 10350 - 81765
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2420

IMarket(_marketAddress).resolveDispute.value(ethDepositedInPool)(true, _result)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: resolveDispute(address,uint256), txdata: 0x0357e76f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MarketRegistry
Function name: updateConfigAddressParameters(bytes8,address)
PC address: 13397
Estimated Gas Usage: 5374 - 75162
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2574

marketUtility.updateAddressParameters(code, value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8420, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateConfigAddressParameters(bytes8,address), txdata: 0x840c7b7100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MarketRegistry
Function name: updateMarketImplementations(uint256[],address[])
PC address: 14014
Estimated Gas Usage: 37611 - 294326
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2130

IMarket(_marketImplementations[i]).getMarketFeedData()

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addNewMarketCurrency(address,uint64), txdata: 0xc8f46afe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: updateMarketImplementations(uint256[],address[]), txdata: 0x912b9b3f00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MarketRegistry
Function name: updateMarketImplementations(uint256[],address[])
PC address: 14474
Estimated Gas Usage: 8550 - 113460
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2134

marketCurrencies[_currencyIndexes[i]]

--------------------
Initial State:

Account: [CREATOR], balance: 0x458060901802294, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateMarketImplementations(uint256[],address[]), txdata: 0x912b9b3f0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MarketRegistry
Function name: updateUintParameters(bytes8,uint256)
PC address: 16788
Estimated Gas Usage: 5371 - 75159
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2564

marketUtility.updateUintParameters(code, value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000040000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateUintParameters(bytes8,uint256), txdata: 0x9dd86e0f01010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MarketRegistry
Function name: burnDisputedProposalTokens(uint256)
PC address: 17424
Estimated Gas Usage: 9931 - 115342
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2442

IMarket(disputedMarket).resolveDispute(false, 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: burnDisputedProposalTokens(uint256), txdata: 0xa138ca3d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MarketRegistry
Function name: burnDisputedProposalTokens(uint256)
PC address: 17601
Estimated Gas Usage: 9931 - 115342
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2446

marketData[disputedMarket].disputeStakes.stakeAmount

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: burnDisputedProposalTokens(uint256), txdata: 0xa138ca3d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MarketRegistry
Function name: burnDisputedProposalTokens(uint256)
PC address: 17609
Estimated Gas Usage: 9931 - 115342
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2448

plotToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewMarketCurrency(address,uint64), txdata: 0xc8f46afe00000000000000000000000004041002000410018000042010400404100200200000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: burnDisputedProposalTokens(uint256), txdata: 0xa138ca3daaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0120021080000108, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MarketRegistry
Function name: burnDisputedProposalTokens(uint256)
PC address: 17752
Estimated Gas Usage: 9931 - 115342
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2448

plotToken.burn(_stakedAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addNewMarketCurrency(address,uint64), txdata: 0xc8f46afe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: burnDisputedProposalTokens(uint256), txdata: 0xa138ca3dc8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c80000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: MarketRegistry
Function name: burnDisputedProposalTokens(uint256)
PC address: 17752
Estimated Gas Usage: 9931 - 115342
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2448

plotToken.burn(_stakedAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: burnDisputedProposalTokens(uint256), txdata: 0xa138ca3d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MarketRegistry
Function name: createMarket(uint256,uint256)
PC address: 19617
Estimated Gas Usage: 3268 - 4783
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2252

marketCurrencies[_marketCurrencyIndex]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: createMarket(uint256,uint256), txdata: 0xc7604fec01000200000000010002000101010101010101000200000100020000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MarketRegistry
Function name: upgradeContractImplementation(address,address)
PC address: 22280
Estimated Gas Usage: 4507 - 73870
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2164

tempInstance.upgradeTo(_newImplementation)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewMarketCurrency(address,uint64), txdata: 0xc8f46afe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: upgradeContractImplementation(address,address), txdata: 0xd0216260aaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeefaaaaaaaaaaaaaaaaaaaaaaaa0101010101010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MarketRegistry
Function name: upgradeContractImplementation(address,address)
PC address: 22280
Estimated Gas Usage: 4507 - 73870
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2164

tempInstance.upgradeTo(_newImplementation)

--------------------
Initial State:

Account: [CREATOR], balance: 0x56bc75e2d630ffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: upgradeContractImplementation(address,address), txdata: 0xd021626000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MarketRegistry
Function name: addNewMarketType(uint64,uint64,uint64)
PC address: 22769
Estimated Gas Usage: 2960 - 37947
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2038

require(_marketStartTime > now)

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewMarketType(uint64,uint64,uint64), txdata: 0xdbdfc612000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: MarketRegistry
Function name: calculateStartTimeForMarket(uint256,uint256)
PC address: 25044
Estimated Gas Usage: 3256 - 4771
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2314

marketTypes[_marketType]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: calculateStartTimeForMarket(uint256,uint256), txdata: 0xfb60f12b01000200000000010002000101010101010101000200000100020000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MarketRegistry
Function name: calculateStartTimeForMarket(uint256,uint256)
PC address: 25130
Estimated Gas Usage: 4298 - 6238
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2316

if(now > _marketStartTime.add(predictionTime)) {

        uint noOfMarketsSkipped = ((now).sub(_marketStartTime)).div(predictionTime);

       _marketStartTime = uint64(_marketStartTime.add(noOfMarketsSkipped.mul(predictionTime)));

      }

--------------------
Initial State:

Account: [CREATOR], balance: 0x400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x400, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addNewMarketType(uint64,uint64,uint64), txdata: 0xdbdfc61200000000000000000000000000000000000000000000000001cc2102040816b400000000000000000000000000000000000000000000000001010101010000010000000000000000000000000000000000000000000000000000000000000001, value: 0x0
Caller: [SOMEGUY], function: calculateStartTimeForMarket(uint256,uint256), txdata: 0xfb60f12b00000000000000000000000000000000000000000000000000000000000000000101010040000101010101010101010101010101010101010101010101010101, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MarketRegistry
Function name: calculateStartTimeForMarket(uint256,uint256)
PC address: 25913
Estimated Gas Usage: 4631 - 6571
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:172

if (a == 0) {

            return 0;

        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: addNewMarketType(uint64,uint64,uint64), txdata: 0xdbdfc612000000000000000000000000000000000000000000000000075422ab9197b82500000000000000000000000000000000000000000000000001010101010000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: calculateStartTimeForMarket(uint256,uint256), txdata: 0xfb60f12b00000000000000000000000000000000000000000000000000000000000000000100100240800101200101010101010101010101010001010180010101040101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MarketRegistry
Function name: transferAssets(address,address,uint256)
PC address: 26176
Estimated Gas Usage: 3845 - 73018
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2542

_recipient.transfer(_amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1200000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: unknown, txdata: 0x0d080000, value: 0x1
Caller: [SOMEGUY], function: transferAssets(address,address,uint256), txdata: 0x49f4cc17434343434343434343434343eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee43434343434343434343434343434343434343434343434343434343434343430000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: MarketRegistry
Function name: transferAssets(address,address,uint256)
PC address: 26176
Estimated Gas Usage: 3845 - 73018
Any sender can withdraw Ether from the contract account.
Arbitrary senders other than the contract creator can profitably extract Ether from the contract account. Verify the business logic carefully and make sure that appropriate security controls are in place to prevent unexpected loss of funds.
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2542

_recipient.transfer(_amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000300144, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40817f, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: unknown, txdata: 0x20000400, value: 0x1
Caller: [ATTACKER], function: transferAssets(address,address,uint256), txdata: 0x49f4cc17f4f4f4f4f4f4f4f4f4f4f4f4eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef4f4f4f4f4f4f4f4f4f4f4f4deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: MarketRegistry
Function name: transferAssets(address,address,uint256)
PC address: 26373
Estimated Gas Usage: 4728 - 74372
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2546

IToken(_asset).transfer(_recipient, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewMarketCurrency(address,uint64), txdata: 0xc8f46afe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: transferAssets(address,address,uint256), txdata: 0x49f4cc17aaaaaaaaaaaaaaaaaaaaaaaadeadbeefdeadbeefdeadbeefdeadbeefdeadbeefaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MarketRegistry
Function name: transferAssets(address,address,uint256)
PC address: 26373
Estimated Gas Usage: 4728 - 74372
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2546

IToken(_asset).transfer(_recipient, _amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transferAssets(address,address,uint256), txdata: 0x49f4cc17000000000000000000000000010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101010101, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: MarketRegistry
Function name: calculateStartTimeForMarket(uint256,uint256)
PC address: 26572
Estimated Gas Usage: 4382 - 6322
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:98

require(b <= a, "SafeMath: subtraction overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0xa35b8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewMarketType(uint64,uint64,uint64), txdata: 0xdbdfc612000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010000010000000000000000000000000000000000000000000000008080808080808080, value: 0x0
Caller: [ATTACKER], function: calculateStartTimeForMarket(uint256,uint256), txdata: 0xfb60f12b00000000000000000000000000000000000000000000000000000000000000000000020000000101010101010101010101010101010101010101010101010101, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MarketRegistry
Function name: addNewMarketCurrency(address,uint64)
PC address: 26953
Estimated Gas Usage: 28573 - 195151
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2106

IMarket(_marketImplementation).getMarketFeedData()

--------------------
Initial State:

Account: [CREATOR], balance: 0x40002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: addNewMarketCurrency(address,uint64), txdata: 0xc8f46afe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: MarketRegistry
Function name: addNewMarketCurrency(address,uint64)
PC address: 27229
Estimated Gas Usage: 28573 - 195151
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/4/0x495d3a0530367ed4331833eae74b32d4848401f0.sol:2108

marketUtility.getPriceFeedDecimals(_priceFeed)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addNewMarketCurrency(address,uint64), txdata: 0xc8f46afe00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: addNewMarketCurrency(address,uint64), txdata: 0xc8f46afec8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8c8, value: 0x0



---------------------------------------------
For contract 0x495d3a0530367ed4331833eae74b32d4848401f0.sol
Tool Runtime = 7281.362239338981 seconds
#############################################