==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DegoMath
Function name: sqrt(uint256)
PC address: 194
Estimated Gas Usage: 311 - 406
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:623

x / z

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: sqrt(uint256), txdata: 0x677342ceffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: UniswapReward
Function name: constructor
PC address: 516
Estimated Gas Usage: 89193 - 414232
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:796

now + 365 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: UniswapReward
Function name: withdraw(uint256)
PC address: 3647
Estimated Gas Usage: 30017 - 111818
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:941

if (block.timestamp >= _periodFinish) {
            _initReward = _initReward.mul(50).div(100);

            _dego.mint(address(this), _initReward);

            _rewardRate = _initReward.div(DURATION);
            _periodFinish = block.timestamp.add(DURATION);
            emit RewardAdded(_initReward);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x50001000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: withdraw(uint256), txdata: 0x2e1a7d4d0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: UniswapReward
Function name: withdraw(uint256)
PC address: 4044
Estimated Gas Usage: 30835 - 112636
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:954

require(block.timestamp > _startTime, "not start")

--------------------
Initial State:

Account: [CREATOR], balance: 0xc000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startReward(uint256), txdata: 0xc909f1520000000040000007fffffffffffffffffffffffffffffffffffffffffff6c580, value: 0x0
Caller: [CREATOR], function: withdraw(uint256), txdata: 0x2e1a7d4dc9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: UniswapReward
Function name: getReward()
PC address: 5387
Estimated Gas Usage: 29891 - 111692
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:941

if (block.timestamp >= _periodFinish) {
            _initReward = _initReward.mul(50).div(100);

            _dego.mint(address(this), _initReward);

            _rewardRate = _initReward.div(DURATION);
            _periodFinish = block.timestamp.add(DURATION);
            emit RewardAdded(_initReward);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: UniswapReward
Function name: getReward()
PC address: 5784
Estimated Gas Usage: 30709 - 112510
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:954

require(block.timestamp > _startTime, "not start")

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000037fff, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startReward(uint256), txdata: 0xc909f152000000000000000000000000000000000000000000000000000000000006c581, value: 0x0
Caller: [ATTACKER], function: getReward(), txdata: 0x3d18b912, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UniswapReward
Function name: startReward(uint256)
PC address: 9401
Estimated Gas Usage: 48331 - 225132
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:972

_startTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startReward(uint256), txdata: 0xc909f1527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff74980, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UniswapReward
Function name: startReward(uint256)
PC address: 9406
Estimated Gas Usage: 48331 - 225132
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:972

_lastUpdateTime = _startTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startReward(uint256), txdata: 0xc909f1527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff74980, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UniswapReward
Function name: startReward(uint256)
PC address: 9417
Estimated Gas Usage: 48331 - 225132
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:973

_startTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: seize(address,uint256), txdata: 0xeb9253c000000000000000000000000001010101010101010101010101010101010101080000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: startReward(uint256), txdata: 0xc909f1527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff74580, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UniswapReward
Function name: startReward(uint256)
PC address: 9436
Estimated Gas Usage: 48331 - 225132
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:973

_periodFinish = _startTime.add(DURATION)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startReward(uint256), txdata: 0xc909f1527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff74980, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: UniswapReward
Function name: startReward(uint256)
PC address: 9473
Estimated Gas Usage: 48331 - 225132
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:975

_initReward

--------------------
Initial State:

Account: [CREATOR], balance: 0x10000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: seize(address,uint256), txdata: 0xeb9253c000000000000000000000000001010101010101010101010101010101010101080000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: startReward(uint256), txdata: 0xc909f1527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff74580, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: UniswapReward
Function name: stake(uint256,string)
PC address: 9958
Estimated Gas Usage: 30379 - 114862
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:941

if (block.timestamp >= _periodFinish) {
            _initReward = _initReward.mul(50).div(100);

            _dego.mint(address(this), _initReward);

            _rewardRate = _initReward.div(DURATION);
            _periodFinish = block.timestamp.add(DURATION);
            emit RewardAdded(_initReward);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000000040a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stake(uint256,string), txdata: 0xe7e4e1f70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: UniswapReward
Function name: stake(uint256,string)
PC address: 10355
Estimated Gas Usage: 31197 - 115680
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:954

require(block.timestamp > _startTime, "not start")

--------------------
Initial State:

Account: [CREATOR], balance: 0x90000000301, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: startReward(uint256), txdata: 0xc909f152000000000000000003fffffffffffffffffffffffffffffffffffffffff6c601, value: 0x0
Caller: [SOMEGUY], function: stake(uint256,string), txdata: 0xe7e4e1f7c9c9c9c9c9c9c9c9c9c9c9c9c9c9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: UniswapReward
Function name: seize(address,uint256)
PC address: 13931
Estimated Gas Usage: 5380 - 43379
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:544

address(token).call(abi.encodeWithSelector(SELECTOR, to, value))

--------------------
Initial State:

Account: [CREATOR], balance: 0x84001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setGovernance(address), txdata: 0xab033ea9000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: seize(address,uint256), txdata: 0xeb9253c0030303030303030303030303deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0303030303030303030303030303030303030303030303030303030303030303, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: UniswapReward
Function name: lastTimeRewardApplicable()
PC address: 14179
Estimated Gas Usage: 1046 - 1141
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop1/0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol:57

a < b ? a : b

--------------------
Initial State:

Account: [CREATOR], balance: 0x840060002020980, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: lastTimeRewardApplicable(), txdata: 0x80faa57d, value: 0x0



---------------------------------------------
For contract 0x28681d373aF03A0Eb00ACE262c5dad9A0C65F276.sol
Tool Runtime = 2173.170543618995 seconds
#############################################