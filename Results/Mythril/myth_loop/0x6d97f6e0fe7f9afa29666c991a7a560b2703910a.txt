==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: WBTCexPro
Function name: getDaysInterval()
PC address: 6266
Estimated Gas Usage: 253 - 348
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/8/0x6d97f6e0fe7f9afa29666c991a7a560b2703910a.sol:1556

require(now >= START_POINT, "Not yet started")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getDaysInterval(), txdata: 0x3be094a6, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: WBTCexPro
Function name: userLotteryTicker(address,uint256)
PC address: 8334
Estimated Gas Usage: 1286 - 1571
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/8/0x6d97f6e0fe7f9afa29666c991a7a560b2703910a.sol:1082

mapping(address => uint256[]) public userLotteryTicker

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: userLotteryTicker(address,uint256), txdata: 0x514e537200000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: WBTCexPro
Function name: lotteryPool(uint256)
PC address: 9271
Estimated Gas Usage: 1146 - 1241
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/8/0x6d97f6e0fe7f9afa29666c991a7a560b2703910a.sol:1084

LotteryTicket[] public  lotteryPool

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c4080000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: lotteryPool(uint256), txdata: 0x8a3ff5d30000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: WBTCexPro
Function name: getUserDepositInfo(address,uint256)
PC address: 12807
Estimated Gas Usage: 1294 - 1579
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/8/0x6d97f6e0fe7f9afa29666c991a7a560b2703910a.sol:1796

user.deposits[index]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getUserDepositInfo(address,uint256), txdata: 0xc0806b0300000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: WBTCexPro
Function name: invest(address,uint256)
PC address: 15336
Estimated Gas Usage: 3653 - 5212
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/8/0x6d97f6e0fe7f9afa29666c991a7a560b2703910a.sol:1136

if(daysInterval > presentDaysInterval) {

			uint power = daysInterval - presentDaysInterval;



			// presentDayAmount = presentDayAmount.mul(11**power).div(10**power);

			for (uint256 index = 0; index < power; index++) {

				presentDayAmount = presentDayAmount.mul(11).div(10);

			}



			presentDaysInterval = daysInterval;

		}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000201, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4040020000000080, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: setRewardPool(address), txdata: 0x78238c370000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: invest(address,uint256), txdata: 0xb9b8c24637373737373737373737373737373737373737373737373737373737373737370840000000202001800101020210010100010040000001000001001000400240, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: WBTCexPro
Function name: invest(address,uint256)
PC address: 15359
Estimated Gas Usage: 4507 - 6066
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/8/0x6d97f6e0fe7f9afa29666c991a7a560b2703910a.sol:1144

for (uint256 index = 0; index < power; index++) {

				presentDayAmount = presentDayAmount.mul(11).div(10);

			}

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000100000201, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: invest(address,uint256), txdata: 0xb9b8c24600000000000000000000000000000000000000000000000000000000000000004010004008101080040010400100800800401001100401081000001000100201, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: WBTCexPro
Function name: getDaysInterval()
PC address: 16382
Estimated Gas Usage: 921 - 2150
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/8/0x6d97f6e0fe7f9afa29666c991a7a560b2703910a.sol:438

require(b <= a, errorMessage)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: getDaysInterval(), txdata: 0x3be094a6, value: 0x0



---------------------------------------------
For contract 0x6d97f6e0fe7f9afa29666c991a7a560b2703910a.sol
Tool Runtime = 648.3496030679999 seconds
#############################################