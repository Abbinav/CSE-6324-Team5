==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PooledStaking
Function name: changeDependentContractAddress()
PC address: 5444
Estimated Gas Usage: 44551 - 273181
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:1431

master.getLatestAddress("TC")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PooledStaking
Function name: changeDependentContractAddress()
PC address: 5600
Estimated Gas Usage: 44551 - 273181
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:1437

REWARD_ROUNDS_START

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PooledStaking
Function name: changeDependentContractAddress()
PC address: 5653
Estimated Gas Usage: 44551 - 273181
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:1417

REWARD_ROUNDS_START

--------------------
Initial State:

Account: [CREATOR], balance: 0x20fbfd6, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateUintParameters(bytes8,uint256), txdata: 0x9dd86e0f554e53545f4c4b540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PooledStaking
Function name: changeDependentContractAddress()
PC address: 5751
Estimated Gas Usage: 44551 - 273181
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:1418

REWARD_ROUNDS_START = 1600074000

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PooledStaking
Function name: changeDependentContractAddress()
PC address: 5761
Estimated Gas Usage: 44551 - 273181
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:1419

REWARD_ROUND_DURATION = 7 days

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PooledStaking
Function name: changeDependentContractAddress()
PC address: 5796
Estimated Gas Usage: 44551 - 273181
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:1422

lastRewardId

--------------------
Initial State:

Account: [CREATOR], balance: 0x20fbfd6, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateUintParameters(bytes8,uint256), txdata: 0x9dd86e0f554e53545f4c4b540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PooledStaking
Function name: changeDependentContractAddress()
PC address: 5801
Estimated Gas Usage: 44551 - 273181
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:1424

sstore(location, lastRewardIdValue)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PooledStaking
Function name: pushBurn(address,uint256)
PC address: 9587
Estimated Gas Usage: 34094 - 188412
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:606

master.isPause()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0
Caller: [SOMEGUY], function: pushBurn(address,uint256), txdata: 0x68989a5984848484848484848484848400000000000002000080040200000000200020108484848484848484848484848484848484848484848484848484848484848484, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PooledStaking
Function name: changeDependentContractAddress()
PC address: 10776
Estimated Gas Usage: 44551 - 273181
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:1412

tokenController.addToWhitelist(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c10400020ffe7e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateUintParameters(bytes8,uint256), txdata: 0x9dd86e0f554e53545f4c4b540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PooledStaking
Function name: changeDependentContractAddress()
PC address: 10776
Estimated Gas Usage: 44551 - 273181
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:1412

tokenController.addToWhitelist(address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateUintParameters(bytes8,uint256), txdata: 0x9dd86e0f554e53545f4c4b540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PooledStaking
Function name: initialize()
PC address: 10809
Estimated Gas Usage: 9430 - 64891
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:1413

initialized = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(), txdata: 0x8129fc1c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PooledStaking
Function name: initialize()
PC address: 10823
Estimated Gas Usage: 9430 - 64891
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:1413

initialized = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(), txdata: 0x8129fc1c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PooledStaking
Function name: requestUnstake(address[],uint256[],uint256)
PC address: 11530
Estimated Gas Usage: 9410 - 79904
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:272

master.isMember(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0
Caller: [CREATOR], function: requestUnstake(address[],uint256[],uint256), txdata: 0x8e91e6bd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PooledStaking
Function name: processPendingActions(uint256)
PC address: 14522
Estimated Gas Usage: 13323 - 85060
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:606

master.isPause()

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0002000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0
Caller: [SOMEGUY], function: processPendingActions(uint256), txdata: 0xff551c848484848484848484848484848484848484848484848484848484848484848484, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PooledStaking
Function name: withdrawReward(address)
PC address: 17147
Estimated Gas Usage: 13412 - 104538
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:937

token.transfer(stakerAddress, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c00400020bbfba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0
Caller: [SOMEGUY], function: withdrawReward(address), txdata: 0xb86e321c8484848484848484848484840000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PooledStaking
Function name: withdrawReward(address)
PC address: 17147
Estimated Gas Usage: 13412 - 104538
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:937

token.transfer(stakerAddress, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0xc0102000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0
Caller: [ATTACKER], function: withdrawReward(address), txdata: 0xb86e321c8484848484848484848484840000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PooledStaking
Function name: depositAndStake(uint256,address[],uint256[])
PC address: 17914
Estimated Gas Usage: 21568 - 147334
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:272

master.isMember(msg.sender)

--------------------
Initial State:

Account: [CREATOR], balance: 0x800c0002081fb2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0
Caller: [SOMEGUY], function: depositAndStake(uint256,address[],uint256[]), txdata: 0xc001472e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000130000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: PooledStaking
Function name: depositAndStake(uint256,address[],uint256[])
PC address: 18745
Estimated Gas Usage: 21568 - 147334
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:761

tokenController.operatorTransfer(msg.sender, address(this), amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0
Caller: [CREATOR], function: depositAndStake(uint256,address[],uint256[]), txdata: 0xc001472e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PooledStaking
Function name: depositAndStake(uint256,address[],uint256[])
PC address: 19139
Estimated Gas Usage: 21568 - 147334
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:771

staker.stakes[contractAddress]

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [CREATOR], function: depositAndStake(uint256,address[],uint256[]), txdata: 0xc001472e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: PooledStaking
Function name: depositAndStake(uint256,address[],uint256[])
PC address: 20664
Estimated Gas Usage: 21568 - 147334
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:813

MAX_EXPOSURE

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [CREATOR], function: depositAndStake(uint256,address[],uint256[]), txdata: 0xc001472e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: PooledStaking
Function name: depositAndStake(uint256,address[],uint256[])
PC address: 20669
Estimated Gas Usage: 21568 - 147334
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:813

staker.deposit

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0
Caller: [CREATOR], function: depositAndStake(uint256,address[],uint256[]), txdata: 0xc001472e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PooledStaking
Function name: contractStakerAtIndex(address,uint256)
PC address: 21609
Estimated Gas Usage: 1315 - 1600
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:618

contractStakers[contractAddress][stakerIndex]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1b7, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: contractStakerAtIndex(address,uint256), txdata: 0xd6b5b85200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: PooledStaking
Function name: stakerContractAtIndex(address,uint256)
PC address: 22203
Estimated Gas Usage: 1299 - 1584
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:649

stakers[staker].contracts[contractIndex]

--------------------
Initial State:

Account: [CREATOR], balance: 0x83fb6, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: stakerContractAtIndex(address,uint256), txdata: 0xef30375d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: PooledStaking
Function name: accumulateReward(address,uint256)
PC address: 22721
Estimated Gas Usage: 23414 - 137592
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:606

master.isPause()

--------------------
Initial State:

Account: [CREATOR], balance: 0x2040080000070012, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0
Caller: [ATTACKER], function: accumulateReward(address,uint256), txdata: 0xf0f923c084848484848484848484848402202080000220000000200400040002000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PooledStaking
Function name: requestUnstake(address[],uint256[],uint256)
PC address: 24860
Estimated Gas Usage: 9170 - 79474
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:39

require(c >= a, "SafeMath: addition overflow")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x800002, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(), txdata: 0x8129fc1c, value: 0x0
Caller: [CREATOR], function: requestUnstake(address[],uint256[],uint256), txdata: 0x8e91e6bd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PooledStaking
Function name: pushRewards(address[])
PC address: 25174
Estimated Gas Usage: 8508 - 46881
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:991

if (lastRound != currentRound) {
          contractRewards.lastDistributionRound = currentRound;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000040031, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: changeDependentContractAddress(), txdata: 0x0ea9c984, value: 0x0
Caller: [SOMEGUY], function: pushRewards(address[]), txdata: 0xf6ceefa2000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000018484848484848484848484840440040120010040000001400000000100000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: PooledStaking
Function name: getCurrentRewardsRound()
PC address: 25657
Estimated Gas Usage: 1918 - 2013
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop1/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol:964

now <= startTime ? 0 : (now - startTime) / roundDuration

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initializeRewardRoundsStart(), txdata: 0x16faaa8f, value: 0x0
Caller: [CREATOR], function: getCurrentRewardsRound(), txdata: 0x74ff6b90, value: 0x0



---------------------------------------------
For contract 0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol
Tool Runtime = 3044.502015364 seconds
#############################################