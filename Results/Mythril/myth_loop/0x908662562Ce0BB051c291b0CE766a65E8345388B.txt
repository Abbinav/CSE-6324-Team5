==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 9589
Estimated Gas Usage: 81718 - 503504
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1315

IWhiteList(whiteListAddress).address_belongs(_whom)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10c00000e290a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 10004
Estimated Gas Usage: 77650 - 464007
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1319

whiteListAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x202, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Auction
Function name: auctionEnd()
PC address: 10184
Estimated Gas Usage: 1974 - 2069
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1427

require(
            now >= safeAdd(LAST_AUCTION_START, MIN_AUCTION_END_TIME),
            "ERR_MIN_TIME_IS_NOT_OVER"
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x9c0040021002088, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auctionEnd(), txdata: 0x2a24f46c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RegisteryAuction
Function name: updateAddresses()
PC address: 11113
Estimated Gas Usage: 75805 - 573179
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:876

contractsRegistry.getAddressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateAddresses(), txdata: 0xe26db6fc, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 14025
Estimated Gas Usage: 81696 - 503482
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1315

IWhiteList(whiteListAddress).address_belongs(_whom)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080040400000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090904080808080808080808040084000801004408000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 14440
Estimated Gas Usage: 77628 - 463985
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1319

whiteListAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x104010005adba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AuctionUtils
Function name: updateAddresses()
PC address: 14569
Estimated Gas Usage: 75783 - 573157
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:876

contractsRegistry.getAddressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80002043000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateAddresses(), txdata: 0xe26db6fc, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: IndividualBonus
Function name: updateAddresses()
PC address: 15373
Estimated Gas Usage: 75783 - 573157
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:876

contractsRegistry.getAddressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1080000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateAddresses(), txdata: 0xe26db6fc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 17285
Estimated Gas Usage: 77650 - 464007
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1293

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x202, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 17300
Estimated Gas Usage: 79195 - 465994
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1293

dayWiseDownSideProtectionRatio[auctionDay]

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090908080104020800001400000000080088040204000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 17320
Estimated Gas Usage: 77650 - 464007
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1295

auctionProtectionAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x202, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 17380
Estimated Gas Usage: 81718 - 503504
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1295

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900000000000010000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 17516
Estimated Gas Usage: 77650 - 464007
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1295

IAuctionProtection(auctionProtectionAddress).lockEther.value(downSideAmount)(auctionDay,_recipient)

--------------------
Initial State:

Account: [CREATOR], balance: 0x202, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 19327
Estimated Gas Usage: 79195 - 465994
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1192

currencyPricesAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090908080104020800001400000000080088040204000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEther()
PC address: 19511
Estimated Gas Usage: 72468 - 388663
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1192

ICurrencyPrices(currencyPricesAddress)
            .getCurrencyPrice(_token)

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000011a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [SOMEGUY], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 19725
Estimated Gas Usage: 77650 - 464007
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1204

allowMaxContribution

--------------------
Initial State:

Account: [CREATOR], balance: 0x202, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 19731
Estimated Gas Usage: 80173 - 501517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1203

todayContribution

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040000000098883, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: AuctionFundCollector
Function name: contributeWithEther()
PC address: 19905
Estimated Gas Usage: 5530 - 75409
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:379

assert(c / a == b)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10200460c40000009, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateAddresses(), txdata: 0xe26db6fc, value: 0x0
Caller: [ATTACKER], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x3

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 19981
Estimated Gas Usage: 79195 - 465994
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1235

mainTokencheckDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090908080104020800001400000000080088040204000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 19984
Estimated Gas Usage: 79195 - 465994
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1235

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090908080104020800001400000000080088040204000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 20009
Estimated Gas Usage: 80173 - 501517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1239

todayContribution

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040000000098883, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 20020
Estimated Gas Usage: 79195 - 465994
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1239

todayContribution = safeAdd(todayContribution, _contributedAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090908080104020800001400000000080088040204000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 20031
Estimated Gas Usage: 80173 - 501517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1242

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040000000098883, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 20107
Estimated Gas Usage: 81718 - 503504
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1242

walletDayWiseContribution[auctionDay][_caller]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900000000000010000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 20120
Estimated Gas Usage: 79195 - 465994
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1241

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090908080104020800001400000000080088040204000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 20198
Estimated Gas Usage: 79195 - 465994
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1241

mainTokenCheckDayWise[auctionDay][_caller] = safeAdd(
            walletDayWiseContribution[auctionDay][_caller],
            _contributedAmount
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090908080104020800001400000000080088040204000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 20209
Estimated Gas Usage: 80173 - 501517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1247

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040000000098883, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 20285
Estimated Gas Usage: 81718 - 503504
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1247

walletDayWiseContribution[auctionDay][_recipient]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900000000000010000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 20298
Estimated Gas Usage: 80173 - 501517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1246

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040000000098883, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 20376
Estimated Gas Usage: 79195 - 465994
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1246

walletDayWiseContribution[auctionDay][_recipient] = safeAdd(
            walletDayWiseContribution[auctionDay][_recipient],
            _contributedAmount
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090908080104020800001400000000080088040204000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 20444
Estimated Gas Usage: 81718 - 503504
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1252

userTotalFund[_recipient]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900000000000010000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 20516
Estimated Gas Usage: 79195 - 465994
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1251

userTotalFund[_recipient] = safeAdd(
            userTotalFund[_recipient],
            _contributedAmount
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090908080104020800001400000000080088040204000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 20527
Estimated Gas Usage: 79195 - 465994
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1257

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090908080104020800001400000000080088040204000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 20542
Estimated Gas Usage: 81718 - 503504
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1257

dayWiseContribution[auctionDay]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900000000000010000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 20555
Estimated Gas Usage: 80173 - 501517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1256

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040000000098883, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 20572
Estimated Gas Usage: 79195 - 465994
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1256

dayWiseContribution[auctionDay] = safeAdd(
            dayWiseContribution[auctionDay],
            _contributedAmount
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090908080104020800001400000000080088040204000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEther()
PC address: 20631
Estimated Gas Usage: 72468 - 388663
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1264

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40101140282404100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEther()
PC address: 20667
Estimated Gas Usage: 72468 - 388663
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1265

todayContribution

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40101140282404100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEther()
PC address: 20676
Estimated Gas Usage: 72468 - 388663
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1270

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40101140282404100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEther()
PC address: 20752
Estimated Gas Usage: 72468 - 388663
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1270

walletDayWiseContribution[auctionDay][_recipient]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40101140282404100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEther()
PC address: 20755
Estimated Gas Usage: 72468 - 388663
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1271

currentMarketPrice

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40101140282404100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: AuctionFundCollector
Function name: updateAddresses()
PC address: 21111
Estimated Gas Usage: 75783 - 573157
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:876

contractsRegistry.getAddressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateAddresses(), txdata: 0xe26db6fc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 21231
Estimated Gas Usage: 80173 - 501517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1160

mainTokenAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040000000098883, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 21267
Estimated Gas Usage: 79195 - 465994
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1162

currentMarketPrice

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090908080104020800001400000000080088040204000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 21407
Estimated Gas Usage: 81718 - 503504
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1168

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900000000000010000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 21483
Estimated Gas Usage: 79195 - 465994
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1168

mainTokenCheckDayWise[auctionDay][_from]

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090908080104020800001400000000080088040204000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 21682
Estimated Gas Usage: 80173 - 501517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1176

mainTokenRatio

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040000000098883, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 22001
Estimated Gas Usage: 79195 - 465994
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1180

mainTokenAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090908080104020800001400000000080088040204000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 22203
Estimated Gas Usage: 79195 - 465994
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1180

IToken(mainTokenAddress).lockToken(_from, lockToken, now)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090908080104020800001400000000080088040204000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEtherBehalf(address)
PC address: 22291
Estimated Gas Usage: 80173 - 501517
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1090

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x40040000000098883, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEther()
PC address: 22367
Estimated Gas Usage: 72468 - 388663
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1090

walletDayWiseContribution[auctionDay][_from]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40101140282404100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEther()
PC address: 22378
Estimated Gas Usage: 72468 - 388663
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1094

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40101140282404100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEther()
PC address: 22401
Estimated Gas Usage: 72468 - 388663
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1094

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40101140282404100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEther()
PC address: 22437
Estimated Gas Usage: 72468 - 388663
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1094

topFiveContributor[auctionDay][5]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40101140282404100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: AuctionFundCollector
Function name: contributeWithEther()
PC address: 22525
Estimated Gas Usage: 72468 - 388663
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1094

walletDayWiseContribution[auctionDay][topFiveContributor[auctionDay][5]]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40101140282404100, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Auction
Function name: contributeWithEther()
PC address: 24368
Estimated Gas Usage: 5574 - 75453
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:379

assert(c / a == b)

--------------------
Initial State:

Account: [CREATOR], balance: 0x840108120107, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateAddresses(), txdata: 0xe26db6fc, value: 0x0
Caller: [CREATOR], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x3

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Auction
Function name: auctionEnd()
PC address: 24393
Estimated Gas Usage: 95944 - 521347
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:384

a / b

--------------------
Initial State:

Account: [CREATOR], balance: 0x800000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: auctionEnd(), txdata: 0x2a24f46c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 24425
Estimated Gas Usage: 80151 - 501495
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1090

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [SOMEGUY], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 24501
Estimated Gas Usage: 81696 - 503482
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1090

walletDayWiseContribution[auctionDay][_from]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 24512
Estimated Gas Usage: 79173 - 465972
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1094

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900104000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEther()
PC address: 24535
Estimated Gas Usage: 72512 - 388707
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1094

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x41080000038100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEther()
PC address: 24571
Estimated Gas Usage: 72512 - 388707
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1094

topFiveContributor[auctionDay][5]

--------------------
Initial State:

Account: [CREATOR], balance: 0x41080000038100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEther()
PC address: 24659
Estimated Gas Usage: 72512 - 388707
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1094

walletDayWiseContribution[auctionDay][topFiveContributor[auctionDay][5]]

--------------------
Initial State:

Account: [CREATOR], balance: 0x41080000038100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 26237
Estimated Gas Usage: 77628 - 463985
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1293

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x104010005adba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 26252
Estimated Gas Usage: 81696 - 503482
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1293

dayWiseDownSideProtectionRatio[auctionDay]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 26272
Estimated Gas Usage: 77628 - 463985
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1295

auctionProtectionAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x104010005adba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 26332
Estimated Gas Usage: 79173 - 465972
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1295

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900104000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 26468
Estimated Gas Usage: 77628 - 463985
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1295

IAuctionProtection(auctionProtectionAddress).lockEther.value(downSideAmount)(auctionDay,_recipient)

--------------------
Initial State:

Account: [CREATOR], balance: 0x104010005adba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 32697
Estimated Gas Usage: 79173 - 465972
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1192

currencyPricesAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900104000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Auction
Function name: contributeWithEther()
PC address: 32881
Estimated Gas Usage: 72512 - 388707
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1192

ICurrencyPrices(currencyPricesAddress)
            .getCurrencyPrice(_token)

--------------------
Initial State:

Account: [CREATOR], balance: 0x80800, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [SOMEGUY], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33095
Estimated Gas Usage: 77628 - 463985
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1204

allowMaxContribution

--------------------
Initial State:

Account: [CREATOR], balance: 0x104010005adba, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33101
Estimated Gas Usage: 80151 - 501495
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1203

todayContribution

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [SOMEGUY], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33240
Estimated Gas Usage: 80151 - 501495
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1235

mainTokencheckDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [SOMEGUY], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33243
Estimated Gas Usage: 80151 - 501495
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1235

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [SOMEGUY], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33268
Estimated Gas Usage: 80151 - 501495
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1239

todayContribution

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [SOMEGUY], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33279
Estimated Gas Usage: 79173 - 465972
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1239

todayContribution = safeAdd(todayContribution, _contributedAmount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900104000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33290
Estimated Gas Usage: 80151 - 501495
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1242

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [SOMEGUY], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33366
Estimated Gas Usage: 81696 - 503482
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1242

walletDayWiseContribution[auctionDay][_caller]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33379
Estimated Gas Usage: 79173 - 465972
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1241

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900104000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33457
Estimated Gas Usage: 79173 - 465972
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1241

mainTokenCheckDayWise[auctionDay][_caller] = safeAdd(
            walletDayWiseContribution[auctionDay][_caller],
            _contributedAmount
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900104000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33468
Estimated Gas Usage: 80151 - 501495
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1247

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [SOMEGUY], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33544
Estimated Gas Usage: 81696 - 503482
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1247

walletDayWiseContribution[auctionDay][_recipient]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33557
Estimated Gas Usage: 80151 - 501495
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1246

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [SOMEGUY], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33635
Estimated Gas Usage: 79173 - 465972
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1246

walletDayWiseContribution[auctionDay][_recipient] = safeAdd(
            walletDayWiseContribution[auctionDay][_recipient],
            _contributedAmount
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900104000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33703
Estimated Gas Usage: 81696 - 503482
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1252

userTotalFund[_recipient]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33775
Estimated Gas Usage: 79173 - 465972
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1251

userTotalFund[_recipient] = safeAdd(
            userTotalFund[_recipient],
            _contributedAmount
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900104000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33786
Estimated Gas Usage: 80151 - 501495
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1257

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [SOMEGUY], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33801
Estimated Gas Usage: 81696 - 503482
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1257

dayWiseContribution[auctionDay]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33814
Estimated Gas Usage: 80151 - 501495
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1256

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [SOMEGUY], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 33831
Estimated Gas Usage: 79173 - 465972
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1256

dayWiseContribution[auctionDay] = safeAdd(
            dayWiseContribution[auctionDay],
            _contributedAmount
        )

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900104000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEther()
PC address: 33890
Estimated Gas Usage: 72512 - 388707
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1264

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x41080000038100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEther()
PC address: 33926
Estimated Gas Usage: 72512 - 388707
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1265

todayContribution

--------------------
Initial State:

Account: [CREATOR], balance: 0x41080000038100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEther()
PC address: 33935
Estimated Gas Usage: 72512 - 388707
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1270

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x41080000038100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEther()
PC address: 34011
Estimated Gas Usage: 72512 - 388707
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1270

walletDayWiseContribution[auctionDay][_recipient]

--------------------
Initial State:

Account: [CREATOR], balance: 0x41080000038100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEther()
PC address: 34014
Estimated Gas Usage: 72512 - 388707
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1271

currentMarketPrice

--------------------
Initial State:

Account: [CREATOR], balance: 0x41080000038100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [ATTACKER], function: contributeWithEther(), txdata: 0xab16b9c9, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Auction
Function name: updateAddresses()
PC address: 34500
Estimated Gas Usage: 75805 - 573179
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:876

contractsRegistry.getAddressOf(_contractName)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateAddresses(), txdata: 0xe26db6fc, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 34590
Estimated Gas Usage: 79173 - 465972
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1160

mainTokenAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900104000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 34626
Estimated Gas Usage: 81696 - 503482
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1162

currentMarketPrice

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 34766
Estimated Gas Usage: 79173 - 465972
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1168

auctionDay

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900104000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 34842
Estimated Gas Usage: 80151 - 501495
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1168

mainTokenCheckDayWise[auctionDay][_from]

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [SOMEGUY], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 35041
Estimated Gas Usage: 79173 - 465972
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1176

mainTokenRatio

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900104000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 35360
Estimated Gas Usage: 80151 - 501495
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1180

mainTokenAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [SOMEGUY], function: contributeWithEtherBehalf(address), txdata: 0x303d19d5909090909090909090909090aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Auction
Function name: contributeWithEtherBehalf(address)
PC address: 35562
Estimated Gas Usage: 79173 - 465972
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x908662562Ce0BB051c291b0CE766a65E8345388B.sol:1180

IToken(mainTokenAddress).lockToken(_from, lockToken, now)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: updateCurrentMarketPrice(), txdata: 0xa97ab890, value: 0x0
Caller: [CREATOR], function: contributeWithEtherBehalf(address), txdata: 0x303d19d59090909090909090909090900104000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x908662562Ce0BB051c291b0CE766a65E8345388B.sol
Tool Runtime = 5581.788733871999 seconds
#############################################