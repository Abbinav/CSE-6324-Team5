==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KOREv2Router
Function name: initialize()
PC address: 5016
Estimated Gas Usage: 44227 - 235005
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop4/0x248fd59aba2c8e7184b23733b4b30d257770a99d.sol:48

initializing = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: refreshApproval(), txdata: 0xbf33a1f5, value: 0x0
Caller: [SOMEGUY], function: initialize(), txdata: 0x8129fc1c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KOREv2Router
Function name: initialize()
PC address: 5030
Estimated Gas Usage: 44227 - 235005
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop4/0x248fd59aba2c8e7184b23733b4b30d257770a99d.sol:48

initializing = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(), txdata: 0x8129fc1c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 5979
Estimated Gas Usage: 10272 - 116318
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop4/0x248fd59aba2c8e7184b23733b4b30d257770a99d.sol:842

_koreToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: refreshApproval(), txdata: 0xbf33a1f5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KOREv2Router
Function name: initialize()
PC address: 6041
Estimated Gas Usage: 44227 - 235005
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop4/0x248fd59aba2c8e7184b23733b4b30d257770a99d.sol:842

_wKoreToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(), txdata: 0x8129fc1c, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 6239
Estimated Gas Usage: 10272 - 116318
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop4/0x248fd59aba2c8e7184b23733b4b30d257770a99d.sol:842

IERC20(_koreToken).approve(_wKoreToken, uint(-1))

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: refreshApproval(), txdata: 0xbf33a1f5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 6239
Estimated Gas Usage: 10272 - 116318
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop4/0x248fd59aba2c8e7184b23733b4b30d257770a99d.sol:842

IERC20(_koreToken).approve(_wKoreToken, uint(-1))

--------------------
Initial State:

Account: [CREATOR], balance: 0x3fffffffffffffffe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: refreshApproval(), txdata: 0xbf33a1f5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 6302
Estimated Gas Usage: 10272 - 116318
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop4/0x248fd59aba2c8e7184b23733b4b30d257770a99d.sol:843

_wKoreToken

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: refreshApproval(), txdata: 0xbf33a1f5, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 6364
Estimated Gas Usage: 10272 - 116318
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop4/0x248fd59aba2c8e7184b23733b4b30d257770a99d.sol:843

_koreVault

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: refreshApproval(), txdata: 0xbf33a1f5, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: KOREv2Router
Function name: initialize()
PC address: 6562
Estimated Gas Usage: 44227 - 235005
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop4/0x248fd59aba2c8e7184b23733b4b30d257770a99d.sol:843

IERC20(_wKoreToken).approve(address(_koreVault), uint(-1))

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: initialize(), txdata: 0x8129fc1c, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: KOREv2Router
Function name: refreshApproval()
PC address: 6562
Estimated Gas Usage: 10272 - 116318
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop4/0x248fd59aba2c8e7184b23733b4b30d257770a99d.sol:843

IERC20(_wKoreToken).approve(address(_koreVault), uint(-1))

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: refreshApproval(), txdata: 0xbf33a1f5, value: 0x0



---------------------------------------------
For contract 0x248fd59aba2c8e7184b23733b4b30d257770a99d.sol
Tool Runtime = 600.028747725999 seconds
#############################################