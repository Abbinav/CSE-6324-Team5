==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: VestingTimeLockBounty
Function name: totalSupply()
PC address: 873
Estimated Gas Usage: 3490 - 3585
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/1/0x4f20fd6d8ef9ed98a4eaa58a3d6450d7952acab5.sol:795

daysSinceCreation/_releaseTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 00000000000000000000000001, value: 0x0
Caller: [CREATOR], function: totalSupply(), txdata: 0x18160ddd, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: VestingTimeLockBounty
Function name: release()
PC address: 1438
Estimated Gas Usage: 2870 - 3295
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./new_contracts/m_loop/1/0x4f20fd6d8ef9ed98a4eaa58a3d6450d7952acab5.sol:814

require(daysSinceCreation >= _releaseTime, "TokenTimelock: current time is before release time")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: adadadadadadadadadadadaddeadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: release(), txdata: 0x86d1a69f, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: VestingTimeLockBounty
Function name: release()
PC address: 1534
Estimated Gas Usage: 4512 - 4937
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/1/0x4f20fd6d8ef9ed98a4eaa58a3d6450d7952acab5.sol:816

daysSinceCreation/_releaseTime

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: 000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: release(), txdata: 0x86d1a69f, value: 0x0



---------------------------------------------
For contract 0x4f20fd6d8ef9ed98a4eaa58a3d6450d7952acab5.sol
Tool Runtime = 2292.143166933005 seconds
#############################################