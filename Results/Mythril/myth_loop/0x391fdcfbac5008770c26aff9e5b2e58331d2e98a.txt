==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DigitalBurn
Function name: multiTransfer(address[],uint256[])
PC address: 2448
Estimated Gas Usage: 1131 - 6962
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/5/0x391fdcfbac5008770c26aff9e5b2e58331d2e98a.sol:257

amounts[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000300000010e04, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d5450000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DigitalBurn
Function name: decreaseAllowance(address,uint256)
PC address: 6390
Estimated Gas Usage: 1373 - 1848
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/5/0x391fdcfbac5008770c26aff9e5b2e58331d2e98a.sol:64

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3030081000008a00, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: decreaseAllowance(address,uint256), txdata: 0xa457c2d700000000000000000000000000000000000000000100000002010101000000000000000000000000200000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DigitalBurn
Function name: findtwoPercent(uint256)
PC address: 6421
Estimated Gas Usage: 1209 - 1304
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/5/0x391fdcfbac5008770c26aff9e5b2e58331d2e98a.sol:75

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: findtwoPercent(uint256), txdata: 0x8ded4587ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcc, value: 0x0



---------------------------------------------
For contract 0x391fdcfbac5008770c26aff9e5b2e58331d2e98a.sol
Tool Runtime = 3461.846835359989 seconds
#############################################