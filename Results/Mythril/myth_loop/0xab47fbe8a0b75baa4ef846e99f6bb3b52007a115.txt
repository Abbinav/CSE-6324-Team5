==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: WIPcoin
Function name: constructor
PC address: 566
Estimated Gas Usage: 170593 - 723829
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol:497

timerInitiated + halvingPeriodSeconds

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: WIPcoin
Function name: getWeeklyDistribution()
PC address: 4797
Estimated Gas Usage: 1061 - 1486
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol:515

WIPHardCap*1/halvingDecay

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: getWeeklyDistribution(), txdata: 0x384d5a9a, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: WIPcoin
Function name: getWeeklyDistribution()
PC address: 4809
Estimated Gas Usage: 3735 - 4631
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol:517

totalDistributionAmount*communitySplit

--------------------
Initial State:

Account: [CREATOR], balance: 0x101040404480809, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: adjustWeeklySplit(uint256,uint256,uint256), txdata: 0xcb27fa0c4007014fb7dfffdedfb271ebffe12437fc0401ff9e991b1f0127f8c460000017b1fdfebffffffffffffff57ffffffdfffff3fbffdffff7f7fed8063b9ffffc4d0dfafff048200021204d9894001eddc8040802008166ece90000010000000400, value: 0x0
Caller: [ATTACKER], function: getWeeklyDistribution(), txdata: 0x384d5a9a, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: WIPcoin
Function name: getWeeklyDistribution()
PC address: 4828
Estimated Gas Usage: 3735 - 4631
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol:518

totalDistributionAmount*expensesSplit

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x80, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: adjustWeeklySplit(uint256,uint256,uint256), txdata: 0xcb27fa0c001914689a80002081100000084401210800004600c3ec2a44a0259666a26186fffbfcd7bcffffffffb617aff7fcbffff3fffffc9fa0019df7e29ac58dddb7feffeaeebfa87fffdf7f39e84fffbf3edf03ffffbd5f9c1237c37d3fa40b7fe6e0, value: 0x0
Caller: [ATTACKER], function: getWeeklyDistribution(), txdata: 0x384d5a9a, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: WIPcoin
Function name: getWeeklyDistribution()
PC address: 4847
Estimated Gas Usage: 3735 - 4631
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol:519

totalDistributionAmount*promotionalSplit

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: adjustWeeklySplit(uint256,uint256,uint256), txdata: 0xcb27fa0c40100800b7e3bdcf3ba0bbb1ff2fc0c000000164d9fdffffafbcffffffff804526fff8e749204460c47a451000d04e4e1000000025820000504300000000801f98efff17fefbfdcfffe4ff3dfffff0f1effffe9b008000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: getWeeklyDistribution(), txdata: 0x384d5a9a, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: WIPcoin
Function name: updateNumberOfAttendees(uint256)
PC address: 6177
Estimated Gas Usage: 2189 - 2804
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol:539

require (getTimeToDelayEnd() <= 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAdminAddress(address), txdata: 0x004fba00000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: updateNumberOfAttendees(uint256), txdata: 0x59ad09914f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: WIPcoin
Function name: pushAddresses(address[])
PC address: 7990
Estimated Gas Usage: 9197 - 32494
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol:550

require(getTimeToNextHalving() >= 0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAdminAddress(address), txdata: 0x004fba00000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: pushAddresses(address[]), txdata: 0xc28c13280000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: WIPcoin
Function name: pushAddresses(address[])
PC address: 8016
Estimated Gas Usage: 10069 - 33366
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol:551

require(getTimeToNextHalving() <= int256(halvingPeriodSeconds))

--------------------
Initial State:

Account: [CREATOR], balance: 0x5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAdminAddress(address), txdata: 0x004fba00000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe, value: 0x0
Caller: [CREATOR], function: pushAddresses(address[]), txdata: 0xc28c13280000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: WIPcoin
Function name: adjustWeeklySplit(uint256,uint256,uint256)
PC address: 8560
Estimated Gas Usage: 16431 - 76856
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol:627

newExpenses + newPromo

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: adjustWeeklySplit(uint256,uint256,uint256), txdata: 0xcb27fa0c800000000000000000000000000000000000000000000000000000000000006480000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: WIPcoin
Function name: adjustWeeklySplit(uint256,uint256,uint256)
PC address: 8561
Estimated Gas Usage: 16431 - 76856
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol:627

newExpenses + newPromo + newCommunity

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000009, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: adjustWeeklySplit(uint256,uint256,uint256), txdata: 0xcb27fa0c8528eac3c0bf80000000000000000000000000000000000000000000000000648dba6b3d3ec00000000000000000000000000000000000000000000000000000ed1ca9ff00808000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: WIPcoin
Function name: getStats()
PC address: 10707
Estimated Gas Usage: 8065 - 9201
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol:588

claimTimeDelay - block.timestamp

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: getStats(), txdata: 0xc59d4847, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: WIPcoin
Function name: updateNumberOfAttendees(uint256)
PC address: 10729
Estimated Gas Usage: 19821 - 81096
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol:527

if (getTimeToNextHalving() <= 0) {
            halvingIndex = halvingIndex + 1;
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAdminAddress(address), txdata: 0x004fba00000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: updateNumberOfAttendees(uint256), txdata: 0x59ad09914f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: WIPcoin
Function name: updateNumberOfAttendees(uint256)
PC address: 10758
Estimated Gas Usage: 32306 - 133581
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol:530

timerInitiated + ((halvingIndex + 1) * halvingPeriodSeconds)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: addAdminAddress(address), txdata: 0x004fba00000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0
Caller: [SOMEGUY], function: updateNumberOfAttendees(uint256), txdata: 0x59ad09914f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: WIPcoin
Function name: getStats()
PC address: 10972
Estimated Gas Usage: 8065 - 9201
The arithmetic operator can underflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop5/0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol:534

halvingTimeStamp - block.timestamp

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: getStats(), txdata: 0xc59d4847, value: 0x0



---------------------------------------------
For contract 0xab47fbe8a0b75baa4ef846e99f6bb3b52007a115.sol
Tool Runtime = 6475.024901211 seconds
#############################################