==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: airdrop(address,address[],uint256[])
PC address: 3549
Estimated Gas Usage: 74401 - 319451
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:194

_balances[from]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2040080000080002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: airdrop(address,address[],uint256[]), txdata: 0x025ff12f000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000410000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000180048004082010201002400420af040808af010000000000000000000000000208000010000880000080000004000000008010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: airdrop(address,address[],uint256[])
PC address: 3773
Estimated Gas Usage: 74401 - 319451
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:196

_freezed[from]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2040080000080002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: airdrop(address,address[],uint256[]), txdata: 0x025ff12f000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000410000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000180048004082010201002400420af040808af010000000000000000000000000208000010000880000080000004000000008010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: airdrop(address,address[],uint256[])
PC address: 4022
Estimated Gas Usage: 74401 - 319451
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:199

_balances[from]

--------------------
Initial State:

Account: [CREATOR], balance: 0x2040080000080002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: airdrop(address,address[],uint256[]), txdata: 0x025ff12f000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000410000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000180048004082010201002400420af040808af010000000000000000000000000208000010000880000080000004000000008010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: airdrop(address,address[],uint256[])
PC address: 4102
Estimated Gas Usage: 74401 - 319451
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:199

_balances[from] = _balances[from].sub(value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2040080000080002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: airdrop(address,address[],uint256[]), txdata: 0x025ff12f000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000410000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000180048004082010201002400420af040808af010000000000000000000000000208000010000880000080000004000000008010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: airdrop(address,address[],uint256[])
PC address: 4287
Estimated Gas Usage: 74401 - 319451
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:204

_balances[to] = _balances[to].add(tokensToTransfer)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2040080000080002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: airdrop(address,address[],uint256[]), txdata: 0x025ff12f000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000410000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000180048004082010201002400420af040808af010000000000000000000000000208000010000880000080000004000000008010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: airdrop(address,address[],uint256[])
PC address: 4314
Estimated Gas Usage: 74401 - 319451
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:205

_totalSupply = _totalSupply.sub(tokensToBurnAndMint)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2040080000080002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: airdrop(address,address[],uint256[]), txdata: 0x025ff12f000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000410000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000180048004082010201002400420af040808af010000000000000000000000000208000010000880000080000004000000008010, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: airdrop(address,address[],uint256[])
PC address: 4515
Estimated Gas Usage: 74401 - 319451
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:206

InflationToken._mint(from , tokensToBurnAndMint)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2020880a008000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setInflationContractAddress(address), txdata: 0xe2d13f7b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [ATTACKER], function: airdrop(address,address[],uint256[]), txdata: 0x025ff12f00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000002d1d1d1d1d1d1d1d1d1d1d1d14080808004808010200420018040400410088080d1d1d1d1d1d1d1d1d1d1d1d18001400400040180100004000102208020018000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: DeflationToken
Function name: airdrop(address,address[],uint256[])
PC address: 4515
Estimated Gas Usage: 74401 - 319451
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:206

InflationToken._mint(from , tokensToBurnAndMint)

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000823, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: airdrop(address,address[],uint256[]), txdata: 0x025ff12f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000004400404104002100804802080102020800801080000000000000000000000000000000000000000000000000000000000000002, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: airdrop(address,address[],uint256[])
PC address: 4515
Estimated Gas Usage: 74401 - 319451
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:206

InflationToken._mint(from , tokensToBurnAndMint)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2040080000080002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: airdrop(address,address[],uint256[]), txdata: 0x025ff12f000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000410000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000180048004082010201002400420af040808af010000000000000000000000000208000010000880000080000004000000008010, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: airdrop(address,address[],uint256[])
PC address: 4701
Estimated Gas Usage: 37724 - 163118
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:207

_allowed[from][msg.sender]

--------------------
Initial State:

Account: [CREATOR], balance: 0x29a0c100000ba321, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: airdrop(address,address[],uint256[]), txdata: 0x025ff12f000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000410000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: airdrop(address,address[],uint256[])
PC address: 4842
Estimated Gas Usage: 37724 - 163118
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:207

_allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x29a0c100000ba321, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: airdrop(address,address[],uint256[]), txdata: 0x025ff12f000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000410000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: airdrop(address,address[],uint256[])
PC address: 8119
Estimated Gas Usage: 74401 - 319451
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:134

basePercent

--------------------
Initial State:

Account: [CREATOR], balance: 0x2040080000080002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: airdrop(address,address[],uint256[]), txdata: 0x025ff12f000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000410000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000180048004082010201002400420af040808af010000000000000000000000000208000010000880000080000004000000008010, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: transfer(address,uint256)
PC address: 8728
Estimated Gas Usage: 29532 - 127959
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:155

InflationToken._mint(msg.sender, tokensToBurnAndMint)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setInflationContractAddress(address), txdata: 0xe2d13f7b000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbbd1d1d1d1d1d1d1d1d1d1d1d100000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: transfer(address,uint256)
PC address: 8853
Estimated Gas Usage: 29532 - 127959
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:157

_balances[msg.sender]

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c1080000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: transfer(address,uint256)
PC address: 8933
Estimated Gas Usage: 29532 - 127959
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:157

_balances[msg.sender] = _balances[msg.sender].sub(value)

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c1080000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: transfer(address,uint256)
PC address: 9002
Estimated Gas Usage: 29532 - 127959
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:158

_balances[to]

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: airdrop(address,address[],uint256[]), txdata: 0x025ff12f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000001010101018002010401010140010110010101020000000000000000000000000000000000000080000000000000000000000000, value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb80808080808080808080808000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: transfer(address,uint256)
PC address: 9082
Estimated Gas Usage: 29532 - 127959
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:158

_balances[to] = _balances[to].add(tokensToTransfer)

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c1080000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: transfer(address,uint256)
PC address: 9090
Estimated Gas Usage: 29532 - 127959
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:159

_totalSupply

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: airdrop(address,address[],uint256[]), txdata: 0x025ff12f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000001010101018002010401010140010110010101020000000000000000000000000000000000000080000000000000000000000000, value: 0x0
Caller: [CREATOR], function: transfer(address,uint256), txdata: 0xa9059cbb80808080808080808080808000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: DeflationToken
Function name: transfer(address,uint256)
PC address: 9109
Estimated Gas Usage: 29532 - 127959
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:159

_totalSupply = _totalSupply.sub(tokensToBurnAndMint)

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c1080000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: transfer(address,uint256), txdata: 0xa9059cbb000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DeflationToken
Function name: decreaseAllowance(address,uint256)
PC address: 10079
Estimated Gas Usage: 1462 - 1937
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:34

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10c0000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: decreaseAllowance(address,uint256), txdata: 0xa457c2d700000000000000000000000000020100020000020200020001000000020102000000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: DeflationToken
Function name: findOnePercent(uint256)
PC address: 10110
Estimated Gas Usage: 1275 - 1370
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./new_contracts/m_loop/5/0x6b41459ced638645092a1c6d50726b428a66348a2.sol:39

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x21010c000000000a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: findOnePercent(uint256), txdata: 0xa6a68606ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0, value: 0x0



---------------------------------------------
For contract 0x6b41459ced638645092a1c6d50726b428a66348a2.sol
Tool Runtime = 9022.192406703 seconds
#############################################