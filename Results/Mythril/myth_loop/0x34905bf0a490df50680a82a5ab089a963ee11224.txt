==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: setPeakStatus(address,uint8)
PC address: 4530
Estimated Gas Usage: 3306 - 4722
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:770

peaks[peak].state = state

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000000000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: setPeakStatus(address,uint8), txdata: 0x4a6b989971717171717171717171717100000000000000000000000000000000000000007171717171717171717171717171717171717171717171717171717171717107, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Core
Function name: lastPeriodIncome()
PC address: 6142
Estimated Gas Usage: 14690 - 87400
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:641

dusd.totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0xfffe000000050, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: lastPeriodIncome(), txdata: 0x71766185, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 8836
Estimated Gas Usage: 17984 - 110807
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:571

totalAssets

--------------------
Initial State:

Account: [CREATOR], balance: 0x52012000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x5207b548000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: mint(uint256,address), txdata: 0x94bf804d252801311050589d1481d1100300c3708c36228192a882140509013824049c017171717171717171717171717171717171717171717171717171717171717171, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 8855
Estimated Gas Usage: 17984 - 110807
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:571

totalAssets = totalAssets.add(usdDelta)

--------------------
Initial State:

Account: [CREATOR], balance: 0x52012000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x5207b548000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: mint(uint256,address), txdata: 0x94bf804d252801311050589d1481d1100300c3708c36228192a882140509013824049c017171717171717171717171717171717171717171717171717171717171717171, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 8943
Estimated Gas Usage: 28105 - 176879
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:500

dusd

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000002002480, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: mint(uint256,address), txdata: 0x94bf804d08500a1b3489000594f48049014101489f824844356a78018421408530824453fefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefe, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 9072
Estimated Gas Usage: 28105 - 176879
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:500

dusd.totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x40002000001004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [SOMEGUY], function: mint(uint256,address), txdata: 0x94bf804d1000000000000000020000000000000000000000000000000000000000000184aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 9133
Estimated Gas Usage: 17984 - 110807
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:501

totalAssets

--------------------
Initial State:

Account: [CREATOR], balance: 0x52012000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x5207b548000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: mint(uint256,address), txdata: 0x94bf804d252801311050589d1481d1100300c3708c36228192a882140509013824049c017171717171717171717171717171717171717171717171717171717171717171, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 9234
Estimated Gas Usage: 28105 - 176879
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:504

inDeficit = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000002002480, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: mint(uint256,address), txdata: 0x94bf804d08500a1b3489000594f48049014101489f824844356a78018421408530824453fefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefe, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 9248
Estimated Gas Usage: 28105 - 176879
Write to persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:504

inDeficit = true

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000002002480, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: mint(uint256,address), txdata: 0x94bf804d08500a1b3489000594f48049014101489f824844356a78018421408530824453fefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefe, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 9318
Estimated Gas Usage: 28105 - 176879
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:506

totalAssets

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000002002480, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: mint(uint256,address), txdata: 0x94bf804d08500a1b3489000594f48049014101489f824844356a78018421408530824453fefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefe, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: mint(uint256,address)
PC address: 9450
Estimated Gas Usage: 17984 - 110807
Read of persistent state following external call
The contract account state is accessed after an external call to a fixed address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:507

inDeficit

--------------------
Initial State:

Account: [CREATOR], balance: 0x52012000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x5207b548000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: whitelistPeak(address,uint256[],bool), txdata: 0x7143438f000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: mint(uint256,address), txdata: 0x94bf804d252801311050589d1481d1100300c3708c36228192a882140509013824049c017171717171717171717171717171717171717171717171717171717171717171, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: systemCoins(uint256)
PC address: 9745
Estimated Gas Usage: 1123 - 1218
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:472

address[] public systemCoins

--------------------
Initial State:

Account: [CREATOR], balance: 0x100, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: systemCoins(uint256), txdata: 0xa019c64e0000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Core
Function name: peaksAddresses(uint256)
PC address: 10602
Estimated Gas Usage: 1101 - 1196
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:487

address[] public peaksAddresses

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: peaksAddresses(uint256), txdata: 0xcc3d44e20000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Core
Function name: rewardDistributionCheckpoint(bool)
PC address: 12987
Estimated Gas Usage: 24948 - 171529
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:500

dusd.totalSupply()

--------------------
Initial State:

Account: [CREATOR], balance: 0x4000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,uint256,uint256), txdata: 0xa6b63eb80000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000010001400101010101010101010101010101010100000000000000000000000000000000000000000000000000000000000007110000000000000000000000000000000000000000000000000000000000002000, value: 0x0
Caller: [ATTACKER], function: rewardDistributionCheckpoint(bool), txdata: 0xf6c35f500000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Core
Function name: rewardDistributionCheckpoint(bool)
PC address: 13333
Estimated Gas Usage: 24948 - 171529
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:506

stakeLPToken.notify(supply.sub(totalAssets))

--------------------
Initial State:

Account: [CREATOR], balance: 0x11, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: initialize(address,address,address,uint256,uint256), txdata: 0xa6b63eb80000000000000000000000000101010101010101010101010101010101010101000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef000000000000000000000000010101010101010101010101010101000101010100000000000000000000000000000000000000000000000000000000000007110000000000000000000000000000000000000000000000000000000000000711, value: 0x0
Caller: [ATTACKER], function: rewardDistributionCheckpoint(bool), txdata: 0xf6c35f50a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6a6, value: 0x0

==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Core
Function name: dusdToUsd(uint256,bool)
PC address: 13887
Estimated Gas Usage: 1372 - 2078
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./contracts/m_loop/loop1/0x34905bf0a490df50680a82a5ab089a963ee11224.sol:167

a * b

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000101, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: initialize(address,address,address,uint256,uint256), txdata: 0xa6b63eb800000000000000000000000001010101010101010101010101010101010101010000000000000000000000000101010101010101010101010101010101010101000000000000000000000000020101010101400101010101010101010101010100000000000000000000000000000000000000000000000000000000000025a40000000000000000000000000000000000000000000000000000000000000711, value: 0x0
Caller: [ATTACKER], function: dusdToUsd(uint256,bool), txdata: 0x407796940637980e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x34905bf0a490df50680a82a5ab089a963ee11224.sol
Tool Runtime = 3342.320110163011 seconds
#############################################