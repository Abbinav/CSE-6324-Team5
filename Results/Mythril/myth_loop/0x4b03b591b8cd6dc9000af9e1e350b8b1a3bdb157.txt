==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Boomerang
Function name: multiTransfer(address[],uint256[])
PC address: 2442
Estimated Gas Usage: 1131 - 6962
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop4/0x4b03b591b8cd6dc9000af9e1e350b8b1a3bdb157.sol:143

amounts[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x400401400000c0481, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [SOMEGUY], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d5450000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Boomerang
Function name: decreaseAllowance(address,uint256)
PC address: 6380
Estimated Gas Usage: 1373 - 1848
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop4/0x4b03b591b8cd6dc9000af9e1e350b8b1a3bdb157.sol:46

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: decreaseAllowance(address,uint256), txdata: 0xa457c2d700000000000000000000000080040810101080044001018001040202020120014040041004002004000810010810010440201000044001020002080800201004, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Medium
Contract: Boomerang
Function name: increaseAllowance(address,uint256)
PC address: 6411
Estimated Gas Usage: 1435 - 1910
An assertion violation was triggered.
It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).
--------------------
In file: ./contracts/m_loop/loop4/0x4b03b591b8cd6dc9000af9e1e350b8b1a3bdb157.sol:52

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x140050000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000008, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [ATTACKER], function: approve(address,uint256), txdata: 0x095ea7b300000000000000000000000008040480808080208004108040802002010880014244e4e39bb64e5a675e9d559398156de67426b9d99615359554ba4b54020208, value: 0x0
Caller: [ATTACKER], function: increaseAllowance(address,uint256), txdata: 0x39509351a7a7a7a7a7a7a7a7a7a7a7a70804048080808020800410804080200201088001cc444600291012cac142884e31080428434024904b15716013148a1a53fdfdf8, value: 0x0



---------------------------------------------
For contract 0x4b03b591b8cd6dc9000af9e1e350b8b1a3bdb157.sol
Tool Runtime = 3898.6797905109997 seconds
#############################################