==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Invoker
Function name: estimateRepaymentAmount(address,uint256)
PC address: 4668
Estimated Gas Usage: 10282 - 81628
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops2/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol:798

proxy.getRepaymentAmount(tokenAddress, tokenAmountLeft)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityProxies(address,address[]), txdata: 0xf2477678000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000440108001088010, value: 0x0
Caller: [ATTACKER], function: estimateRepaymentAmount(address,uint256), txdata: 0x5f4130dd76767676767676767676767600000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: Invoker
Function name: invoke(address,bytes,address,uint256)
PC address: 10569
Estimated Gas Usage: 208538 - 965362
Multiple calls are executed in the same transaction.
This call is executed following another call within the same transaction. It is possible that the call never gets executed if a prior call fails permanently. This might be caused intentionally by a malicious callee. If possible, refactor the code such that each transaction only executes one external call or make sure that all callees can be trusted (i.e. they’re part of your own codebase).
--------------------
In file: ./contracts/loops2/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol:728

proxy.getRepaymentAmount(tokenAddress, tokenAmountLeft)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityProxies(address,address[]), txdata: 0xf247767800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: invoke(address,bytes,address,uint256), txdata: 0x0e02e6a30000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000000076767676767676767676767600000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Invoker
Function name: invoke(address,bytes,address,uint256)
PC address: 12183
Estimated Gas Usage: 208538 - 965362
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops2/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol:752

_scheduled = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityProxies(address,address[]), txdata: 0xf2477678000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: invoke(address,bytes,address,uint256), txdata: 0x0e02e6a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076767676767676767676767600000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Invoker
Function name: invoke(address,bytes,address,uint256)
PC address: 12197
Estimated Gas Usage: 208538 - 965362
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops2/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol:752

_scheduled = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityProxies(address,address[]), txdata: 0xf2477678000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: invoke(address,bytes,address,uint256), txdata: 0x0e02e6a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076767676767676767676767600000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Invoker
Function name: invoke(address,bytes,address,uint256)
PC address: 12205
Estimated Gas Usage: 208538 - 965362
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops2/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol:753

_schedulePriorTokenAmount = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityProxies(address,address[]), txdata: 0xf2477678000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: invoke(address,bytes,address,uint256), txdata: 0x0e02e6a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076767676767676767676767600000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Invoker
Function name: invoke(address,bytes,address,uint256)
PC address: 12271
Estimated Gas Usage: 208538 - 965362
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops2/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol:754

_scheduleInvokeSender = address(0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityProxies(address,address[]), txdata: 0xf2477678000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: invoke(address,bytes,address,uint256), txdata: 0x0e02e6a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076767676767676767676767600000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Invoker
Function name: invoke(address,bytes,address,uint256)
PC address: 12284
Estimated Gas Usage: 208538 - 965362
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops2/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol:755

_scheduleInvokeTo = address(0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityProxies(address,address[]), txdata: 0xf2477678000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: invoke(address,bytes,address,uint256), txdata: 0x0e02e6a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076767676767676767676767600000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Invoker
Function name: invoke(address,bytes,address,uint256)
PC address: 12337
Estimated Gas Usage: 208538 - 965362
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops2/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol:755

_scheduleInvokeTo = address(0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityProxies(address,address[]), txdata: 0xf2477678000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: invoke(address,bytes,address,uint256), txdata: 0x0e02e6a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076767676767676767676767600000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Medium
Contract: Invoker
Function name: invoke(address,bytes,address,uint256)
PC address: 12345
Estimated Gas Usage: 208538 - 965362
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state.
--------------------
In file: ./contracts/loops2/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol:756

_scheduleInvokeValue = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityProxies(address,address[]), txdata: 0xf2477678000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: invoke(address,bytes,address,uint256), txdata: 0x0e02e6a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076767676767676767676767600000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Invoker
Function name: removeStuckTokens(address,address,uint256)
PC address: 13089
Estimated Gas Usage: 5725 - 42078
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/loops2/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol:432

IERC20(tokenAddress).transfer(to, amount)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: removeStuckTokens(address,address,uint256), txdata: 0xaab8900c000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [CREATOR], function: removeStuckTokens(address,address,uint256), txdata: 0xaab8900c909090909090909090909090deadbeefdeadbeefdeadbeefdeadbeefdeadbeef90909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Low
Contract: Invoker
Function name: removeStuckTokens(address,address,uint256)
PC address: 15079
Estimated Gas Usage: 5915 - 42784
A call to a user-supplied address is executed.
An external message call to an address specified by the caller is executed. Note that the callee account might contain arbitrary code and could re-enter any function within this contract. Reentering the contract in an intermediate state may lead to unexpected behaviour. Make sure that no state modifications are executed after this call and/or reentrancy guards are in place.
--------------------
In file: ./contracts/loops2/0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol:390

_to.call.value(_value)(_data)

--------------------
Initial State:

Account: [CREATOR], balance: 0x24bc000e00, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setPlatformVaultAddress(address), txdata: 0xb2551589000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [CREATOR], function: removeStuckTokens(address,address,uint256), txdata: 0xaab8900cb2b2b2b2b2b2b2b2b2b2b2b20000000000000000000000000000000000000001b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b20000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invoker
Function name: invoke(address,bytes,address,uint256)
PC address: 15606
Estimated Gas Usage: 208538 - 965362
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityProxies(address,address[]), txdata: 0xf2477678000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: invoke(address,bytes,address,uint256), txdata: 0x0e02e6a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076767676767676767676767600000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invoker
Function name: invoke(address,bytes,address,uint256)
PC address: 15627
Estimated Gas Usage: 208538 - 965362
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityProxies(address,address[]), txdata: 0xf2477678000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: invoke(address,bytes,address,uint256), txdata: 0x0e02e6a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076767676767676767676767600000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invoker
Function name: invoke(address,bytes,address,uint256)
PC address: 15678
Estimated Gas Usage: 208538 - 965362
Read of persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityProxies(address,address[]), txdata: 0xf2477678000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: invoke(address,bytes,address,uint256), txdata: 0x0e02e6a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076767676767676767676767600000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== State access after external call ====
SWC ID: 107
Severity: Low
Contract: Invoker
Function name: invoke(address,bytes,address,uint256)
PC address: 15682
Estimated Gas Usage: 208538 - 965362
Write to persistent state following external call
The contract account state is accessed after an external call to a user defined address. To prevent reentrancy issues, consider accessing the state only before the call, especially if the callee is untrusted. Alternatively, a reentrancy lock can be used to prevent untrusted callees from re-entering the contract in an intermediate state. This issue is reported for internal compiler generated code.
--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , value: 0x0
Caller: [CREATOR], function: setLiquidityProxies(address,address[]), txdata: 0xf2477678000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef, value: 0x0
Caller: [SOMEGUY], function: invoke(address,bytes,address,uint256), txdata: 0x0e02e6a30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000076767676767676767676767600000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0



---------------------------------------------
For contract 0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01.sol
Tool Runtime = 7456.491093452001 seconds
#############################################