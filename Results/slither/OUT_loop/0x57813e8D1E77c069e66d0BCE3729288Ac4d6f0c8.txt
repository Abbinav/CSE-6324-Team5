INFO:Detectors:[93m
ABDKMath64x64.divuu(uint256,uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#584-623) performs a multiplication on the result of a division:
	-result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#601)
	-hi = result * (y >> 128) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#604)
ABDKMath64x64.divuu(uint256,uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#584-623) performs a multiplication on the result of a division:
	-result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#601)
	-lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#605)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
INFO:Detectors:[93m
IERC20NoBool (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#744-813) has incorrect ERC20 function interface:IERC20NoBool.transfer(address,uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#762)
IERC20NoBool (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#744-813) has incorrect ERC20 function interface:IERC20NoBool.approve(address,uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#787)
IERC20NoBool (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#744-813) has incorrect ERC20 function interface:IERC20NoBool.transferFrom(address,address,uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#798)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-erc20-interface[0m
INFO:Detectors:[92m
MainnetUsdtToUsdtAssimilator.callOptionalReturn(address,bytes) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#954-960) uses assembly
	- INLINE ASM (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#958-960)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#7) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Low level call in MainnetUsdtToUsdtAssimilator.callOptionalReturn(address,bytes) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#954-960):
	- (success,returnData) = token.call(data) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#956)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Function ABDKMath64x64.log_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#375-398) is not in mixedCase
Function ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) is not in mixedCase
Constant ABDKMath64x64.MIN_64x64 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#28) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ABDKMath64x64.MAX_64x64 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#33) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter MainnetUsdtToUsdtAssimilator.intakeRawAndGetBalance(uint256)._amount (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#847) is not in mixedCase
Parameter MainnetUsdtToUsdtAssimilator.intakeRaw(uint256)._amount (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#860) is not in mixedCase
Parameter MainnetUsdtToUsdtAssimilator.intakeNumeraire(int256)._amount (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#869) is not in mixedCase
Parameter MainnetUsdtToUsdtAssimilator.outputRawAndGetBalance(address,uint256)._dst (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#878) is not in mixedCase
Parameter MainnetUsdtToUsdtAssimilator.outputRawAndGetBalance(address,uint256)._amount (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#878) is not in mixedCase
Parameter MainnetUsdtToUsdtAssimilator.outputRaw(address,uint256)._dst (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#891) is not in mixedCase
Parameter MainnetUsdtToUsdtAssimilator.outputRaw(address,uint256)._amount (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#891) is not in mixedCase
Parameter MainnetUsdtToUsdtAssimilator.outputNumeraire(address,int256)._dst (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#900) is not in mixedCase
Parameter MainnetUsdtToUsdtAssimilator.outputNumeraire(address,int256)._amount (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#900) is not in mixedCase
Parameter MainnetUsdtToUsdtAssimilator.viewRawAmount(int256)._amount (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#909) is not in mixedCase
Parameter MainnetUsdtToUsdtAssimilator.viewNumeraireAmount(uint256)._amount (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#916) is not in mixedCase
Parameter MainnetUsdtToUsdtAssimilator.viewNumeraireAmountAndBalance(address,uint256)._addr (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#923) is not in mixedCase
Parameter MainnetUsdtToUsdtAssimilator.viewNumeraireAmountAndBalance(address,uint256)._amount (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#923) is not in mixedCase
Parameter MainnetUsdtToUsdtAssimilator.viewNumeraireBalance(address)._addr (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#934) is not in mixedCase
Constant MainnetUsdtToUsdtAssimilator.usdt (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#842) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
ABDKMath64x64.fromInt(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#42-45) uses literals with too many digits:
	- require(bool)(x >= - 0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#43)
ABDKMath64x64.muli(int256,int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#153-179) uses literals with too many digits:
	- require(bool)(y >= - 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF && y <= 0x1000000000000000000000000000000000000000000000000) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#155-156)
ABDKMath64x64.muli(int256,int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#153-179) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#170-171)
ABDKMath64x64.divi(int256,int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#228-248) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x80000000000000000000000000000000) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#242)
ABDKMath64x64.inv(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#294-299) uses literals with too many digits:
	- result = int256(0x100000000000000000000000000000000) / x (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#296)
ABDKMath64x64.gavg(int128,int128) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#320-326) uses literals with too many digits:
	- require(bool)(m < 0x4000000000000000000000000000000000000000000000000000000000000000) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#323-324)
ABDKMath64x64.pow(int256,uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#336-356) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x80000000000000000000000000000000) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#350)
ABDKMath64x64.sqrt(int128) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#364-367) uses literals with too many digits:
	- int128(sqrtu(uint256(x) << 64,0x10000000000000000)) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#366)
ABDKMath64x64.log_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#375-398) uses literals with too many digits:
	- xc >= 0x10000000000000000 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#380)
ABDKMath64x64.log_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#375-398) uses literals with too many digits:
	- xc >= 0x100000000 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#381)
ABDKMath64x64.log_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#375-398) uses literals with too many digits:
	- bit = 0x8000000000000000 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#390)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#420)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x < - 0x400000000000000000 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#422)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = 0x80000000000000000000000000000000 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#424)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x8000000000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#426)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x4000000000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#428)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x2000000000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#430)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x1000000000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#432)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x800000000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#434)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x400000000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#436)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x200000000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#438)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x100000000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#440)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x80000000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#442)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x40000000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#444)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x20000000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#446)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x10000000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#448)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x8000000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#450)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x4000000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#452)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x2000000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#454)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x1000000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#456)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x800000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#458)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x400000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#460)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x200000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#462)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x100000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#464)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#465)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x80000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#466)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#467)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x40000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#468)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#469)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x20000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#470)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#471)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x10000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#472)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#473)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x8000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#474)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#475)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x4000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#476)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#477)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x2000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#478)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#479)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x1000000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#480)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#481)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x800000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#482)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#483)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x400000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#484)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#485)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x200000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#486)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#487)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x100000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#488)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#489)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x80000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#490)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#491)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x40000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#492)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#493)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x20000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#494)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#495)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x10000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#496)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#497)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x8000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#498)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#499)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x4000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#500)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#501)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x2000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#502)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#503)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x1000000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#504)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#505)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x800000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#506)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#507)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x400000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#508)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x100000000002C5C85FDF477B662B26945 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#509)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x200000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#510)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x10000000000162E42FEFA3AE53369388C >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#511)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- x & 0x100000 > 0 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#512)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x100000000000B17217F7D1D351A389D40 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#513)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#515)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#517)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#519)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#521)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#523)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#525)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x1000000000000162E42FEFA39F02B772C >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#527)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#529)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#531)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x100000000000002C5C85FDF473DEA871F >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#533)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#535)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x100000000000000B17217F7D1CF79E949 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#537)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#539)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#541)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x100000000000000162E42FEFA39EF366F >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#543)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#545)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#547)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#549)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x1000000000000000162E42FEFA39EF358 >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#551)
ABDKMath64x64.exp_2(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#419-559) uses literals with too many digits:
	- result = result * 0x10000000000000000B17217F7D1CF79AB >> 128 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#553)
ABDKMath64x64.exp(int128) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#567-574) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#568)
ABDKMath64x64.exp(int128) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#567-574) uses literals with too many digits:
	- x < - 0x400000000000000000 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#570)
ABDKMath64x64.divuu(uint256,uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#584-623) uses literals with too many digits:
	- xc >= 0x100000000 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#594)
ABDKMath64x64.powu(uint256,uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#633-686) uses literals with too many digits:
	- 0x80000000000000000000000000000000 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#634)
ABDKMath64x64.powu(uint256,uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#633-686) uses literals with too many digits:
	- xc >= 0x100000000000000000000000000000000 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#639)
ABDKMath64x64.powu(uint256,uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#633-686) uses literals with too many digits:
	- xc >= 0x10000000000000000 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#640)
ABDKMath64x64.powu(uint256,uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#633-686) uses literals with too many digits:
	- xc >= 0x100000000 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#641)
ABDKMath64x64.powu(uint256,uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#633-686) uses literals with too many digits:
	- result = 0x80000000000000000000000000000000 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#652)
ABDKMath64x64.powu(uint256,uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#633-686) uses literals with too many digits:
	- result >= 0x8000000000000000000000000000000000000000000000000000000000000000 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#660-661)
ABDKMath64x64.powu(uint256,uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#633-686) uses literals with too many digits:
	- x >= 0x8000000000000000000000000000000000000000000000000000000000000000 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#671-672)
ABDKMath64x64.slitherConstructorConstantVariables() (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#24-707) uses literals with too many digits:
	- MIN_64x64 = - 0x80000000000000000000000000000000 (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#28)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits[0m
INFO:Detectors:[92m
intakeRawAndGetBalance(uint256) should be declared external:
	- MainnetUsdtToUsdtAssimilator.intakeRawAndGetBalance(uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#847-857)
intakeRaw(uint256) should be declared external:
	- MainnetUsdtToUsdtAssimilator.intakeRaw(uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#860-866)
intakeNumeraire(int256) should be declared external:
	- MainnetUsdtToUsdtAssimilator.intakeNumeraire(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#869-875)
outputRawAndGetBalance(address,uint256) should be declared external:
	- MainnetUsdtToUsdtAssimilator.outputRawAndGetBalance(address,uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#878-888)
outputRaw(address,uint256) should be declared external:
	- MainnetUsdtToUsdtAssimilator.outputRaw(address,uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#891-897)
outputNumeraire(address,int256) should be declared external:
	- MainnetUsdtToUsdtAssimilator.outputNumeraire(address,int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#900-906)
viewRawAmount(int256) should be declared external:
	- MainnetUsdtToUsdtAssimilator.viewRawAmount(int256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#909-913)
viewNumeraireAmount(uint256) should be declared external:
	- MainnetUsdtToUsdtAssimilator.viewNumeraireAmount(uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#916-920)
viewNumeraireAmountAndBalance(address,uint256) should be declared external:
	- MainnetUsdtToUsdtAssimilator.viewNumeraireAmountAndBalance(address,uint256) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#923-931)
viewNumeraireBalance(address) should be declared external:
	- MainnetUsdtToUsdtAssimilator.viewNumeraireBalance(address) (loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol#934-940)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:./loops/0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol analyzed (4 contracts with 46 detectors), 152 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0x57813e8D1E77c069e66d0BCE3729288Ac4d6f0c8.sol
Tool Runtime = 2.597304734001227 seconds
#############################################