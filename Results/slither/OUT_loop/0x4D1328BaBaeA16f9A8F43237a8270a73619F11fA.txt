INFO:Detectors:[93m
Reentrancy in PooledStaking.depositAndStake(uint256,address[],uint256[]) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#735-831):
	External calls:
	- tokenController.operatorTransfer(msg.sender,address(this),amount) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#761)
	State variables written after the call(s):
	- staker.contracts.push(contractAddress) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#781)
	- staker.stakes[contractAddress] = newStake (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#788)
	- staker.isInContractStakers[contractAddress] = true (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#801)
	- staker.stakes[contractAddress] = newStake (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#805)
	- staker.contracts[i_scope_0 - 1] = staker.contracts[lastContractIndex] (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#826)
	- staker.contracts.pop() (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#827)
Reentrancy in PooledStaking.initialize() (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1410-1414):
	External calls:
	- tokenController.addToWhitelist(address(this)) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1412)
	State variables written after the call(s):
	- initialized = true (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1413)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
PooledStaking.stakerMaxWithdrawable(address).maxStake (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#679) is a local variable never initialized
PooledStaking._burnStaker(PooledStaking.Staker,address,uint256,uint256)._currentStake (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1189) is a local variable never initialized
PooledStaking._burnStaker(PooledStaking.Staker,address,uint256,uint256)._currentDeposit (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1188) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables[0m
INFO:Detectors:[93m
PooledStaking.depositAndStake(uint256,address[],uint256[]) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#735-831) ignores return value by tokenController.operatorTransfer(msg.sender,address(this),amount) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#761)
PooledStaking.withdraw(uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#833-839) ignores return value by token.transfer(msg.sender,amount) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#837)
PooledStaking.withdrawReward(address) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#932-940) ignores return value by token.transfer(stakerAddress,amount) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#937)
PooledStaking._processBurn(uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1114-1180) ignores return value by token.burn(_actualBurnAmount) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1176)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return[0m
INFO:Detectors:[92m
Reentrancy in PooledStaking.changeDependentContractAddress() (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1428-1440):
	External calls:
	- initialize() (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1434)
		- tokenController.addToWhitelist(address(this)) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1412)
	State variables written after the call(s):
	- initializeRewardRoundsStart() (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1438)
		- REWARD_ROUNDS_START = 1600074000 (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1418)
	- initializeRewardRoundsStart() (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1438)
		- REWARD_ROUND_DURATION = 604800 (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1419)
Reentrancy in PooledStaking.depositAndStake(uint256,address[],uint256[]) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#735-831):
	External calls:
	- tokenController.operatorTransfer(msg.sender,address(this),amount) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#761)
	State variables written after the call(s):
	- contractStakers[contractAddress].push(msg.sender) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#802)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Reentrancy in PooledStaking._processBurn(uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1114-1180):
	External calls:
	- token.burn(_actualBurnAmount) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1176)
	Event emitted after the call(s):
	- Burned(_contractAddress,_actualBurnAmount,_stakedOnContract) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1177)
Reentrancy in PooledStaking._processFirstReward(uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1293-1362):
	External calls:
	- tokenController.mint(address(this),_actualRewardAmount) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1358)
	Event emitted after the call(s):
	- Rewarded(_contractAddress,_actualRewardAmount,_stakedOnContract) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1359)
Reentrancy in PooledStaking._processPendingActions(uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1045-1112):
	External calls:
	- (finished,iterationsLeft) = _processBurn(iterationsLeft) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1075)
		- token.burn(_actualBurnAmount) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1176)
	Event emitted after the call(s):
	- PendingActionsProcessed(false) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1078)
Reentrancy in PooledStaking._processPendingActions(uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1045-1112):
	External calls:
	- (finished,iterationsLeft) = _processFirstReward(iterationsLeft) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1101)
		- tokenController.mint(address(this),_actualRewardAmount) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1358)
	Event emitted after the call(s):
	- PendingActionsProcessed(false) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1104)
Reentrancy in PooledStaking.depositAndStake(uint256,address[],uint256[]) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#735-831):
	External calls:
	- tokenController.operatorTransfer(msg.sender,address(this),amount) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#761)
	Event emitted after the call(s):
	- Deposited(msg.sender,amount) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#818)
	- Staked(contractAddress,msg.sender,increase) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#809)
Reentrancy in PooledStaking.withdraw(uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#833-839):
	External calls:
	- token.transfer(msg.sender,amount) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#837)
	Event emitted after the call(s):
	- Withdrawn(msg.sender,amount) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#838)
Reentrancy in PooledStaking.withdrawReward(address) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#932-940):
	External calls:
	- token.transfer(stakerAddress,amount) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#937)
	Event emitted after the call(s):
	- RewardWithdrawn(stakerAddress,amount) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#939)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
INFO:Detectors:[92m
PooledStaking.hasPendingActions() (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#710-712) uses timestamp for comparisons
	Dangerous comparisons:
	- hasPendingBurns() || hasPendingUnstakeRequests() || hasPendingRewards() (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#711)
PooledStaking.hasPendingBurns() (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#714-716) uses timestamp for comparisons
	Dangerous comparisons:
	- burn.burnedAt != 0 (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#715)
PooledStaking.hasPendingUnstakeRequests() (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#718-727) uses timestamp for comparisons
	Dangerous comparisons:
	- unstakeRequests[nextRequestIndex].unstakeAt <= now (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#726)
PooledStaking.hasPendingRewards() (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#729-731) uses timestamp for comparisons
	Dangerous comparisons:
	- rewards[firstReward].rewardedAt != 0 (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#730)
PooledStaking.requestUnstake(address[],uint256[],uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#841-930) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(unstakeAt >= previousRequest.unstakeAt,Unstake request time must be greater or equal to previous unstake request) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#890-893)
	- require(bool,string)(nextRequest.unstakeAt > unstakeAt,Next unstake request time must be greater than new unstake request time) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#897-900)
PooledStaking._getCurrentRewardsRound() (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#957-965) uses timestamp for comparisons
	Dangerous comparisons:
	- now <= startTime (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#964)
PooledStaking._pushRewards(address[],bool) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#974-1012) uses timestamp for comparisons
	Dangerous comparisons:
	- shouldPush = amount > 0 && (skipRoundCheck || currentRound > lastRound) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#987)
	- lastRound != currentRound (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#991)
PooledStaking._processPendingActions(uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1045-1112) uses timestamp for comparisons
	Dangerous comparisons:
	- canUnstake = firstUnstakeRequestIndex > 0 && unstakeAt <= now (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1060)
	- ! canBurn && ! canUnstake && ! canReward (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1064)
	- canBurn && (! canUnstake || burnedAt < unstakeAt) && (! canReward || burnedAt < rewardedAt) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1070-1072)
	- canUnstake && (! canReward || unstakeAt < rewardedAt) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1086-1087)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp[0m
INFO:Detectors:[92m
PooledStaking.initializeRewardRoundsStart() (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1416-1426) uses assembly
	- INLINE ASM (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1423-1426)
PooledStaking.migrateRewardsToAccumulatedRewards(uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1450-1493) uses assembly
	- INLINE ASM (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1455-1459)
	- INLINE ASM (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1486-1489)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#12) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#187) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#214) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#263) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#314) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#394) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#431) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#463) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Parameter PooledStaking.depositAndStake(uint256,address[],uint256[])._contracts (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#737) is not in mixedCase
Parameter PooledStaking.depositAndStake(uint256,address[],uint256[])._stakes (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#738) is not in mixedCase
Parameter PooledStaking.requestUnstake(address[],uint256[],uint256)._contracts (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#842) is not in mixedCase
Parameter PooledStaking.requestUnstake(address[],uint256[],uint256)._amounts (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#843) is not in mixedCase
Parameter PooledStaking.requestUnstake(address[],uint256[],uint256)._insertAfter (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#844) is not in mixedCase
Function PooledStaking._processPendingActions(uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1045-1112) is not in mixedCase
Variable PooledStaking.MIN_STAKE (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#545) is not in mixedCase
Variable PooledStaking.MAX_EXPOSURE (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#546) is not in mixedCase
Variable PooledStaking.MIN_UNSTAKE (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#547) is not in mixedCase
Variable PooledStaking.UNSTAKE_LOCK_TIME (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#548) is not in mixedCase
Variable PooledStaking.REWARD_ROUND_DURATION (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#580) is not in mixedCase
Variable PooledStaking.REWARD_ROUNDS_START (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#581) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
changeMasterAddress(address) should be declared external:
	- MasterAware.changeMasterAddress(address) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#306-308)
burn(uint256) should be declared external:
	- NXMToken.burn(uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#404)
burnFrom(address,uint256) should be declared external:
	- NXMToken.burnFrom(address,uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#406)
operatorTransfer(address,uint256) should be declared external:
	- NXMToken.operatorTransfer(address,uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#408)
mint(address,uint256) should be declared external:
	- NXMToken.mint(address,uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#410)
contractStake(address) should be declared external:
	- PooledStaking.contractStake(address) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#625-642)
pushBurn(address,uint256) should be declared external:
	- PooledStaking.pushBurn(address,uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#942-955)
processPendingActions(uint256) should be declared external:
	- PooledStaking.processPendingActions(uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1037-1039)
processPendingActionsReturnLeft(uint256) should be declared external:
	- PooledStaking.processPendingActionsReturnLeft(uint256) (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1041-1043)
changeDependentContractAddress() should be declared external:
	- PooledStaking.changeDependentContractAddress() (loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol#1428-1440)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:./loops/0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol analyzed (8 contracts with 46 detectors), 59 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0x4D1328BaBaeA16f9A8F43237a8270a73619F11fA.sol
Tool Runtime = 2.417599918000633 seconds
#############################################