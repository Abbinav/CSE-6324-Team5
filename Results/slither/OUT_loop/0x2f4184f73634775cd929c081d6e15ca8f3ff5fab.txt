INFO:Detectors:[93m
ABDKMath64x64.divuu(uint256,uint256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#586-625) performs a multiplication on the result of a division:
	-result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#603)
	-hi = result * (y >> 128) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#606)
ABDKMath64x64.divuu(uint256,uint256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#586-625) performs a multiplication on the result of a division:
	-result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#603)
	-lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#607)
MainnetDaiToDaiAssimilator.intakeNumeraire(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#876-885) performs a multiplication on the result of a division:
	-amount_ = _amount.mulu(1e18) / 1e3 * 1e3 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#879)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#9) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Function ABDKMath64x64.log_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#377-400) is not in mixedCase
Function ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) is not in mixedCase
Constant ABDKMath64x64.MIN_64x64 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#30) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ABDKMath64x64.MAX_64x64 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#35) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter MainnetDaiToDaiAssimilator.intakeRawAndGetBalance(uint256)._amount (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#850) is not in mixedCase
Parameter MainnetDaiToDaiAssimilator.intakeRaw(uint256)._amount (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#865) is not in mixedCase
Parameter MainnetDaiToDaiAssimilator.intakeNumeraire(int256)._amount (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#876) is not in mixedCase
Parameter MainnetDaiToDaiAssimilator.outputRawAndGetBalance(address,uint256)._dst (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#888) is not in mixedCase
Parameter MainnetDaiToDaiAssimilator.outputRawAndGetBalance(address,uint256)._amount (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#888) is not in mixedCase
Parameter MainnetDaiToDaiAssimilator.outputRaw(address,uint256)._dst (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#903) is not in mixedCase
Parameter MainnetDaiToDaiAssimilator.outputRaw(address,uint256)._amount (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#903) is not in mixedCase
Parameter MainnetDaiToDaiAssimilator.outputNumeraire(address,int256)._dst (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#914) is not in mixedCase
Parameter MainnetDaiToDaiAssimilator.outputNumeraire(address,int256)._amount (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#914) is not in mixedCase
Parameter MainnetDaiToDaiAssimilator.viewRawAmount(int256)._amount (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#927) is not in mixedCase
Parameter MainnetDaiToDaiAssimilator.viewNumeraireAmount(uint256)._amount (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#934) is not in mixedCase
Parameter MainnetDaiToDaiAssimilator.viewNumeraireBalance(address)._addr (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#941) is not in mixedCase
Parameter MainnetDaiToDaiAssimilator.viewNumeraireAmountAndBalance(address,uint256)._addr (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#950) is not in mixedCase
Parameter MainnetDaiToDaiAssimilator.viewNumeraireAmountAndBalance(address,uint256)._amount (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#950) is not in mixedCase
Constant MainnetDaiToDaiAssimilator.dai (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#845) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
ABDKMath64x64.fromInt(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#44-47) uses literals with too many digits:
	- require(bool)(x >= - 0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#45)
ABDKMath64x64.muli(int256,int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#155-181) uses literals with too many digits:
	- require(bool)(y >= - 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF && y <= 0x1000000000000000000000000000000000000000000000000) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#157-158)
ABDKMath64x64.muli(int256,int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#155-181) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#172-173)
ABDKMath64x64.divi(int256,int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#230-250) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x80000000000000000000000000000000) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#244)
ABDKMath64x64.inv(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#296-301) uses literals with too many digits:
	- result = int256(0x100000000000000000000000000000000) / x (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#298)
ABDKMath64x64.gavg(int128,int128) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#322-328) uses literals with too many digits:
	- require(bool)(m < 0x4000000000000000000000000000000000000000000000000000000000000000) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#325-326)
ABDKMath64x64.pow(int256,uint256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#338-358) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x80000000000000000000000000000000) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#352)
ABDKMath64x64.sqrt(int128) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#366-369) uses literals with too many digits:
	- int128(sqrtu(uint256(x) << 64,0x10000000000000000)) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#368)
ABDKMath64x64.log_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#377-400) uses literals with too many digits:
	- xc >= 0x10000000000000000 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#382)
ABDKMath64x64.log_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#377-400) uses literals with too many digits:
	- xc >= 0x100000000 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#383)
ABDKMath64x64.log_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#377-400) uses literals with too many digits:
	- bit = 0x8000000000000000 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#392)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#422)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x < - 0x400000000000000000 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#424)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = 0x80000000000000000000000000000000 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#426)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x8000000000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#428)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x4000000000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#430)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x2000000000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#432)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x1000000000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#434)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x800000000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#436)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x400000000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#438)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x200000000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#440)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x100000000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#442)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x80000000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#444)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x40000000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#446)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x20000000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#448)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x10000000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#450)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x8000000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#452)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x4000000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#454)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x2000000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#456)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x1000000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#458)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x800000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#460)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x400000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#462)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x200000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#464)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x100000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#466)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#467)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x80000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#468)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#469)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x40000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#470)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#471)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x20000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#472)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#473)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x10000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#474)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#475)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x8000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#476)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#477)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x4000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#478)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#479)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x2000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#480)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#481)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x1000000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#482)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#483)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x800000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#484)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#485)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x400000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#486)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#487)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x200000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#488)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#489)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x100000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#490)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#491)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x80000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#492)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#493)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x40000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#494)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#495)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x20000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#496)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#497)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x10000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#498)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#499)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x8000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#500)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#501)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x4000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#502)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#503)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x2000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#504)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#505)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x1000000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#506)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#507)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x800000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#508)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#509)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x400000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#510)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x100000000002C5C85FDF477B662B26945 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#511)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x200000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#512)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x10000000000162E42FEFA3AE53369388C >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#513)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- x & 0x100000 > 0 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#514)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x100000000000B17217F7D1D351A389D40 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#515)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#517)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#519)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#521)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#523)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#525)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#527)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x1000000000000162E42FEFA39F02B772C >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#529)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#531)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#533)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x100000000000002C5C85FDF473DEA871F >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#535)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#537)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x100000000000000B17217F7D1CF79E949 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#539)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#541)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#543)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x100000000000000162E42FEFA39EF366F >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#545)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#547)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#549)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#551)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x1000000000000000162E42FEFA39EF358 >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#553)
ABDKMath64x64.exp_2(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#421-561) uses literals with too many digits:
	- result = result * 0x10000000000000000B17217F7D1CF79AB >> 128 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#555)
ABDKMath64x64.exp(int128) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#569-576) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#570)
ABDKMath64x64.exp(int128) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#569-576) uses literals with too many digits:
	- x < - 0x400000000000000000 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#572)
ABDKMath64x64.divuu(uint256,uint256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#586-625) uses literals with too many digits:
	- xc >= 0x100000000 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#596)
ABDKMath64x64.powu(uint256,uint256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#635-688) uses literals with too many digits:
	- 0x80000000000000000000000000000000 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#636)
ABDKMath64x64.powu(uint256,uint256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#635-688) uses literals with too many digits:
	- xc >= 0x100000000000000000000000000000000 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#641)
ABDKMath64x64.powu(uint256,uint256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#635-688) uses literals with too many digits:
	- xc >= 0x10000000000000000 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#642)
ABDKMath64x64.powu(uint256,uint256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#635-688) uses literals with too many digits:
	- xc >= 0x100000000 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#643)
ABDKMath64x64.powu(uint256,uint256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#635-688) uses literals with too many digits:
	- result = 0x80000000000000000000000000000000 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#654)
ABDKMath64x64.powu(uint256,uint256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#635-688) uses literals with too many digits:
	- result >= 0x8000000000000000000000000000000000000000000000000000000000000000 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#662-663)
ABDKMath64x64.powu(uint256,uint256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#635-688) uses literals with too many digits:
	- x >= 0x8000000000000000000000000000000000000000000000000000000000000000 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#673-674)
ABDKMath64x64.slitherConstructorConstantVariables() (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#26-709) uses literals with too many digits:
	- MIN_64x64 = - 0x80000000000000000000000000000000 (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#30)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits[0m
INFO:Detectors:[92m
intakeRawAndGetBalance(uint256) should be declared external:
	- MainnetDaiToDaiAssimilator.intakeRawAndGetBalance(uint256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#850-862)
intakeRaw(uint256) should be declared external:
	- MainnetDaiToDaiAssimilator.intakeRaw(uint256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#865-873)
intakeNumeraire(int256) should be declared external:
	- MainnetDaiToDaiAssimilator.intakeNumeraire(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#876-885)
outputRawAndGetBalance(address,uint256) should be declared external:
	- MainnetDaiToDaiAssimilator.outputRawAndGetBalance(address,uint256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#888-900)
outputRaw(address,uint256) should be declared external:
	- MainnetDaiToDaiAssimilator.outputRaw(address,uint256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#903-911)
outputNumeraire(address,int256) should be declared external:
	- MainnetDaiToDaiAssimilator.outputNumeraire(address,int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#914-924)
viewRawAmount(int256) should be declared external:
	- MainnetDaiToDaiAssimilator.viewRawAmount(int256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#927-931)
viewNumeraireAmount(uint256) should be declared external:
	- MainnetDaiToDaiAssimilator.viewNumeraireAmount(uint256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#934-938)
viewNumeraireBalance(address) should be declared external:
	- MainnetDaiToDaiAssimilator.viewNumeraireBalance(address) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#941-947)
viewNumeraireAmountAndBalance(address,uint256) should be declared external:
	- MainnetDaiToDaiAssimilator.viewNumeraireAmountAndBalance(address,uint256) (loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol#950-958)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:./loops/0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol analyzed (4 contracts with 46 detectors), 148 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0x2f4184f73634775cd929c081d6e15ca8f3ff5fab.sol
Tool Runtime = 2.561133969000366 seconds
#############################################