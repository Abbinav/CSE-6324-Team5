Compilation warnings/errors on ./loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol:
./loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol:50:9: Warning: This declaration shadows an existing declaration.
        uint[] memory claims_ = new uint[](_length);
        ^-------------------^
./loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol:42:9: The shadowed declaration is here:
        uint[] memory claims_
        ^-------------------^

INFO:Detectors:[93m
PartitionedLiquidity.partitionedWithdraw(LoihiStorage.Shell,mapping(address => LoihiStorage.PartitionTicket),address[],uint256[]) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#59-118) performs a multiplication on the result of a division:
	-_multiplier = _withdrawals[i_scope_0].divu(1e18).div(totalSuppliesTicket.claims[_assim.ix].divu(1e18)) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#97-98)
	-_withdrawal = Assimilators.outputNumeraire(_assim.addr,msg.sender,_reserveBalance.mul(_multiplier)) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#104-108)
ABDKMath64x64.divuu(uint256,uint256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#789-828) performs a multiplication on the result of a division:
	-result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#806)
	-hi = result * (y >> 128) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#809)
ABDKMath64x64.divuu(uint256,uint256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#789-828) performs a multiplication on the result of a division:
	-result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#806)
	-lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#810)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
INFO:Detectors:[92m
Reentrancy in PartitionedLiquidity.partitionedWithdraw(LoihiStorage.Shell,mapping(address => LoihiStorage.PartitionTicket),address[],uint256[]) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#59-118):
	External calls:
	- _withdrawal = Assimilators.outputNumeraire(_assim.addr,msg.sender,_reserveBalance.mul(_multiplier)) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#104-108)
	Event emitted after the call(s):
	- PartitionRedeemed(_derivatives[i_scope_0],msg.sender,withdrawals_[i_scope_0]) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#112)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
INFO:Detectors:[92m
Assimilators.delegate(address,bytes) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#128-136) uses assembly
	- INLINE ASM (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#132-134)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#6) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Low level call in Assimilators.delegate(address,bytes) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#128-136):
	- (_success,returnData_) = _callee.delegatecall(_data) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#130)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Parameter PartitionedLiquidity.viewPartitionClaims(LoihiStorage.Shell,mapping(address => LoihiStorage.PartitionTicket),address)._addr (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#40) is not in mixedCase
Parameter PartitionedLiquidity.partitionedWithdraw(LoihiStorage.Shell,mapping(address => LoihiStorage.PartitionTicket),address[],uint256[])._derivatives (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#62) is not in mixedCase
Parameter PartitionedLiquidity.partitionedWithdraw(LoihiStorage.Shell,mapping(address => LoihiStorage.PartitionTicket),address[],uint256[])._withdrawals (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#63) is not in mixedCase
Parameter Assimilators.delegate(address,bytes)._callee (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#128) is not in mixedCase
Parameter Assimilators.delegate(address,bytes)._data (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#128) is not in mixedCase
Parameter Assimilators.viewRawAmount(address,int256)._assim (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#138) is not in mixedCase
Parameter Assimilators.viewRawAmount(address,int256)._amt (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#138) is not in mixedCase
Parameter Assimilators.viewNumeraireAmount(address,uint256)._assim (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#144) is not in mixedCase
Parameter Assimilators.viewNumeraireAmount(address,uint256)._amt (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#144) is not in mixedCase
Parameter Assimilators.viewNumeraireAmountAndBalance(address,uint256)._assim (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#150) is not in mixedCase
Parameter Assimilators.viewNumeraireAmountAndBalance(address,uint256)._amt (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#150) is not in mixedCase
Parameter Assimilators.viewNumeraireBalance(address)._assim (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#156) is not in mixedCase
Parameter Assimilators.intakeRaw(address,uint256)._assim (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#162) is not in mixedCase
Parameter Assimilators.intakeRaw(address,uint256)._amount (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#162) is not in mixedCase
Parameter Assimilators.intakeRawAndGetBalance(address,uint256)._assim (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#170) is not in mixedCase
Parameter Assimilators.intakeRawAndGetBalance(address,uint256)._amount (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#170) is not in mixedCase
Parameter Assimilators.intakeNumeraire(address,int128)._assim (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#178) is not in mixedCase
Parameter Assimilators.intakeNumeraire(address,int128)._amt (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#178) is not in mixedCase
Parameter Assimilators.outputRaw(address,address,uint256)._assim (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#186) is not in mixedCase
Parameter Assimilators.outputRaw(address,address,uint256)._dst (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#186) is not in mixedCase
Parameter Assimilators.outputRaw(address,address,uint256)._amount (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#186) is not in mixedCase
Parameter Assimilators.outputRawAndGetBalance(address,address,uint256)._assim (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#196) is not in mixedCase
Parameter Assimilators.outputRawAndGetBalance(address,address,uint256)._dst (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#196) is not in mixedCase
Parameter Assimilators.outputRawAndGetBalance(address,address,uint256)._amount (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#196) is not in mixedCase
Parameter Assimilators.outputNumeraire(address,address,int256)._assim (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#206) is not in mixedCase
Parameter Assimilators.outputNumeraire(address,address,int256)._dst (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#206) is not in mixedCase
Parameter Assimilators.outputNumeraire(address,address,int256)._amt (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#206) is not in mixedCase
Constant Assimilators.iAsmltr (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#126) is not in UPPER_CASE_WITH_UNDERSCORES
Function ABDKMath64x64.log_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#580-603) is not in mixedCase
Function ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) is not in mixedCase
Constant ABDKMath64x64.MIN_64x64 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#233) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ABDKMath64x64.MAX_64x64 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#238) is not in UPPER_CASE_WITH_UNDERSCORES
Function UnsafeMath64x64.us_mul(int128,int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#925-928) is not in mixedCase
Function UnsafeMath64x64.us_div(int128,int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#939-942) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
PartitionedLiquidity.slitherConstructorConstantVariables() (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#8-120) uses literals with too many digits:
	- ONE = 0x10000000000000000 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#18)
ABDKMath64x64.fromInt(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#247-250) uses literals with too many digits:
	- require(bool)(x >= - 0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#248)
ABDKMath64x64.muli(int256,int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#358-384) uses literals with too many digits:
	- require(bool)(y >= - 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF && y <= 0x1000000000000000000000000000000000000000000000000) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#360-361)
ABDKMath64x64.muli(int256,int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#358-384) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#375-376)
ABDKMath64x64.divi(int256,int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#433-453) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x80000000000000000000000000000000) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#447)
ABDKMath64x64.inv(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#499-504) uses literals with too many digits:
	- result = int256(0x100000000000000000000000000000000) / x (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#501)
ABDKMath64x64.gavg(int128,int128) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#525-531) uses literals with too many digits:
	- require(bool)(m < 0x4000000000000000000000000000000000000000000000000000000000000000) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#528-529)
ABDKMath64x64.pow(int256,uint256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#541-561) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x80000000000000000000000000000000) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#555)
ABDKMath64x64.sqrt(int128) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#569-572) uses literals with too many digits:
	- int128(sqrtu(uint256(x) << 64,0x10000000000000000)) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#571)
ABDKMath64x64.log_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#580-603) uses literals with too many digits:
	- xc >= 0x10000000000000000 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#585)
ABDKMath64x64.log_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#580-603) uses literals with too many digits:
	- xc >= 0x100000000 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#586)
ABDKMath64x64.log_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#580-603) uses literals with too many digits:
	- bit = 0x8000000000000000 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#595)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#625)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x < - 0x400000000000000000 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#627)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = 0x80000000000000000000000000000000 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#629)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x8000000000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#631)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x4000000000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#633)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x2000000000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#635)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x1000000000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#637)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x800000000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#639)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x400000000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#641)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x200000000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#643)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x100000000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#645)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x80000000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#647)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x40000000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#649)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x20000000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#651)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x10000000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#653)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x8000000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#655)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x4000000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#657)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x2000000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#659)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x1000000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#661)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x800000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#663)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x400000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#665)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x200000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#667)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x100000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#669)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#670)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x80000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#671)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#672)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x40000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#673)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#674)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x20000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#675)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#676)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x10000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#677)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#678)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x8000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#679)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#680)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x4000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#681)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#682)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x2000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#683)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#684)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x1000000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#685)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#686)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x800000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#687)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#688)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x400000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#689)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#690)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x200000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#691)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#692)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x100000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#693)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#694)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x80000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#695)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#696)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x40000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#697)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#698)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x20000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#699)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#700)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x10000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#701)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#702)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x8000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#703)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#704)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x4000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#705)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#706)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x2000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#707)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#708)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x1000000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#709)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#710)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x800000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#711)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#712)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x400000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#713)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x100000000002C5C85FDF477B662B26945 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#714)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x200000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#715)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x10000000000162E42FEFA3AE53369388C >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#716)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- x & 0x100000 > 0 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#717)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x100000000000B17217F7D1D351A389D40 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#718)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#720)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#722)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#724)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#726)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#728)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#730)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x1000000000000162E42FEFA39F02B772C >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#732)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#734)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#736)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x100000000000002C5C85FDF473DEA871F >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#738)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#740)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x100000000000000B17217F7D1CF79E949 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#742)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#744)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#746)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x100000000000000162E42FEFA39EF366F >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#748)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#750)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#752)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#754)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x1000000000000000162E42FEFA39EF358 >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#756)
ABDKMath64x64.exp_2(int256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#624-764) uses literals with too many digits:
	- result = result * 0x10000000000000000B17217F7D1CF79AB >> 128 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#758)
ABDKMath64x64.exp(int128) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#772-779) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#773)
ABDKMath64x64.exp(int128) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#772-779) uses literals with too many digits:
	- x < - 0x400000000000000000 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#775)
ABDKMath64x64.divuu(uint256,uint256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#789-828) uses literals with too many digits:
	- xc >= 0x100000000 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#799)
ABDKMath64x64.powu(uint256,uint256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#838-891) uses literals with too many digits:
	- 0x80000000000000000000000000000000 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#839)
ABDKMath64x64.powu(uint256,uint256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#838-891) uses literals with too many digits:
	- xc >= 0x100000000000000000000000000000000 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#844)
ABDKMath64x64.powu(uint256,uint256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#838-891) uses literals with too many digits:
	- xc >= 0x10000000000000000 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#845)
ABDKMath64x64.powu(uint256,uint256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#838-891) uses literals with too many digits:
	- xc >= 0x100000000 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#846)
ABDKMath64x64.powu(uint256,uint256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#838-891) uses literals with too many digits:
	- result = 0x80000000000000000000000000000000 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#857)
ABDKMath64x64.powu(uint256,uint256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#838-891) uses literals with too many digits:
	- result >= 0x8000000000000000000000000000000000000000000000000000000000000000 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#865-866)
ABDKMath64x64.powu(uint256,uint256) (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#838-891) uses literals with too many digits:
	- x >= 0x8000000000000000000000000000000000000000000000000000000000000000 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#876-877)
ABDKMath64x64.slitherConstructorConstantVariables() (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#229-912) uses literals with too many digits:
	- MIN_64x64 = - 0x80000000000000000000000000000000 (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#233)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits[0m
INFO:Detectors:[92m
PartitionedLiquidity.ONE (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#18) is never used in PartitionedLiquidity (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#8-120)
Assimilators.iAsmltr (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#126) is never used in Assimilators (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#123-213)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variables[0m
INFO:Detectors:[92m
LoihiStorage.frozen (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#987) should be constant
LoihiStorage.maxFee (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#992) should be constant
LoihiStorage.notEntered (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#990) should be constant
LoihiStorage.owner (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#989) should be constant
LoihiStorage.partitioned (loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol#986) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Slither:./loops/0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol analyzed (6 contracts with 46 detectors), 164 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0x5F2C7B5baeEcB4f02F799f617887463b51cc29c7.sol
Tool Runtime = 2.6699312579985417 seconds
#############################################