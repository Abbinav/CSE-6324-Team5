INFO:Detectors:[93m
ABDKMath64x64.divuu(uint256,uint256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#768-807) performs a multiplication on the result of a division:
	-result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#785)
	-hi = result * (y >> 128) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#788)
ABDKMath64x64.divuu(uint256,uint256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#768-807) performs a multiplication on the result of a division:
	-result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#785)
	-lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#789)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#6) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Function ABDKMath64x64.log_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#559-582) is not in mixedCase
Function ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) is not in mixedCase
Constant ABDKMath64x64.MIN_64x64 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#212) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ABDKMath64x64.MAX_64x64 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#217) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
ABDKMath64x64.fromInt(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#226-229) uses literals with too many digits:
	- require(bool)(x >= - 0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#227)
ABDKMath64x64.muli(int256,int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#337-363) uses literals with too many digits:
	- require(bool)(y >= - 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF && y <= 0x1000000000000000000000000000000000000000000000000) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#339-340)
ABDKMath64x64.muli(int256,int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#337-363) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#354-355)
ABDKMath64x64.divi(int256,int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#412-432) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x80000000000000000000000000000000) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#426)
ABDKMath64x64.inv(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#478-483) uses literals with too many digits:
	- result = int256(0x100000000000000000000000000000000) / x (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#480)
ABDKMath64x64.gavg(int128,int128) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#504-510) uses literals with too many digits:
	- require(bool)(m < 0x4000000000000000000000000000000000000000000000000000000000000000) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#507-508)
ABDKMath64x64.pow(int256,uint256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#520-540) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x80000000000000000000000000000000) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#534)
ABDKMath64x64.sqrt(int128) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#548-551) uses literals with too many digits:
	- int128(sqrtu(uint256(x) << 64,0x10000000000000000)) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#550)
ABDKMath64x64.log_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#559-582) uses literals with too many digits:
	- xc >= 0x10000000000000000 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#564)
ABDKMath64x64.log_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#559-582) uses literals with too many digits:
	- xc >= 0x100000000 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#565)
ABDKMath64x64.log_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#559-582) uses literals with too many digits:
	- bit = 0x8000000000000000 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#574)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#604)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x < - 0x400000000000000000 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#606)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = 0x80000000000000000000000000000000 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#608)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x8000000000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#610)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x4000000000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#612)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x2000000000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#614)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x1000000000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#616)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x800000000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#618)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x400000000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#620)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x200000000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#622)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x100000000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#624)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x80000000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#626)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x40000000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#628)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x20000000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#630)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x10000000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#632)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x8000000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#634)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x4000000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#636)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x2000000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#638)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x1000000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#640)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x800000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#642)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x400000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#644)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x200000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#646)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x100000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#648)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#649)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x80000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#650)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#651)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x40000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#652)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#653)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x20000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#654)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#655)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x10000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#656)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#657)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x8000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#658)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#659)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x4000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#660)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#661)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x2000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#662)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#663)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x1000000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#664)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#665)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x800000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#666)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#667)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x400000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#668)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#669)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x200000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#670)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#671)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x100000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#672)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#673)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x80000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#674)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#675)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x40000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#676)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#677)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x20000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#678)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#679)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x10000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#680)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#681)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x8000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#682)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#683)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x4000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#684)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#685)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x2000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#686)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#687)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x1000000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#688)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#689)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x800000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#690)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#691)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x400000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#692)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x100000000002C5C85FDF477B662B26945 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#693)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x200000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#694)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x10000000000162E42FEFA3AE53369388C >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#695)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- x & 0x100000 > 0 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#696)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x100000000000B17217F7D1D351A389D40 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#697)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#699)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#701)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#703)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#705)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#707)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#709)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x1000000000000162E42FEFA39F02B772C >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#711)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#713)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#715)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x100000000000002C5C85FDF473DEA871F >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#717)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#719)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x100000000000000B17217F7D1CF79E949 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#721)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#723)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#725)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x100000000000000162E42FEFA39EF366F >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#727)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#729)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#731)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#733)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x1000000000000000162E42FEFA39EF358 >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#735)
ABDKMath64x64.exp_2(int256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#603-743) uses literals with too many digits:
	- result = result * 0x10000000000000000B17217F7D1CF79AB >> 128 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#737)
ABDKMath64x64.exp(int128) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#751-758) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#752)
ABDKMath64x64.exp(int128) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#751-758) uses literals with too many digits:
	- x < - 0x400000000000000000 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#754)
ABDKMath64x64.divuu(uint256,uint256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#768-807) uses literals with too many digits:
	- xc >= 0x100000000 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#778)
ABDKMath64x64.powu(uint256,uint256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#817-870) uses literals with too many digits:
	- 0x80000000000000000000000000000000 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#818)
ABDKMath64x64.powu(uint256,uint256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#817-870) uses literals with too many digits:
	- xc >= 0x100000000000000000000000000000000 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#823)
ABDKMath64x64.powu(uint256,uint256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#817-870) uses literals with too many digits:
	- xc >= 0x10000000000000000 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#824)
ABDKMath64x64.powu(uint256,uint256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#817-870) uses literals with too many digits:
	- xc >= 0x100000000 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#825)
ABDKMath64x64.powu(uint256,uint256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#817-870) uses literals with too many digits:
	- result = 0x80000000000000000000000000000000 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#836)
ABDKMath64x64.powu(uint256,uint256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#817-870) uses literals with too many digits:
	- result >= 0x8000000000000000000000000000000000000000000000000000000000000000 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#844-845)
ABDKMath64x64.powu(uint256,uint256) (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#817-870) uses literals with too many digits:
	- x >= 0x8000000000000000000000000000000000000000000000000000000000000000 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#855-856)
ABDKMath64x64.slitherConstructorConstantVariables() (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#208-891) uses literals with too many digits:
	- MIN_64x64 = - 0x80000000000000000000000000000000 (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#212)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits[0m
INFO:Detectors:[92m
LoihiStorage.frozen (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#190) should be constant
LoihiStorage.maxFee (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#195) should be constant
LoihiStorage.notEntered (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#193) should be constant
LoihiStorage.owner (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#192) should be constant
LoihiStorage.partitioned (loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol#189) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Slither:./loops/0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol analyzed (3 contracts with 46 detectors), 127 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0x1098633D31B6fe64a5964d289F549503E0c7b7F72.sol
Tool Runtime = 2.465065970998694 seconds
#############################################