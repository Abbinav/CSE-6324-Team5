Compilation warnings/errors on ./loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol:
./loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol:190:32: Warning: The "extcodehash" instruction is not supported by the VM version "byzantium" you are currently compiling for. It will be interpreted as an invalid instruction on this VM.
        assembly { codehash := extcodehash(account) }
                               ^------------------^

INFO:Detectors:[92m
ERC20Detailed.constructor(string,string,uint8).name (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#123) shadows:
	- ERC20Detailed.name() (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#129-131) (function)
ERC20Detailed.constructor(string,string,uint8).symbol (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#123) shadows:
	- ERC20Detailed.symbol() (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#133-135) (function)
ERC20Detailed.constructor(string,string,uint8).decimals (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#123) shadows:
	- ERC20Detailed.decimals() (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#137-139) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
Address.isContract(address) (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#186-192) uses assembly
	- INLINE ASM (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#190-191)
EMTC.sumAsm(uint256[]) (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#341-347) uses assembly
	- INLINE ASM (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#343-346)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#6) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Low level call in SafeERC20.callOptionalReturn(IERC20,bytes) (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#214-225):
	- (success,returndata) = address(token).call(data) (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#218)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Parameter EMTC.addMinter(address)._minter (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#308) is not in mixedCase
Parameter EMTC.removeMinter(address)._minter (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#312) is not in mixedCase
Parameter EMTC.multipleAirdrop(address[],uint256[])._receivers (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#316) is not in mixedCase
Parameter EMTC.multipleAirdrop(address[],uint256[])._values (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#316) is not in mixedCase
Parameter EMTC.setGovernance(address)._governance (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#327) is not in mixedCase
Parameter EMTC.sumAsm(uint256[])._data (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#341) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
ERC20.maxAmount (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#40) should be constant
RaisableErc20.firstRoundMaxStage (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#232) should be constant
RaisableErc20.firstStageETHAmount (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#231) should be constant
RaisableErc20.maxStage (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#230) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
totalSupply() should be declared external:
	- ERC20.totalSupply() (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#46-48)
transfer(address,uint256) should be declared external:
	- ERC20.transfer(address,uint256) (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#54-57)
allowance(address,address) should be declared external:
	- ERC20.allowance(address,address) (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#59-61)
approve(address,uint256) should be declared external:
	- ERC20.approve(address,uint256) (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#63-66)
transferFrom(address,address,uint256) should be declared external:
	- ERC20.transferFrom(address,address,uint256) (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#68-72)
increaseAllowance(address,uint256) should be declared external:
	- ERC20.increaseAllowance(address,uint256) (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#74-77)
decreaseAllowance(address,uint256) should be declared external:
	- ERC20.decreaseAllowance(address,uint256) (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#79-82)
name() should be declared external:
	- ERC20Detailed.name() (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#129-131)
symbol() should be declared external:
	- ERC20Detailed.symbol() (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#133-135)
addLiquidity() should be declared external:
	- RaisableErc20.addLiquidity() (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#272-281)
mint(address,uint256) should be declared external:
	- EMTC.mint(address,uint256) (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#297-300)
mintAirdrop(uint256) should be declared external:
	- EMTC.mintAirdrop(uint256) (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#302-306)
addMinter(address) should be declared external:
	- EMTC.addMinter(address) (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#308-310)
removeMinter(address) should be declared external:
	- EMTC.removeMinter(address) (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#312-314)
multipleAirdrop(address[],uint256[]) should be declared external:
	- EMTC.multipleAirdrop(address[],uint256[]) (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#316-325)
setGovernance(address) should be declared external:
	- EMTC.setGovernance(address) (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#327-329)
getRaised(uint256) should be declared external:
	- EMTC.getRaised(uint256) (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#331-335)
stopRaise() should be declared external:
	- EMTC.stopRaise() (loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol#337-339)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:./loops/0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol analyzed (9 contracts with 46 detectors), 36 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0xe66e16af4014abb421bbbcd2eb5410614376ead1.sol
Tool Runtime = 1.0717968680000922 seconds
#############################################