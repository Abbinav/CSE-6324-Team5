INFO:Detectors:[93m
StockLiquiditator.burnPoolToken(uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1422-1498) performs a multiplication on the result of a division:
	-cashToRedeem = ((poolTokenAmount.mul(poolToCashRate)).div(1e18)) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1432-1436)
	-outputStockToken = ((cashToRedeem.mul(stockTokenMultiplier)).div(stockToCashRate)) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1450-1454)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
INFO:Detectors:[93m
StockLiquiditator.burnPoolToken(uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1422-1498) uses a dangerous strict equality:
	- require(bool,string)(balanceAfterTransfer == balanceBeforeTransfer.add(outputCashAmount),Sent & Received Amount mismatched) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1474-1482)
StockLiquiditator.mintPoolToken(uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1374-1418) uses a dangerous strict equality:
	- require(bool,string)(balanceAfterTransfer == balanceBeforeTransfer.add(inputCashAmount),Sent & Received Amount mismatched) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1402-1408)
StockLiquiditator.redeemStockToken(uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1502-1536) uses a dangerous strict equality:
	- require(bool,string)(balanceAfterTransfer == balanceBeforeTransfer.add(outputCashAmount),Sent & Received Amount mismatched) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1526-1532)
StockLiquiditator.updatePoolRate() (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1350-1370) uses a dangerous strict equality:
	- totalSupply() == 0 (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1352)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[93m
Reentrancy in StockLiquiditator.mintPoolToken(uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1374-1418):
	External calls:
	- cash.transferFrom(sender,address(this),inputCashAmount) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1398)
	State variables written after the call(s):
	- _mint(sender,poolTokens) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1414)
		- _totalSupply = _totalSupply.add(amount) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#878)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
StockLiquiditator.mintPoolToken(uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1374-1418) ignores return value by cash.transferFrom(sender,address(this),inputCashAmount) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1398)
StockLiquiditator.burnPoolToken(uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1422-1498) ignores return value by stockToken.transfer(sender,outputStockToken) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1456)
StockLiquiditator.burnPoolToken(uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1422-1498) ignores return value by stockToken.transfer(sender,outputStockToken) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1464)
StockLiquiditator.burnPoolToken(uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1422-1498) ignores return value by cash.transfer(sender,outputCashAmount) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1470)
StockLiquiditator.redeemStockToken(uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1502-1536) ignores return value by stockToken.transferFrom(sender,address(this),stockTokenAmount) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1508)
StockLiquiditator.redeemStockToken(uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1502-1536) ignores return value by cash.transfer(sender,outputCashAmount) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1522)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return[0m
INFO:Detectors:[92m
ERC20Detailed.constructor(string,string,uint8).name (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#996) shadows:
	- ERC20Detailed.name() (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1020-1024) (function)
ERC20Detailed.constructor(string,string,uint8).symbol (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#998) shadows:
	- ERC20Detailed.symbol() (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1034-1038) (function)
ERC20Detailed.constructor(string,string,uint8).decimals (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1000) shadows:
	- ERC20Detailed.decimals() (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1048-1052) (function)
StockLiquiditator.constructor(address,address,uint256,uint256,string,string,string).stockTokenAddress (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1156) shadows:
	- StockLiquiditator.stockTokenAddress() (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1262-1266) (function)
StockLiquiditator.constructor(address,address,uint256,uint256,string,string,string).name (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1162) shadows:
	- ERC20Detailed.name() (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1020-1024) (function)
StockLiquiditator.constructor(address,address,uint256,uint256,string,string,string).symbol (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1164) shadows:
	- ERC20Detailed.symbol() (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1034-1038) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
DeployFactory.getCashBoxesByUser(address) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1645-1697) has external calls inside a loop: cashbox.owner() == account (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1671)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop[0m
INFO:Detectors:[92m
Reentrancy in DeployFactory.createCashBox(address,address,uint256,uint256,string,string,string) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1575-1633):
	External calls:
	- cashBox.changeOwner(msg.sender) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1611)
	State variables written after the call(s):
	- cashBoxes.push(address(cashBox)) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1615)
Reentrancy in StockLiquiditator.mintPoolToken(uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1374-1418):
	External calls:
	- cash.transferFrom(sender,address(this),inputCashAmount) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1398)
	State variables written after the call(s):
	- _mint(sender,poolTokens) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1414)
		- _balances[account] = _balances[account].add(amount) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#880)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Reentrancy in StockLiquiditator.burnPoolToken(uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1422-1498):
	External calls:
	- stockToken.transfer(sender,outputStockToken) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1456)
	- stockToken.transfer(sender,outputStockToken) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1464)
	- cash.transfer(sender,outputCashAmount) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1470)
	Event emitted after the call(s):
	- PoolTokensBurnt(sender,poolTokenAmount,outputStockToken,outputCashAmount) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1486-1496)
Reentrancy in DeployFactory.createCashBox(address,address,uint256,uint256,string,string,string) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1575-1633):
	External calls:
	- cashBox.changeOwner(msg.sender) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1611)
	Event emitted after the call(s):
	- CashBoxAdded(address(cashBox),msg.sender,assetTokenAddress,cashTokenAddress,url) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1617-1629)
Reentrancy in StockLiquiditator.mintPoolToken(uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1374-1418):
	External calls:
	- cash.transferFrom(sender,address(this),inputCashAmount) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1398)
	Event emitted after the call(s):
	- PoolTokensMinted(sender,inputCashAmount,poolTokens) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1416)
	- Transfer(address(0),account,amount) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#882)
		- _mint(sender,poolTokens) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1414)
Reentrancy in StockLiquiditator.redeemStockToken(uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1502-1536):
	External calls:
	- stockToken.transferFrom(sender,address(this),stockTokenAmount) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1508)
	- cash.transfer(sender,outputCashAmount) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1522)
	Event emitted after the call(s):
	- StockTokensRedeemed(sender,stockTokenAmount,outputCashAmount) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1534)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#14) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1547) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Parameter StockLiquiditator.updateURL(string)._url (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1212) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
balanceOf(address) should be declared external:
	- ERC20.balanceOf(address) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#550-554)
transfer(address,uint256) should be declared external:
	- ERC20.transfer(address,uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#574-580)
allowance(address,address) should be declared external:
	- ERC20.allowance(address,address) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#590-602)
approve(address,uint256) should be declared external:
	- ERC20.approve(address,uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#620-626)
transferFrom(address,address,uint256) should be declared external:
	- ERC20.transferFrom(address,address,uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#654-684)
increaseAllowance(address,uint256) should be declared external:
	- ERC20.increaseAllowance(address,uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#712-732)
decreaseAllowance(address,uint256) should be declared external:
	- ERC20.decreaseAllowance(address,uint256) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#764-790)
name() should be declared external:
	- ERC20Detailed.name() (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1020-1024)
symbol() should be declared external:
	- ERC20Detailed.symbol() (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1034-1038)
decimals() should be declared external:
	- ERC20Detailed.decimals() (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1048-1052)
stockTokenAddress() should be declared external:
	- StockLiquiditator.stockTokenAddress() (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1262-1266)
createCashBox(address,address,uint256,uint256,string,string,string) should be declared external:
	- DeployFactory.createCashBox(address,address,uint256,uint256,string,string,string) (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1575-1633)
getAllCashBoxes() should be declared external:
	- DeployFactory.getAllCashBoxes() (loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol#1637-1641)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:./loops/0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol analyzed (7 contracts with 46 detectors), 42 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0xb8e2f589a5affdff6ac94250a08ee555f74879cd.sol
Tool Runtime = 1.4074096969998209 seconds
#############################################