Compilation warnings/errors on ./loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol:
./loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol:2873:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.
pragma experimental ABIEncoderV2;
^-------------------------------^
./loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol:2999:5: Warning: Function state mutability can be restricted to view
    function slTokenUnderlyingPrice(SLToken slToken) public returns (SLTokenUnderlyingPrice memory) {
    ^ (Relevant source part starts here and spans across multiple lines).
./loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol:3024:5: Warning: Function state mutability can be restricted to view
    function getAccountLimits(ComptrollerLensInterface comptroller, address account) public returns (AccountLimits memory) {
    ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:[93m
EIP20NonStandardInterface (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1148-1210) has incorrect ERC20 function interface:EIP20NonStandardInterface.transfer(address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1174)
EIP20NonStandardInterface (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1148-1210) has incorrect ERC20 function interface:EIP20NonStandardInterface.transferFrom(address,address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1188)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-erc20-interface[0m
INFO:Detectors:[93m
SLToken.accrueInterest() (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1597-1675) uses a dangerous strict equality:
	- accrualBlockNumberPrior == currentBlockNumber (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1603)
SLToken.accrueInterest() (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1597-1675) uses a dangerous strict equality:
	- require(bool,string)(mathErr == MathError.NO_ERROR,could not calculate block delta) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1619)
SLToken.balanceOfUnderlying(address) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1403-1408) uses a dangerous strict equality:
	- require(bool,string)(mErr == MathError.NO_ERROR,balance could not be calculated) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1406)
SLToken.borrowBalanceStored(address) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1484-1488) uses a dangerous strict equality:
	- require(bool,string)(err == MathError.NO_ERROR,borrowBalanceStored: borrowBalanceStoredInternal failed) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1486)
CarefulMath.divUInt(uint256,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#673-679) uses a dangerous strict equality:
	- b == 0 (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#674)
SLToken.exchangeRateStored() (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1541-1545) uses a dangerous strict equality:
	- require(bool,string)(err == MathError.NO_ERROR,exchangeRateStored: exchangeRateStoredInternal failed) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1543)
SLToken.exchangeRateStoredInternal() (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1552-1582) uses a dangerous strict equality:
	- _totalSupply == 0 (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1554)
SLToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1239-1270) uses a dangerous strict equality:
	- require(bool,string)(accrualBlockNumber == 0 && borrowIndex == 0,market may only be initialized once) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1246)
SLToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1239-1270) uses a dangerous strict equality:
	- require(bool,string)(err == uint256(Error.NO_ERROR),setting comptroller failed) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1254)
SLToken.initialize(ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1239-1270) uses a dangerous strict equality:
	- require(bool,string)(err == uint256(Error.NO_ERROR),setting interest rate model failed) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1262)
SLToken.liquidateBorrowFresh(address,address,uint256,SLTokenInterface) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2165-2233) uses a dangerous strict equality:
	- require(bool,string)(amountSeizeError == uint256(Error.NO_ERROR),LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2210)
SLToken.liquidateBorrowFresh(address,address,uint256,SLTokenInterface) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2165-2233) uses a dangerous strict equality:
	- require(bool,string)(seizeError == uint256(Error.NO_ERROR),token seizure failed) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2224)
SLToken.mintFresh(address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1710-1774) uses a dangerous strict equality:
	- require(bool,string)(vars.mathErr == MathError.NO_ERROR,MINT_EXCHANGE_CALCULATION_FAILED) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1749)
SLToken.mintFresh(address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1710-1774) uses a dangerous strict equality:
	- require(bool,string)(vars.mathErr == MathError.NO_ERROR,MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1757)
SLToken.mintFresh(address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1710-1774) uses a dangerous strict equality:
	- require(bool,string)(vars.mathErr == MathError.NO_ERROR,MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1760)
Exponential.mulExp(Exponential.Exp,Exponential.Exp) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#866-886) uses a dangerous strict equality:
	- assert(bool)(err2 == MathError.NO_ERROR) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#883)
CarefulMath.mulUInt(uint256,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#656-668) uses a dangerous strict equality:
	- a == 0 (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#657)
SLToken.repayBorrowFresh(address,address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2063-2129) uses a dangerous strict equality:
	- require(bool,string)(vars.mathErr == MathError.NO_ERROR,REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2112)
SLToken.repayBorrowFresh(address,address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2063-2129) uses a dangerous strict equality:
	- require(bool,string)(vars.mathErr == MathError.NO_ERROR,REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2115)
SLToken.transfer(address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1348-1350) uses a dangerous strict equality:
	- transferTokens(msg.sender,msg.sender,dst,amount) == uint256(Error.NO_ERROR) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1349)
SLToken.transferFrom(address,address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1359-1361) uses a dangerous strict equality:
	- transferTokens(msg.sender,src,dst,amount) == uint256(Error.NO_ERROR) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1360)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[93m
Reentrancy in SLToken.liquidateBorrowInternal(address,uint256,SLTokenInterface) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2139-2154):
	External calls:
	- error = slTokenCollateral.accrueInterest() (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2146)
	- liquidateBorrowFresh(msg.sender,borrower,repayAmount,slTokenCollateral) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2153)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2065)
		- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2260)
		- allowed = comptroller.liquidateBorrowAllowed(address(this),address(slTokenCollateral),liquidator,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2167)
		- comptroller.seizeVerify(address(this),seizerToken,liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2301)
		- comptroller.repayBorrowVerify(address(this),payer,borrower,vars.actualRepayAmount,vars.borrowerIndex) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2126)
		- seizeError = slTokenCollateral.seize(liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2220)
		- comptroller.liquidateBorrowVerify(address(this),address(slTokenCollateral),liquidator,borrower,actualRepayAmount,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2230)
	State variables written after the call(s):
	- liquidateBorrowFresh(msg.sender,borrower,repayAmount,slTokenCollateral) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2153)
		- totalBorrows = vars.totalBorrowsNew (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2120)
Reentrancy in SLToken.redeemFresh(address,uint256,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1826-1920):
	External calls:
	- allowed = comptroller.redeemAllowed(address(this),redeemer,vars.redeemTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1866)
	State variables written after the call(s):
	- totalSupply = vars.totalSupplyNew (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1909)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
SLToken.borrowFresh(address,uint256).vars (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1966) is a local variable never initialized
SLToken._addReservesFresh(uint256).actualAddAmount (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2454) is a local variable never initialized
SLToken.redeemFresh(address,uint256,uint256).vars (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1829) is a local variable never initialized
SLToken.mintFresh(address,uint256).vars (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1722) is a local variable never initialized
SLToken.repayBorrowFresh(address,address,uint256).vars (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2075) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables[0m
INFO:Detectors:[93m
SLErc20.initialize(address,ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2671-2684) ignores return value by EIP20Interface(underlying).totalSupply() (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2683)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return[0m
INFO:Detectors:[92m
Exponential.divScalarByExpTruncate(uint256,Exponential.Exp).fraction (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#855) shadows:
	- Exponential.fraction(uint256,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1067-1069) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
Reentrancy in SLToken.borrowFresh(address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1949-2012):
	External calls:
	- allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1951)
	State variables written after the call(s):
	- accountBorrows[borrower].principal = vars.accountBorrowsNew (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2001)
	- accountBorrows[borrower].interestIndex = borrowIndex (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2002)
	- totalBorrows = vars.totalBorrowsNew (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2003)
Reentrancy in SLToken.mintFresh(address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1710-1774):
	External calls:
	- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1712)
	State variables written after the call(s):
	- accountTokens[minter] = vars.accountTokensNew (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1764)
	- totalSupply = vars.totalSupplyNew (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1763)
Reentrancy in SLToken.redeemFresh(address,uint256,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1826-1920):
	External calls:
	- allowed = comptroller.redeemAllowed(address(this),redeemer,vars.redeemTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1866)
	State variables written after the call(s):
	- accountTokens[redeemer] = vars.accountTokensNew (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1910)
Reentrancy in SLToken.repayBorrowFresh(address,address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2063-2129):
	External calls:
	- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2065)
	State variables written after the call(s):
	- accountBorrows[borrower].principal = vars.accountBorrowsNew (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2118)
	- accountBorrows[borrower].interestIndex = borrowIndex (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2119)
	- totalBorrows = vars.totalBorrowsNew (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2120)
Reentrancy in SLToken.seizeInternal(address,address,address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2258-2304):
	External calls:
	- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2260)
	State variables written after the call(s):
	- accountTokens[borrower] = borrowerTokensNew (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2294)
	- accountTokens[liquidator] = liquidatorTokensNew (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2295)
Reentrancy in SLToken.transferTokens(address,address,address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1281-1340):
	External calls:
	- allowed = comptroller.transferAllowed(address(this),src,dst,tokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1283)
	State variables written after the call(s):
	- accountTokens[src] = srcTokensNew (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1326)
	- accountTokens[dst] = dstTokensNew (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1327)
	- transferAllowances[src][spender] = allowanceNew (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1331)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Reentrancy in SLToken.borrowFresh(address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1949-2012):
	External calls:
	- allowed = comptroller.borrowAllowed(address(this),borrower,borrowAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1951)
	Event emitted after the call(s):
	- Borrow(borrower,borrowAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2006)
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.BORROW_COMPTROLLER_REJECTION,allowed) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1953)
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- failOpaque(Error.MATH_ERROR,FailureInfo.BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1980)
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- failOpaque(Error.MATH_ERROR,FailureInfo.BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1975)
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- fail(Error.MARKET_NOT_FRESH,FailureInfo.BORROW_FRESHNESS_CHECK) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1958)
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- fail(Error.TOKEN_INSUFFICIENT_CASH,FailureInfo.BORROW_CASH_NOT_AVAILABLE) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1963)
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- failOpaque(Error.MATH_ERROR,FailureInfo.BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1985)
Reentrancy in SLToken.liquidateBorrowFresh(address,address,uint256,SLTokenInterface) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2165-2233):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(slTokenCollateral),liquidator,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2167)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED,FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2189)
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION,allowed),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2169)
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED,FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2194)
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.LIQUIDATE_FRESHNESS_CHECK),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2174)
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2179)
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- (fail(Error.INVALID_ACCOUNT_PAIR,FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2184)
Reentrancy in SLToken.liquidateBorrowFresh(address,address,uint256,SLTokenInterface) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2165-2233):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(slTokenCollateral),liquidator,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2167)
	- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2199)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2065)
		- comptroller.repayBorrowVerify(address(this),payer,borrower,vars.actualRepayAmount,vars.borrowerIndex) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2126)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2199)
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- (fail(TokenErrorReporter.Error(repayBorrowError),FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2201)
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2199)
	- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2123)
		- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2199)
Reentrancy in SLToken.liquidateBorrowFresh(address,address,uint256,SLTokenInterface) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2165-2233):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(slTokenCollateral),liquidator,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2167)
	- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2199)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2065)
		- comptroller.repayBorrowVerify(address(this),payer,borrower,vars.actualRepayAmount,vars.borrowerIndex) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2126)
	- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2218)
		- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2260)
		- comptroller.seizeVerify(address(this),seizerToken,liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2301)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2218)
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2218)
	- Transfer(borrower,liquidator,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2298)
		- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2218)
Reentrancy in SLToken.liquidateBorrowFresh(address,address,uint256,SLTokenInterface) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2165-2233):
	External calls:
	- allowed = comptroller.liquidateBorrowAllowed(address(this),address(slTokenCollateral),liquidator,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2167)
	- (repayBorrowError,actualRepayAmount) = repayBorrowFresh(liquidator,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2199)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2065)
		- comptroller.repayBorrowVerify(address(this),payer,borrower,vars.actualRepayAmount,vars.borrowerIndex) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2126)
	- seizeError = seizeInternal(address(this),liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2218)
		- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2260)
		- comptroller.seizeVerify(address(this),seizerToken,liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2301)
	- seizeError = slTokenCollateral.seize(liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2220)
	Event emitted after the call(s):
	- LiquidateBorrow(liquidator,borrower,actualRepayAmount,address(slTokenCollateral),seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2227)
Reentrancy in SLToken.liquidateBorrowInternal(address,uint256,SLTokenInterface) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2139-2154):
	External calls:
	- error = slTokenCollateral.accrueInterest() (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2146)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- (fail(TokenErrorReporter.Error(error),FailureInfo.LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2149)
Reentrancy in SLToken.liquidateBorrowInternal(address,uint256,SLTokenInterface) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2139-2154):
	External calls:
	- error = slTokenCollateral.accrueInterest() (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2146)
	- liquidateBorrowFresh(msg.sender,borrower,repayAmount,slTokenCollateral) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2153)
		- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2065)
		- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2260)
		- allowed = comptroller.liquidateBorrowAllowed(address(this),address(slTokenCollateral),liquidator,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2167)
		- comptroller.seizeVerify(address(this),seizerToken,liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2301)
		- comptroller.repayBorrowVerify(address(this),payer,borrower,vars.actualRepayAmount,vars.borrowerIndex) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2126)
		- seizeError = slTokenCollateral.seize(liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2220)
		- comptroller.liquidateBorrowVerify(address(this),address(slTokenCollateral),liquidator,borrower,actualRepayAmount,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2230)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- liquidateBorrowFresh(msg.sender,borrower,repayAmount,slTokenCollateral) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2153)
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- liquidateBorrowFresh(msg.sender,borrower,repayAmount,slTokenCollateral) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2153)
	- LiquidateBorrow(liquidator,borrower,actualRepayAmount,address(slTokenCollateral),seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2227)
		- liquidateBorrowFresh(msg.sender,borrower,repayAmount,slTokenCollateral) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2153)
	- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2123)
		- liquidateBorrowFresh(msg.sender,borrower,repayAmount,slTokenCollateral) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2153)
	- Transfer(borrower,liquidator,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2298)
		- liquidateBorrowFresh(msg.sender,borrower,repayAmount,slTokenCollateral) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2153)
Reentrancy in SLToken.mintFresh(address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1710-1774):
	External calls:
	- allowed = comptroller.mintAllowed(address(this),minter,mintAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1712)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.MINT_COMPTROLLER_REJECTION,allowed),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1714)
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- (failOpaque(Error.MATH_ERROR,FailureInfo.MINT_EXCHANGE_RATE_READ_FAILED,uint256(vars.mathErr)),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1726)
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.MINT_FRESHNESS_CHECK),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1719)
	- Mint(minter,vars.actualMintAmount,vars.mintTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1767)
	- Transfer(address(this),minter,vars.mintTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1768)
Reentrancy in SLToken.redeemFresh(address,uint256,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1826-1920):
	External calls:
	- allowed = comptroller.redeemAllowed(address(this),redeemer,vars.redeemTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1866)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- failOpaque(Error.MATH_ERROR,FailureInfo.REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1888)
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- fail(Error.MARKET_NOT_FRESH,FailureInfo.REDEEM_FRESHNESS_CHECK) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1873)
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- failOpaque(Error.MATH_ERROR,FailureInfo.REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,uint256(vars.mathErr)) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1883)
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- fail(Error.TOKEN_INSUFFICIENT_CASH,FailureInfo.REDEEM_TRANSFER_OUT_NOT_POSSIBLE) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1893)
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.REDEEM_COMPTROLLER_REJECTION,allowed) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1868)
	- Redeem(redeemer,vars.redeemAmount,vars.redeemTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1914)
	- Transfer(redeemer,address(this),vars.redeemTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1913)
Reentrancy in SLToken.repayBorrowFresh(address,address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2063-2129):
	External calls:
	- allowed = comptroller.repayBorrowAllowed(address(this),payer,borrower,repayAmount) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2065)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- (fail(Error.MARKET_NOT_FRESH,FailureInfo.REPAY_BORROW_FRESHNESS_CHECK),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2072)
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- (failOpaque(Error.MATH_ERROR,FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,uint256(vars.mathErr)),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2083)
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- (failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION,allowed),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2067)
	- RepayBorrow(payer,borrower,vars.actualRepayAmount,vars.accountBorrowsNew,vars.totalBorrowsNew) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2123)
Reentrancy in SLToken.seizeInternal(address,address,address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2258-2304):
	External calls:
	- allowed = comptroller.seizeAllowed(address(this),seizerToken,liquidator,borrower,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2260)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- failOpaque(Error.MATH_ERROR,FailureInfo.LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,uint256(mathErr)) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2286)
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- fail(Error.INVALID_ACCOUNT_PAIR,FailureInfo.LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2267)
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- failOpaque(Error.MATH_ERROR,FailureInfo.LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,uint256(mathErr)) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2281)
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.LIQUIDATE_SEIZE_COMPTROLLER_REJECTION,allowed) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2262)
	- Transfer(borrower,liquidator,seizeTokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2298)
Reentrancy in SLToken.transferTokens(address,address,address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1281-1340):
	External calls:
	- allowed = comptroller.transferAllowed(address(this),src,dst,tokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1283)
	Event emitted after the call(s):
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- fail(Error.BAD_INPUT,FailureInfo.TRANSFER_NOT_ALLOWED) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1290)
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- fail(Error.MATH_ERROR,FailureInfo.TRANSFER_NOT_ENOUGH) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1314)
	- Failure(uint256(err),uint256(info),opaqueError) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#624)
		- failOpaque(Error.COMPTROLLER_REJECTION,FailureInfo.TRANSFER_COMPTROLLER_REJECTION,allowed) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1285)
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- fail(Error.MATH_ERROR,FailureInfo.TRANSFER_TOO_MUCH) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1319)
	- Failure(uint256(err),uint256(info),0) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#615)
		- fail(Error.MATH_ERROR,FailureInfo.TRANSFER_NOT_ALLOWED) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1309)
	- Transfer(src,dst,tokens) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1335)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
INFO:Detectors:[92m
SLErc20.doTransferIn(address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2792-2817) uses assembly
	- INLINE ASM (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2798-2811)
SLErc20.doTransferOut(address,uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2828-2847) uses assembly
	- INLINE ASM (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2833-2846)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#8) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#83) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#117) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#422) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#633) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#722) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1075) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1141) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#1215) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2646) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2853) uses lesser than
Pragma version>=0.5<0.7.17 (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2872) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Constant ComptrollerInterface.isComptroller (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#12) is not in UPPER_CASE_WITH_UNDERSCORES
Constant InterestRateModel.isInterestRateModel (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#91) is not in UPPER_CASE_WITH_UNDERSCORES
Variable SLTokenStorage._notEntered (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#125) is not in mixedCase
Constant SLTokenStorage.borrowRateMaxMantissa (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#146) is not in UPPER_CASE_WITH_UNDERSCORES
Constant SLTokenStorage.reserveFactorMaxMantissa (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#151) is not in UPPER_CASE_WITH_UNDERSCORES
Function SLTokenInterface._setPendingAdmin(address) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#350) is not in mixedCase
Function SLTokenInterface._acceptAdmin() (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#351) is not in mixedCase
Function SLTokenInterface._setComptroller(ComptrollerInterface) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#352) is not in mixedCase
Function SLTokenInterface._setReserveFactor(uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#353) is not in mixedCase
Function SLTokenInterface._reduceReserves(uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#354) is not in mixedCase
Function SLTokenInterface._setInterestRateModel(InterestRateModel) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#355) is not in mixedCase
Constant SLTokenInterface.isSLToken (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#238) is not in UPPER_CASE_WITH_UNDERSCORES
Function SLErc20Interface._addReserves(uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#380) is not in mixedCase
Function SLDelegatorInterface._setImplementation(address,bool,bytes) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#402) is not in mixedCase
Function SLDelegateInterface._becomeImplementation(bytes) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#411) is not in mixedCase
Function SLDelegateInterface._resignImplementation() (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#416) is not in mixedCase
Constant Exponential.expScale (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#733) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Exponential.doubleScale (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#734) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Exponential.halfExpScale (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#735) is not in UPPER_CASE_WITH_UNDERSCORES
Constant Exponential.mantissaOne (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#736) is not in UPPER_CASE_WITH_UNDERSCORES
Function SLToken._setPendingAdmin(address) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2315-2331) is not in mixedCase
Function SLToken._acceptAdmin() (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2338-2358) is not in mixedCase
Function SLToken._setComptroller(ComptrollerInterface) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2365-2382) is not in mixedCase
Function SLToken._setReserveFactor(uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2389-2397) is not in mixedCase
Function SLToken._reduceReserves(uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2496-2504) is not in mixedCase
Function SLToken._setInterestRateModel(InterestRateModel) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2561-2569) is not in mixedCase
Function SLErc20._addReserves(uint256) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2767-2769) is not in mixedCase
Constant PriceOracle.isPriceOracle (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2858) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
SLDelegationStorage.implementation (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#387) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
_setInterestRateModel(InterestRateModel) should be declared external:
	- SLTokenInterface._setInterestRateModel(InterestRateModel) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#355)
	- SLToken._setInterestRateModel(InterestRateModel) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2561-2569)
_setImplementation(address,bool,bytes) should be declared external:
	- SLDelegatorInterface._setImplementation(address,bool,bytes) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#402)
_becomeImplementation(bytes) should be declared external:
	- SLDelegateInterface._becomeImplementation(bytes) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#411)
_resignImplementation() should be declared external:
	- SLDelegateInterface._resignImplementation() (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#416)
initialize(address,ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) should be declared external:
	- SLErc20.initialize(address,ComptrollerInterface,InterestRateModel,uint256,string,string,uint8) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#2671-2684)
getAccountLimits(ComptrollerLensInterface,address) should be declared external:
	- SashimiLendingLens.getAccountLimits(ComptrollerLensInterface,address) (loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol#3024-3033)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:./loops/0x62d19a92ed47258286d65b470e0d26fa49530f81.sol analyzed (20 contracts with 46 detectors), 100 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0x62d19a92ed47258286d65b470e0d26fa49530f81.sol
Tool Runtime = 35.96592494300057 seconds
#############################################