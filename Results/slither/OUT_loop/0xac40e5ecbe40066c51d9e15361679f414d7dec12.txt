INFO:Detectors:[93m
LPStaker.calculateReward(uint128) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#120-165) performs a multiplication on the result of a division:
	-x3 = (((17042 * temp1 * rd) / tDepositedTokensSquared) * rd) / int256(tDepositedTokens) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#160)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
INFO:Detectors:[93m
Reentrancy in LPStaker.depositWithBonus(uint128,bool) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#177-185):
	External calls:
	- deposit(amount) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#178)
		- require(bool,string)(depositToken.transferFrom(msg.sender,address(this),amount),transfer unsuccessful) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#205)
	State variables written after the call(s):
	- ss.bonusBalance += amount (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#183)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[92m
Reentrancy in LPStaker.depositWithBonus(uint128,bool) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#177-185):
	External calls:
	- deposit(amount) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#178)
		- require(bool,string)(depositToken.transferFrom(msg.sender,address(this),amount),transfer unsuccessful) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#205)
	State variables written after the call(s):
	- totalBonusDeposits += amount (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#184)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
LPStaker.deposit(uint128) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#187-206) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(block.timestamp < 1602547200,deposits no longer accepted) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#188)
LPStaker.withdraw(address) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#208-226) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(ss.lockedUntil < block.timestamp,still locked) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#210)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#8) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Parameter LPStaker.depositWithBonus(uint128,bool).is_chr (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#177) is not in mixedCase
Constant LPStaker.initialDepositedTokens (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#98) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LPStaker.initialAllocatedReward (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#99) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LPStaker.usdt_auction (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#115) is not in UPPER_CASE_WITH_UNDERSCORES
Constant LPStaker.chr_auction (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#116) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
LPStaker.calculateReward(uint128) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#120-165) uses literals with too many digits:
	- boughtTokens = (741101126592248 * tAllocatedReward) / (1000000000000000) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#139)
LPStaker.calculateReward(uint128) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#120-165) uses literals with too many digits:
	- res = (x1 - x2 + x3) / 1000000 (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#161)
LPStaker.deposit(uint128) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#187-206) uses literals with too many digits:
	- adjustedAmount = (1139 * amount) / (100000 * 1000) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#191)
LPStaker.deposit(uint128) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#187-206) uses literals with too many digits:
	- require(bool,string)(totalAllocatedReward <= 7500 * 1000000,reward pool exhausted) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#195)
LPStaker.withdraw(address) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#208-226) uses literals with too many digits:
	- reward += uint64((2500 * 1000000 * bonusBalance) / totalBonusDeposits) (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#221)
LPStaker.slitherConstructorConstantVariables() (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#89-227) uses literals with too many digits:
	- initialDepositedTokens = 1000 * 1000000 (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#98)
LPStaker.slitherConstructorConstantVariables() (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#89-227) uses literals with too many digits:
	- initialAllocatedReward = 250 * 1000000 (loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol#99)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits[0m
INFO:Slither:./loops/0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol analyzed (3 contracts with 46 detectors), 19 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0xac40e5ecbe40066c51d9e15361679f414d7dec12.sol
Tool Runtime = 0.5825173409975832 seconds
#############################################