INFO:Detectors:[91m
LidSimplifiedPresale.releaseEthToAddress(address,uint256) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1403-1406) sends eth to arbitrary user
	Dangerous calls:
	- receiver.transfer(amount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1405)
LidSimplifiedPresale.claimRefund(address) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1428-1434) sends eth to arbitrary user
	Dangerous calls:
	- account.transfer(refundAmt) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1433)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations[0m
INFO:Detectors:[91m
PauserRole.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#405) shadows:
	- Initializable.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#297)
Pausable.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#480) shadows:
	- PauserRole.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#405)
	- Initializable.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#297)
Ownable.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#557) shadows:
	- Initializable.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#297)
ReentrancyGuard.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#597) shadows:
	- Initializable.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#297)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variable-shadowing[0m
INFO:Detectors:[93m
Reentrancy in LidSimplifiedPresale.initialize(uint256,uint256,uint256,uint256,uint256,address,LidSimplifiedPresaleTimer,LidSimplifiedPresaleRedeemer,LidSimplifiedPresaleAccess,IERC20,IUniswapV2Router01,address) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1306-1344):
	External calls:
	- token.approve(address(uniswapRouter),token.totalSupply()) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1340)
	State variables written after the call(s):
	- _transferOwnership(owner) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1343)
		- _owner = newOwner (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#554)
Reentrancy in LidStaking.registerAndStake(uint256,address) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1008-1026):
	External calls:
	- distribute(registrationFeeWithoutReferrer) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1015)
		- require(bool,string)(lidToken.transferFrom(msg.sender,address(this),amount),Distribution failed due to failed transfer.) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1079-1082)
	- require(bool,string)(lidToken.transferFrom(msg.sender,referrer,registrationFeeWithReferrer),Stake failed due to failed referral transfer.) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1020)
	State variables written after the call(s):
	- stakerIsRegistered[msg.sender] = true (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1024)
Reentrancy in LidStaking.registerAndStake(uint256,address) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1008-1026):
	External calls:
	- distribute(registrationFeeWithoutReferrer) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1015)
		- require(bool,string)(lidToken.transferFrom(msg.sender,address(this),amount),Distribution failed due to failed transfer.) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1079-1082)
	- require(bool,string)(lidToken.transferFrom(msg.sender,referrer,registrationFeeWithReferrer),Stake failed due to failed referral transfer.) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1020)
	- stake(finalAmount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1025)
		- require(bool,string)(lidToken.transferFrom(msg.sender,address(this),amount),Stake failed due to failed transfer.) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1034)
		- stakeHandlers[i].handleStake(msg.sender,stakeAmount,stakeValue[msg.sender]) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1150)
	State variables written after the call(s):
	- stake(finalAmount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1025)
		- emptyStakeTokens = 0 (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1161)
		- emptyStakeTokens = emptyStakeTokens.add(amount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1165)
	- stake(finalAmount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1025)
		- profitPerShare = profitPerShare.add(amount.mul(DISTRIBUTION_MULTIPLIER).div(totalStaked)) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1163)
	- stake(finalAmount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1025)
		- totalStaked = totalStaked.add(stakeAmount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1147)
Reentrancy in LidStaking.unstake(uint256) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1038-1058):
	External calls:
	- withdraw(dividendsOf(msg.sender)) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1042)
		- lidToken.transfer(msg.sender,amount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1063)
	State variables written after the call(s):
	- _increaseProfitPerShare(tax) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1049)
		- profitPerShare = profitPerShare.add(amount.mul(DISTRIBUTION_MULTIPLIER).div(totalStaked)) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1163)
	- stakeValue[msg.sender] = stakeValue[msg.sender].sub(amount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1045)
	- stakerPayouts[msg.sender] = uintToInt(profitPerShare.mul(stakeValue[msg.sender])) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1050)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
LidSimplifiedPresaleRedeemer.calculateRatePerEth(uint256,uint256,uint256).bp (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#866) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables[0m
INFO:Detectors:[93m
LidStaking.withdraw(uint256) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1060-1065) ignores return value by lidToken.transfer(msg.sender,amount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1063)
LidSimplifiedPresale.initialize(uint256,uint256,uint256,uint256,uint256,address,LidSimplifiedPresaleTimer,LidSimplifiedPresaleRedeemer,LidSimplifiedPresaleAccess,IERC20,IUniswapV2Router01,address) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1306-1344) ignores return value by token.approve(address(uniswapRouter),token.totalSupply()) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1340)
LidSimplifiedPresale.sendToUniswap() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1372-1389) ignores return value by uniswapRouter.addLiquidityETH.value(uniswapEth)(address(token),uniswapTokens,uniswapTokens,uniswapEth,address(0x000000000000000000000000000000000000dEaD),now) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1381-1388)
LidSimplifiedPresale.issueTokens() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1391-1401) ignores return value by token.transfer(tokenPools[i],totalTokens.mulBP(tokenPoolBPs[i])) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1396-1399)
LidSimplifiedPresale.redeem() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1408-1413) ignores return value by token.transfer(msg.sender,claimable) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1412)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return[0m
INFO:Detectors:[92m
LidSimplifiedPresaleTimer.initialize(uint256,uint256,uint256,address,address).owner (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#741) shadows:
	- Ownable.owner() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#509-511) (function)
LidSimplifiedPresaleRedeemer.initialize(uint256,uint256,uint256[],uint256[],address,address).owner (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#806) shadows:
	- Ownable.owner() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#509-511) (function)
LidStaking.initialize(uint256,uint256,uint256,uint256,address,ILidCertifiableToken).owner (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#991) shadows:
	- Ownable.owner() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#509-511) (function)
LidSimplifiedPresale.initialize(uint256,uint256,uint256,uint256,uint256,address,LidSimplifiedPresaleTimer,LidSimplifiedPresaleRedeemer,LidSimplifiedPresaleAccess,IERC20,IUniswapV2Router01,address).owner (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1312) shadows:
	- Ownable.owner() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#509-511) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
LidStaking.unstake(uint256) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1038-1058) has external calls inside a loop: stakeHandlers[i].handleUnstake(msg.sender,amount,stakeValue[msg.sender]) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1053)
LidStaking._addStake(uint256) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1144-1155) has external calls inside a loop: stakeHandlers[i].handleStake(msg.sender,stakeAmount,stakeValue[msg.sender]) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1150)
LidSimplifiedPresale.issueTokens() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1391-1401) has external calls inside a loop: token.transfer(tokenPools[i],totalTokens.mulBP(tokenPoolBPs[i])) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1396-1399)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation/#calls-inside-a-loop[0m
INFO:Detectors:[92m
Reentrancy in LidSimplifiedPresale.deposit(address) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1436-1460):
	External calls:
	- endTime = timer.updateEndTime() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1438)
	- redeemer.setDeposit(msg.sender,msg.value.sub(fee),address(this).balance.sub(fee)) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1451)
	State variables written after the call(s):
	- earnedReferrals[referrer] = earnedReferrals[referrer].add(fee) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1454)
	- referralCounts[referrer] = referralCounts[referrer].add(1) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1455)
Reentrancy in LidStaking.registerAndStake(uint256,address) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1008-1026):
	External calls:
	- require(bool,string)(lidToken.transferFrom(msg.sender,referrer,registrationFeeWithReferrer),Stake failed due to failed referral transfer.) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1020)
	State variables written after the call(s):
	- accountReferrals[referrer] = accountReferrals[referrer].add(1) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1021)
Reentrancy in LidStaking.unstake(uint256) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1038-1058):
	External calls:
	- withdraw(dividendsOf(msg.sender)) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1042)
		- lidToken.transfer(msg.sender,amount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1063)
	State variables written after the call(s):
	- _increaseProfitPerShare(tax) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1049)
		- emptyStakeTokens = 0 (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1161)
		- emptyStakeTokens = emptyStakeTokens.add(amount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1165)
	- totalStaked = totalStaked.sub(amount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1044)
	- totalStakers = totalStakers.sub(1) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1043)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Reentrancy in LidStaking.distribute(uint256) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1075-1084):
	External calls:
	- require(bool,string)(lidToken.transferFrom(msg.sender,address(this),amount),Distribution failed due to failed transfer.) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1079-1082)
	Event emitted after the call(s):
	- OnDistribute(msg.sender,amount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1083)
Reentrancy in LidSimplifiedPresale.initialize(uint256,uint256,uint256,uint256,uint256,address,LidSimplifiedPresaleTimer,LidSimplifiedPresaleRedeemer,LidSimplifiedPresaleAccess,IERC20,IUniswapV2Router01,address) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1306-1344):
	External calls:
	- token.approve(address(uniswapRouter),token.totalSupply()) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1340)
	Event emitted after the call(s):
	- OwnershipTransferred(_owner,newOwner) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#553)
		- _transferOwnership(owner) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1343)
Reentrancy in LidStaking.registerAndStake(uint256,address) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1008-1026):
	External calls:
	- distribute(registrationFeeWithoutReferrer) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1015)
		- require(bool,string)(lidToken.transferFrom(msg.sender,address(this),amount),Distribution failed due to failed transfer.) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1079-1082)
	- require(bool,string)(lidToken.transferFrom(msg.sender,referrer,registrationFeeWithReferrer),Stake failed due to failed referral transfer.) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1020)
	- stake(finalAmount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1025)
		- require(bool,string)(lidToken.transferFrom(msg.sender,address(this),amount),Stake failed due to failed transfer.) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1034)
		- stakeHandlers[i].handleStake(msg.sender,stakeAmount,stakeValue[msg.sender]) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1150)
	Event emitted after the call(s):
	- OnStake(msg.sender,amount,tax) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1035)
		- stake(finalAmount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1025)
Reentrancy in LidStaking.reinvest(uint256) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1067-1073):
	External calls:
	- tax = _addStake(amount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1071)
		- stakeHandlers[i].handleStake(msg.sender,stakeAmount,stakeValue[msg.sender]) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1150)
	Event emitted after the call(s):
	- OnReinvest(msg.sender,amount,tax) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1072)
Reentrancy in LidStaking.stake(uint256) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1028-1036):
	External calls:
	- tax = _addStake(amount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1033)
		- stakeHandlers[i].handleStake(msg.sender,stakeAmount,stakeValue[msg.sender]) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1150)
	- require(bool,string)(lidToken.transferFrom(msg.sender,address(this),amount),Stake failed due to failed transfer.) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1034)
	Event emitted after the call(s):
	- OnStake(msg.sender,amount,tax) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1035)
Reentrancy in LidStaking.unstake(uint256) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1038-1058):
	External calls:
	- withdraw(dividendsOf(msg.sender)) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1042)
		- lidToken.transfer(msg.sender,amount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1063)
	- require(bool,string)(lidToken.transferFrom(address(this),msg.sender,earnings),Unstake failed due to failed transfer.) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1056)
	Event emitted after the call(s):
	- OnUnstake(msg.sender,amount,tax) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1057)
Reentrancy in LidStaking.withdraw(uint256) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1060-1065):
	External calls:
	- lidToken.transfer(msg.sender,amount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1063)
	Event emitted after the call(s):
	- OnWithdraw(msg.sender,amount) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1064)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
INFO:Detectors:[92m
LidSimplifiedPresaleTimer.updateEndTime() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#760-767) uses timestamp for comparisons
	Dangerous comparisons:
	- endTime != 0 (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#761)
LidSimplifiedPresaleTimer.isStarted() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#769-771) uses timestamp for comparisons
	Dangerous comparisons:
	- (startTime != 0 && now > startTime) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#770)
LidSimplifiedPresaleRedeemer.calculateReedemable(address,uint256,uint256) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#881-899) uses timestamp for comparisons
	Dangerous comparisons:
	- finalEndTime >= now (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#887)
	- totalRedeemable >= earnedTokens (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#893)
LidSimplifiedPresale.deposit(address) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1436-1460) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now >= access.getAccessTime(msg.sender,timer.startTime()),Time must be at least access time.) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1437)
	- require(bool,string)(endTime == 0 || endTime >= now,Endtime past.) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1439)
LidSimplifiedPresale.isPresaleEnded() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1474-1482) uses timestamp for comparisons
	Dangerous comparisons:
	- ((address(this).balance >= hardcap) || (timer.isStarted() && (now > endTime && endTime != 0))) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1478-1481)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp[0m
INFO:Detectors:[92m
Initializable.isConstructor() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#284-294) uses assembly
	- INLINE ASM (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#292-293)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
LidStaking.stake(uint256) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1028-1036) compares to a boolean constant:
	-require(bool,string)(stakerIsRegistered[msg.sender] == true,Must be registered to stake.) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1029)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#boolean-equality[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#6) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Variable Initializable.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#297) is not in mixedCase
Variable PauserRole.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#405) is not in mixedCase
Variable Pausable.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#480) is not in mixedCase
Variable Ownable.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#557) is not in mixedCase
Variable ReentrancyGuard.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#597) is not in mixedCase
Function IUniswapV2Router01.WETH() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#610) is not in mixedCase
Parameter LidSimplifiedPresaleTimer.initialize(uint256,uint256,uint256,address,address)._startTime (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#737) is not in mixedCase
Parameter LidSimplifiedPresaleTimer.initialize(uint256,uint256,uint256,address,address)._hardCapTimer (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#738) is not in mixedCase
Parameter LidSimplifiedPresaleTimer.initialize(uint256,uint256,uint256,address,address)._softCap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#739) is not in mixedCase
Parameter LidSimplifiedPresaleTimer.initialize(uint256,uint256,uint256,address,address)._presale (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#740) is not in mixedCase
Parameter LidSimplifiedPresaleRedeemer.initialize(uint256,uint256,uint256[],uint256[],address,address)._redeemBP (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#801) is not in mixedCase
Parameter LidSimplifiedPresaleRedeemer.initialize(uint256,uint256,uint256[],uint256[],address,address)._redeemInterval (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#802) is not in mixedCase
Parameter LidSimplifiedPresaleRedeemer.initialize(uint256,uint256,uint256[],uint256[],address,address)._bonusRangeStart (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#803) is not in mixedCase
Parameter LidSimplifiedPresaleRedeemer.initialize(uint256,uint256,uint256[],uint256[],address,address)._bonusRangeBP (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#804) is not in mixedCase
Parameter LidSimplifiedPresaleRedeemer.initialize(uint256,uint256,uint256[],uint256[],address,address)._presale (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#805) is not in mixedCase
Parameter LidStaking.initialize(uint256,uint256,uint256,uint256,address,ILidCertifiableToken)._stakingTaxBP (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#987) is not in mixedCase
Parameter LidStaking.initialize(uint256,uint256,uint256,uint256,address,ILidCertifiableToken)._ustakingTaxBP (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#988) is not in mixedCase
Parameter LidStaking.initialize(uint256,uint256,uint256,uint256,address,ILidCertifiableToken)._registrationFeeWithReferrer (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#989) is not in mixedCase
Parameter LidStaking.initialize(uint256,uint256,uint256,uint256,address,ILidCertifiableToken)._registrationFeeWithoutReferrer (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#990) is not in mixedCase
Parameter LidStaking.initialize(uint256,uint256,uint256,uint256,address,ILidCertifiableToken)._lidToken (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#992) is not in mixedCase
Parameter LidStaking.setStartTime(uint256)._startTime (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1127) is not in mixedCase
Parameter LidSimplifiedPresaleAccess.initialize(LidStaking)._staking (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1178) is not in mixedCase
Parameter LidSimplifiedPresale.initialize(uint256,uint256,uint256,uint256,uint256,address,LidSimplifiedPresaleTimer,LidSimplifiedPresaleRedeemer,LidSimplifiedPresaleAccess,IERC20,IUniswapV2Router01,address)._maxBuyPerAddress (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1307) is not in mixedCase
Parameter LidSimplifiedPresale.initialize(uint256,uint256,uint256,uint256,uint256,address,LidSimplifiedPresaleTimer,LidSimplifiedPresaleRedeemer,LidSimplifiedPresaleAccess,IERC20,IUniswapV2Router01,address)._uniswapEthBP (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1308) is not in mixedCase
Parameter LidSimplifiedPresale.initialize(uint256,uint256,uint256,uint256,uint256,address,LidSimplifiedPresaleTimer,LidSimplifiedPresaleRedeemer,LidSimplifiedPresaleAccess,IERC20,IUniswapV2Router01,address)._lidEthBP (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1309) is not in mixedCase
Parameter LidSimplifiedPresale.initialize(uint256,uint256,uint256,uint256,uint256,address,LidSimplifiedPresaleTimer,LidSimplifiedPresaleRedeemer,LidSimplifiedPresaleAccess,IERC20,IUniswapV2Router01,address)._referralBP (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1310) is not in mixedCase
Parameter LidSimplifiedPresale.initialize(uint256,uint256,uint256,uint256,uint256,address,LidSimplifiedPresaleTimer,LidSimplifiedPresaleRedeemer,LidSimplifiedPresaleAccess,IERC20,IUniswapV2Router01,address)._hardcap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1311) is not in mixedCase
Parameter LidSimplifiedPresale.initialize(uint256,uint256,uint256,uint256,uint256,address,LidSimplifiedPresaleTimer,LidSimplifiedPresaleRedeemer,LidSimplifiedPresaleAccess,IERC20,IUniswapV2Router01,address)._timer (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1313) is not in mixedCase
Parameter LidSimplifiedPresale.initialize(uint256,uint256,uint256,uint256,uint256,address,LidSimplifiedPresaleTimer,LidSimplifiedPresaleRedeemer,LidSimplifiedPresaleAccess,IERC20,IUniswapV2Router01,address)._redeemer (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1314) is not in mixedCase
Parameter LidSimplifiedPresale.initialize(uint256,uint256,uint256,uint256,uint256,address,LidSimplifiedPresaleTimer,LidSimplifiedPresaleRedeemer,LidSimplifiedPresaleAccess,IERC20,IUniswapV2Router01,address)._access (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1315) is not in mixedCase
Parameter LidSimplifiedPresale.initialize(uint256,uint256,uint256,uint256,uint256,address,LidSimplifiedPresaleTimer,LidSimplifiedPresaleRedeemer,LidSimplifiedPresaleAccess,IERC20,IUniswapV2Router01,address)._token (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1316) is not in mixedCase
Parameter LidSimplifiedPresale.initialize(uint256,uint256,uint256,uint256,uint256,address,LidSimplifiedPresaleTimer,LidSimplifiedPresaleRedeemer,LidSimplifiedPresaleAccess,IERC20,IUniswapV2Router01,address)._uniswapRouter (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1317) is not in mixedCase
Parameter LidSimplifiedPresale.initialize(uint256,uint256,uint256,uint256,uint256,address,LidSimplifiedPresaleTimer,LidSimplifiedPresaleRedeemer,LidSimplifiedPresaleAccess,IERC20,IUniswapV2Router01,address)._lidFund (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1318) is not in mixedCase
Parameter LidSimplifiedPresale.setTokenPools(uint256,uint256,address[],uint256[])._uniswapTokenBP (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1351) is not in mixedCase
Parameter LidSimplifiedPresale.setTokenPools(uint256,uint256,address[],uint256[])._presaleTokenBP (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1352) is not in mixedCase
Parameter LidSimplifiedPresale.setTokenPools(uint256,uint256,address[],uint256[])._tokenPools (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1353) is not in mixedCase
Parameter LidSimplifiedPresale.setTokenPools(uint256,uint256,address[],uint256[])._tokenPoolBPs (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1354) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
LidSimplifiedPresaleAccess.initialize(LidStaking) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1178-1207) uses literals with too many digits:
	- decayCurve = (1000000,750000,562500,421875,316406,237305,177979,133484,100113,75085,56314,42235,31676,23757,17818,13363,10023,7517,5638,4228,3171,2378,1784,0) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1181-1206)
LidSimplifiedPresale.sendToUniswap() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1372-1389) uses literals with too many digits:
	- uniswapRouter.addLiquidityETH.value(uniswapEth)(address(token),uniswapTokens,uniswapTokens,uniswapEth,address(0x000000000000000000000000000000000000dEaD),now) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1381-1388)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits[0m
INFO:Detectors:[92m
Ownable.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#557) is never used in LidSimplifiedPresaleTimer (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#727-773)
Ownable.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#557) is never used in LidSimplifiedPresaleRedeemer (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#776-914)
Ownable.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#557) is never used in LidStaking (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#942-1169)
Initializable.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#297) is never used in LidSimplifiedPresaleAccess (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1172-1250)
Pausable.______gap (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#480) is never used in LidSimplifiedPresale (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1253-1484)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variables[0m
INFO:Detectors:[92m
addPauser(address) should be declared external:
	- PauserRole.addPauser(address) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#387-389)
renouncePauser() should be declared external:
	- PauserRole.renouncePauser() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#391-393)
paused() should be declared external:
	- Pausable.paused() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#444-446)
pause() should be declared external:
	- Pausable.pause() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#467-470)
unpause() should be declared external:
	- Pausable.unpause() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#475-478)
owner() should be declared external:
	- Ownable.owner() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#509-511)
renounceOwnership() should be declared external:
	- Ownable.renounceOwnership() (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#535-538)
transferOwnership(address) should be declared external:
	- Ownable.transferOwnership(address) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#544-546)
registerAndStake(uint256) should be declared external:
	- LidStaking.registerAndStake(uint256) (loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol#1004-1006)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:./loops/0xc4f6cbba59916753b880693474667f7c8230ac7d.sol analyzed (18 contracts with 46 detectors), 95 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0xc4f6cbba59916753b880693474667f7c8230ac7d.sol
Tool Runtime = 3.518656944997929 seconds
#############################################