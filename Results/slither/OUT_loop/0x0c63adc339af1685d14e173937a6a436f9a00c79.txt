Compilation warnings/errors on ./loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol:
./loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol:21:9: Warning: This declaration shadows an existing declaration.
        uint[] memory individual_ = new uint[](_length);
        ^-----------------------^
./loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol:16:9: The shadowed declaration is here:
        uint[] memory individual_
        ^-----------------------^
./loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol:22:9: Warning: This declaration shadows an existing declaration.
        uint total_;
        ^---------^
./loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol:15:9: The shadowed declaration is here:
        uint total_,
        ^---------^

INFO:Detectors:[93m
ABDKMath64x64.divuu(uint256,uint256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#753-792) performs a multiplication on the result of a division:
	-result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#770)
	-hi = result * (y >> 128) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#773)
ABDKMath64x64.divuu(uint256,uint256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#753-792) performs a multiplication on the result of a division:
	-result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#770)
	-lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#774)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
INFO:Detectors:[92m
Assimilators.delegate(address,bytes) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#43-51) uses assembly
	- INLINE ASM (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#47-49)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#6) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Low level call in Assimilators.delegate(address,bytes) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#43-51):
	- (_success,returnData_) = _callee.delegatecall(_data) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#45)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Parameter Assimilators.delegate(address,bytes)._callee (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#43) is not in mixedCase
Parameter Assimilators.delegate(address,bytes)._data (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#43) is not in mixedCase
Parameter Assimilators.viewRawAmount(address,int256)._assim (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#53) is not in mixedCase
Parameter Assimilators.viewRawAmount(address,int256)._amt (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#53) is not in mixedCase
Parameter Assimilators.viewNumeraireAmount(address,uint256)._assim (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#59) is not in mixedCase
Parameter Assimilators.viewNumeraireAmount(address,uint256)._amt (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#59) is not in mixedCase
Parameter Assimilators.viewNumeraireAmountAndBalance(address,uint256)._assim (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#65) is not in mixedCase
Parameter Assimilators.viewNumeraireAmountAndBalance(address,uint256)._amt (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#65) is not in mixedCase
Parameter Assimilators.viewNumeraireBalance(address)._assim (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#71) is not in mixedCase
Parameter Assimilators.intakeRaw(address,uint256)._assim (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#77) is not in mixedCase
Parameter Assimilators.intakeRaw(address,uint256)._amount (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#77) is not in mixedCase
Parameter Assimilators.intakeRawAndGetBalance(address,uint256)._assim (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#85) is not in mixedCase
Parameter Assimilators.intakeRawAndGetBalance(address,uint256)._amount (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#85) is not in mixedCase
Parameter Assimilators.intakeNumeraire(address,int128)._assim (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#93) is not in mixedCase
Parameter Assimilators.intakeNumeraire(address,int128)._amt (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#93) is not in mixedCase
Parameter Assimilators.outputRaw(address,address,uint256)._assim (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#101) is not in mixedCase
Parameter Assimilators.outputRaw(address,address,uint256)._dst (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#101) is not in mixedCase
Parameter Assimilators.outputRaw(address,address,uint256)._amount (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#101) is not in mixedCase
Parameter Assimilators.outputRawAndGetBalance(address,address,uint256)._assim (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#111) is not in mixedCase
Parameter Assimilators.outputRawAndGetBalance(address,address,uint256)._dst (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#111) is not in mixedCase
Parameter Assimilators.outputRawAndGetBalance(address,address,uint256)._amount (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#111) is not in mixedCase
Parameter Assimilators.outputNumeraire(address,address,int256)._assim (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#121) is not in mixedCase
Parameter Assimilators.outputNumeraire(address,address,int256)._dst (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#121) is not in mixedCase
Parameter Assimilators.outputNumeraire(address,address,int256)._amt (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#121) is not in mixedCase
Constant Assimilators.iAsmltr (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#41) is not in UPPER_CASE_WITH_UNDERSCORES
Function ABDKMath64x64.log_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#544-567) is not in mixedCase
Function ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) is not in mixedCase
Constant ABDKMath64x64.MIN_64x64 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#197) is not in UPPER_CASE_WITH_UNDERSCORES
Constant ABDKMath64x64.MAX_64x64 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#202) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
ABDKMath64x64.fromInt(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#211-214) uses literals with too many digits:
	- require(bool)(x >= - 0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#212)
ABDKMath64x64.muli(int256,int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#322-348) uses literals with too many digits:
	- require(bool)(y >= - 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF && y <= 0x1000000000000000000000000000000000000000000000000) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#324-325)
ABDKMath64x64.muli(int256,int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#322-348) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x8000000000000000000000000000000000000000000000000000000000000000) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#339-340)
ABDKMath64x64.divi(int256,int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#397-417) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x80000000000000000000000000000000) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#411)
ABDKMath64x64.inv(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#463-468) uses literals with too many digits:
	- result = int256(0x100000000000000000000000000000000) / x (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#465)
ABDKMath64x64.gavg(int128,int128) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#489-495) uses literals with too many digits:
	- require(bool)(m < 0x4000000000000000000000000000000000000000000000000000000000000000) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#492-493)
ABDKMath64x64.pow(int256,uint256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#505-525) uses literals with too many digits:
	- require(bool)(absoluteResult <= 0x80000000000000000000000000000000) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#519)
ABDKMath64x64.sqrt(int128) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#533-536) uses literals with too many digits:
	- int128(sqrtu(uint256(x) << 64,0x10000000000000000)) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#535)
ABDKMath64x64.log_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#544-567) uses literals with too many digits:
	- xc >= 0x10000000000000000 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#549)
ABDKMath64x64.log_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#544-567) uses literals with too many digits:
	- xc >= 0x100000000 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#550)
ABDKMath64x64.log_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#544-567) uses literals with too many digits:
	- bit = 0x8000000000000000 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#559)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#589)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x < - 0x400000000000000000 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#591)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = 0x80000000000000000000000000000000 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#593)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x8000000000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#595)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x4000000000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#597)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x2000000000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#599)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x1000000000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#601)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x800000000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#603)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x400000000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#605)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x200000000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#607)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x100000000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#609)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x80000000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#611)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x40000000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#613)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x20000000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#615)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x10000000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#617)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x8000000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#619)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x4000000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#621)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x2000000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#623)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x1000000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#625)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x800000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#627)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x400000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#629)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x200000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#631)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x100000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#633)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#634)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x80000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#635)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#636)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x40000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#637)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#638)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x20000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#639)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#640)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x10000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#641)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#642)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x8000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#643)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#644)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x4000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#645)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#646)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x2000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#647)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#648)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x1000000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#649)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#650)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x800000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#651)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#652)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x400000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#653)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#654)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x200000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#655)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#656)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x100000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#657)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#658)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x80000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#659)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#660)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x40000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#661)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#662)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x20000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#663)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#664)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x10000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#665)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#666)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x8000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#667)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#668)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x4000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#669)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#670)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x2000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#671)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#672)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x1000000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#673)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#674)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x800000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#675)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#676)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x400000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#677)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x100000000002C5C85FDF477B662B26945 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#678)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x200000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#679)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x10000000000162E42FEFA3AE53369388C >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#680)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- x & 0x100000 > 0 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#681)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x100000000000B17217F7D1D351A389D40 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#682)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#684)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#686)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#688)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#690)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#692)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#694)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x1000000000000162E42FEFA39F02B772C >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#696)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#698)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#700)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x100000000000002C5C85FDF473DEA871F >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#702)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#704)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x100000000000000B17217F7D1CF79E949 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#706)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#708)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#710)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x100000000000000162E42FEFA39EF366F >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#712)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#714)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#716)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#718)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x1000000000000000162E42FEFA39EF358 >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#720)
ABDKMath64x64.exp_2(int256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#588-728) uses literals with too many digits:
	- result = result * 0x10000000000000000B17217F7D1CF79AB >> 128 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#722)
ABDKMath64x64.exp(int128) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#736-743) uses literals with too many digits:
	- require(bool)(x < 0x400000000000000000) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#737)
ABDKMath64x64.exp(int128) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#736-743) uses literals with too many digits:
	- x < - 0x400000000000000000 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#739)
ABDKMath64x64.divuu(uint256,uint256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#753-792) uses literals with too many digits:
	- xc >= 0x100000000 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#763)
ABDKMath64x64.powu(uint256,uint256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#802-855) uses literals with too many digits:
	- 0x80000000000000000000000000000000 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#803)
ABDKMath64x64.powu(uint256,uint256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#802-855) uses literals with too many digits:
	- xc >= 0x100000000000000000000000000000000 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#808)
ABDKMath64x64.powu(uint256,uint256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#802-855) uses literals with too many digits:
	- xc >= 0x10000000000000000 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#809)
ABDKMath64x64.powu(uint256,uint256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#802-855) uses literals with too many digits:
	- xc >= 0x100000000 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#810)
ABDKMath64x64.powu(uint256,uint256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#802-855) uses literals with too many digits:
	- result = 0x80000000000000000000000000000000 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#821)
ABDKMath64x64.powu(uint256,uint256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#802-855) uses literals with too many digits:
	- result >= 0x8000000000000000000000000000000000000000000000000000000000000000 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#829-830)
ABDKMath64x64.powu(uint256,uint256) (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#802-855) uses literals with too many digits:
	- x >= 0x8000000000000000000000000000000000000000000000000000000000000000 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#840-841)
ABDKMath64x64.slitherConstructorConstantVariables() (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#193-876) uses literals with too many digits:
	- MIN_64x64 = - 0x80000000000000000000000000000000 (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#197)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits[0m
INFO:Detectors:[92m
Assimilators.iAsmltr (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#41) is never used in Assimilators (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#38-128)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variables[0m
INFO:Detectors:[92m
LoihiStorage.frozen (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#184) should be constant
LoihiStorage.maxFee (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#189) should be constant
LoihiStorage.notEntered (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#187) should be constant
LoihiStorage.owner (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#186) should be constant
LoihiStorage.partitioned (loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol#183) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Slither:./loops/0x0c63adc339af1685d14e173937a6a436f9a00c79.sol analyzed (5 contracts with 46 detectors), 155 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0x0c63adc339af1685d14e173937a6a436f9a00c79.sol
Tool Runtime = 2.527941321997787 seconds
#############################################