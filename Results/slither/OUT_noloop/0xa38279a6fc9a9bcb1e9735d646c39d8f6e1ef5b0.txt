Compilation warnings/errors on ./noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol:
./noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol:32:32: Warning: The "extcodehash" instruction is not supported by the VM version "byzantium" you are currently compiling for. It will be interpreted as an invalid instruction on this VM.
        assembly { codehash := extcodehash(account) }
                               ^------------------^

INFO:Detectors:[93m
MoonStake.currentReward(address,uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#364-389) performs a multiplication on the result of a division:
	-secondsPercent = (20 + userList[msg.sender].percentage).mul(1000000000000000000).div(864000) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#369)
	-secPayout = secondsPercent.mul(block.timestamp - stakeList[msg.sender][_index].stakeTime) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#370)
MoonStake.currentReward(address,uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#364-389) performs a multiplication on the result of a division:
	-cropsAmount = stakeList[_user][_index].amount.mul(cropReserves).div(lpToken.totalSupply()) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#382)
	-cropsAmount.mul(185000000000000000000).div(50000000000000000000) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#384)
MoonStake.currentReward(address,uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#364-389) performs a multiplication on the result of a division:
	-cropsAmount = stakeList[_user][_index].amount.mul(cropReserves).div(lpToken.totalSupply()) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#382)
	-cropsAmount.mul(secPayout).div(50000000000000000000) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#387)
MoonStake.depositMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#413-455) performs a multiplication on the result of a division:
	-lpRequired = uint256(1000000000000000000).mul(moonETHToken.totalSupply()).div(moonReserves).div(10) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#426)
	-moonETHToken.safeTransferFrom(msg.sender,address(this),lpRequired.mul(_amount)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#428)
MoonStake.depositMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#413-455) performs a multiplication on the result of a division:
	-lpRequired = uint256(1000000000000000000).mul(moonETHToken.totalSupply()).div(moonReserves).div(10) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#426)
	-moonETHToken.transfer(owner,lpRequired.mul(_amount).div(20)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#429)
MoonStake.depositMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#413-455) performs a multiplication on the result of a division:
	-lpRequired = uint256(1000000000000000000).mul(moonETHToken.totalSupply()).div(moonReserves).div(10) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#426)
	-moonETHToken.transfer(dev1,lpRequired.mul(_amount).div(20)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#430)
MoonStake.depositMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#413-455) performs a multiplication on the result of a division:
	-lpRequired = uint256(1000000000000000000).mul(moonETHToken.totalSupply()).div(moonReserves).div(10) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#426)
	-moonETHToken.transfer(dev2,lpRequired.mul(_amount).div(100)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#431)
MoonStake.depositMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#413-455) performs a multiplication on the result of a division:
	-lpRequired = uint256(1000000000000000000).mul(moonETHToken.totalSupply()).div(moonReserves).div(10) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#426)
	-moonETHToken.transfer(dev3,lpRequired.mul(_amount).div(100)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#432)
MoonStake.depositMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#413-455) performs a multiplication on the result of a division:
	-finalPercentageSnapshot = userList[msg.sender].moondayEthStaked.mul(1000000000000000000).div(moonETHToken.totalSupply()) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#435)
	-constantSecond = reserveSnapshot0.mul(reserveSnapshot1).mul(finalPercentageSnapshot) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#438)
MoonStake.depositMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#413-455) performs a multiplication on the result of a division:
	-deltaPercentage = constantSecond.mul(1000000000000000000).div(constantFirst) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#443)
	-deltaPercentage.mul(userList[msg.sender].moondayEthStaked).div(1000000000000000000) > userList[msg.sender].moondayEthStaked (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#444)
MoonStake.depositMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#413-455) performs a multiplication on the result of a division:
	-deltaPercentage = constantSecond.mul(1000000000000000000).div(constantFirst) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#443)
	-totalFees = deltaPercentage.mul(userList[msg.sender].moondayEthStaked).div(1000000000000000000).sub(userList[msg.sender].moondayEthStaked) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#445)
MoonStake.depositMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#413-455) performs a multiplication on the result of a division:
	-lpRequired = uint256(1000000000000000000).mul(moonETHToken.totalSupply()).div(moonReserves).div(10) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#426)
	-userList[msg.sender].moondayEthStaked += lpRequired.mul(_amount).mul(88).div(100) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#449)
MoonStake.withdrawMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#460-486) performs a multiplication on the result of a division:
	-balance = userList[msg.sender].moondayEthStaked.mul(_amount).div(userList[msg.sender].percentage) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#463)
	-finalPercentageSnapshot = balance.mul(1000000000000000000).div(moonETHToken.totalSupply()) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#466)
MoonStake.withdrawMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#460-486) performs a multiplication on the result of a division:
	-constantFirst = userList[msg.sender].reserveConstant.mul(userList[msg.sender].percentageSnapshot.mul(_amount).div(userList[msg.sender].percentage)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#469)
MoonStake.withdrawMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#460-486) performs a multiplication on the result of a division:
	-finalPercentageSnapshot = balance.mul(1000000000000000000).div(moonETHToken.totalSupply()) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#466)
	-constantSecond = finalReserveSnapshot0.mul(finalReserveSnapshot1).mul(finalPercentageSnapshot) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#470)
MoonStake.withdrawMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#460-486) performs a multiplication on the result of a division:
	-deltaPercentage = constantSecond.mul(1000000000000000000).div(constantFirst) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#472)
	-deltaPercentage.mul(balance).div(1000000000000000000) > balance (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#475)
	-balance = userList[msg.sender].moondayEthStaked.mul(_amount).div(userList[msg.sender].percentage) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#463)
MoonStake.withdrawMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#460-486) performs a multiplication on the result of a division:
	-deltaPercentage = constantSecond.mul(1000000000000000000).div(constantFirst) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#472)
	-totalFees = deltaPercentage.mul(balance).div(1000000000000000000).sub(balance) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#476)
	-balance = userList[msg.sender].moondayEthStaked.mul(_amount).div(userList[msg.sender].percentage) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#463)
MoonStake.payoutBurns() (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#510-530) performs a multiplication on the result of a division:
	-deltaPercentage = constantSecond.mul(1000000000000000000).div(constantFirst) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#520)
	-deltaPercentage.mul(balance).div(1000000000000000000) > balance (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#521)
MoonStake.payoutBurns() (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#510-530) performs a multiplication on the result of a division:
	-deltaPercentage = constantSecond.mul(1000000000000000000).div(constantFirst) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#520)
	-burnList[burnCount].totalFees += deltaPercentage.mul(balance).div(1000000000000000000).sub(balance) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#522)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
INFO:Detectors:[93m
Reentrancy in MoonStake.claim(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#492-500):
	External calls:
	- IERC20Custom(crops).farmMint(msg.sender,reward) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#496)
	State variables written after the call(s):
	- stakeList[msg.sender][_index].claimed += reward (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#497)
Reentrancy in MoonStake.claimBurns(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#532-539):
	External calls:
	- moonETHToken.transfer(msg.sender,divs) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#537)
	State variables written after the call(s):
	- userList[msg.sender].burnStake[_week] = 0 (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#538)
Reentrancy in MoonStake.depositMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#413-455):
	External calls:
	- moonETHToken.safeTransferFrom(msg.sender,address(this),lpRequired.mul(_amount)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#428)
	- moonETHToken.transfer(owner,lpRequired.mul(_amount).div(20)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#429)
	- moonETHToken.transfer(dev1,lpRequired.mul(_amount).div(20)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#430)
	- moonETHToken.transfer(dev2,lpRequired.mul(_amount).div(100)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#431)
	- moonETHToken.transfer(dev3,lpRequired.mul(_amount).div(100)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#432)
	State variables written after the call(s):
	- userList[msg.sender].moondayEthStaked += lpRequired.mul(_amount).mul(88).div(100) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#449)
	- userList[msg.sender].moondayEthStaked = userList[msg.sender].moondayEthStaked.sub(totalFees) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#450)
	- userList[msg.sender].percentage += _amount (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#451)
	- userList[msg.sender].percentageSnapshot = userList[msg.sender].moondayEthStaked.mul(1000000000000000000).div(moonETHToken.totalSupply()) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#453)
	- userList[msg.sender].reserveConstant = reserveSnapshot0.mul(reserveSnapshot1) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#454)
Reentrancy in MoonStake.withdrawMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#460-486):
	External calls:
	- moonETHToken.transfer(msg.sender,lpReturn) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#481)
	State variables written after the call(s):
	- userList[msg.sender].moondayEthStaked -= userList[msg.sender].moondayEthStaked.mul(_amount).div(userList[msg.sender].percentage) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#482)
	- userList[msg.sender].percentage -= _amount (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#483)
	- userList[msg.sender].percentageSnapshot = userList[msg.sender].moondayEthStaked.mul(1000000000000000000).div(moonETHToken.totalSupply()) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#484)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
MoonStake.stake(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#394-408) ignores return value by lpToken.transfer(owner,_amount.mul(23).div(100)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#398)
MoonStake.stake(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#394-408) ignores return value by lpToken.transfer(dev1,_amount.div(20)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#399)
MoonStake.stake(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#394-408) ignores return value by lpToken.transfer(dev2,_amount.div(100)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#400)
MoonStake.stake(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#394-408) ignores return value by lpToken.transfer(dev3,_amount.div(100)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#401)
MoonStake.depositMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#413-455) ignores return value by moonETHToken.transfer(owner,lpRequired.mul(_amount).div(20)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#429)
MoonStake.depositMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#413-455) ignores return value by moonETHToken.transfer(dev1,lpRequired.mul(_amount).div(20)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#430)
MoonStake.depositMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#413-455) ignores return value by moonETHToken.transfer(dev2,lpRequired.mul(_amount).div(100)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#431)
MoonStake.depositMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#413-455) ignores return value by moonETHToken.transfer(dev3,lpRequired.mul(_amount).div(100)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#432)
MoonStake.withdrawMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#460-486) ignores return value by moonETHToken.transfer(msg.sender,lpReturn) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#481)
MoonStake.burnMining(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#502-508) ignores return value by IERC20Custom(crops).transferFrom(msg.sender,address(this),_amount.mul(1000000000000000000)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#504)
MoonStake.claimBurns(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#532-539) ignores return value by moonETHToken.transfer(msg.sender,divs) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#537)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return[0m
INFO:Detectors:[92m
Reentrancy in MoonStake.burnMining(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#502-508):
	External calls:
	- IERC20Custom(crops).transferFrom(msg.sender,address(this),_amount.mul(1000000000000000000)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#504)
	- IERC20Custom(crops).burn(_amount.mul(1000000000000000000)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#505)
	State variables written after the call(s):
	- burnList[burnCount].totalBurn += _amount.mul(1000000000000000000) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#506)
	- userList[msg.sender].burnStake[burnCount] += _amount.mul(1000000000000000000) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#507)
Reentrancy in MoonStake.stake(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#394-408):
	External calls:
	- lpToken.safeTransferFrom(msg.sender,address(this),_amount) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#397)
	- lpToken.transfer(owner,_amount.mul(23).div(100)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#398)
	- lpToken.transfer(dev1,_amount.div(20)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#399)
	- lpToken.transfer(dev2,_amount.div(100)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#400)
	- lpToken.transfer(dev3,_amount.div(100)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#401)
	State variables written after the call(s):
	- stakeCount[msg.sender] ++ (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#405)
	- stakeList[msg.sender][stakeCount[msg.sender]].amount = _amount (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#403)
	- stakeList[msg.sender][stakeCount[msg.sender]].stakeTime = block.timestamp (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#404)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Reentrancy in MoonStake.claim(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#492-500):
	External calls:
	- IERC20Custom(crops).farmMint(msg.sender,reward) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#496)
	Event emitted after the call(s):
	- RewardPaid(msg.sender,reward) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#498)
Reentrancy in MoonStake.stake(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#394-408):
	External calls:
	- lpToken.safeTransferFrom(msg.sender,address(this),_amount) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#397)
	- lpToken.transfer(owner,_amount.mul(23).div(100)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#398)
	- lpToken.transfer(dev1,_amount.div(20)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#399)
	- lpToken.transfer(dev2,_amount.div(100)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#400)
	- lpToken.transfer(dev3,_amount.div(100)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#401)
	Event emitted after the call(s):
	- Staked(msg.sender,_amount,stakeCount[msg.sender] - 1) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#407)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
INFO:Detectors:[92m
MoonStake.currentReward(address,uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#364-389) uses timestamp for comparisons
	Dangerous comparisons:
	- secPayout > 185000000000000000000 (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#383)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp[0m
INFO:Detectors:[92m
Address.isContract(address) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#21-34) uses assembly
	- INLINE ASM (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#32-33)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#7) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Low level call in Address.sendValue(address,uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#64-70):
	- (success) = recipient.call.value(amount)(new bytes(0)) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#68)
Low level call in SafeERC20.callOptionalReturn(IUniswapV2Pair,bytes) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#178-197):
	- (success,returndata) = address(token).call(data) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#190)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Function IUniswapV2Pair.DOMAIN_SEPARATOR() (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#216) is not in mixedCase
Function IUniswapV2Pair.PERMIT_TYPEHASH() (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#217) is not in mixedCase
Function IUniswapV2Pair.MINIMUM_LIQUIDITY() (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#234) is not in mixedCase
Parameter MoonStake.getBurnStake(address,uint256)._user (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#344) is not in mixedCase
Parameter MoonStake.getBurnStake(address,uint256)._week (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#344) is not in mixedCase
Parameter MoonStake.setLPTokens(address,address,address,address)._lpToken (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#352) is not in mixedCase
Parameter MoonStake.setLPTokens(address,address,address,address)._moonEthToken (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#352) is not in mixedCase
Parameter MoonStake.setLPTokens(address,address,address,address)._crops (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#352) is not in mixedCase
Parameter MoonStake.setLPTokens(address,address,address,address)._moonday (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#352) is not in mixedCase
Parameter MoonStake.currentReward(address,uint256)._user (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#364) is not in mixedCase
Parameter MoonStake.currentReward(address,uint256)._index (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#364) is not in mixedCase
Parameter MoonStake.stake(uint256)._amount (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#394) is not in mixedCase
Parameter MoonStake.depositMoondayETH(uint256)._amount (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#413) is not in mixedCase
Parameter MoonStake.withdrawMoondayETH(uint256)._amount (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#460) is not in mixedCase
Parameter MoonStake.claim(uint256)._index (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#492) is not in mixedCase
Parameter MoonStake.burnMining(uint256)._amount (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#502) is not in mixedCase
Parameter MoonStake.claimBurns(uint256)._week (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#532) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
getBurnStake(address,uint256) should be declared external:
	- MoonStake.getBurnStake(address,uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#344-346)
setBurnLock() should be declared external:
	- MoonStake.setBurnLock() (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#348-350)
setLPTokens(address,address,address,address) should be declared external:
	- MoonStake.setLPTokens(address,address,address,address) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#352-357)
stake(uint256) should be declared external:
	- MoonStake.stake(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#394-408)
depositMoondayETH(uint256) should be declared external:
	- MoonStake.depositMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#413-455)
withdrawMoondayETH(uint256) should be declared external:
	- MoonStake.withdrawMoondayETH(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#460-486)
claim(uint256) should be declared external:
	- MoonStake.claim(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#492-500)
burnMining(uint256) should be declared external:
	- MoonStake.burnMining(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#502-508)
payoutBurns() should be declared external:
	- MoonStake.payoutBurns() (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#510-530)
claimBurns(uint256) should be declared external:
	- MoonStake.claimBurns(uint256) (noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol#532-539)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:./noloops/0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol analyzed (6 contracts with 46 detectors), 71 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0xa38279a6fc9a9bcb1e9735d646c39d8f6e1ef5b0.sol
Tool Runtime = 1.2504279339991626 seconds
#############################################