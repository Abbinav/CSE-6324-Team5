Compilation warnings/errors on ./noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol:
./noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol:331:10: Warning: Unused local variable.
        (uint amountToken, uint amountETH, uint liquidity) = ...
         ^--------------^
./noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol:331:28: Warning: Unused local variable.
        (uint amountToken, uint amountETH, uint liquidity) = uniswapV2.addLi ...
                           ^------------^
./noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol:443:14: Warning: Unused local variable.
            (uint amountToken, uint amountETH, uint liquidity) = ...
             ^--------------^
./noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol:443:32: Warning: Unused local variable.
            (uint amountToken, uint amountETH, uint liquidity) = uniswapV2.addLi ...
                               ^------------^
./noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol:451:14: Warning: Unused local variable.
            (uint amountToken, uint amountETH, uint liquidity) = ...
             ^--------------^
./noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol:451:32: Warning: Unused local variable.
            (uint amountToken, uint amountETH, uint liquidity) = uniswapV2.addLi ...
                               ^------------^

INFO:Detectors:[93m
LiquidityPool.calculateTokensOwed(address) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#467-487) performs a multiplication on the result of a division:
	-daysSinceLast = block.timestamp.sub(thisStaker.lastTimestamp) / 86400 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#472)
	-tokens = mulDiv(daysSinceLast.mul(rewardAdjustmentFactor),thisStaker.poolTokenBalance,uniswapPair.totalSupply()) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#474)
LiquidityPool.calculateTokensOwed(address) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#467-487) performs a multiplication on the result of a division:
	-totalDaysStaked = block.timestamp.sub(thisStaker.startTimestamp) / 86400 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#471)
	-tokens * totalDaysStaked (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#481)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#564-584) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#571)
	-r *= 2 - z * r (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#575)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#564-584) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#571)
	-r *= 2 - z * r (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#576)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#564-584) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#571)
	-r *= 2 - z * r (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#577)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#564-584) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#571)
	-r *= 2 - z * r (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#578)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#564-584) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#571)
	-r *= 2 - z * r (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#579)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#564-584) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#571)
	-r *= 2 - z * r (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#580)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#564-584) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#571)
	-r *= 2 - z * r (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#581)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#564-584) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#571)
	-r *= 2 - z * r (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#582)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#564-584) performs a multiplication on the result of a division:
	-l /= pow2 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#572)
	-l * r (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#583)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
INFO:Detectors:[93m
IERC20 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#174-191) has incorrect ERC20 function interface:IERC20.approve(address,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#184)
IERC20 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#174-191) has incorrect ERC20 function interface:IERC20.transferFrom(address,address,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#186)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-erc20-interface[0m
INFO:Detectors:[93m
LiquidityPool.stakeLiquidityTokens(uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#291-326) uses a dangerous strict equality:
	- require(bool)(previousBalance.add(numPoolTokensToStake) == postBalance) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#302)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[93m
Contract locking ether found in :
	Contract LiquidityPool (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#229-596) has payable functions:
	 - LiquidityPool.fallback() (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#593)
	 - LiquidityPool.receive() (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#594)
	But does not have a function to withdraw the ether
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#contracts-that-lock-ether[0m
INFO:Detectors:[93m
Reentrancy in LiquidityPool.reinvestRewards(bool,uint256,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#435-454):
	External calls:
	- minter.liquidityRewards(address(this),_numTokensToReinvest) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#441)
	- secondToken.transferFrom(msg.sender,address(this),_numSecondTokensToInvest) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#442)
	- (amountToken,amountETH,liquidity) = uniswapV2.addLiquidity(address(pampToken),address(secondToken),_numTokensToReinvest,_numSecondTokensToInvest,0,0,address(this),now + 86400) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#443)
	State variables written after the call(s):
	- thisStaker.poolTokenBalance = thisStaker.poolTokenBalance.add(liquidity) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#444)
Reentrancy in LiquidityPool.reinvestRewards(bool,uint256,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#435-454):
	External calls:
	- minter.liquidityRewards(address(this),numTokensToReinvest) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#449)
	- secondToken.transferFrom(msg.sender,address(this),_numSecondTokensToInvest) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#450)
	- (amountToken,amountETH,liquidity) = uniswapV2.addLiquidity(address(pampToken),address(secondToken),numTokensToReinvest,_numSecondTokensToInvest,0,0,address(this),now + 86400) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#451)
	State variables written after the call(s):
	- thisStaker.poolTokenBalance = thisStaker.poolTokenBalance.add(liquidity_scope_2) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#452)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
LiquidityPool.reinvestRewards(bool,uint256,uint256).liquidity_scope_2 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#451) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables[0m
INFO:Detectors:[93m
LiquidityPool.withdrawLiquidityTokens(uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#377-404) ignores return value by uniswapPair.transfer(msg.sender,numPoolTokensToWithdraw) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#403)
LiquidityPool.emergencyWithdrawLiquidityTokens() (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#457-465) ignores return value by uniswapPair.transfer(msg.sender,poolTokenBalance) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#464)
LiquidityPool.transferPampTokens(uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#542-544) ignores return value by pampToken.transfer(msg.sender,_numTokens) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#543)
LiquidityPool.transferSecondTokens(uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#546-548) ignores return value by secondToken.transfer(msg.sender,_numTokens) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#547)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return[0m
INFO:Detectors:[92m
LiquidityPool.receive() (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#594) (function) shadows built-in symbol"
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#builtin-symbol-shadowing[0m
INFO:Detectors:[92m
Reentrancy in LiquidityPool.addLiquidity(uint256,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#328-354):
	External calls:
	- pampToken.transferFrom(msg.sender,address(this),_numTokensToReinvest) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#329)
	- secondToken.transferFrom(msg.sender,address(this),_numSecondTokensToInvest) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#330)
	- (amountToken,amountETH,liquidity) = uniswapV2.addLiquidity(address(pampToken),address(secondToken),_numTokensToReinvest,_numSecondTokensToInvest,0,0,address(this),now + 86400) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#331)
	State variables written after the call(s):
	- thisStaker.startTimestamp = block.timestamp (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#336)
	- thisStaker.lastTimestamp = block.timestamp (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#337)
	- thisStaker.hasMigrated = true (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#338)
	- thisStaker.startTimestamp = block.timestamp (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#346)
	- thisStaker.startTimestamp = thisStaker.startTimestamp.add(percent) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#348)
	- thisStaker.poolTokenBalance = thisStaker.poolTokenBalance.add(liquidity) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#353)
Reentrancy in LiquidityPool.stakeLiquidityTokens(uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#291-326):
	External calls:
	- uniswapPair.transferFrom(msg.sender,address(this),numPoolTokensToStake) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#298)
	State variables written after the call(s):
	- thisStaker.startTimestamp = block.timestamp (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#307)
	- thisStaker.lastTimestamp = block.timestamp (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#308)
	- thisStaker.hasMigrated = true (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#309)
	- thisStaker.startTimestamp = block.timestamp (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#317)
	- thisStaker.startTimestamp = thisStaker.startTimestamp.add(percent) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#319)
	- thisStaker.poolTokenBalance = thisStaker.poolTokenBalance.add(numPoolTokensToStake) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#324)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
LiquidityPool.stakeLiquidityTokens(uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#291-326) uses timestamp for comparisons
	Dangerous comparisons:
	- assert(bool)(percent > 0) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#312)
	- percent > 1 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#313)
	- percent.add(thisStaker.startTimestamp) > block.timestamp (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#316)
LiquidityPool.addLiquidity(uint256,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#328-354) uses timestamp for comparisons
	Dangerous comparisons:
	- assert(bool)(percent > 0) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#341)
	- percent > 1 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#342)
	- percent.add(thisStaker.startTimestamp) > block.timestamp (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#345)
LiquidityPool.withdrawLiquidityTokens(uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#377-404) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(thisStaker.hasMigrated,You must migrate) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#383)
	- require(bool,string)(thisStaker.poolTokenBalance >= numPoolTokensToWithdraw,Pool token balance too low) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#385)
	- require(bool)(daysStaked >= minStakeDurationDays) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#389)
LiquidityPool.withdrawRewards() (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#406-423) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(daysStaked >= minStakeDurationDays) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#412)
LiquidityPool.calculateTokensOwed(address) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#467-487) uses timestamp for comparisons
	Dangerous comparisons:
	- totalDaysStaked > exponentialDaysMax (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#476)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#564-584) uses timestamp for comparisons
	Dangerous comparisons:
	- mm > l (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#568)
LiquidityPool.fullMul(uint256,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#586-591) uses timestamp for comparisons
	Dangerous comparisons:
	- mm < l (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#590)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#11) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Struct LiquidityPool.staker (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#257-263) is not in CapWords
Parameter LiquidityPool.addLiquidity(uint256,uint256)._numTokensToReinvest (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#328) is not in mixedCase
Parameter LiquidityPool.addLiquidity(uint256,uint256)._numSecondTokensToInvest (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#328) is not in mixedCase
Parameter LiquidityPool.reinvestRewards(bool,uint256,uint256)._numTokensToReinvest (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#435) is not in mixedCase
Parameter LiquidityPool.reinvestRewards(bool,uint256,uint256)._numSecondTokensToInvest (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#435) is not in mixedCase
Parameter LiquidityPool.updateUniswapPair(address)._uniswapPair (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#496) is not in mixedCase
Parameter LiquidityPool.updateUinswapV2(address)._uniswapv2 (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#500) is not in mixedCase
Parameter LiquidityPool.updatePampToken(address)._pampToken (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#505) is not in mixedCase
Parameter LiquidityPool.updateMinter(address)._minter (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#509) is not in mixedCase
Parameter LiquidityPool.updatePreviousLiquidityContract(address)._previousContract (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#513) is not in mixedCase
Parameter LiquidityPool.updateMinStakeDurationDays(uint256)._minStakeDurationDays (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#517) is not in mixedCase
Parameter LiquidityPool.updateRewardAdjustmentFactor(uint256)._rewardAdjustmentFactor (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#521) is not in mixedCase
Parameter LiquidityPool.updateStakingEnabled(bool)._stakingEnbaled (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#525) is not in mixedCase
Parameter LiquidityPool.updateExponentialRewardsEnabled(bool)._exponentialRewards (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#529) is not in mixedCase
Parameter LiquidityPool.updateExponentialDaysMax(uint256)._exponentialDaysMax (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#533) is not in mixedCase
Parameter LiquidityPool.updateSecondToken(address)._secondToken (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#537) is not in mixedCase
Parameter LiquidityPool.transferPampTokens(uint256)._numTokens (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#542) is not in mixedCase
Parameter LiquidityPool.transferSecondTokens(uint256)._numTokens (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#546) is not in mixedCase
Parameter LiquidityPool.getStaker(address)._staker (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#559) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
LiquidityPool.constructor() (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#274-288) uses literals with too many digits:
	- pampToken.approve(address(uniswapV2),100000000E18) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#286)
LiquidityPool.constructor() (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#274-288) uses literals with too many digits:
	- secondToken.approve(address(uniswapV2),100000000E18) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#287)
LiquidityPool.stakeLiquidityTokens(uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#291-326) uses literals with too many digits:
	- percent = mulDiv(1000000,numPoolTokensToStake,thisStaker.poolTokenBalance) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#311)
LiquidityPool.addLiquidity(uint256,uint256) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#328-354) uses literals with too many digits:
	- percent = mulDiv(1000000,liquidity,thisStaker.poolTokenBalance) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#340)
LiquidityPool.updateUinswapV2(address) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#500-503) uses literals with too many digits:
	- pampToken.approve(address(uniswapV2),100000000E18) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#502)
LiquidityPool.updateSecondToken(address) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#537-540) uses literals with too many digits:
	- secondToken.approve(address(uniswapV2),100000000E18) (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#539)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits[0m
INFO:Detectors:[92m
calculateMonthlyYield() should be declared external:
	- LiquidityPool.calculateMonthlyYield() (noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol#489-494)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:./noloops/0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol analyzed (6 contracts with 46 detectors), 60 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0xe5ea161e0a297daadbf330abcdf15fff0d62b4b4.sol
Tool Runtime = 1.4128506800007017 seconds
#############################################