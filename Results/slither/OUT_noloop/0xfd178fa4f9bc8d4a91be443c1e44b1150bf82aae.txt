Compilation warnings/errors on ./noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol:
./noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol:330:10: Warning: Unused local variable.
        (uint amountToken, uint amountETH, uint liquidity) = ...
         ^--------------^
./noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol:330:28: Warning: Unused local variable.
        (uint amountToken, uint amountETH, uint liquidity) = uniswapV2.addLi ...
                           ^------------^
./noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol:442:14: Warning: Unused local variable.
            (uint amountToken, uint amountETH, uint liquidity) = ...
             ^--------------^
./noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol:442:32: Warning: Unused local variable.
            (uint amountToken, uint amountETH, uint liquidity) = uniswapV2.addLi ...
                               ^------------^
./noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol:450:14: Warning: Unused local variable.
            (uint amountToken, uint amountETH, uint liquidity) = ...
             ^--------------^
./noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol:450:32: Warning: Unused local variable.
            (uint amountToken, uint amountETH, uint liquidity) = uniswapV2.addLi ...
                               ^------------^

INFO:Detectors:[93m
LiquidityPool.calculateTokensOwed(address) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#466-486) performs a multiplication on the result of a division:
	-daysSinceLast = block.timestamp.sub(thisStaker.lastTimestamp) / 86400 (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#471)
	-tokens = mulDiv(daysSinceLast.mul(rewardAdjustmentFactor),thisStaker.poolTokenBalance,uniswapPair.totalSupply()) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#473)
LiquidityPool.calculateTokensOwed(address) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#466-486) performs a multiplication on the result of a division:
	-totalDaysStaked = block.timestamp.sub(thisStaker.startTimestamp) / 86400 (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#470)
	-tokens * totalDaysStaked (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#480)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#563-583) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#570)
	-r *= 2 - z * r (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#574)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#563-583) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#570)
	-r *= 2 - z * r (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#575)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#563-583) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#570)
	-r *= 2 - z * r (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#576)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#563-583) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#570)
	-r *= 2 - z * r (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#577)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#563-583) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#570)
	-r *= 2 - z * r (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#578)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#563-583) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#570)
	-r *= 2 - z * r (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#579)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#563-583) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#570)
	-r *= 2 - z * r (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#580)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#563-583) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#570)
	-r *= 2 - z * r (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#581)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#563-583) performs a multiplication on the result of a division:
	-l /= pow2 (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#571)
	-l * r (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#582)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
INFO:Detectors:[93m
LiquidityPool.stakeLiquidityTokens(uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#290-325) uses a dangerous strict equality:
	- require(bool)(previousBalance.add(numPoolTokensToStake) == postBalance) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#301)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[93m
Contract locking ether found in :
	Contract LiquidityPool (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#229-595) has payable functions:
	 - LiquidityPool.fallback() (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#592)
	 - LiquidityPool.receive() (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#593)
	But does not have a function to withdraw the ether
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#contracts-that-lock-ether[0m
INFO:Detectors:[93m
Reentrancy in LiquidityPool.reinvestRewards(bool,uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#434-453):
	External calls:
	- minter.liquidityRewards(address(this),_numTokensToReinvest) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#440)
	- secondToken.transferFrom(msg.sender,address(this),_numSecondTokensToInvest) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#441)
	- (amountToken,amountETH,liquidity) = uniswapV2.addLiquidity(address(pampToken),address(secondToken),_numTokensToReinvest,_numSecondTokensToInvest,0,0,address(this),now + 86400) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#442)
	State variables written after the call(s):
	- thisStaker.poolTokenBalance = thisStaker.poolTokenBalance.add(liquidity) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#443)
Reentrancy in LiquidityPool.reinvestRewards(bool,uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#434-453):
	External calls:
	- minter.liquidityRewards(address(this),numTokensToReinvest) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#448)
	- secondToken.transferFrom(msg.sender,address(this),_numSecondTokensToInvest) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#449)
	- (amountToken,amountETH,liquidity) = uniswapV2.addLiquidity(address(pampToken),address(secondToken),numTokensToReinvest,_numSecondTokensToInvest,0,0,address(this),now + 86400) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#450)
	State variables written after the call(s):
	- thisStaker.poolTokenBalance = thisStaker.poolTokenBalance.add(liquidity_scope_2) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#451)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
LiquidityPool.reinvestRewards(bool,uint256,uint256).liquidity_scope_2 (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#450) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables[0m
INFO:Detectors:[93m
LiquidityPool.constructor() (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#274-287) ignores return value by pampToken.approve(address(uniswapV2),100000000E18) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#286)
LiquidityPool.stakeLiquidityTokens(uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#290-325) ignores return value by uniswapPair.transferFrom(msg.sender,address(this),numPoolTokensToStake) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#297)
LiquidityPool.addLiquidity(uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#327-353) ignores return value by pampToken.transferFrom(msg.sender,address(this),_numTokensToReinvest) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#328)
LiquidityPool.addLiquidity(uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#327-353) ignores return value by secondToken.transferFrom(msg.sender,address(this),_numSecondTokensToInvest) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#329)
LiquidityPool.withdrawLiquidityTokens(uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#376-403) ignores return value by uniswapPair.transfer(msg.sender,numPoolTokensToWithdraw) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#402)
LiquidityPool.reinvestRewards(bool,uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#434-453) ignores return value by secondToken.transferFrom(msg.sender,address(this),_numSecondTokensToInvest) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#441)
LiquidityPool.reinvestRewards(bool,uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#434-453) ignores return value by secondToken.transferFrom(msg.sender,address(this),_numSecondTokensToInvest) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#449)
LiquidityPool.emergencyWithdrawLiquidityTokens() (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#456-464) ignores return value by uniswapPair.transfer(msg.sender,poolTokenBalance) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#463)
LiquidityPool.updateUinswapV2(address) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#499-502) ignores return value by pampToken.approve(address(uniswapV2),100000000E18) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#501)
LiquidityPool.updateSecondToken(address) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#536-539) ignores return value by secondToken.approve(address(uniswapV2),100000000E18) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#538)
LiquidityPool.transferPampTokens(uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#541-543) ignores return value by pampToken.transfer(msg.sender,_numTokens) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#542)
LiquidityPool.transferSecondTokens(uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#545-547) ignores return value by secondToken.transfer(msg.sender,_numTokens) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#546)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return[0m
INFO:Detectors:[92m
LiquidityPool.receive() (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#593) (function) shadows built-in symbol"
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#builtin-symbol-shadowing[0m
INFO:Detectors:[92m
Reentrancy in LiquidityPool.addLiquidity(uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#327-353):
	External calls:
	- pampToken.transferFrom(msg.sender,address(this),_numTokensToReinvest) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#328)
	- secondToken.transferFrom(msg.sender,address(this),_numSecondTokensToInvest) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#329)
	- (amountToken,amountETH,liquidity) = uniswapV2.addLiquidity(address(pampToken),address(secondToken),_numTokensToReinvest,_numSecondTokensToInvest,0,0,address(this),now + 86400) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#330)
	State variables written after the call(s):
	- thisStaker.startTimestamp = block.timestamp (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#335)
	- thisStaker.lastTimestamp = block.timestamp (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#336)
	- thisStaker.hasMigrated = true (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#337)
	- thisStaker.startTimestamp = block.timestamp (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#345)
	- thisStaker.startTimestamp = thisStaker.startTimestamp.add(percent) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#347)
	- thisStaker.poolTokenBalance = thisStaker.poolTokenBalance.add(liquidity) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#352)
Reentrancy in LiquidityPool.stakeLiquidityTokens(uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#290-325):
	External calls:
	- uniswapPair.transferFrom(msg.sender,address(this),numPoolTokensToStake) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#297)
	State variables written after the call(s):
	- thisStaker.startTimestamp = block.timestamp (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#306)
	- thisStaker.lastTimestamp = block.timestamp (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#307)
	- thisStaker.hasMigrated = true (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#308)
	- thisStaker.startTimestamp = block.timestamp (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#316)
	- thisStaker.startTimestamp = thisStaker.startTimestamp.add(percent) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#318)
	- thisStaker.poolTokenBalance = thisStaker.poolTokenBalance.add(numPoolTokensToStake) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#323)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
LiquidityPool.stakeLiquidityTokens(uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#290-325) uses timestamp for comparisons
	Dangerous comparisons:
	- assert(bool)(percent > 0) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#311)
	- percent > 1 (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#312)
	- percent.add(thisStaker.startTimestamp) > block.timestamp (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#315)
LiquidityPool.addLiquidity(uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#327-353) uses timestamp for comparisons
	Dangerous comparisons:
	- assert(bool)(percent > 0) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#340)
	- percent > 1 (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#341)
	- percent.add(thisStaker.startTimestamp) > block.timestamp (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#344)
LiquidityPool.withdrawLiquidityTokens(uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#376-403) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(thisStaker.hasMigrated,You must migrate) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#382)
	- require(bool,string)(thisStaker.poolTokenBalance >= numPoolTokensToWithdraw,Pool token balance too low) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#384)
	- require(bool)(daysStaked >= minStakeDurationDays) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#388)
LiquidityPool.withdrawRewards() (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#405-422) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(daysStaked >= minStakeDurationDays) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#411)
LiquidityPool.calculateTokensOwed(address) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#466-486) uses timestamp for comparisons
	Dangerous comparisons:
	- totalDaysStaked > exponentialDaysMax (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#475)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#563-583) uses timestamp for comparisons
	Dangerous comparisons:
	- mm > l (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#567)
LiquidityPool.fullMul(uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#585-590) uses timestamp for comparisons
	Dangerous comparisons:
	- mm < l (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#589)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#11) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Struct LiquidityPool.staker (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#257-263) is not in CapWords
Parameter LiquidityPool.addLiquidity(uint256,uint256)._numTokensToReinvest (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#327) is not in mixedCase
Parameter LiquidityPool.addLiquidity(uint256,uint256)._numSecondTokensToInvest (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#327) is not in mixedCase
Parameter LiquidityPool.reinvestRewards(bool,uint256,uint256)._numTokensToReinvest (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#434) is not in mixedCase
Parameter LiquidityPool.reinvestRewards(bool,uint256,uint256)._numSecondTokensToInvest (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#434) is not in mixedCase
Parameter LiquidityPool.updateUniswapPair(address)._uniswapPair (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#495) is not in mixedCase
Parameter LiquidityPool.updateUinswapV2(address)._uniswapv2 (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#499) is not in mixedCase
Parameter LiquidityPool.updatePampToken(address)._pampToken (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#504) is not in mixedCase
Parameter LiquidityPool.updateMinter(address)._minter (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#508) is not in mixedCase
Parameter LiquidityPool.updatePreviousLiquidityContract(address)._previousContract (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#512) is not in mixedCase
Parameter LiquidityPool.updateMinStakeDurationDays(uint256)._minStakeDurationDays (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#516) is not in mixedCase
Parameter LiquidityPool.updateRewardAdjustmentFactor(uint256)._rewardAdjustmentFactor (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#520) is not in mixedCase
Parameter LiquidityPool.updateStakingEnabled(bool)._stakingEnbaled (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#524) is not in mixedCase
Parameter LiquidityPool.updateExponentialRewardsEnabled(bool)._exponentialRewards (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#528) is not in mixedCase
Parameter LiquidityPool.updateExponentialDaysMax(uint256)._exponentialDaysMax (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#532) is not in mixedCase
Parameter LiquidityPool.updateSecondToken(address)._secondToken (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#536) is not in mixedCase
Parameter LiquidityPool.transferPampTokens(uint256)._numTokens (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#541) is not in mixedCase
Parameter LiquidityPool.transferSecondTokens(uint256)._numTokens (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#545) is not in mixedCase
Parameter LiquidityPool.getStaker(address)._staker (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#558) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
LiquidityPool.constructor() (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#274-287) uses literals with too many digits:
	- pampToken.approve(address(uniswapV2),100000000E18) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#286)
LiquidityPool.stakeLiquidityTokens(uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#290-325) uses literals with too many digits:
	- percent = mulDiv(1000000,numPoolTokensToStake,thisStaker.poolTokenBalance) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#310)
LiquidityPool.addLiquidity(uint256,uint256) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#327-353) uses literals with too many digits:
	- percent = mulDiv(1000000,liquidity,thisStaker.poolTokenBalance) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#339)
LiquidityPool.updateUinswapV2(address) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#499-502) uses literals with too many digits:
	- pampToken.approve(address(uniswapV2),100000000E18) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#501)
LiquidityPool.updateSecondToken(address) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#536-539) uses literals with too many digits:
	- secondToken.approve(address(uniswapV2),100000000E18) (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#538)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits[0m
INFO:Detectors:[92m
calculateMonthlyYield() should be declared external:
	- LiquidityPool.calculateMonthlyYield() (noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol#488-493)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:./noloops/0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol analyzed (6 contracts with 46 detectors), 65 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0xfd178fa4f9bc8d4a91be443c1e44b1150bf82aae.sol
Tool Runtime = 1.3871669789987209 seconds
#############################################