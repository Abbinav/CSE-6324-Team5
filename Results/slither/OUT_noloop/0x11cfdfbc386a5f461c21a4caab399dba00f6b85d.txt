Compilation warnings/errors on ./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:354:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:3154:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:3338:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:3636:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:3652:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:3644:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4070:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4100:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4090:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, int y) internal pure returns (int z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4112:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4080:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4106:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4070:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4100:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4090:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, int y) internal pure returns (int z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4112:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4080:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4106:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4070:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4100:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4090:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, int y) internal pure returns (int z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4112:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4080:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4106:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:322:27: Warning: The "shr" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                          ^-----------------------^
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:322:18: Warning: The "shl" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                 ^---------------------------------^
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:1266:27: Warning: The "shr" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                          ^-----------------------^
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:1266:18: Warning: The "shl" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                 ^---------------------------------^
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:3404:27: Warning: The "extcodehash" instruction is not supported by the VM version "byzantium" you are currently compiling for. It will be interpreted as an invalid instruction on this VM.
        assembly { tag := extcodehash(usr) }
                          ^--------------^
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4040:27: Warning: The "shr" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                          ^-----------------------^
./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol:4040:18: Warning: The "shl" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                 ^---------------------------------^

INFO:Detectors:[91m
ETHJoin.exit(address,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2960-2968) sends eth to arbitrary user
	Dangerous calls:
	- usr.transfer(wad) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2966)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations[0m
INFO:Detectors:[91m
DSPauseProxy.exec(address,bytes) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3480-3494) uses delegatecall to a input-controlled function id
	- (ok,out) = usr.delegatecall(fax) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3490)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#controlled-delegatecall[0m
INFO:Detectors:[93m
Jug.file(bytes32,bytes32,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3196-3204) uses a dangerous strict equality:
	- require(bool,string)(now == ilks[ilk].rho,Jug/rho-not-updated) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3198)
Pot.file(bytes32,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3662-3672) uses a dangerous strict equality:
	- require(bool,string)(now == rho,Pot/rho-not-updated) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3666)
Pot.join(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3718-3728) uses a dangerous strict equality:
	- require(bool,string)(now == rho,Pot/rho-not-updated) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3720)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[93m
Reentrancy in End.cage(bytes32) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1916-1930):
	External calls:
	- (Art[ilk],None,None,None,None) = vat.ilks(ilk) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1922)
	State variables written after the call(s):
	- tag[ilk] = wdiv(spot.par(),uint256(pip.read())) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1928)
Reentrancy in Flapper.deal(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2270-2282):
	External calls:
	- vat.move(address(this),bids[id].guy,bids[id].lot) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2276)
	- gem.burn(address(this),bids[id].bid) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2278)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2280)
Reentrancy in Flipper.deal(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2558-2566):
	External calls:
	- vat.flux(ilk,address(this),bids[id].guy,bids[id].lot) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2562)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2564)
Reentrancy in Flopper.deal(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2788-2798):
	External calls:
	- gem.mint(bids[id].guy,bids[id].lot) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2794)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2796)
Reentrancy in Flipper.dent(uint256,uint256,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2524-2556):
	External calls:
	- vat.move(msg.sender,bids[id].guy,bid) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2544)
	- vat.flux(ilk,address(this),bids[id].usr,bids[id].lot - lot) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2546)
	State variables written after the call(s):
	- bids[id].guy = msg.sender (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2550)
	- bids[id].lot = lot (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2552)
	- bids[id].tic = add(uint48(now),ttl) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2554)
Reentrancy in Flopper.dent(uint256,uint256,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2756-2786):
	External calls:
	- vat.move(msg.sender,bids[id].guy,bid) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2776)
	State variables written after the call(s):
	- bids[id].guy = msg.sender (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2780)
	- bids[id].lot = lot (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2782)
	- bids[id].tic = add(uint48(now),ttl) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2784)
Reentrancy in DssDeploy.deployCollateral(bytes32,address,address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#872-914):
	External calls:
	- ilks[ilk].flip = flipFab.newFlip(address(vat),ilk) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#886)
	State variables written after the call(s):
	- ilks[ilk].join = join (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#888)
Reentrancy in Jug.drip(bytes32) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3226-3238):
	External calls:
	- (prev) = vat.ilks(ilk) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3230)
	- vat.fold(ilk,vow,diff(rate,prev)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3234)
	State variables written after the call(s):
	- ilks[ilk].rho = now (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3236)
Reentrancy in Cat.file(bytes32,bytes32,address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1412-1426):
	External calls:
	- vat.nope(ilks[ilk].flip) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1416)
	State variables written after the call(s):
	- ilks[ilk].flip = flip (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1418)
Reentrancy in Vow.file(bytes32,address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#4576-4592):
	External calls:
	- vat.nope(address(flapper)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#4580)
	State variables written after the call(s):
	- flapper = FlapLike(data) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#4582)
Reentrancy in ESM.fire() (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#364-378):
	External calls:
	- end.cage() (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#372)
	State variables written after the call(s):
	- fired = 1 (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#376)
Reentrancy in End.flow(bytes32) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2028-2042):
	External calls:
	- (rate) = vat.ilks(ilk) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2036)
	State variables written after the call(s):
	- fix[ilk] = rdiv(mul(sub(wad,gap[ilk]),RAY),debt) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2040)
Reentrancy in Flapper.tend(uint256,uint256,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2236-2268):
	External calls:
	- gem.move(msg.sender,bids[id].guy,bids[id].bid) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2256)
	- gem.move(msg.sender,address(this),bid - bids[id].bid) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2258)
	State variables written after the call(s):
	- bids[id].guy = msg.sender (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2262)
	- bids[id].bid = bid (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2264)
	- bids[id].tic = add(uint48(now),ttl) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2266)
Reentrancy in Flipper.tend(uint256,uint256,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2490-2522):
	External calls:
	- vat.move(msg.sender,bids[id].guy,bids[id].bid) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2510)
	- vat.move(msg.sender,bids[id].gal,bid - bids[id].bid) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2512)
	State variables written after the call(s):
	- bids[id].guy = msg.sender (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2516)
	- bids[id].bid = bid (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2518)
	- bids[id].tic = add(uint48(now),ttl) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2520)
Reentrancy in Flapper.yank(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2294-2304):
	External calls:
	- gem.move(address(this),bids[id].guy,bids[id].bid) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2300)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2302)
Reentrancy in Flipper.yank(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2570-2582):
	External calls:
	- vat.flux(ilk,address(this),msg.sender,bids[id].lot) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2576)
	- vat.move(msg.sender,bids[id].guy,bids[id].bid) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2578)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2580)
Reentrancy in Flopper.yank(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2808-2818):
	External calls:
	- vat.move(address(this),bids[id].guy,bids[id].bid) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2814)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2816)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[92m
DssDeploy.deployPause(uint256,DSAuthority).authority (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#838) shadows:
	- DSAuth.authority (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#426) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
Reentrancy in End.cash(bytes32,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2056-2066):
	External calls:
	- vat.flux(ilk,address(this),msg.sender,rmul(wad,fix[ilk])) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2060)
	State variables written after the call(s):
	- out[ilk][msg.sender] = add(out[ilk][msg.sender],wad) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2062)
Reentrancy in Vow.constructor(address,address,address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#4516-4530):
	External calls:
	- vat.hope(flapper_) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#4526)
	State variables written after the call(s):
	- live = 1 (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#4528)
Reentrancy in DssDeploy.deployAuctions(address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#724-756):
	External calls:
	- flap = flapFab.newFlap(address(vat),gov) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#734)
	- flop = flopFab.newFlop(address(vat),gov) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#736)
	State variables written after the call(s):
	- flop = flopFab.newFlop(address(vat),gov) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#736)
Reentrancy in DssDeploy.deployAuctions(address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#724-756):
	External calls:
	- flap = flapFab.newFlap(address(vat),gov) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#734)
	- flop = flopFab.newFlop(address(vat),gov) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#736)
	- vow = vowFab.newVow(address(vat),address(flap),address(flop)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#738)
	State variables written after the call(s):
	- vow = vowFab.newVow(address(vat),address(flap),address(flop)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#738)
Reentrancy in DssDeploy.deployDai(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#682-696):
	External calls:
	- dai = daiFab.newDai(chainId) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#690)
	- daiJoin = daiJoinFab.newDaiJoin(address(vat),address(dai)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#692)
	State variables written after the call(s):
	- daiJoin = daiJoinFab.newDaiJoin(address(vat),address(dai)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#692)
Reentrancy in DssDeploy.deployShutdown(address,address,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#788-834):
	External calls:
	- end = endFab.newEnd() (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#796)
	- end.file(vat,address(vat)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#802)
	- end.file(cat,address(cat)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#804)
	- end.file(vow,address(vow)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#806)
	- end.file(pot,address(pot)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#808)
	- end.file(spot,address(spotter)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#810)
	- vat.rely(address(end)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#816)
	- cat.rely(address(end)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#818)
	- vow.rely(address(end)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#820)
	- pot.rely(address(end)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#822)
	- spotter.rely(address(end)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#824)
	- esm = esmFab.newESM(gov,address(end),address(pit),min) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#830)
	State variables written after the call(s):
	- esm = esmFab.newESM(gov,address(end),address(pit),min) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#830)
Reentrancy in DssDeploy.deployTaxation() (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#700-720):
	External calls:
	- jug = jugFab.newJug(address(vat)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#708)
	- pot = potFab.newPot(address(vat)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#710)
	State variables written after the call(s):
	- pot = potFab.newPot(address(vat)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#710)
Reentrancy in DssDeploy.deployVat() (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#664-678):
	External calls:
	- vat = vatFab.newVat() (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#668)
	- spotter = spotFab.newSpotter(address(vat)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#670)
	State variables written after the call(s):
	- spotter = spotFab.newSpotter(address(vat)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#670)
Reentrancy in End.pack(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2046-2054):
	External calls:
	- vat.move(msg.sender,address(vow),mul(wad,RAY)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2050)
	State variables written after the call(s):
	- bag[msg.sender] = add(bag[msg.sender],wad) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2052)
Reentrancy in End.skim(bytes32,address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1972-1994):
	External calls:
	- (rate) = vat.ilks(ilk) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1976)
	- (ink,art) = vat.urns(ilk,urn) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1978)
	State variables written after the call(s):
	- gap[ilk] = add(gap[ilk],sub(owe,wad)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1986)
Reentrancy in End.skip(bytes32,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1934-1968):
	External calls:
	- (flipV) = cat.ilks(ilk) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1940)
	- (rate) = vat.ilks(ilk) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1944)
	- vat.suck(address(vow),address(vow),tab) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1950)
	- vat.suck(address(vow),address(this),bid) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1952)
	- vat.hope(address(flip)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1954)
	- flip.yank(id) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1956)
	State variables written after the call(s):
	- Art[ilk] = add(Art[ilk],art) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1962)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Reentrancy in Cat.bite(bytes32,address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1432-1476):
	External calls:
	- vat.grab(ilk,urn,address(this),address(vow),- int256(lot),- int256(art)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1454)
	- vow.fess(mul(art,rate)) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1458)
	- id = Kicker(ilks[ilk].flip).kick(urn,address(vow),rmul(mul(art,rate),ilks[ilk].chop),lot,0) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1460-1470)
	Event emitted after the call(s):
	- Bite(ilk,urn,lot,art,mul(art,rate),ilks[ilk].flip,id) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1474)
Reentrancy in Flapper.kick(uint256,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2198-2224):
	External calls:
	- vat.move(msg.sender,address(this),lot) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2218)
	Event emitted after the call(s):
	- Kick(id,lot,bid) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2222)
Reentrancy in Flipper.kick(address,address,uint256,uint256,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2444-2478):
	External calls:
	- vat.flux(ilk,msg.sender,address(this),lot) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2472)
	Event emitted after the call(s):
	- Kick(id,lot,bid,tab,usr,gal) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2476)
Reentrancy in Spotter.poke(bytes32) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3894-3904):
	External calls:
	- (val,has) = ilks[ilk].pip.peek() (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3896)
	- vat.file(ilk,spot,spot) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3900)
	Event emitted after the call(s):
	- Poke(ilk,val,spot) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3902)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
INFO:Detectors:[92m
Dai.permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1686-1730) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(expiry == 0 || now <= expiry,Dai/permit-expired) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1720)
End.add(uint256,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1810-1816) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(z >= x) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1814)
End.thaw() (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2014-2026) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now >= add(when,wait),End/wait-not-finished) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2022)
Flapper.add(uint48,uint48) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2166-2170) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)((z = x + y) >= x) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2168)
Flapper.tick(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2226-2234) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].end < now,Flapper/not-finished) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2228)
Flapper.tend(uint256,uint256,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2236-2268) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic > now || bids[id].tic == 0,Flapper/already-finished-tic) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2242)
	- require(bool,string)(bids[id].end > now,Flapper/already-finished-end) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2244)
Flapper.deal(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2270-2282) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now),Flapper/not-finished) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2274)
Flipper.add(uint48,uint48) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2412-2416) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)((z = x + y) >= x) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2414)
Flipper.tick(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2480-2488) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].end < now,Flipper/not-finished) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2482)
Flipper.tend(uint256,uint256,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2490-2522) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic > now || bids[id].tic == 0,Flipper/already-finished-tic) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2494)
	- require(bool,string)(bids[id].end > now,Flipper/already-finished-end) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2496)
Flipper.dent(uint256,uint256,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2524-2556) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic > now || bids[id].tic == 0,Flipper/already-finished-tic) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2528)
	- require(bool,string)(bids[id].end > now,Flipper/already-finished-end) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2530)
Flipper.deal(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2558-2566) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now),Flipper/not-finished) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2560)
Flopper.add(uint48,uint48) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2686-2690) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)((z = x + y) >= x) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2688)
Flopper.tick(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2744-2754) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].end < now,Flopper/not-finished) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2746)
Flopper.dent(uint256,uint256,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2756-2786) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic > now || bids[id].tic == 0,Flopper/already-finished-tic) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2762)
	- require(bool,string)(bids[id].end > now,Flopper/already-finished-end) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2764)
Flopper.deal(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2788-2798) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now),Flopper/not-finished) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2792)
Jug.add(uint256,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3154-3160) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(z >= x) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3158)
Jug.init(bytes32) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3184-3194) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(i.duty == 0,Jug/ilk-already-init) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3188)
Jug.file(bytes32,bytes32,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3196-3204) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now == ilks[ilk].rho,Jug/rho-not-updated) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3198)
Jug.drip(bytes32) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3226-3238) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now >= ilks[ilk].rho,Jug/invalid-now) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3228)
DSPause.add(uint256,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3338-3344) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(z >= x,ds-pause-addition-overflow) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3342)
DSPause.plot(address,bytes32,bytes,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3414-3424) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(eta >= add(now,delay),ds-pause-delay-not-respected) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3420)
DSPause.exec(address,bytes32,bytes,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3440-3464) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now >= eta,ds-pause-premature-exec) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3452)
Pot.file(bytes32,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3662-3672) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now == rho,Pot/rho-not-updated) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3666)
Pot.drip() (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3698-3712) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now >= rho,Pot/invalid-now) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3700)
Pot.join(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3718-3728) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now == rho,Pot/rho-not-updated) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3720)
Vow.flog(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#4608-4616) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(add(era,wait) <= now,Vow/wait-not-finished) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#4610)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp[0m
INFO:Detectors:[92m
Jug.rpow(uint256,uint256,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3106-3150) uses assembly
	- INLINE ASM (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3108-3150)
DSPause.soul(address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3396-3406) uses assembly
	- INLINE ASM (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3404-3406)
Pot.rpow(uint256,uint256,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3580-3624) uses assembly
	- INLINE ASM (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3582-3624)
Vat.either(bool,bool) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#4192-4196) uses assembly
	- INLINE ASM (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#4194-4196)
Vat.both(bool,bool) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#4198-4202) uses assembly
	- INLINE ASM (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#4200-4202)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#26) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Low level call in DSPauseProxy.exec(address,bytes) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3480-3494):
	- (ok,out) = usr.delegatecall(fax) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3490)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Variable ESM.Sum (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#278) is not in mixedCase
Constant Dai.version (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1516) is not in UPPER_CASE_WITH_UNDERSCORES
Variable Dai.DOMAIN_SEPARATOR (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1556) is not in mixedCase
Variable End.Art (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1784) is not in mixedCase
Variable Pot.Pie (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3536) is not in mixedCase
Variable Vat.Line (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3994) is not in mixedCase
Variable Vow.Sin (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#4490) is not in mixedCase
Variable Vow.Ash (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#4492) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
DssDeploy.ONE (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#578) is never used in DssDeploy (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#510-950)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variables[0m
INFO:Detectors:[92m
DssDeploy.step (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#574) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
newVat() should be declared external:
	- VatFab.newVat() (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#32-40)
newJug(address) should be declared external:
	- JugFab.newJug(address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#48-56)
newVow(address,address,address) should be declared external:
	- VowFab.newVow(address,address,address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#64-72)
newCat(address) should be declared external:
	- CatFab.newCat(address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#80-88)
newDai(uint256) should be declared external:
	- DaiFab.newDai(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#96-104)
newDaiJoin(address,address) should be declared external:
	- DaiJoinFab.newDaiJoin(address,address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#112-116)
newFlap(address,address) should be declared external:
	- FlapFab.newFlap(address,address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#124-132)
newFlop(address,address) should be declared external:
	- FlopFab.newFlop(address,address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#140-148)
newFlip(address,bytes32) should be declared external:
	- FlipFab.newFlip(address,bytes32) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#156-164)
newSpotter(address) should be declared external:
	- SpotFab.newSpotter(address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#172-180)
newPot(address) should be declared external:
	- PotFab.newPot(address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#188-196)
newEnd() should be declared external:
	- EndFab.newEnd() (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#204-212)
newESM(address,address,address,uint256) should be declared external:
	- ESMFab.newESM(address,address,address,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#220-224)
newPause(uint256,address,DSAuthority) should be declared external:
	- PauseFab.newPause(uint256,address,DSAuthority) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#232-236)
balanceOf(address) should be declared external:
	- GemLikeESM.balanceOf(address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#244)
transfer(address,uint256) should be declared external:
	- GemLikeESM.transfer(address,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#246)
transferFrom(address,address,uint256) should be declared external:
	- GemLikeESM.transferFrom(address,address,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#248)
cage() should be declared external:
	- EndLike.cage() (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#256)
canCall(address,address,bytes4) should be declared external:
	- DSAuthority.canCall(address,address,bytes4) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#404-408)
setOwner(address) should be declared external:
	- DSAuth.setOwner(address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#442-454)
	- DSPause.setOwner(address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3310-3316)
setAuthority(DSAuthority) should be declared external:
	- DSPause.setAuthority(DSAuthority) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3318-3324)
	- DSAuth.setAuthority(DSAuthority) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#458-470)
deployVat() should be declared external:
	- DssDeploy.deployVat() (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#664-678)
deployDai(uint256) should be declared external:
	- DssDeploy.deployDai(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#682-696)
deployTaxation() should be declared external:
	- DssDeploy.deployTaxation() (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#700-720)
deployAuctions(address) should be declared external:
	- DssDeploy.deployAuctions(address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#724-756)
deployLiquidator() should be declared external:
	- DssDeploy.deployLiquidator() (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#760-784)
deployShutdown(address,address,uint256) should be declared external:
	- DssDeploy.deployShutdown(address,address,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#788-834)
deployPause(uint256,DSAuthority) should be declared external:
	- DssDeploy.deployPause(uint256,DSAuthority) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#838-868)
deployCollateral(bytes32,address,address) should be declared external:
	- DssDeploy.deployCollateral(bytes32,address,address) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#872-914)
releaseAuth() should be declared external:
	- DssDeploy.releaseAuth() (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#918-940)
releaseAuthFlip(bytes32) should be declared external:
	- DssDeploy.releaseAuthFlip(bytes32) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#944-948)
kick(address,address,uint256,uint256,uint256) should be declared external:
	- Kicker.kick(address,address,uint256,uint256,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#956-958)
decimals() should be declared external:
	- GemLike.decimals() (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#1180)
kick(address,address,uint256,uint256,uint256) should be declared external:
	- Flipper.kick(address,address,uint256,uint256,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#2444-2478)
setDelay(uint256) should be declared external:
	- DSPause.setDelay(uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3326-3330)
plot(address,bytes32,bytes,uint256) should be declared external:
	- DSPause.plot(address,bytes32,bytes,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3414-3424)
drop(address,bytes32,bytes,uint256) should be declared external:
	- DSPause.drop(address,bytes32,bytes,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3428-3436)
exec(address,bytes32,bytes,uint256) should be declared external:
	- DSPause.exec(address,bytes32,bytes,uint256) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3440-3464)
exec(address,bytes) should be declared external:
	- DSPauseProxy.exec(address,bytes) (noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol#3480-3494)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:./noloops/0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol analyzed (64 contracts with 46 detectors), 122 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0x11cfdfbc386a5f461c21a4caab399dba00f6b85d.sol
Tool Runtime = 10.426974810998217 seconds
#############################################