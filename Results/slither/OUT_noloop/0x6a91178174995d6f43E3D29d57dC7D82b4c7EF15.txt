Compilation warnings/errors on ./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:178:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:1578:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:1670:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:1819:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:1827:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:1823:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2036:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2051:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2046:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, int y) internal pure returns (int z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2057:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2041:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2054:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2036:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2051:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2046:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, int y) internal pure returns (int z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2057:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2041:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2054:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2036:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2051:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2046:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, int y) internal pure returns (int z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2057:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2041:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2054:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:162:27: Warning: The "shr" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                          ^-----------------------^
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:162:18: Warning: The "shl" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                 ^---------------------------------^
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:634:27: Warning: The "shr" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                          ^-----------------------^
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:634:18: Warning: The "shl" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                 ^---------------------------------^
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:1703:27: Warning: The "extcodehash" instruction is not supported by the VM version "byzantium" you are currently compiling for. It will be interpreted as an invalid instruction on this VM.
        assembly { tag := extcodehash(usr) }
                          ^--------------^
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2021:27: Warning: The "shr" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                          ^-----------------------^
./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol:2021:18: Warning: The "shl" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                 ^---------------------------------^

INFO:Detectors:[91m
ETHJoin.exit(address,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1481-1485) sends eth to arbitrary user
	Dangerous calls:
	- usr.transfer(wad) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1484)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations[0m
INFO:Detectors:[91m
DSPauseProxy.exec(address,bytes) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1741-1748) uses delegatecall to a input-controlled function id
	- (ok,out) = usr.delegatecall(fax) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1746)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#controlled-delegatecall[0m
INFO:Detectors:[93m
Jug.file(bytes32,bytes32,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1599-1603) uses a dangerous strict equality:
	- require(bool,string)(now == ilks[ilk].rho,Jug/rho-not-updated) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1600)
Pot.file(bytes32,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1832-1837) uses a dangerous strict equality:
	- require(bool,string)(now == rho,Pot/rho-not-updated) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1834)
Pot.join(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1860-1865) uses a dangerous strict equality:
	- require(bool,string)(now == rho,Pot/rho-not-updated) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1861)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[93m
Reentrancy in End.cage(bytes32) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#959-966):
	External calls:
	- (Art[ilk],None,None,None,None) = vat.ilks(ilk) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#962)
	State variables written after the call(s):
	- tag[ilk] = wdiv(spot.par(),uint256(pip.read())) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#965)
Reentrancy in Flapper.deal(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1136-1142):
	External calls:
	- vat.move(address(this),bids[id].guy,bids[id].lot) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1139)
	- gem.burn(address(this),bids[id].bid) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1140)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1141)
Reentrancy in Flipper.deal(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1280-1284):
	External calls:
	- vat.flux(ilk,address(this),bids[id].guy,bids[id].lot) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1282)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1283)
Reentrancy in Flopper.deal(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1395-1400):
	External calls:
	- gem.mint(bids[id].guy,bids[id].lot) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1398)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1399)
Reentrancy in Flipper.dent(uint256,uint256,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1263-1279):
	External calls:
	- vat.move(msg.sender,bids[id].guy,bid) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1273)
	- vat.flux(ilk,address(this),bids[id].usr,bids[id].lot - lot) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1274)
	State variables written after the call(s):
	- bids[id].guy = msg.sender (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1276)
	- bids[id].lot = lot (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1277)
	- bids[id].tic = add(uint48(now),ttl) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1278)
Reentrancy in Flopper.dent(uint256,uint256,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1379-1394):
	External calls:
	- vat.move(msg.sender,bids[id].guy,bid) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1389)
	State variables written after the call(s):
	- bids[id].guy = msg.sender (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1391)
	- bids[id].lot = lot (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1392)
	- bids[id].tic = add(uint48(now),ttl) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1393)
Reentrancy in DssDeploy.deployCollateral(bytes32,address,address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#437-458):
	External calls:
	- ilks[ilk].flip = flipFab.newFlip(address(vat),ilk) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#444)
	State variables written after the call(s):
	- ilks[ilk].join = join (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#445)
Reentrancy in Jug.drip(bytes32) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1614-1620):
	External calls:
	- (prev) = vat.ilks(ilk) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1616)
	- vat.fold(ilk,vow,diff(rate,prev)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1618)
	State variables written after the call(s):
	- ilks[ilk].rho = now (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1619)
Reentrancy in Cat.file(bytes32,bytes32,address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#707-714):
	External calls:
	- vat.nope(ilks[ilk].flip) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#709)
	State variables written after the call(s):
	- ilks[ilk].flip = flip (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#710)
Reentrancy in Vow.file(bytes32,address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#2289-2297):
	External calls:
	- vat.nope(address(flapper)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#2291)
	State variables written after the call(s):
	- flapper = FlapLike(data) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#2292)
Reentrancy in ESM.fire() (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#183-190):
	External calls:
	- end.cage() (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#187)
	State variables written after the call(s):
	- fired = 1 (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#189)
Reentrancy in End.flow(bytes32) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1015-1022):
	External calls:
	- (rate) = vat.ilks(ilk) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1019)
	State variables written after the call(s):
	- fix[ilk] = rdiv(mul(sub(wad,gap[ilk]),RAY),debt) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1021)
Reentrancy in Flapper.tend(uint256,uint256,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1119-1135):
	External calls:
	- gem.move(msg.sender,bids[id].guy,bids[id].bid) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1129)
	- gem.move(msg.sender,address(this),bid - bids[id].bid) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1130)
	State variables written after the call(s):
	- bids[id].guy = msg.sender (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1132)
	- bids[id].bid = bid (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1133)
	- bids[id].tic = add(uint48(now),ttl) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1134)
Reentrancy in Flipper.tend(uint256,uint256,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1246-1262):
	External calls:
	- vat.move(msg.sender,bids[id].guy,bids[id].bid) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1256)
	- vat.move(msg.sender,bids[id].gal,bid - bids[id].bid) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1257)
	State variables written after the call(s):
	- bids[id].guy = msg.sender (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1259)
	- bids[id].bid = bid (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1260)
	- bids[id].tic = add(uint48(now),ttl) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1261)
Reentrancy in Flapper.yank(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1148-1153):
	External calls:
	- gem.move(address(this),bids[id].guy,bids[id].bid) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1151)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1152)
Reentrancy in Flipper.yank(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1286-1292):
	External calls:
	- vat.flux(ilk,address(this),msg.sender,bids[id].lot) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1289)
	- vat.move(msg.sender,bids[id].guy,bids[id].bid) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1290)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1291)
Reentrancy in Flopper.yank(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1405-1410):
	External calls:
	- vat.move(address(this),bids[id].guy,bids[id].bid) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1408)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1409)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[92m
DssDeploy.deployPause(uint256,DSAuthority).authority (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#420) shadows:
	- DSAuth.authority (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#214) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
Reentrancy in End.cash(bytes32,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1029-1034):
	External calls:
	- vat.flux(ilk,address(this),msg.sender,rmul(wad,fix[ilk])) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1031)
	State variables written after the call(s):
	- out[ilk][msg.sender] = add(out[ilk][msg.sender],wad) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1032)
Reentrancy in Vow.constructor(address,address,address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#2259-2266):
	External calls:
	- vat.hope(flapper_) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#2264)
	State variables written after the call(s):
	- live = 1 (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#2265)
Reentrancy in DssDeploy.deployAuctions(address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#363-379):
	External calls:
	- flap = flapFab.newFlap(address(vat),gov) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#368)
	- flop = flopFab.newFlop(address(vat),gov) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#369)
	State variables written after the call(s):
	- flop = flopFab.newFlop(address(vat),gov) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#369)
Reentrancy in DssDeploy.deployAuctions(address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#363-379):
	External calls:
	- flap = flapFab.newFlap(address(vat),gov) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#368)
	- flop = flopFab.newFlop(address(vat),gov) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#369)
	- vow = vowFab.newVow(address(vat),address(flap),address(flop)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#370)
	State variables written after the call(s):
	- vow = vowFab.newVow(address(vat),address(flap),address(flop)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#370)
Reentrancy in DssDeploy.deployDai(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#342-349):
	External calls:
	- dai = daiFab.newDai(chainId) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#346)
	- daiJoin = daiJoinFab.newDaiJoin(address(vat),address(dai)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#347)
	State variables written after the call(s):
	- daiJoin = daiJoinFab.newDaiJoin(address(vat),address(dai)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#347)
Reentrancy in DssDeploy.deployShutdown(address,address,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#395-418):
	External calls:
	- end = endFab.newEnd() (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#399)
	- end.file(vat,address(vat)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#402)
	- end.file(cat,address(cat)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#403)
	- end.file(vow,address(vow)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#404)
	- end.file(pot,address(pot)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#405)
	- end.file(spot,address(spotter)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#406)
	- vat.rely(address(end)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#409)
	- cat.rely(address(end)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#410)
	- vow.rely(address(end)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#411)
	- pot.rely(address(end)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#412)
	- spotter.rely(address(end)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#413)
	- esm = esmFab.newESM(gov,address(end),address(pit),min) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#416)
	State variables written after the call(s):
	- esm = esmFab.newESM(gov,address(end),address(pit),min) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#416)
Reentrancy in DssDeploy.deployTaxation() (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#351-361):
	External calls:
	- jug = jugFab.newJug(address(vat)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#355)
	- pot = potFab.newPot(address(vat)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#356)
	State variables written after the call(s):
	- pot = potFab.newPot(address(vat)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#356)
Reentrancy in DssDeploy.deployVat() (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#333-340):
	External calls:
	- vat = vatFab.newVat() (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#335)
	- spotter = spotFab.newSpotter(address(vat)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#336)
	State variables written after the call(s):
	- spotter = spotFab.newSpotter(address(vat)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#336)
Reentrancy in End.pack(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1024-1028):
	External calls:
	- vat.move(msg.sender,address(vow),mul(wad,RAY)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1026)
	State variables written after the call(s):
	- bag[msg.sender] = add(bag[msg.sender],wad) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1027)
Reentrancy in End.skim(bytes32,address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#987-998):
	External calls:
	- (rate) = vat.ilks(ilk) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#989)
	- (ink,art) = vat.urns(ilk,urn) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#990)
	State variables written after the call(s):
	- gap[ilk] = add(gap[ilk],sub(owe,wad)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#994)
Reentrancy in End.skip(bytes32,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#968-985):
	External calls:
	- (flipV) = cat.ilks(ilk) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#971)
	- (rate) = vat.ilks(ilk) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#973)
	- vat.suck(address(vow),address(vow),tab) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#976)
	- vat.suck(address(vow),address(this),bid) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#977)
	- vat.hope(address(flip)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#978)
	- flip.yank(id) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#979)
	State variables written after the call(s):
	- Art[ilk] = add(Art[ilk],art) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#982)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Reentrancy in Cat.bite(bytes32,address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#717-739):
	External calls:
	- vat.grab(ilk,urn,address(this),address(vow),- int256(lot),- int256(art)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#728)
	- vow.fess(mul(art,rate)) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#730)
	- id = Kicker(ilks[ilk].flip).kick(urn,address(vow),rmul(mul(art,rate),ilks[ilk].chop),lot,0) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#731-736)
	Event emitted after the call(s):
	- Bite(ilk,urn,lot,art,mul(art,rate),ilks[ilk].flip,id) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#738)
Reentrancy in Flapper.kick(uint256,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1100-1113):
	External calls:
	- vat.move(msg.sender,address(this),lot) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1110)
	Event emitted after the call(s):
	- Kick(id,lot,bid) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1112)
Reentrancy in Flipper.kick(address,address,uint256,uint256,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1223-1240):
	External calls:
	- vat.flux(ilk,msg.sender,address(this),lot) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1237)
	Event emitted after the call(s):
	- Kick(id,lot,bid,tab,usr,gal) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1239)
Reentrancy in Spotter.poke(bytes32) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1948-1953):
	External calls:
	- (val,has) = ilks[ilk].pip.peek() (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1949)
	- vat.file(ilk,spot,spot) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1951)
	Event emitted after the call(s):
	- Poke(ilk,val,spot) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1952)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
INFO:Detectors:[92m
Dai.permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#844-866) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(expiry == 0 || now <= expiry,Dai/permit-expired) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#861)
End.add(uint256,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#906-909) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(z >= x) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#908)
End.thaw() (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1008-1014) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now >= add(when,wait),End/wait-not-finished) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1012)
Flapper.add(uint48,uint48) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1084-1086) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)((z = x + y) >= x) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1085)
Flapper.tick(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1114-1118) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].end < now,Flapper/not-finished) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1115)
Flapper.tend(uint256,uint256,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1119-1135) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic > now || bids[id].tic == 0,Flapper/already-finished-tic) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1122)
	- require(bool,string)(bids[id].end > now,Flapper/already-finished-end) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1123)
Flapper.deal(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1136-1142) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now),Flapper/not-finished) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1138)
Flipper.add(uint48,uint48) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1207-1209) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)((z = x + y) >= x) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1208)
Flipper.tick(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1241-1245) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].end < now,Flipper/not-finished) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1242)
Flipper.tend(uint256,uint256,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1246-1262) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic > now || bids[id].tic == 0,Flipper/already-finished-tic) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1248)
	- require(bool,string)(bids[id].end > now,Flipper/already-finished-end) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1249)
Flipper.dent(uint256,uint256,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1263-1279) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic > now || bids[id].tic == 0,Flipper/already-finished-tic) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1265)
	- require(bool,string)(bids[id].end > now,Flipper/already-finished-end) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1266)
Flipper.deal(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1280-1284) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now),Flipper/not-finished) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1281)
Flopper.add(uint48,uint48) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1344-1346) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)((z = x + y) >= x) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1345)
Flopper.tick(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1373-1378) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].end < now,Flopper/not-finished) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1374)
Flopper.dent(uint256,uint256,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1379-1394) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic > now || bids[id].tic == 0,Flopper/already-finished-tic) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1382)
	- require(bool,string)(bids[id].end > now,Flopper/already-finished-end) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1383)
Flopper.deal(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1395-1400) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now),Flopper/not-finished) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1397)
Jug.add(uint256,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1578-1581) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(z >= x) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1580)
Jug.init(bytes32) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1593-1598) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(i.duty == 0,Jug/ilk-already-init) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1595)
Jug.file(bytes32,bytes32,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1599-1603) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now == ilks[ilk].rho,Jug/rho-not-updated) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1600)
Jug.drip(bytes32) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1614-1620) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now >= ilks[ilk].rho,Jug/invalid-now) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1615)
DSPause.add(uint256,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1670-1673) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(z >= x,ds-pause-addition-overflow) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1672)
DSPause.plot(address,bytes32,bytes,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1708-1713) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(eta >= add(now,delay),ds-pause-delay-not-respected) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1711)
DSPause.exec(address,bytes32,bytes,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1721-1733) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now >= eta,ds-pause-premature-exec) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1727)
Pot.file(bytes32,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1832-1837) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now == rho,Pot/rho-not-updated) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1834)
Pot.drip() (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1850-1857) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now >= rho,Pot/invalid-now) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1851)
Pot.join(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1860-1865) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now == rho,Pot/rho-not-updated) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1861)
Vow.flog(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#2305-2309) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(add(era,wait) <= now,Vow/wait-not-finished) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#2306)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp[0m
INFO:Detectors:[92m
Jug.rpow(uint256,uint256,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1554-1576) uses assembly
	- INLINE ASM (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1555-1576)
DSPause.soul(address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1699-1704) uses assembly
	- INLINE ASM (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1703-1704)
Pot.rpow(uint256,uint256,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1791-1813) uses assembly
	- INLINE ASM (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1792-1813)
Vat.either(bool,bool) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#2097-2099) uses assembly
	- INLINE ASM (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#2098-2099)
Vat.both(bool,bool) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#2100-2102) uses assembly
	- INLINE ASM (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#2101-2102)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#14) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Low level call in DSPauseProxy.exec(address,bytes) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1741-1748):
	- (ok,out) = usr.delegatecall(fax) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1746)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Variable ESM.Sum (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#140) is not in mixedCase
Constant Dai.version (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#759) is not in UPPER_CASE_WITH_UNDERSCORES
Variable Dai.DOMAIN_SEPARATOR (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#779) is not in mixedCase
Variable End.Art (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#893) is not in mixedCase
Variable Pot.Pie (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1769) is not in mixedCase
Variable Vat.Line (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1998) is not in mixedCase
Variable Vow.Sin (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#2246) is not in mixedCase
Variable Vow.Ash (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#2247) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
DssDeploy.ONE (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#290) is never used in DssDeploy (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#256-476)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variables[0m
INFO:Detectors:[92m
DssDeploy.step (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#288) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
newVat() should be declared external:
	- VatFab.newVat() (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#17-21)
newJug(address) should be declared external:
	- JugFab.newJug(address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#25-29)
newVow(address,address,address) should be declared external:
	- VowFab.newVow(address,address,address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#33-37)
newCat(address) should be declared external:
	- CatFab.newCat(address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#41-45)
newDai(uint256) should be declared external:
	- DaiFab.newDai(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#49-53)
newDaiJoin(address,address) should be declared external:
	- DaiJoinFab.newDaiJoin(address,address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#57-59)
newFlap(address,address) should be declared external:
	- FlapFab.newFlap(address,address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#63-67)
newFlop(address,address) should be declared external:
	- FlopFab.newFlop(address,address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#71-75)
newFlip(address,bytes32) should be declared external:
	- FlipFab.newFlip(address,bytes32) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#79-83)
newSpotter(address) should be declared external:
	- SpotFab.newSpotter(address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#87-91)
newPot(address) should be declared external:
	- PotFab.newPot(address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#95-99)
newEnd() should be declared external:
	- EndFab.newEnd() (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#103-107)
newESM(address,address,address,uint256) should be declared external:
	- ESMFab.newESM(address,address,address,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#111-113)
newPause(uint256,address,DSAuthority) should be declared external:
	- PauseFab.newPause(uint256,address,DSAuthority) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#117-119)
balanceOf(address) should be declared external:
	- GemLikeESM.balanceOf(address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#123)
transfer(address,uint256) should be declared external:
	- GemLikeESM.transfer(address,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#124)
transferFrom(address,address,uint256) should be declared external:
	- GemLikeESM.transferFrom(address,address,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#125)
cage() should be declared external:
	- EndLike.cage() (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#129)
canCall(address,address,bytes4) should be declared external:
	- DSAuthority.canCall(address,address,bytes4) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#203-205)
setOwner(address) should be declared external:
	- DSPause.setOwner(address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1656-1659)
	- DSAuth.setOwner(address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#222-228)
setAuthority(DSAuthority) should be declared external:
	- DSPause.setAuthority(DSAuthority) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1660-1663)
	- DSAuth.setAuthority(DSAuthority) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#230-236)
deployVat() should be declared external:
	- DssDeploy.deployVat() (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#333-340)
deployDai(uint256) should be declared external:
	- DssDeploy.deployDai(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#342-349)
deployTaxation() should be declared external:
	- DssDeploy.deployTaxation() (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#351-361)
deployAuctions(address) should be declared external:
	- DssDeploy.deployAuctions(address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#363-379)
deployLiquidator() should be declared external:
	- DssDeploy.deployLiquidator() (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#381-393)
deployShutdown(address,address,uint256) should be declared external:
	- DssDeploy.deployShutdown(address,address,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#395-418)
deployPause(uint256,DSAuthority) should be declared external:
	- DssDeploy.deployPause(uint256,DSAuthority) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#420-435)
deployCollateral(bytes32,address,address) should be declared external:
	- DssDeploy.deployCollateral(bytes32,address,address) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#437-458)
releaseAuth() should be declared external:
	- DssDeploy.releaseAuth() (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#460-471)
releaseAuthFlip(bytes32) should be declared external:
	- DssDeploy.releaseAuthFlip(bytes32) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#473-475)
kick(address,address,uint256,uint256,uint256) should be declared external:
	- Kicker.kick(address,address,uint256,uint256,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#479-480)
decimals() should be declared external:
	- GemLike.decimals() (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#591)
kick(address,address,uint256,uint256,uint256) should be declared external:
	- Flipper.kick(address,address,uint256,uint256,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1223-1240)
setDelay(uint256) should be declared external:
	- DSPause.setDelay(uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1664-1666)
plot(address,bytes32,bytes,uint256) should be declared external:
	- DSPause.plot(address,bytes32,bytes,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1708-1713)
drop(address,bytes32,bytes,uint256) should be declared external:
	- DSPause.drop(address,bytes32,bytes,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1715-1719)
exec(address,bytes32,bytes,uint256) should be declared external:
	- DSPause.exec(address,bytes32,bytes,uint256) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1721-1733)
exec(address,bytes) should be declared external:
	- DSPauseProxy.exec(address,bytes) (noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol#1741-1748)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:./noloops/0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol analyzed (64 contracts with 46 detectors), 122 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0x6a91178174995d6f43E3D29d57dC7D82b4c7EF15.sol
Tool Runtime = 7.436249768001289 seconds
#############################################