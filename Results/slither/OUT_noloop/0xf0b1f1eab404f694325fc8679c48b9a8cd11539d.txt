Compilation warnings/errors on ./noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol:
./noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol:335:10: Warning: Unused local variable.
        (uint amountToken, uint amountETH, uint liquidity) = ...
         ^--------------^
./noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol:335:28: Warning: Unused local variable.
        (uint amountToken, uint amountETH, uint liquidity) = uniswapV2.addLi ...
                           ^------------^
./noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol:428:14: Warning: Unused local variable.
            (uint amountToken, uint amountETH, uint liquidity) = ...
             ^--------------^
./noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol:428:32: Warning: Unused local variable.
            (uint amountToken, uint amountETH, uint liquidity) = uniswapV2.addLi ...
                               ^------------^
./noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol:436:14: Warning: Unused local variable.
            (uint amountToken, uint amountETH, uint liquidity) = ...
             ^--------------^
./noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol:436:32: Warning: Unused local variable.
            (uint amountToken, uint amountETH, uint liquidity) = uniswapV2.addLi ...
                               ^------------^

INFO:Detectors:[93m
LiquidityPool.calculateTokensOwed(address) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#452-472) performs a multiplication on the result of a division:
	-daysSinceLast = block.timestamp.sub(thisStaker.lastTimestamp) / 86400 (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#457)
	-tokens = mulDiv(daysSinceLast.mul(rewardAdjustmentFactor),thisStaker.poolTokenBalance,uniswapPair.totalSupply()) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#459)
LiquidityPool.calculateTokensOwed(address) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#452-472) performs a multiplication on the result of a division:
	-totalDaysStaked = block.timestamp.sub(thisStaker.startTimestamp) / 86400 (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#456)
	-tokens * totalDaysStaked (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#466)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#549-569) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#556)
	-r *= 2 - z * r (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#560)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#549-569) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#556)
	-r *= 2 - z * r (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#561)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#549-569) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#556)
	-r *= 2 - z * r (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#562)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#549-569) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#556)
	-r *= 2 - z * r (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#563)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#549-569) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#556)
	-r *= 2 - z * r (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#564)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#549-569) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#556)
	-r *= 2 - z * r (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#565)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#549-569) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#556)
	-r *= 2 - z * r (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#566)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#549-569) performs a multiplication on the result of a division:
	-z /= pow2 (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#556)
	-r *= 2 - z * r (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#567)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#549-569) performs a multiplication on the result of a division:
	-l /= pow2 (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#557)
	-l * r (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#568)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply[0m
INFO:Detectors:[93m
LiquidityPool.stakeLiquidityTokens(uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#295-330) uses a dangerous strict equality:
	- require(bool)(previousBalance.add(numPoolTokensToStake) == postBalance) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#306)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[93m
Contract locking ether found in :
	Contract LiquidityPool (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#233-581) has payable functions:
	 - LiquidityPool.fallback() (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#578)
	 - LiquidityPool.receive() (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#579)
	But does not have a function to withdraw the ether
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#contracts-that-lock-ether[0m
INFO:Detectors:[93m
Reentrancy in LiquidityPool.reinvestRewards(bool,uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#420-439):
	External calls:
	- minter.liquidityRewards(address(this),_numTokensToReinvest) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#426)
	- secondToken.transferFrom(msg.sender,address(this),_numSecondTokensToInvest) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#427)
	- (amountToken,amountETH,liquidity) = uniswapV2.addLiquidity(address(pampToken),address(secondToken),_numTokensToReinvest,_numSecondTokensToInvest,0,0,address(this),now + 86400) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#428)
	State variables written after the call(s):
	- thisStaker.poolTokenBalance = thisStaker.poolTokenBalance.add(liquidity) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#429)
Reentrancy in LiquidityPool.reinvestRewards(bool,uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#420-439):
	External calls:
	- minter.liquidityRewards(address(this),numTokensToReinvest) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#434)
	- secondToken.transferFrom(msg.sender,address(this),_numSecondTokensToInvest) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#435)
	- (amountToken,amountETH,liquidity) = uniswapV2.addLiquidity(address(pampToken),address(secondToken),numTokensToReinvest,_numSecondTokensToInvest,0,0,address(this),now + 86400) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#436)
	State variables written after the call(s):
	- thisStaker.poolTokenBalance = thisStaker.poolTokenBalance.add(liquidity_scope_2) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#437)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
LiquidityPool.reinvestRewards(bool,uint256,uint256).liquidity_scope_2 (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#436) is a local variable never initialized
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#uninitialized-local-variables[0m
INFO:Detectors:[93m
LiquidityPool.constructor() (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#278-292) ignores return value by pampToken.approve(address(uniswapV2),100000000E18) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#290)
LiquidityPool.constructor() (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#278-292) ignores return value by secondToken.approve(address(uniswapV2),100000000E18) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#291)
LiquidityPool.stakeLiquidityTokens(uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#295-330) ignores return value by uniswapPair.transferFrom(msg.sender,address(this),numPoolTokensToStake) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#302)
LiquidityPool.addLiquidity(uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#332-358) ignores return value by pampToken.transferFrom(msg.sender,address(this),_numTokensToReinvest) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#333)
LiquidityPool.addLiquidity(uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#332-358) ignores return value by secondToken.transferFrom(msg.sender,address(this),_numSecondTokensToInvest) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#334)
LiquidityPool.withdrawLiquidityTokens(uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#362-389) ignores return value by uniswapPair.transfer(msg.sender,numPoolTokensToWithdraw) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#388)
LiquidityPool.reinvestRewards(bool,uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#420-439) ignores return value by secondToken.transferFrom(msg.sender,address(this),_numSecondTokensToInvest) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#427)
LiquidityPool.reinvestRewards(bool,uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#420-439) ignores return value by secondToken.transferFrom(msg.sender,address(this),_numSecondTokensToInvest) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#435)
LiquidityPool.emergencyWithdrawLiquidityTokens() (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#442-450) ignores return value by uniswapPair.transfer(msg.sender,poolTokenBalance) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#449)
LiquidityPool.updateUinswapV2(address) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#485-488) ignores return value by pampToken.approve(address(uniswapV2),100000000E18) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#487)
LiquidityPool.updateSecondToken(address) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#522-525) ignores return value by secondToken.approve(address(uniswapV2),100000000E18) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#524)
LiquidityPool.transferPampTokens(uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#527-529) ignores return value by pampToken.transfer(msg.sender,_numTokens) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#528)
LiquidityPool.transferSecondTokens(uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#531-533) ignores return value by secondToken.transfer(msg.sender,_numTokens) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#532)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return[0m
INFO:Detectors:[92m
LiquidityPool.receive() (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#579) (function) shadows built-in symbol"
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#builtin-symbol-shadowing[0m
INFO:Detectors:[92m
Reentrancy in LiquidityPool.addLiquidity(uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#332-358):
	External calls:
	- pampToken.transferFrom(msg.sender,address(this),_numTokensToReinvest) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#333)
	- secondToken.transferFrom(msg.sender,address(this),_numSecondTokensToInvest) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#334)
	- (amountToken,amountETH,liquidity) = uniswapV2.addLiquidity(address(pampToken),address(secondToken),_numTokensToReinvest,_numSecondTokensToInvest,0,0,address(this),now + 86400) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#335)
	State variables written after the call(s):
	- thisStaker.startTimestamp = block.timestamp (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#340)
	- thisStaker.lastTimestamp = block.timestamp (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#341)
	- thisStaker.hasMigrated = true (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#342)
	- thisStaker.startTimestamp = block.timestamp (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#350)
	- thisStaker.startTimestamp = thisStaker.startTimestamp.add(percent) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#352)
	- thisStaker.poolTokenBalance = thisStaker.poolTokenBalance.add(liquidity) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#357)
Reentrancy in LiquidityPool.stakeLiquidityTokens(uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#295-330):
	External calls:
	- uniswapPair.transferFrom(msg.sender,address(this),numPoolTokensToStake) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#302)
	State variables written after the call(s):
	- thisStaker.startTimestamp = block.timestamp (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#311)
	- thisStaker.lastTimestamp = block.timestamp (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#312)
	- thisStaker.hasMigrated = true (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#313)
	- thisStaker.startTimestamp = block.timestamp (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#321)
	- thisStaker.startTimestamp = thisStaker.startTimestamp.add(percent) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#323)
	- thisStaker.poolTokenBalance = thisStaker.poolTokenBalance.add(numPoolTokensToStake) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#328)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
LiquidityPool.stakeLiquidityTokens(uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#295-330) uses timestamp for comparisons
	Dangerous comparisons:
	- assert(bool)(percent > 0) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#316)
	- percent > 1 (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#317)
	- percent.add(thisStaker.startTimestamp) > block.timestamp (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#320)
LiquidityPool.addLiquidity(uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#332-358) uses timestamp for comparisons
	Dangerous comparisons:
	- assert(bool)(percent > 0) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#345)
	- percent > 1 (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#346)
	- percent.add(thisStaker.startTimestamp) > block.timestamp (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#349)
LiquidityPool.withdrawLiquidityTokens(uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#362-389) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(thisStaker.hasMigrated,You must migrate) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#368)
	- require(bool,string)(thisStaker.poolTokenBalance >= numPoolTokensToWithdraw,Pool token balance too low) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#370)
	- require(bool)(daysStaked >= minStakeDurationDays) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#374)
LiquidityPool.withdrawRewards() (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#391-408) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(daysStaked >= minStakeDurationDays) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#397)
LiquidityPool.calculateTokensOwed(address) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#452-472) uses timestamp for comparisons
	Dangerous comparisons:
	- totalDaysStaked > exponentialDaysMax (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#461)
LiquidityPool.mulDiv(uint256,uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#549-569) uses timestamp for comparisons
	Dangerous comparisons:
	- mm > l (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#553)
LiquidityPool.fullMul(uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#571-576) uses timestamp for comparisons
	Dangerous comparisons:
	- mm < l (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#575)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#15) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Struct LiquidityPool.staker (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#261-267) is not in CapWords
Parameter LiquidityPool.addLiquidity(uint256,uint256)._numTokensToReinvest (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#332) is not in mixedCase
Parameter LiquidityPool.addLiquidity(uint256,uint256)._numSecondTokensToInvest (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#332) is not in mixedCase
Parameter LiquidityPool.reinvestRewards(bool,uint256,uint256)._numTokensToReinvest (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#420) is not in mixedCase
Parameter LiquidityPool.reinvestRewards(bool,uint256,uint256)._numSecondTokensToInvest (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#420) is not in mixedCase
Parameter LiquidityPool.updateUniswapPair(address)._uniswapPair (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#481) is not in mixedCase
Parameter LiquidityPool.updateUinswapV2(address)._uniswapv2 (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#485) is not in mixedCase
Parameter LiquidityPool.updatePampToken(address)._pampToken (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#490) is not in mixedCase
Parameter LiquidityPool.updateMinter(address)._minter (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#494) is not in mixedCase
Parameter LiquidityPool.updatePreviousLiquidityContract(address)._previousContract (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#498) is not in mixedCase
Parameter LiquidityPool.updateMinStakeDurationDays(uint256)._minStakeDurationDays (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#502) is not in mixedCase
Parameter LiquidityPool.updateRewardAdjustmentFactor(uint256)._rewardAdjustmentFactor (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#506) is not in mixedCase
Parameter LiquidityPool.updateStakingEnabled(bool)._stakingEnbaled (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#510) is not in mixedCase
Parameter LiquidityPool.updateExponentialRewardsEnabled(bool)._exponentialRewards (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#514) is not in mixedCase
Parameter LiquidityPool.updateExponentialDaysMax(uint256)._exponentialDaysMax (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#518) is not in mixedCase
Parameter LiquidityPool.updateSecondToken(address)._secondToken (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#522) is not in mixedCase
Parameter LiquidityPool.transferPampTokens(uint256)._numTokens (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#527) is not in mixedCase
Parameter LiquidityPool.transferSecondTokens(uint256)._numTokens (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#531) is not in mixedCase
Parameter LiquidityPool.getStaker(address)._staker (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#544) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
LiquidityPool.constructor() (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#278-292) uses literals with too many digits:
	- pampToken.approve(address(uniswapV2),100000000E18) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#290)
LiquidityPool.constructor() (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#278-292) uses literals with too many digits:
	- secondToken.approve(address(uniswapV2),100000000E18) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#291)
LiquidityPool.stakeLiquidityTokens(uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#295-330) uses literals with too many digits:
	- percent = mulDiv(1000000,numPoolTokensToStake,thisStaker.poolTokenBalance) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#315)
LiquidityPool.addLiquidity(uint256,uint256) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#332-358) uses literals with too many digits:
	- percent = mulDiv(1000000,liquidity,thisStaker.poolTokenBalance) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#344)
LiquidityPool.updateUinswapV2(address) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#485-488) uses literals with too many digits:
	- pampToken.approve(address(uniswapV2),100000000E18) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#487)
LiquidityPool.updateSecondToken(address) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#522-525) uses literals with too many digits:
	- secondToken.approve(address(uniswapV2),100000000E18) (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#524)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits[0m
INFO:Detectors:[92m
calculateMonthlyYield() should be declared external:
	- LiquidityPool.calculateMonthlyYield() (noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol#474-479)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:./noloops/0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol analyzed (6 contracts with 46 detectors), 67 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0xf0b1f1eab404f694325fc8679c48b9a8cd11539d.sol
Tool Runtime = 1.3950870480002777 seconds
#############################################