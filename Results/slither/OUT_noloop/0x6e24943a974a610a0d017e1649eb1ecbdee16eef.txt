Compilation warnings/errors on ./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:338:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:3138:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:3322:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:3620:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:3636:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:3628:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4054:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4084:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4074:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, int y) internal pure returns (int z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4096:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4064:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4090:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4054:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4084:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4074:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, int y) internal pure returns (int z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4096:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4064:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4090:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4054:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4084:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function add(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4074:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, int y) internal pure returns (int z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4096:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function mul(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4064:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, int y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4090:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function sub(uint x, uint y) internal pure returns (uint z) {
    ^ (Relevant source part starts here and spans across multiple lines).
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:306:27: Warning: The "shr" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                          ^-----------------------^
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:306:18: Warning: The "shl" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                 ^---------------------------------^
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:1250:27: Warning: The "shr" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                          ^-----------------------^
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:1250:18: Warning: The "shl" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                 ^---------------------------------^
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:3388:27: Warning: The "extcodehash" instruction is not supported by the VM version "byzantium" you are currently compiling for. It will be interpreted as an invalid instruction on this VM.
        assembly { tag := extcodehash(usr) }
                          ^--------------^
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4024:27: Warning: The "shr" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                          ^-----------------------^
./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol:4024:18: Warning: The "shl" instruction is only available for Constantinople-compatible VMs. You are currently compiling for "byzantium", where it will be interpreted as an invalid instruction.
                 shl(224, shr(224, calldataload(0))), // msg.sig
                 ^---------------------------------^

INFO:Detectors:[91m
ETHJoin.exit(address,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2944-2952) sends eth to arbitrary user
	Dangerous calls:
	- usr.transfer(wad) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2950)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations[0m
INFO:Detectors:[91m
DSPauseProxy.exec(address,bytes) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3464-3478) uses delegatecall to a input-controlled function id
	- (ok,out) = usr.delegatecall(fax) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3474)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#controlled-delegatecall[0m
INFO:Detectors:[93m
Jug.file(bytes32,bytes32,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3180-3188) uses a dangerous strict equality:
	- require(bool,string)(now == ilks[ilk].rho,Jug/rho-not-updated) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3182)
Pot.file(bytes32,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3646-3656) uses a dangerous strict equality:
	- require(bool,string)(now == rho,Pot/rho-not-updated) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3650)
Pot.join(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3702-3712) uses a dangerous strict equality:
	- require(bool,string)(now == rho,Pot/rho-not-updated) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3704)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[93m
Reentrancy in End.cage(bytes32) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1900-1914):
	External calls:
	- (Art[ilk],None,None,None,None) = vat.ilks(ilk) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1906)
	State variables written after the call(s):
	- tag[ilk] = wdiv(spot.par(),uint256(pip.read())) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1912)
Reentrancy in Flapper.deal(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2254-2266):
	External calls:
	- vat.move(address(this),bids[id].guy,bids[id].lot) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2260)
	- gem.burn(address(this),bids[id].bid) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2262)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2264)
Reentrancy in Flipper.deal(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2542-2550):
	External calls:
	- vat.flux(ilk,address(this),bids[id].guy,bids[id].lot) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2546)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2548)
Reentrancy in Flopper.deal(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2772-2782):
	External calls:
	- gem.mint(bids[id].guy,bids[id].lot) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2778)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2780)
Reentrancy in Flipper.dent(uint256,uint256,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2508-2540):
	External calls:
	- vat.move(msg.sender,bids[id].guy,bid) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2528)
	- vat.flux(ilk,address(this),bids[id].usr,bids[id].lot - lot) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2530)
	State variables written after the call(s):
	- bids[id].guy = msg.sender (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2534)
	- bids[id].lot = lot (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2536)
	- bids[id].tic = add(uint48(now),ttl) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2538)
Reentrancy in Flopper.dent(uint256,uint256,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2740-2770):
	External calls:
	- vat.move(msg.sender,bids[id].guy,bid) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2760)
	State variables written after the call(s):
	- bids[id].guy = msg.sender (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2764)
	- bids[id].lot = lot (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2766)
	- bids[id].tic = add(uint48(now),ttl) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2768)
Reentrancy in DssDeploy.deployCollateral(bytes32,address,address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#856-898):
	External calls:
	- ilks[ilk].flip = flipFab.newFlip(address(vat),ilk) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#870)
	State variables written after the call(s):
	- ilks[ilk].join = join (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#872)
Reentrancy in Jug.drip(bytes32) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3210-3222):
	External calls:
	- (prev) = vat.ilks(ilk) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3214)
	- vat.fold(ilk,vow,diff(rate,prev)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3218)
	State variables written after the call(s):
	- ilks[ilk].rho = now (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3220)
Reentrancy in Cat.file(bytes32,bytes32,address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1396-1410):
	External calls:
	- vat.nope(ilks[ilk].flip) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1400)
	State variables written after the call(s):
	- ilks[ilk].flip = flip (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1402)
Reentrancy in Vow.file(bytes32,address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#4560-4576):
	External calls:
	- vat.nope(address(flapper)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#4564)
	State variables written after the call(s):
	- flapper = FlapLike(data) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#4566)
Reentrancy in ESM.fire() (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#348-362):
	External calls:
	- end.cage() (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#356)
	State variables written after the call(s):
	- fired = 1 (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#360)
Reentrancy in End.flow(bytes32) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2012-2026):
	External calls:
	- (rate) = vat.ilks(ilk) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2020)
	State variables written after the call(s):
	- fix[ilk] = rdiv(mul(sub(wad,gap[ilk]),RAY),debt) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2024)
Reentrancy in Flapper.tend(uint256,uint256,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2220-2252):
	External calls:
	- gem.move(msg.sender,bids[id].guy,bids[id].bid) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2240)
	- gem.move(msg.sender,address(this),bid - bids[id].bid) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2242)
	State variables written after the call(s):
	- bids[id].guy = msg.sender (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2246)
	- bids[id].bid = bid (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2248)
	- bids[id].tic = add(uint48(now),ttl) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2250)
Reentrancy in Flipper.tend(uint256,uint256,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2474-2506):
	External calls:
	- vat.move(msg.sender,bids[id].guy,bids[id].bid) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2494)
	- vat.move(msg.sender,bids[id].gal,bid - bids[id].bid) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2496)
	State variables written after the call(s):
	- bids[id].guy = msg.sender (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2500)
	- bids[id].bid = bid (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2502)
	- bids[id].tic = add(uint48(now),ttl) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2504)
Reentrancy in Flapper.yank(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2278-2288):
	External calls:
	- gem.move(address(this),bids[id].guy,bids[id].bid) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2284)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2286)
Reentrancy in Flipper.yank(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2554-2566):
	External calls:
	- vat.flux(ilk,address(this),msg.sender,bids[id].lot) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2560)
	- vat.move(msg.sender,bids[id].guy,bids[id].bid) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2562)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2564)
Reentrancy in Flopper.yank(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2792-2802):
	External calls:
	- vat.move(address(this),bids[id].guy,bids[id].bid) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2798)
	State variables written after the call(s):
	- delete bids[id] (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2800)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[92m
DssDeploy.deployPause(uint256,DSAuthority).authority (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#822) shadows:
	- DSAuth.authority (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#410) (state variable)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
Reentrancy in End.cash(bytes32,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2040-2050):
	External calls:
	- vat.flux(ilk,address(this),msg.sender,rmul(wad,fix[ilk])) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2044)
	State variables written after the call(s):
	- out[ilk][msg.sender] = add(out[ilk][msg.sender],wad) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2046)
Reentrancy in Vow.constructor(address,address,address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#4500-4514):
	External calls:
	- vat.hope(flapper_) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#4510)
	State variables written after the call(s):
	- live = 1 (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#4512)
Reentrancy in DssDeploy.deployAuctions(address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#708-740):
	External calls:
	- flap = flapFab.newFlap(address(vat),gov) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#718)
	- flop = flopFab.newFlop(address(vat),gov) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#720)
	State variables written after the call(s):
	- flop = flopFab.newFlop(address(vat),gov) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#720)
Reentrancy in DssDeploy.deployAuctions(address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#708-740):
	External calls:
	- flap = flapFab.newFlap(address(vat),gov) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#718)
	- flop = flopFab.newFlop(address(vat),gov) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#720)
	- vow = vowFab.newVow(address(vat),address(flap),address(flop)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#722)
	State variables written after the call(s):
	- vow = vowFab.newVow(address(vat),address(flap),address(flop)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#722)
Reentrancy in DssDeploy.deployDai(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#666-680):
	External calls:
	- dai = daiFab.newDai(chainId) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#674)
	- daiJoin = daiJoinFab.newDaiJoin(address(vat),address(dai)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#676)
	State variables written after the call(s):
	- daiJoin = daiJoinFab.newDaiJoin(address(vat),address(dai)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#676)
Reentrancy in DssDeploy.deployShutdown(address,address,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#772-818):
	External calls:
	- end = endFab.newEnd() (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#780)
	- end.file(vat,address(vat)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#786)
	- end.file(cat,address(cat)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#788)
	- end.file(vow,address(vow)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#790)
	- end.file(pot,address(pot)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#792)
	- end.file(spot,address(spotter)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#794)
	- vat.rely(address(end)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#800)
	- cat.rely(address(end)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#802)
	- vow.rely(address(end)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#804)
	- pot.rely(address(end)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#806)
	- spotter.rely(address(end)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#808)
	- esm = esmFab.newESM(gov,address(end),address(pit),min) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#814)
	State variables written after the call(s):
	- esm = esmFab.newESM(gov,address(end),address(pit),min) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#814)
Reentrancy in DssDeploy.deployTaxation() (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#684-704):
	External calls:
	- jug = jugFab.newJug(address(vat)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#692)
	- pot = potFab.newPot(address(vat)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#694)
	State variables written after the call(s):
	- pot = potFab.newPot(address(vat)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#694)
Reentrancy in DssDeploy.deployVat() (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#648-662):
	External calls:
	- vat = vatFab.newVat() (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#652)
	- spotter = spotFab.newSpotter(address(vat)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#654)
	State variables written after the call(s):
	- spotter = spotFab.newSpotter(address(vat)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#654)
Reentrancy in End.pack(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2030-2038):
	External calls:
	- vat.move(msg.sender,address(vow),mul(wad,RAY)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2034)
	State variables written after the call(s):
	- bag[msg.sender] = add(bag[msg.sender],wad) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2036)
Reentrancy in End.skim(bytes32,address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1956-1978):
	External calls:
	- (rate) = vat.ilks(ilk) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1960)
	- (ink,art) = vat.urns(ilk,urn) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1962)
	State variables written after the call(s):
	- gap[ilk] = add(gap[ilk],sub(owe,wad)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1970)
Reentrancy in End.skip(bytes32,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1918-1952):
	External calls:
	- (flipV) = cat.ilks(ilk) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1924)
	- (rate) = vat.ilks(ilk) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1928)
	- vat.suck(address(vow),address(vow),tab) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1934)
	- vat.suck(address(vow),address(this),bid) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1936)
	- vat.hope(address(flip)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1938)
	- flip.yank(id) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1940)
	State variables written after the call(s):
	- Art[ilk] = add(Art[ilk],art) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1946)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Reentrancy in Cat.bite(bytes32,address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1416-1460):
	External calls:
	- vat.grab(ilk,urn,address(this),address(vow),- int256(lot),- int256(art)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1438)
	- vow.fess(mul(art,rate)) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1442)
	- id = Kicker(ilks[ilk].flip).kick(urn,address(vow),rmul(mul(art,rate),ilks[ilk].chop),lot,0) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1444-1454)
	Event emitted after the call(s):
	- Bite(ilk,urn,lot,art,mul(art,rate),ilks[ilk].flip,id) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1458)
Reentrancy in Flapper.kick(uint256,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2182-2208):
	External calls:
	- vat.move(msg.sender,address(this),lot) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2202)
	Event emitted after the call(s):
	- Kick(id,lot,bid) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2206)
Reentrancy in Flipper.kick(address,address,uint256,uint256,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2428-2462):
	External calls:
	- vat.flux(ilk,msg.sender,address(this),lot) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2456)
	Event emitted after the call(s):
	- Kick(id,lot,bid,tab,usr,gal) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2460)
Reentrancy in Spotter.poke(bytes32) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3878-3888):
	External calls:
	- (val,has) = ilks[ilk].pip.peek() (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3880)
	- vat.file(ilk,spot,spot) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3884)
	Event emitted after the call(s):
	- Poke(ilk,val,spot) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3886)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3[0m
INFO:Detectors:[92m
Dai.permit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1670-1714) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(expiry == 0 || now <= expiry,Dai/permit-expired) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1704)
End.add(uint256,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1794-1800) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(z >= x) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1798)
End.thaw() (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1998-2010) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now >= add(when,wait),End/wait-not-finished) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2006)
Flapper.add(uint48,uint48) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2150-2154) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)((z = x + y) >= x) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2152)
Flapper.tick(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2210-2218) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].end < now,Flapper/not-finished) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2212)
Flapper.tend(uint256,uint256,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2220-2252) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic > now || bids[id].tic == 0,Flapper/already-finished-tic) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2226)
	- require(bool,string)(bids[id].end > now,Flapper/already-finished-end) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2228)
Flapper.deal(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2254-2266) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now),Flapper/not-finished) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2258)
Flipper.add(uint48,uint48) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2396-2400) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)((z = x + y) >= x) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2398)
Flipper.tick(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2464-2472) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].end < now,Flipper/not-finished) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2466)
Flipper.tend(uint256,uint256,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2474-2506) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic > now || bids[id].tic == 0,Flipper/already-finished-tic) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2478)
	- require(bool,string)(bids[id].end > now,Flipper/already-finished-end) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2480)
Flipper.dent(uint256,uint256,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2508-2540) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic > now || bids[id].tic == 0,Flipper/already-finished-tic) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2512)
	- require(bool,string)(bids[id].end > now,Flipper/already-finished-end) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2514)
Flipper.deal(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2542-2550) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now),Flipper/not-finished) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2544)
Flopper.add(uint48,uint48) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2670-2674) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)((z = x + y) >= x) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2672)
Flopper.tick(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2728-2738) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].end < now,Flopper/not-finished) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2730)
Flopper.dent(uint256,uint256,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2740-2770) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic > now || bids[id].tic == 0,Flopper/already-finished-tic) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2746)
	- require(bool,string)(bids[id].end > now,Flopper/already-finished-end) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2748)
Flopper.deal(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2772-2782) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(bids[id].tic != 0 && (bids[id].tic < now || bids[id].end < now),Flopper/not-finished) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2776)
Jug.add(uint256,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3138-3144) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(z >= x) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3142)
Jug.init(bytes32) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3168-3178) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(i.duty == 0,Jug/ilk-already-init) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3172)
Jug.file(bytes32,bytes32,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3180-3188) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now == ilks[ilk].rho,Jug/rho-not-updated) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3182)
Jug.drip(bytes32) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3210-3222) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now >= ilks[ilk].rho,Jug/invalid-now) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3212)
DSPause.add(uint256,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3322-3328) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(z >= x,ds-pause-addition-overflow) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3326)
DSPause.plot(address,bytes32,bytes,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3398-3408) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(eta >= add(now,delay),ds-pause-delay-not-respected) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3404)
DSPause.exec(address,bytes32,bytes,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3424-3448) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now >= eta,ds-pause-premature-exec) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3436)
Pot.file(bytes32,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3646-3656) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now == rho,Pot/rho-not-updated) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3650)
Pot.drip() (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3682-3696) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now >= rho,Pot/invalid-now) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3684)
Pot.join(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3702-3712) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(now == rho,Pot/rho-not-updated) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3704)
Vow.flog(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#4592-4600) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool,string)(add(era,wait) <= now,Vow/wait-not-finished) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#4594)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp[0m
INFO:Detectors:[92m
Jug.rpow(uint256,uint256,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3090-3134) uses assembly
	- INLINE ASM (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3092-3134)
DSPause.soul(address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3380-3390) uses assembly
	- INLINE ASM (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3388-3390)
Pot.rpow(uint256,uint256,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3564-3608) uses assembly
	- INLINE ASM (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3566-3608)
Vat.either(bool,bool) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#4176-4180) uses assembly
	- INLINE ASM (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#4178-4180)
Vat.both(bool,bool) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#4182-4186) uses assembly
	- INLINE ASM (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#4184-4186)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage[0m
INFO:Detectors:[92m
Pragma version>=0.5<0.7.17 (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#10) uses lesser than
solc-0.5.2 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity[0m
INFO:Detectors:[92m
Low level call in DSPauseProxy.exec(address,bytes) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3464-3478):
	- (ok,out) = usr.delegatecall(fax) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3474)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Variable ESM.Sum (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#262) is not in mixedCase
Constant Dai.version (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1500) is not in UPPER_CASE_WITH_UNDERSCORES
Variable Dai.DOMAIN_SEPARATOR (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1540) is not in mixedCase
Variable End.Art (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1768) is not in mixedCase
Variable Pot.Pie (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3520) is not in mixedCase
Variable Vat.Line (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3978) is not in mixedCase
Variable Vow.Sin (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#4474) is not in mixedCase
Variable Vow.Ash (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#4476) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
DssDeploy.ONE (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#562) is never used in DssDeploy (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#494-934)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variables[0m
INFO:Detectors:[92m
DssDeploy.step (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#558) should be constant
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
newVat() should be declared external:
	- VatFab.newVat() (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#16-24)
newJug(address) should be declared external:
	- JugFab.newJug(address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#32-40)
newVow(address,address,address) should be declared external:
	- VowFab.newVow(address,address,address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#48-56)
newCat(address) should be declared external:
	- CatFab.newCat(address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#64-72)
newDai(uint256) should be declared external:
	- DaiFab.newDai(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#80-88)
newDaiJoin(address,address) should be declared external:
	- DaiJoinFab.newDaiJoin(address,address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#96-100)
newFlap(address,address) should be declared external:
	- FlapFab.newFlap(address,address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#108-116)
newFlop(address,address) should be declared external:
	- FlopFab.newFlop(address,address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#124-132)
newFlip(address,bytes32) should be declared external:
	- FlipFab.newFlip(address,bytes32) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#140-148)
newSpotter(address) should be declared external:
	- SpotFab.newSpotter(address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#156-164)
newPot(address) should be declared external:
	- PotFab.newPot(address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#172-180)
newEnd() should be declared external:
	- EndFab.newEnd() (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#188-196)
newESM(address,address,address,uint256) should be declared external:
	- ESMFab.newESM(address,address,address,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#204-208)
newPause(uint256,address,DSAuthority) should be declared external:
	- PauseFab.newPause(uint256,address,DSAuthority) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#216-220)
balanceOf(address) should be declared external:
	- GemLikeESM.balanceOf(address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#228)
transfer(address,uint256) should be declared external:
	- GemLikeESM.transfer(address,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#230)
transferFrom(address,address,uint256) should be declared external:
	- GemLikeESM.transferFrom(address,address,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#232)
cage() should be declared external:
	- EndLike.cage() (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#240)
canCall(address,address,bytes4) should be declared external:
	- DSAuthority.canCall(address,address,bytes4) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#388-392)
setOwner(address) should be declared external:
	- DSPause.setOwner(address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3294-3300)
	- DSAuth.setOwner(address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#426-438)
setAuthority(DSAuthority) should be declared external:
	- DSPause.setAuthority(DSAuthority) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3302-3308)
	- DSAuth.setAuthority(DSAuthority) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#442-454)
deployVat() should be declared external:
	- DssDeploy.deployVat() (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#648-662)
deployDai(uint256) should be declared external:
	- DssDeploy.deployDai(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#666-680)
deployTaxation() should be declared external:
	- DssDeploy.deployTaxation() (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#684-704)
deployAuctions(address) should be declared external:
	- DssDeploy.deployAuctions(address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#708-740)
deployLiquidator() should be declared external:
	- DssDeploy.deployLiquidator() (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#744-768)
deployShutdown(address,address,uint256) should be declared external:
	- DssDeploy.deployShutdown(address,address,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#772-818)
deployPause(uint256,DSAuthority) should be declared external:
	- DssDeploy.deployPause(uint256,DSAuthority) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#822-852)
deployCollateral(bytes32,address,address) should be declared external:
	- DssDeploy.deployCollateral(bytes32,address,address) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#856-898)
releaseAuth() should be declared external:
	- DssDeploy.releaseAuth() (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#902-924)
releaseAuthFlip(bytes32) should be declared external:
	- DssDeploy.releaseAuthFlip(bytes32) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#928-932)
kick(address,address,uint256,uint256,uint256) should be declared external:
	- Kicker.kick(address,address,uint256,uint256,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#940-942)
decimals() should be declared external:
	- GemLike.decimals() (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#1164)
kick(address,address,uint256,uint256,uint256) should be declared external:
	- Flipper.kick(address,address,uint256,uint256,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#2428-2462)
setDelay(uint256) should be declared external:
	- DSPause.setDelay(uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3310-3314)
plot(address,bytes32,bytes,uint256) should be declared external:
	- DSPause.plot(address,bytes32,bytes,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3398-3408)
drop(address,bytes32,bytes,uint256) should be declared external:
	- DSPause.drop(address,bytes32,bytes,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3412-3420)
exec(address,bytes32,bytes,uint256) should be declared external:
	- DSPause.exec(address,bytes32,bytes,uint256) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3424-3448)
exec(address,bytes) should be declared external:
	- DSPauseProxy.exec(address,bytes) (noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol#3464-3478)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external[0m
INFO:Slither:./noloops/0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol analyzed (64 contracts with 46 detectors), 122 result(s) found
INFO:Slither:[94mUse https://crytic.io/ to get access to additional detectors and Github integration[0m

---------------------------------------------
For contract 0x6e24943a974a610a0d017e1649eb1ecbdee16eef.sol
Tool Runtime = 10.36098168999888 seconds
#############################################