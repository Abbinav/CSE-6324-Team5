[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibNote
Line:        40
Source: 
>         _;
>         assembly {
>         ^^^^^^^^^^
>             // log an 'anonymous' event with a constant 6 words of calldata

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GemJoin
Line:        147
Source: 
>     }
>     function join(address usr, uint wad) external note {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(live == 1, "GemJoin/not-live");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GemJoin
Line:        153
Source: 
>     }
>     function exit(address usr, uint wad) external note {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(wad <= 2 ** 255, "GemJoin/overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETHJoin
Line:        183
Source: 
>     }
>     function join(address usr) external payable note {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(live == 1, "ETHJoin/not-live");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DaiJoin
Line:        222
Source: 
>     }
>     function join(address usr, uint wad) external note {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vat.move(address(this), usr, mul(ONE, wad));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DaiJoin
Line:        226
Source: 
>     }
>     function exit(address usr, uint wad) external note {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(live == 1, "DaiJoin/not-live");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GemJoin
Line:        123
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) external note auth { wards[usr] = 1; }
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) external note auth { wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GemJoin
Line:        124
Source: 
>     function rely(address usr) external note auth { wards[usr] = 1; }
>     function deny(address usr) external note auth { wards[usr] = 0; }
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHJoin
Line:        163
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) external note auth { wards[usr] = 1; }
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) external note auth { wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHJoin
Line:        164
Source: 
>     function rely(address usr) external note auth { wards[usr] = 1; }
>     function deny(address usr) external note auth { wards[usr] = 0; }
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHJoin
Line:        188
Source: 
>     }
>     function exit(address payable usr, uint wad) external note {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(int(wad) >= 0, "ETHJoin/overflow");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DaiJoin
Line:        198
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) external note auth { wards[usr] = 1; }
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) external note auth { wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DaiJoin
Line:        199
Source: 
>     function rely(address usr) external note auth { wards[usr] = 1; }
>     function deny(address usr) external note auth { wards[usr] = 0; }
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth {

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        11
Source: 
> //pragma solidity =0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DaiJoin
Line:        218
Source: 
>     }
>     uint constant ONE = 10 ** 27;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function mul(uint x, uint y) internal pure returns (uint z) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    ETHJoin
Line:        191
Source: 
>         vat.slip(ilk, msg.sender, -int(wad));
>         usr.transfer(wad);
>          ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHJoin
Line:        191
Source: 
>         vat.slip(ilk, msg.sender, -int(wad));
>         usr.transfer(wad);
>          ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHJoin
Line:        191
Source: 
>         vat.slip(ilk, msg.sender, -int(wad));
>         usr.transfer(wad);
>          ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GemJoin
Line:        151
Source: 
>         vat.slip(ilk, usr, int(wad));
>         require(gem.transferFrom(msg.sender, address(this), wad), "GemJoin/failed-transfer");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GemJoin
Line:        156
Source: 
>         vat.slip(ilk, msg.sender, -int(wad));
>         require(gem.transfer(usr, wad), "GemJoin/failed-transfer");
>                  ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GemJoin
Line:        142
Source: 
>         gem = GemLike(gem_);
>         dec = gem.decimals();
>                ^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GemJoin
Line:        150
Source: 
>         require(int(wad) >= 0, "GemJoin/overflow");
>         vat.slip(ilk, usr, int(wad));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(gem.transferFrom(msg.sender, address(this), wad), "GemJoin/failed-transfer");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GemJoin
Line:        155
Source: 
>         require(wad <= 2 ** 255, "GemJoin/overflow");
>         vat.slip(ilk, msg.sender, -int(wad));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(gem.transfer(usr, wad), "GemJoin/failed-transfer");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ETHJoin
Line:        186
Source: 
>         require(int(msg.value) >= 0, "ETHJoin/overflow");
>         vat.slip(ilk, usr, int(msg.value));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ETHJoin
Line:        190
Source: 
>         require(int(wad) >= 0, "ETHJoin/overflow");
>         vat.slip(ilk, msg.sender, -int(wad));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usr.transfer(wad);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaiJoin
Line:        223
Source: 
>     function join(address usr, uint wad) external note {
>         vat.move(address(this), usr, mul(ONE, wad));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dai.burn(msg.sender, wad);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaiJoin
Line:        224
Source: 
>         vat.move(address(this), usr, mul(ONE, wad));
>         dai.burn(msg.sender, wad);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaiJoin
Line:        228
Source: 
>         require(live == 1, "DaiJoin/not-live");
>         vat.move(msg.sender, address(this), mul(ONE, wad));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dai.mint(usr, wad);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaiJoin
Line:        229
Source: 
>         vat.move(msg.sender, address(this), mul(ONE, wad));
>         dai.mint(usr, wad);
>          ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DaiJoin
Line:        220
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x);
>                             ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GemJoin
Line:        133
Source: 
>     GemLike public gem;
>     uint    public dec;
>      ^^^^^^^^^^^^^^^^^^
>     uint    public live;  // Access Flag

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ETHJoin
Line:        191
Source: 
>         vat.slip(ilk, msg.sender, -int(wad));
>         usr.transfer(wad);
>          ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GemJoin
Line:        142
Source: 
>         gem = GemLike(gem_);
>         dec = gem.decimals();
>                ^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    GemJoin
Line:        133
Source: 
>     GemLike public gem;
>     uint    public dec;
>      ^^^^^^^^^^^^^^^^^^
>     uint    public live;  // Access Flag

[0m

---------------------------------------------
For contract 0x1856298fAD423F63158A3ED1c7d98490840E6C14.sol
Tool Runtime = 4.608916600000157 seconds
#############################################