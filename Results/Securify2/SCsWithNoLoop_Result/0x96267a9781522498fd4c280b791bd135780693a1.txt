[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Proxy
Line:        37
Source: 
>   function _delegate(address implementation) internal {
>     assembly {
>     ^^^^^^^^^^
>       // Copy msg.data. We take full control of memory in this inline assembly

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OpenZeppelinUpgradesAddress
Line:        104
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { size := extcodesize(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return size > 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BaseUpgradeabilityProxy
Line:        141
Source: 
>     bytes32 slot = IMPLEMENTATION_SLOT;
>     assembly {
>     ^^^^^^^^^^
>       impl := sload(slot)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BaseUpgradeabilityProxy
Line:        164
Source: 
> 
>     assembly {
>     ^^^^^^^^^^
>       sstore(slot, newImplementation)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BaseAdminUpgradeabilityProxy
Line:        295
Source: 
>     bytes32 slot = ADMIN_SLOT;
>     assembly {
>     ^^^^^^^^^^
>       adm := sload(slot)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BaseAdminUpgradeabilityProxy
Line:        307
Source: 
> 
>     assembly {
>     ^^^^^^^^^^
>       sstore(slot, newAdmin)

[0m
[0;33mSeverity:    HIGH
Pattern:     Delegatecall or callcode to unrestricted address
Description: The address of a delegatecall or callcode must be
             approved by the contract owner.
Type:        Warning
Contract:    BaseAdminUpgradeabilityProxy
Line:        286
Source: 
>     _upgradeTo(newImplementation);
>     (bool success,) = newImplementation.delegatecall(data);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(success);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    BaseUpgradeabilityProxy
Line:        121
Source: 
>  */
> contract BaseUpgradeabilityProxy is Proxy {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   /**

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    UpgradeabilityProxy
Line:        193
Source: 
>     if(_data.length > 0) {
>       (bool success,) = _logic.delegatecall(_data);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(success);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    BaseAdminUpgradeabilityProxy
Line:        286
Source: 
>     _upgradeTo(newImplementation);
>     (bool success,) = newImplementation.delegatecall(data);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(success);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    UpgradeabilityProxy
Line:        193
Source: 
>     if(_data.length > 0) {
>       (bool success,) = _logic.delegatecall(_data);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(success);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    BaseAdminUpgradeabilityProxy
Line:        286
Source: 
>     _upgradeTo(newImplementation);
>     (bool success,) = newImplementation.delegatecall(data);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(success);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseAdminUpgradeabilityProxy
Line:        260
Source: 
>    */
>   function changeAdmin(address newAdmin) external ifAdmin {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(newAdmin != address(0), "Cannot change the admin of a proxy to the zero address");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseAdminUpgradeabilityProxy
Line:        271
Source: 
>    */
>   function upgradeTo(address newImplementation) external ifAdmin {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _upgradeTo(newImplementation);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseAdminUpgradeabilityProxy
Line:        284
Source: 
>    */
>   function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _upgradeTo(newImplementation);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseAdminUpgradeabilityProxy
Line:        260
Source: 
>    */
>   function changeAdmin(address newAdmin) external ifAdmin {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(newAdmin != address(0), "Cannot change the admin of a proxy to the zero address");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseAdminUpgradeabilityProxy
Line:        271
Source: 
>    */
>   function upgradeTo(address newImplementation) external ifAdmin {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _upgradeTo(newImplementation);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseAdminUpgradeabilityProxy
Line:        284
Source: 
>    */
>   function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _upgradeTo(newImplementation);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AdminUpgradeabilityProxy
Line:        341
Source: 
>    */
>   constructor(address _logic, address _admin, bytes memory _data) UpgradeabilityProxy(_logic, _data) public payable {
>                               ^^^^^^^^^^^^^^
>     assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UpgradeabilityProxy
Line:        193
Source: 
>     if(_data.length > 0) {
>       (bool success,) = _logic.delegatecall(_data);
>        ^^^^^^^^^^^^
>       require(success);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BaseAdminUpgradeabilityProxy
Line:        286
Source: 
>     _upgradeTo(newImplementation);
>     (bool success,) = newImplementation.delegatecall(data);
>      ^^^^^^^^^^^^
>     require(success);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        77
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        111
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        172
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        201
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        323
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    OpenZeppelinUpgradesAddress
Line:        105
Source: 
>         assembly { size := extcodesize(account) }
>         return size > 0;
>                ^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    UpgradeabilityProxy
Line:        193
Source: 
>     if(_data.length > 0) {
>       (bool success,) = _logic.delegatecall(_data);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(success);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BaseUpgradeabilityProxy
Line:        160
Source: 
>   function _setImplementation(address newImplementation) internal {
>     require(OpenZeppelinUpgradesAddress.isContract(newImplementation), "Cannot set a proxy implementation to a non-contract address");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BaseAdminUpgradeabilityProxy
Line:        262
Source: 
>     require(newAdmin != address(0), "Cannot change the admin of a proxy to the zero address");
>     emit AdminChanged(_admin(), newAdmin);
>                       ^^^^^^^^
>     _setAdmin(newAdmin);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BaseAdminUpgradeabilityProxy
Line:        316
Source: 
>   function _willFallback() internal {
>     require(msg.sender != _admin(), "Cannot call fallback function from the proxy admin");
>                           ^^^^^^^^
>     super._willFallback();

[0m

---------------------------------------------
For contract 0x96267a9781522498fd4c280b791bd135780693a1.sol
Tool Runtime = 3.3382618729997375 seconds
#############################################