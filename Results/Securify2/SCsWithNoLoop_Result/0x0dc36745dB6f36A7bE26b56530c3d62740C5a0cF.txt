[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DsrManager
Line:        132
Source: 
> 
>     function exitAll(address dst) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DsrManager
Line:        98
Source: 
> 
>     function daiBalance(address usr) external returns (uint256 wad) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DsrManager
Line:        104
Source: 
>     // wad is denominated in dai
>     function join(address dst, uint256 wad) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DsrManager
Line:        117
Source: 
>     // wad is denominated in dai
>     function exit(address dst, uint256 wad) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DsrManager
Line:        72
Source: 
>     function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require(y == 0 || (z = x * y) / y == x);
>                                ^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DsrManager
Line:        105
Source: 
>     function join(address dst, uint256 wad) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                              ^^^^^^^^^
>         uint256 pie = rdiv(wad, chi);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DsrManager
Line:        105
Source: 
>     function join(address dst, uint256 wad) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                           ^^^^^^^^^^
>         uint256 pie = rdiv(wad, chi);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DsrManager
Line:        110
Source: 
> 
>         dai.transferFrom(msg.sender, address(this), wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         daiJoin.join(address(this), wad);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DsrManager
Line:        111
Source: 
>         dai.transferFrom(msg.sender, address(this), wad);
>         daiJoin.join(address(this), wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pot.join(pie);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DsrManager
Line:        112
Source: 
>         daiJoin.join(address(this), wad);
>         pot.join(pie);
>         ^^^^^^^^^^^^^
>         emit Join(dst, wad);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DsrManager
Line:        105
Source: 
>     function join(address dst, uint256 wad) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                                        ^^^^^^^^^
>         uint256 pie = rdiv(wad, chi);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DsrManager
Line:        118
Source: 
>     function exit(address dst, uint256 wad) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                              ^^^^^^^^^
>         uint256 pie = rdivup(wad, chi);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DsrManager
Line:        118
Source: 
>     function exit(address dst, uint256 wad) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                           ^^^^^^^^^^
>         uint256 pie = rdivup(wad, chi);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DsrManager
Line:        126
Source: 
> 
>         pot.exit(pie);
>         ^^^^^^^^^^^^^
>         uint256 amt = rmul(chi, pie);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DsrManager
Line:        128
Source: 
>         uint256 amt = rmul(chi, pie);
>         daiJoin.exit(dst, amt);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit Exit(dst, amt);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DsrManager
Line:        118
Source: 
>     function exit(address dst, uint256 wad) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                                        ^^^^^^^^^
>         uint256 pie = rdivup(wad, chi);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DsrManager
Line:        133
Source: 
>     function exitAll(address dst) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                              ^^^^^^^^^
>         uint256 pie = pieOf[msg.sender];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DsrManager
Line:        133
Source: 
>     function exitAll(address dst) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                           ^^^^^^^^^^
>         uint256 pie = pieOf[msg.sender];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DsrManager
Line:        139
Source: 
> 
>         pot.exit(pie);
>         ^^^^^^^^^^^^^
>         uint256 amt = rmul(chi, pie);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DsrManager
Line:        141
Source: 
>         uint256 amt = rmul(chi, pie);
>         daiJoin.exit(dst, amt);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit Exit(dst, amt);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DsrManager
Line:        133
Source: 
>     function exitAll(address dst) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                                        ^^^^^^^^^
>         uint256 pie = pieOf[msg.sender];

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    DsrManager
Line:        93
Source: 
>         VatLike vat = VatLike(pot.vat());
>         vat.hope(address(daiJoin));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vat.hope(address(pot));

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    DsrManager
Line:        94
Source: 
>         vat.hope(address(daiJoin));
>         vat.hope(address(pot));
>         ^^^^^^^^^^^^^^^^^^^^^^
>         dai.approve(address(daiJoin), uint256(-1));

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        26
Source: 
> //pragma solidity ^0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DsrManager
Line:        64
Source: 
> 
>     uint256 constant RAY = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function add(uint256 x, uint256 y) internal pure returns (uint256 z) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DsrManager
Line:        99
Source: 
>     function daiBalance(address usr) external returns (uint256 wad) {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                              ^^^^^^^^^
>         wad = rmul(chi, pieOf[usr]);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DsrManager
Line:        99
Source: 
>     function daiBalance(address usr) external returns (uint256 wad) {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                           ^^^^^^^^^^
>         wad = rmul(chi, pieOf[usr]);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DsrManager
Line:        99
Source: 
>     function daiBalance(address usr) external returns (uint256 wad) {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                                        ^^^^^^^^^
>         wad = rmul(chi, pieOf[usr]);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DsrManager
Line:        105
Source: 
>     function join(address dst, uint256 wad) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                              ^^^^^^^^^
>         uint256 pie = rdiv(wad, chi);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DsrManager
Line:        105
Source: 
>     function join(address dst, uint256 wad) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                           ^^^^^^^^^^
>         uint256 pie = rdiv(wad, chi);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DsrManager
Line:        105
Source: 
>     function join(address dst, uint256 wad) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                                        ^^^^^^^^^
>         uint256 pie = rdiv(wad, chi);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DsrManager
Line:        118
Source: 
>     function exit(address dst, uint256 wad) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                              ^^^^^^^^^
>         uint256 pie = rdivup(wad, chi);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DsrManager
Line:        118
Source: 
>     function exit(address dst, uint256 wad) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                           ^^^^^^^^^^
>         uint256 pie = rdivup(wad, chi);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DsrManager
Line:        118
Source: 
>     function exit(address dst, uint256 wad) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                                        ^^^^^^^^^
>         uint256 pie = rdivup(wad, chi);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DsrManager
Line:        133
Source: 
>     function exitAll(address dst) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                              ^^^^^^^^^
>         uint256 pie = pieOf[msg.sender];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DsrManager
Line:        133
Source: 
>     function exitAll(address dst) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                           ^^^^^^^^^^
>         uint256 pie = pieOf[msg.sender];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DsrManager
Line:        133
Source: 
>     function exitAll(address dst) external {
>         uint256 chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                                        ^^^^^^^^^
>         uint256 pie = pieOf[msg.sender];

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DsrManager
Line:        90
Source: 
>         daiJoin = JoinLike(daiJoin_);
>         dai = GemLike(daiJoin.dai());
>                       ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DsrManager
Line:        92
Source: 
> 
>         VatLike vat = VatLike(pot.vat());
>                               ^^^^^^^^^
>         vat.hope(address(daiJoin));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DsrManager
Line:        93
Source: 
>         VatLike vat = VatLike(pot.vat());
>         vat.hope(address(daiJoin));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vat.hope(address(pot));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DsrManager
Line:        94
Source: 
>         vat.hope(address(daiJoin));
>         vat.hope(address(pot));
>         ^^^^^^^^^^^^^^^^^^^^^^
>         dai.approve(address(daiJoin), uint256(-1));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DsrManager
Line:        95
Source: 
>         vat.hope(address(pot));
>         dai.approve(address(daiJoin), uint256(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DsrManager
Line:        110
Source: 
> 
>         dai.transferFrom(msg.sender, address(this), wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         daiJoin.join(address(this), wad);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DsrManager
Line:        111
Source: 
>         dai.transferFrom(msg.sender, address(this), wad);
>         daiJoin.join(address(this), wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pot.join(pie);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DsrManager
Line:        112
Source: 
>         daiJoin.join(address(this), wad);
>         pot.join(pie);
>         ^^^^^^^^^^^^^
>         emit Join(dst, wad);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DsrManager
Line:        126
Source: 
> 
>         pot.exit(pie);
>         ^^^^^^^^^^^^^
>         uint256 amt = rmul(chi, pie);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DsrManager
Line:        128
Source: 
>         uint256 amt = rmul(chi, pie);
>         daiJoin.exit(dst, amt);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit Exit(dst, amt);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DsrManager
Line:        139
Source: 
> 
>         pot.exit(pie);
>         ^^^^^^^^^^^^^
>         uint256 amt = rmul(chi, pie);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DsrManager
Line:        141
Source: 
>         uint256 amt = rmul(chi, pie);
>         daiJoin.exit(dst, amt);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit Exit(dst, amt);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DsrManager
Line:        66
Source: 
>     function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x + y) >= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DsrManager
Line:        69
Source: 
>     function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x - y) <= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DsrManager
Line:        72
Source: 
>     function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require(y == 0 || (z = x * y) / y == x);
>                            ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DsrManager
Line:        54
Source: 
>     PotLike  public pot;
>     GemLike  public dai;
>     ^^^^^^^^^^^^^^^^^^^
>     JoinLike public daiJoin;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DsrManager
Line:        57
Source: 
> 
>     uint256 public supply;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DsrManager
Line:        107
Source: 
>         uint256 pie = rdiv(wad, chi);
>         pieOf[dst] = add(pieOf[dst], pie);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         supply = add(supply, pie);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DsrManager
Line:        108
Source: 
>         pieOf[dst] = add(pieOf[dst], pie);
>         supply = add(supply, pie);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DsrManager
Line:        137
Source: 
>         pieOf[msg.sender] = 0;
>         supply = sub(supply, pie);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DsrManager
Line:        95
Source: 
>         vat.hope(address(pot));
>         dai.approve(address(daiJoin), uint256(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DsrManager
Line:        110
Source: 
> 
>         dai.transferFrom(msg.sender, address(this), wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         daiJoin.join(address(this), wad);

[0m

---------------------------------------------
For contract 0x0dc36745dB6f36A7bE26b56530c3d62740C5a0cF.sol
Tool Runtime = 4.202701837000859 seconds
#############################################