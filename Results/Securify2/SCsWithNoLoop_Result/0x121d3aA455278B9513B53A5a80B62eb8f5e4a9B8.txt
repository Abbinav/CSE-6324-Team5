[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        366
Source: 
>          //(bool success, ) = recipient.call{ value: amount }("");
>         (bool success, ) = recipient.call.value(amount)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        484
Source: 
>  *
>  * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * functions have been added to mitigate the well-known issues around setting

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CornRole
Line:        870
Source: 
>     modifier onlyMinter() {
>         require(_isMinter[_msgSender()], "Role: caller is not a minter");
>                                                                        ^^
>         _;

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        339
Source: 
>         uint256 size;
>         // solhint-disable-next-line no-inline-assembly
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly { size := extcodesize(account) }

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        346
Source: 
>      * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
>      * `recipient`, forwarding all available gas and reverting on errors.
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        567
Source: 
>      * Requirements:
>      *
>    ^^^
>      * - `recipient` cannot be the zero address.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        571
Source: 
>      */
>     function transfer(address recipient, uint256 amount) public   returns (bool) {
>                                                                        ^^^^^^^^^^^
>         _transfer(_msgSender(), recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        599
Source: 
>      * Emits an {Approval} event indicating the updated allowance. This is not
>      * required by the EIP. See the note at the beginning of {ERC20};
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        602
Source: 
>      * Requirements:
>      * - `sender` and `recipient` cannot be the zero address.
>                                              ^^^^^^^^^^^^^^^^
>      * - `sender` must have a balance of at least `amount`.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        604
Source: 
>      * - `sender` must have a balance of at least `amount`.
>      * - the caller must have allowance for ``sender``'s tokens of at least
>                                                                        ^^^^
>      * `amount`.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        610
Source: 
>         _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
>         return true;
>   ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        617
Source: 
>      * This is an alternative to {approve} that can be used as a mitigation for
>      * problems described in {IERC20-approve}.
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        625
Source: 
>      */
>     function increaseAllowance(address spender, uint256 addedValue) public  returns (bool) {
>                                                                         ^^^^^^^^^^^^^^^^^^^^
>         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        642
Source: 
>      * - `spender` must have allowance for the caller of at least
>      * `subtractedValue`.
>                       ^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        661
Source: 
>      * - `recipient` cannot be the zero address.
>      * - `sender` must have a balance of at least `amount`.
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        677
Source: 
>      *
>      * Emits a {Transfer} event with `from` set to the zero address.
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CornRole
Line:        888
Source: 
>     /**
>      * @dev Transfers ownership of the contract to a new account (`newOwner`).
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * Can only be called by the current owner.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CornRole
Line:        891
Source: 
>      */
>     function transferOwnership(address newOwner, uint8 comfirm) public  onlyOwner {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Role: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CornRole
Line:        893
Source: 
>         require(newOwner != address(0), "Role: new owner is the zero address");
>         require(comfirm == 202, "Role: need [202] code for confirmation");
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CornRole
Line:        914
Source: 
>     function removeMinter(address minter, uint8 comfirm) public  onlyOwner {
>         require(_isMinter[minter], "Role: this address is not minter");
>                                                               ^^^^^^^^^
>         require(comfirm == 202, "Role: need [202] code for confirmation");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CornRole
Line:        928
Source: 
>      */
>     constructor () ERC20('Corn Token', 'CORN') public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _maxSupply = 21*(10**24);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CornRole
Line:        944
Source: 
>      * Emits a {Transfer} event with `from` set to the zero address.
>      * Requirements
>    ^^^^^^^^^^^^^^^^
>      * - `account` cannot be the zero address.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CornRole
Line:        956
Source: 
>      * See {ERC20-_burn}.
>      * Can only be called by a minter address.
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        567
Source: 
>      * Requirements:
>      *
>    ^^^
>      * - `recipient` cannot be the zero address.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        571
Source: 
>      */
>     function transfer(address recipient, uint256 amount) public   returns (bool) {
>                                                                        ^^^^^^^^^^^
>         _transfer(_msgSender(), recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        599
Source: 
>      * Emits an {Approval} event indicating the updated allowance. This is not
>      * required by the EIP. See the note at the beginning of {ERC20};
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        604
Source: 
>      * - `sender` must have a balance of at least `amount`.
>      * - the caller must have allowance for ``sender``'s tokens of at least
>                                                                        ^^^^
>      * `amount`.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        610
Source: 
>         _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
>         return true;
>   ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        625
Source: 
>      */
>     function increaseAllowance(address spender, uint256 addedValue) public  returns (bool) {
>                                                                         ^^^^^^^^^^^^^^^^^^^^
>         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        642
Source: 
>      * - `spender` must have allowance for the caller of at least
>      * `subtractedValue`.
>                       ^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        661
Source: 
>      * - `recipient` cannot be the zero address.
>      * - `sender` must have a balance of at least `amount`.
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        677
Source: 
>      *
>      * Emits a {Transfer} event with `from` set to the zero address.
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Burnable
Line:        834
Source: 
>         _owner = msgSender;
>         emit OwnershipTransferred(address(0), msgSender);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Burnable
Line:        852
Source: 
>     /**
>      * @dev Return total number of minters.
>                            ^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CornRole
Line:        888
Source: 
>     /**
>      * @dev Transfers ownership of the contract to a new account (`newOwner`).
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * Can only be called by the current owner.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CornRole
Line:        891
Source: 
>      */
>     function transferOwnership(address newOwner, uint8 comfirm) public  onlyOwner {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Role: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CornRole
Line:        893
Source: 
>         require(newOwner != address(0), "Role: new owner is the zero address");
>         require(comfirm == 202, "Role: need [202] code for confirmation");
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CornRole
Line:        914
Source: 
>     function removeMinter(address minter, uint8 comfirm) public  onlyOwner {
>         require(_isMinter[minter], "Role: this address is not minter");
>                                                               ^^^^^^^^^
>         require(comfirm == 202, "Role: need [202] code for confirmation");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CornRole
Line:        928
Source: 
>      */
>     constructor () ERC20('Corn Token', 'CORN') public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _maxSupply = 21*(10**24);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CornRole
Line:        944
Source: 
>      * Emits a {Transfer} event with `from` set to the zero address.
>      * Requirements
>    ^^^^^^^^^^^^^^^^
>      * - `account` cannot be the zero address.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CornRole
Line:        956
Source: 
>      * See {ERC20-_burn}.
>      * Can only be called by a minter address.
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CornToken
Line:        962
Source: 
> 
> }


[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CornToken
Line:        962
Source: 
> 
> }


[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CornToken
Line:        962
Source: 
> 
> }


[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        399
Source: 
>     function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
>         return _functionCallWithValue(target, data, 0, errorMessage);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        477
Source: 
>  * of returning `false` on failure. This behavior is nonetheless conventional
>  * and does not conflict with the expectations of ERC20 applications.
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  *

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        399
Source: 
>     function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
>         return _functionCallWithValue(target, data, 0, errorMessage);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        477
Source: 
>  * of returning `false` on failure. This behavior is nonetheless conventional
>  * and does not conflict with the expectations of ERC20 applications.
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  *

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        399
Source: 
>     function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
>         return _functionCallWithValue(target, data, 0, errorMessage);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        477
Source: 
>  * of returning `false` on failure. This behavior is nonetheless conventional
>  * and does not conflict with the expectations of ERC20 applications.
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  *

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        399
Source: 
>     function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
>         return _functionCallWithValue(target, data, 0, errorMessage);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        477
Source: 
>  * of returning `false` on failure. This behavior is nonetheless conventional
>  * and does not conflict with the expectations of ERC20 applications.
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  *

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        610
Source: 
>         _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
>         return true;
>   ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        642
Source: 
>      * - `spender` must have allowance for the caller of at least
>      * `subtractedValue`.
>                       ^^^
>      */

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        661
Source: 
>      * - `recipient` cannot be the zero address.
>      * - `sender` must have a balance of at least `amount`.
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        677
Source: 
>      *
>      * Emits a {Transfer} event with `from` set to the zero address.
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        610
Source: 
>         _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
>         return true;
>   ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        642
Source: 
>      * - `spender` must have allowance for the caller of at least
>      * `subtractedValue`.
>                       ^^^
>      */

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        661
Source: 
>      * - `recipient` cannot be the zero address.
>      * - `sender` must have a balance of at least `amount`.
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        677
Source: 
>      *
>      * Emits a {Transfer} event with `from` set to the zero address.
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Burnable
Line:        834
Source: 
>         _owner = msgSender;
>         emit OwnershipTransferred(address(0), msgSender);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Burnable
Line:        852
Source: 
>     /**
>      * @dev Return total number of minters.
>                            ^^^^^^^^^^^^^^^^
>      */

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CornToken
Line:        962
Source: 
> 
> }


[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CornToken
Line:        962
Source: 
> 
> }


[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        604
Source: 
>      * - `sender` must have a balance of at least `amount`.
>      * - the caller must have allowance for ``sender``'s tokens of at least
>                                                                        ^^^^
>      * `amount`.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        617
Source: 
>      * This is an alternative to {approve} that can be used as a mitigation for
>      * problems described in {IERC20-approve}.
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        625
Source: 
>      */
>     function increaseAllowance(address spender, uint256 addedValue) public  returns (bool) {
>                                                                         ^^^^^^^^^^^^^^^^^^^^
>         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CornRole
Line:        891
Source: 
>      */
>     function transferOwnership(address newOwner, uint8 comfirm) public  onlyOwner {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Role: new owner is the zero address");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        604
Source: 
>      * - `sender` must have a balance of at least `amount`.
>      * - the caller must have allowance for ``sender``'s tokens of at least
>                                                                        ^^^^
>      * `amount`.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        617
Source: 
>      * This is an alternative to {approve} that can be used as a mitigation for
>      * problems described in {IERC20-approve}.
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        625
Source: 
>      */
>     function increaseAllowance(address spender, uint256 addedValue) public  returns (bool) {
>                                                                         ^^^^^^^^^^^^^^^^^^^^
>         _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CornRole
Line:        891
Source: 
>      */
>     function transferOwnership(address newOwner, uint8 comfirm) public  onlyOwner {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Role: new owner is the zero address");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20
Line:        558
Source: 
>      * @dev See {IERC20-balanceOf}.
>      */
>     ^^^
>     function balanceOf(address account) public view  returns (uint256) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20
Line:        559
Source: 
>      */
>     function balanceOf(address account) public view  returns (uint256) {
>                 ^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        398
Source: 
>      */
>     function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
>                                                                                                            ^^^^^^^^^^^^
>         return _functionCallWithValue(target, data, 0, errorMessage);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        494
Source: 
> 
>     mapping (address => mapping (address => uint256)) private _allowances;
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        538
Source: 
>      * Tokens usually opt for a value of 18, imitating the relationship between
>      * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * called.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        538
Source: 
>      * Tokens usually opt for a value of 18, imitating the relationship between
>      * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is
>                                                                  ^^^^^^^^^^^^^^^
>      * called.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        541
Source: 
>      *
>      * NOTE: This information is only used for _display_ purposes: it in
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * no way affects any of the arithmetic of the contract, including

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        542
Source: 
>      * NOTE: This information is only used for _display_ purposes: it in
>      * no way affects any of the arithmetic of the contract, including
> ^^^^^^^^^^^^^^^^^^^^
>      * {IERC20-balanceOf} and {IERC20-transfer}.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        542
Source: 
>      * NOTE: This information is only used for _display_ purposes: it in
>      * no way affects any of the arithmetic of the contract, including
>                           ^^^^^^^^^^^^^^^^^^^^^^
>      * {IERC20-balanceOf} and {IERC20-transfer}.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        542
Source: 
>      * NOTE: This information is only used for _display_ purposes: it in
>      * no way affects any of the arithmetic of the contract, including
>                                                       ^^^^^^^^^^^^^^^^
>      * {IERC20-balanceOf} and {IERC20-transfer}.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CornRole
Line:        870
Source: 
>     modifier onlyMinter() {
>         require(_isMinter[_msgSender()], "Role: caller is not a minter");
>                                            ^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CornRole
Line:        870
Source: 
>     modifier onlyMinter() {
>         require(_isMinter[_msgSender()], "Role: caller is not a minter");
>                                                                        ^^
>         _;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CornRole
Line:        874
Source: 
> 
>     /**
>        
>      * @dev Leaves the contract without owner. It will not be possible to call

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CornToken
Line:        962
Source: 
> 
> }
>                                                                                                                                                                                                                           

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        367
Source: 
>         (bool success, ) = recipient.call.value(amount)("");
> 		require(success, "Address: unable to send value, recipient may have reverted");
>                 ^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20
Line:        541
Source: 
>      *
>      * NOTE: This information is only used for _display_ purposes: it in
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * no way affects any of the arithmetic of the contract, including

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CornRole
Line:        870
Source: 
>     modifier onlyMinter() {
>         require(_isMinter[_msgSender()], "Role: caller is not a minter");
>                                                                        ^^
>         _;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        772
Source: 
> /**
>  * @dev Extension of {ERC20} that allows token holders to destroy both their own
>                                                                 ^^^^^^^^^^^^^^^^
>  * tokens and those that they have an allowance for, in a way that can be

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        709
Source: 
> 
>         _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.sub(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        710
Source: 
>         _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
>         _totalSupply = _totalSupply.sub(amount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(account, address(0), amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        709
Source: 
> 
>         _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.sub(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        710
Source: 
>         _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
>         _totalSupply = _totalSupply.sub(amount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(account, address(0), amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        747
Source: 
>     /**
>      * @dev Hook that is called before any transfer of tokens. This includes
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * minting and burning.

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        748
Source: 
>      * @dev Hook that is called before any transfer of tokens. This includes
>      * minting and burning.
>                         ^^^
>      *

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        399
Source: 
>     function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
>         return _functionCallWithValue(target, data, 0, errorMessage);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        471
Source: 
>  *
>  * TIP: For a detailed writeup see our guide
>    ^^^^^^^^^^^^^^^^^^
>  * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        477
Source: 
>  * of returning `false` on failure. This behavior is nonetheless conventional
>  * and does not conflict with the expectations of ERC20 applications.
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  *

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        399
Source: 
>     function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
>         return _functionCallWithValue(target, data, 0, errorMessage);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        471
Source: 
>  *
>  * TIP: For a detailed writeup see our guide
>    ^^^^^^^^^^^^^^^^^^
>  * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        477
Source: 
>  * of returning `false` on failure. This behavior is nonetheless conventional
>  * and does not conflict with the expectations of ERC20 applications.
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  *

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        399
Source: 
>     function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
>         return _functionCallWithValue(target, data, 0, errorMessage);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        471
Source: 
>  *
>  * TIP: For a detailed writeup see our guide
>    ^^^^^^^^^^^^^^^^^^
>  * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        477
Source: 
>  * of returning `false` on failure. This behavior is nonetheless conventional
>  * and does not conflict with the expectations of ERC20 applications.
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  *

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        399
Source: 
>     function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
>         return _functionCallWithValue(target, data, 0, errorMessage);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        471
Source: 
>  *
>  * TIP: For a detailed writeup see our guide
>    ^^^^^^^^^^^^^^^^^^
>  * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        477
Source: 
>  * of returning `false` on failure. This behavior is nonetheless conventional
>  * and does not conflict with the expectations of ERC20 applications.
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  *

[0m

---------------------------------------------
For contract 0x121d3aA455278B9513B53A5a80B62eb8f5e4a9B8.sol
Tool Runtime = 8.899060677000307 seconds
#############################################