[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DSNote
Line:        44
Source: 
> 
>         assembly {
>         ^^^^^^^^^^
>             foo := calldataload(4)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Interest
Line:        201
Source: 
>     function rpow(uint x, uint n, uint base) public pure returns (uint z) {
>         assembly {
>             ^^^^^^
>             switch x case 0 {switch n case 0 {z := base} default {z := 0}}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Auth
Line:        78
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) public auth note { wards[usr] = 0; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Auth
Line:        79
Source: 
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     function deny(address usr) public auth note { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth { require(wards[msg.sender] == 1); _; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        116
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        120
Source: 
> 
>     function rmul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = safeMul(x, y) / ONE;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        124
Source: 
> 
>     function rdiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y > 0, "division by zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        116
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        124
Source: 
> 
>     function rdiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y > 0, "division by zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Interest
Line:        165
Source: 
>     // @return The new accumulated rate, as well as the difference between the debt calculated with the old and new accumulated rates.
>     function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint pie) public view returns (uint, uint) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp >= lastUpdated, "tinlake-math/invalid-timestamp");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Interest
Line:        178
Source: 
>     // @return interestBearingAmount + interest
>     function chargeInterest(uint interestBearingAmount, uint ratePerSecond, uint lastUpdated) public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (block.timestamp >= lastUpdated) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Interest
Line:        191
Source: 
>     // convert pie to debt/savings amount
>     function toAmount(uint chi, uint pie) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rmul(pie, chi);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Interest
Line:        196
Source: 
>     // convert debt/savings amount to pie
>     function toPie(uint chi, uint amount) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rdivup(amount, chi);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Auth
Line:        78
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) public auth note { wards[usr] = 0; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Auth
Line:        79
Source: 
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     function deny(address usr) public auth note { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth { require(wards[msg.sender] == 1); _; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        116
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Interest
Line:        165
Source: 
>     // @return The new accumulated rate, as well as the difference between the debt calculated with the old and new accumulated rates.
>     function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint pie) public view returns (uint, uint) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp >= lastUpdated, "tinlake-math/invalid-timestamp");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Interest
Line:        191
Source: 
>     // convert pie to debt/savings amount
>     function toAmount(uint chi, uint pie) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rmul(pie, chi);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Interest
Line:        196
Source: 
>     // convert debt/savings amount to pie
>     function toPie(uint chi, uint amount) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rdivup(amount, chi);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Assessor
Line:        318
Source: 
> 
>     function depend(bytes32 contractName, address addr) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (contractName == "navFeed") {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Assessor
Line:        330
Source: 
> 
>     function file(bytes32 name, uint value) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(name == "seniorInterestRate") {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Assessor
Line:        366
Source: 
> 
>     function seniorRatioBounds() public view returns (uint minSeniorRatio_, uint maxSeniorRatio_) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (minSeniorRatio.value, maxSeniorRatio.value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Assessor
Line:        388
Source: 
> 
>     function calcTokenPrices(uint epochNAV, uint epochReserve) public view returns (uint, uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (calcJuniorTokenPrice(epochNAV, epochReserve), calcSeniorTokenPrice(epochNAV, epochReserve));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Assessor
Line:        392
Source: 
> 
>     function calcSeniorTokenPrice(uint epochNAV, uint epochReserve) public view returns(uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if ((epochNAV == 0 && epochReserve == 0) || seniorTranche.tokenSupply() == 0) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Assessor
Line:        406
Source: 
> 
>     function calcJuniorTokenPrice(uint epochNAV, uint epochReserve) public view returns(uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if ((epochNAV == 0 && epochReserve == 0) || juniorTranche.tokenSupply() == 0) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Assessor
Line:        423
Source: 
>     /// the seniorDebt needs to be decreased
>     function repaymentUpdate(uint currencyAmount) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dripSeniorDebt();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Assessor
Line:        442
Source: 
>     /// the seniorDebt needs to be increased to accumulate interest
>     function borrowUpdate(uint currencyAmount) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dripSeniorDebt();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Assessor
Line:        485
Source: 
> 
>     function seniorBalance() public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return seniorBalance_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Assessor
Line:        489
Source: 
> 
>     function totalBalance() public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return reserve.totalBalance();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Assessor
Line:        494
Source: 
>     // changes the total amount available for borrowing loans
>     function changeReserveAvailable(uint currencyAmount) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         reserve.file("currencyAvailable", currencyAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Assessor
Line:        392
Source: 
> 
>     function calcSeniorTokenPrice(uint epochNAV, uint epochReserve) public view returns(uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if ((epochNAV == 0 && epochReserve == 0) || seniorTranche.tokenSupply() == 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Assessor
Line:        406
Source: 
> 
>     function calcJuniorTokenPrice(uint epochNAV, uint epochReserve) public view returns(uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if ((epochNAV == 0 && epochReserve == 0) || juniorTranche.tokenSupply() == 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Assessor
Line:        494
Source: 
>     // changes the total amount available for borrowing loans
>     function changeReserveAvailable(uint currencyAmount) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         reserve.file("currencyAvailable", currencyAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Auth
Line:        78
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) public auth note { wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Auth
Line:        79
Source: 
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     function deny(address usr) public auth note { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth { require(wards[msg.sender] == 1); _; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        104
Source: 
> 
>     function safeAdd(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x + y) >= x, "safe-add-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        108
Source: 
> 
>     function safeSub(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x - y) <= x, "safe-sub-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        112
Source: 
> 
>     function safeMul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y == 0 || (z = x * y) / y == x, "safe-mul-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        116
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        120
Source: 
> 
>     function rmul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = safeMul(x, y) / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        124
Source: 
> 
>     function rdiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y > 0, "division by zero");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        104
Source: 
> 
>     function safeAdd(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x + y) >= x, "safe-add-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        108
Source: 
> 
>     function safeSub(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x - y) <= x, "safe-sub-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        112
Source: 
> 
>     function safeMul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y == 0 || (z = x * y) / y == x, "safe-mul-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        116
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        120
Source: 
> 
>     function rmul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = safeMul(x, y) / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        124
Source: 
> 
>     function rdiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y > 0, "division by zero");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        165
Source: 
>     // @return The new accumulated rate, as well as the difference between the debt calculated with the old and new accumulated rates.
>     function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint pie) public view returns (uint, uint) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp >= lastUpdated, "tinlake-math/invalid-timestamp");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        178
Source: 
>     // @return interestBearingAmount + interest
>     function chargeInterest(uint interestBearingAmount, uint ratePerSecond, uint lastUpdated) public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (block.timestamp >= lastUpdated) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        191
Source: 
>     // convert pie to debt/savings amount
>     function toAmount(uint chi, uint pie) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rmul(pie, chi);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        196
Source: 
>     // convert debt/savings amount to pie
>     function toPie(uint chi, uint amount) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rdivup(amount, chi);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        200
Source: 
> 
>     function rpow(uint x, uint n, uint base) public pure returns (uint z) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Auth
Line:        78
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) public auth note { wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Auth
Line:        79
Source: 
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     function deny(address usr) public auth note { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth { require(wards[msg.sender] == 1); _; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        104
Source: 
> 
>     function safeAdd(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x + y) >= x, "safe-add-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        108
Source: 
> 
>     function safeSub(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x - y) <= x, "safe-sub-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        112
Source: 
> 
>     function safeMul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y == 0 || (z = x * y) / y == x, "safe-mul-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        116
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        120
Source: 
> 
>     function rmul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = safeMul(x, y) / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        124
Source: 
> 
>     function rdiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y > 0, "division by zero");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        165
Source: 
>     // @return The new accumulated rate, as well as the difference between the debt calculated with the old and new accumulated rates.
>     function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint pie) public view returns (uint, uint) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp >= lastUpdated, "tinlake-math/invalid-timestamp");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        178
Source: 
>     // @return interestBearingAmount + interest
>     function chargeInterest(uint interestBearingAmount, uint ratePerSecond, uint lastUpdated) public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (block.timestamp >= lastUpdated) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        191
Source: 
>     // convert pie to debt/savings amount
>     function toAmount(uint chi, uint pie) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rmul(pie, chi);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        196
Source: 
>     // convert debt/savings amount to pie
>     function toPie(uint chi, uint amount) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rdivup(amount, chi);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        200
Source: 
> 
>     function rpow(uint x, uint n, uint base) public pure returns (uint z) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Assessor
Line:        318
Source: 
> 
>     function depend(bytes32 contractName, address addr) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (contractName == "navFeed") {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Assessor
Line:        359
Source: 
> 
>     function changeSeniorAsset(uint seniorRatio_, uint seniorSupply, uint seniorRedeem) external auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dripSeniorDebt();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Assessor
Line:        388
Source: 
> 
>     function calcTokenPrices(uint epochNAV, uint epochReserve) public view returns (uint, uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (calcJuniorTokenPrice(epochNAV, epochReserve), calcSeniorTokenPrice(epochNAV, epochReserve));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Assessor
Line:        423
Source: 
>     /// the seniorDebt needs to be decreased
>     function repaymentUpdate(uint currencyAmount) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dripSeniorDebt();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Assessor
Line:        442
Source: 
>     /// the seniorDebt needs to be increased to accumulate interest
>     function borrowUpdate(uint currencyAmount) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dripSeniorDebt();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Assessor
Line:        463
Source: 
> 
>     function calcSeniorAssetValue(uint _seniorDebt, uint _seniorBalance) public pure returns(uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return safeAdd(_seniorDebt, _seniorBalance);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Math
Line:        113
Source: 
>     function safeMul(uint x, uint y) public pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "safe-mul-failed");
>                                 ^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NAVFeedLike_2
Line:        269
Source: 
> 
> interface NAVFeedLike_2 {
>     ^^^^^^^^^^^^^^^^^^^^^
>     function calcUpdateNAV() external returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrancheLike_2
Line:        275
Source: 
> 
> interface TrancheLike_2 {
>     ^^^^^^^^^^^^^^^^^^^^^
>     function tokenSupply() external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ReserveLike_2
Line:        279
Source: 
> 
> interface ReserveLike_2 {
>     ^^^^^^^^^^^^^^^^^^^^^
>     function totalBalance() external view returns(uint);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        9
Source: 
> //pragma solidity >=0.4.23 >=0.5.15 <0.6.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSNote
Line:        40
Source: 
>     modifier note {
>         bytes32 foo;
>         ^^^^^^^^^^^
>         bytes32 bar;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSNote
Line:        41
Source: 
>         bytes32 foo;
>         bytes32 bar;
>         ^^^^^^^^^^^
>         uint256 wad;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSNote
Line:        42
Source: 
>         bytes32 bar;
>         uint256 wad;
>         ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Math
Line:        102
Source: 
> contract Math {
>     uint256 constant ONE = 10 ** 27;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Assessor
Line:        350
Source: 
>         // new loans might have been repaid in the meanwhile which are not considered in the epochNAV
>         seniorDebt_ = rmul(navFeed.approximatedNAV(), seniorRatio_);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(seniorDebt_ > seniorAsset_) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Assessor
Line:        393
Source: 
>     function calcSeniorTokenPrice(uint epochNAV, uint epochReserve) public view returns(uint) {
>         if ((epochNAV == 0 && epochReserve == 0) || seniorTranche.tokenSupply() == 0) {
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             // initial token price at start 1.00

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Assessor
Line:        403
Source: 
>         }
>         return rdiv(seniorAssetValue, seniorTranche.tokenSupply());
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Assessor
Line:        407
Source: 
>     function calcJuniorTokenPrice(uint epochNAV, uint epochReserve) public view returns(uint) {
>         if ((epochNAV == 0 && epochReserve == 0) || juniorTranche.tokenSupply() == 0) {
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             // initial token price at start 1.00

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Assessor
Line:        418
Source: 
> 
>         return rdiv(safeSub(totalAssets, seniorAssetValue), juniorTranche.tokenSupply());
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Assessor
Line:        371
Source: 
>     function calcUpdateNAV() external returns (uint) {
>          return navFeed.calcUpdateNAV();
>                     ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Assessor
Line:        375
Source: 
>     function calcSeniorTokenPrice() external view returns(uint) {
>         return calcSeniorTokenPrice(navFeed.currentNAV(), reserve.totalBalance());
>                                         ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Assessor
Line:        375
Source: 
>     function calcSeniorTokenPrice() external view returns(uint) {
>         return calcSeniorTokenPrice(navFeed.currentNAV(), reserve.totalBalance());
>                                                               ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Assessor
Line:        379
Source: 
>     function calcJuniorTokenPrice() external view returns(uint) {
>         return calcJuniorTokenPrice(navFeed.currentNAV(), reserve.totalBalance());
>                                         ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Assessor
Line:        379
Source: 
>     function calcJuniorTokenPrice() external view returns(uint) {
>         return calcJuniorTokenPrice(navFeed.currentNAV(), reserve.totalBalance());
>                                                               ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Assessor
Line:        383
Source: 
>     function calcTokenPrices() external view returns (uint, uint) {
>         uint epochNAV = navFeed.currentNAV();
>                             ^^^^^^^^^^^^^^^^^
>         uint epochReserve = reserve.totalBalance();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Assessor
Line:        384
Source: 
>         uint epochNAV = navFeed.currentNAV();
>         uint epochReserve = reserve.totalBalance();
>                                 ^^^^^^^^^^^^^^^^^^^
>         return calcTokenPrices(epochNAV, epochReserve);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Assessor
Line:        490
Source: 
>     function totalBalance() public view returns (uint) {
>         return reserve.totalBalance();
>                    ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Assessor
Line:        495
Source: 
>     function changeReserveAvailable(uint currencyAmount) public auth {
>         reserve.file("currencyAvailable", currencyAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Math
Line:        105
Source: 
>     function safeAdd(uint x, uint y) public pure returns (uint z) {
>         require((z = x + y) >= x, "safe-add-failed");
>                   ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Math
Line:        109
Source: 
>     function safeSub(uint x, uint y) public pure returns (uint z) {
>         require((z = x - y) <= x, "safe-sub-failed");
>                   ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Math
Line:        113
Source: 
>     function safeMul(uint x, uint y) public pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "safe-mul-failed");
>                             ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Assessor
Line:        286
Source: 
>     // senior ratio from the last epoch executed
>     Fixed27        public seniorRatio;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Assessor
Line:        290
Source: 
>     // seniorDebt is the interest bearing amount for senior
>     uint           public seniorDebt_;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // senior balance is the rest which is not used as interest

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Assessor
Line:        293
Source: 
>     // bearing amount
>     uint           public seniorBalance_;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Assessor
Line:        296
Source: 
>     // interest rate per second for senior tranche
>     Fixed27         public seniorInterestRate;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Assessor
Line:        301
Source: 
> 
>     Fixed27         public maxSeniorRatio;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Fixed27         public minSeniorRatio;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Assessor
Line:        302
Source: 
>     Fixed27         public maxSeniorRatio;
>     Fixed27         public minSeniorRatio;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Assessor
Line:        304
Source: 
> 
>     uint            public maxReserve;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Assessor
Line:        306
Source: 
> 
>     TrancheLike_2     public seniorTranche;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     TrancheLike_2     public juniorTranche;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Assessor
Line:        307
Source: 
>     TrancheLike_2     public seniorTranche;
>     TrancheLike_2     public juniorTranche;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     NAVFeedLike_2     public navFeed;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Assessor
Line:        308
Source: 
>     TrancheLike_2     public juniorTranche;
>     NAVFeedLike_2     public navFeed;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ReserveLike_2     public reserve;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Assessor
Line:        309
Source: 
>     NAVFeedLike_2     public navFeed;
>     ReserveLike_2     public reserve;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Assessor
Line:        471
Source: 
>         if (newSeniorDebt > seniorDebt_) {
>             seniorDebt_ = newSeniorDebt;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>             lastUpdateSeniorInterest = block.timestamp;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Assessor
Line:        472
Source: 
>             seniorDebt_ = newSeniorDebt;
>             lastUpdateSeniorInterest = block.timestamp;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Assessor
Line:        304
Source: 
> 
>     uint            public maxReserve;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Interest
Line:        166
Source: 
>     function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint pie) public view returns (uint, uint) {
>         require(block.timestamp >= lastUpdated, "tinlake-math/invalid-timestamp");
>                    ^^^^^^^^^^^^^^^
>         require(chi != 0);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Interest
Line:        179
Source: 
>     function chargeInterest(uint interestBearingAmount, uint ratePerSecond, uint lastUpdated) public view returns (uint) {
>         if (block.timestamp >= lastUpdated) {
>                 ^^^^^^^^^^^^^^^
>             interestBearingAmount = _chargeInterest(interestBearingAmount, ratePerSecond, lastUpdated, block.timestamp);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Interest
Line:        166
Source: 
>     function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint pie) public view returns (uint, uint) {
>         require(block.timestamp >= lastUpdated, "tinlake-math/invalid-timestamp");
>                    ^^^^^^^^^^^^^^^
>         require(chi != 0);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Interest
Line:        179
Source: 
>     function chargeInterest(uint interestBearingAmount, uint ratePerSecond, uint lastUpdated) public view returns (uint) {
>         if (block.timestamp >= lastUpdated) {
>                 ^^^^^^^^^^^^^^^
>             interestBearingAmount = _chargeInterest(interestBearingAmount, ratePerSecond, lastUpdated, block.timestamp);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Assessor
Line:        314
Source: 
>         seniorInterestRate.value = ONE;
>         lastUpdateSeniorInterest = block.timestamp;
>                                        ^^^^^^^^^^^^
>         seniorRatio.value = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Assessor
Line:        472
Source: 
>             seniorDebt_ = newSeniorDebt;
>             lastUpdateSeniorInterest = block.timestamp;
>                                            ^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Assessor
Line:        437
Source: 
>         seniorDebt_ = safeSub(seniorDebt_, decAmount);
>         lastUpdateSeniorInterest = block.timestamp;
>                                        ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Assessor
Line:        460
Source: 
>         seniorBalance_ = safeSub(seniorBalance_, incAmount);
>         lastUpdateSeniorInterest = block.timestamp;
>                                        ^^^^^^^^^^^^
>     }

[0m

---------------------------------------------
For contract 0x966F53cb928ab361714AF16E301e82fDf01bCbb9.sol
Tool Runtime = 511.8840994880011 seconds
#############################################