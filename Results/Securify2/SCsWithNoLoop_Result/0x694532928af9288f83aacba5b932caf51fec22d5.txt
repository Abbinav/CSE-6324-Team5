[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Vat
Line:        85
Source: 
>         _;
>         assembly {
>          ^^^^^^^^^
>             // log an 'anonymous' event with a constant 6 words of calldata

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Vat
Line:        171
Source: 
>     function either(bool x, bool y) internal pure returns (bool z) {
>         assembly{ z := or(x, y)}
>          ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Vat
Line:        174
Source: 
>     function both(bool x, bool y) internal pure returns (bool z) {
>         assembly{ z := and(x, y)}
>          ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Vat
Line:        156
Source: 
>     // --- Fungibility ---
>     function slip(bytes32 ilk, address usr, int256 wad) external note auth {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         gem[ilk][usr] = add(gem[ilk][usr], wad);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Vat
Line:        159
Source: 
>     }
>     function flux(bytes32 ilk, address src, address dst, uint256 wad) external note {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(wish(src, msg.sender), "Vat/not-allowed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Vat
Line:        164
Source: 
>     }
>     function move(address src, address dst, uint256 rad) external note {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(wish(src, msg.sender), "Vat/not-allowed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Vat
Line:        178
Source: 
>     // --- CDP Manipulation ---
>     function frob(bytes32 i, address u, address v, address w, int dink, int dart) external note {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // system is live

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Vat
Line:        217
Source: 
>     // --- CDP Fungibility ---
>     function fork(bytes32 ilk, address src, address dst, int dink, int dart) external note {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Urn storage u = urns[ilk][src];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Vat
Line:        242
Source: 
>     // --- CDP Confiscation ---
>     function grab(bytes32 i, address u, address v, address w, int dink, int dart) external note auth {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Urn storage urn = urns[i][u];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Vat
Line:        258
Source: 
>     // --- Settlement ---
>     function heal(uint rad) external note {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address u = msg.sender;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Vat
Line:        265
Source: 
>     }
>     function suck(address u, address v, uint rad) external note auth {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sin[u] = add(sin[u], rad);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Vat
Line:        273
Source: 
>     // --- Rates ---
>     function fold(bytes32 i, address u, int rate) external note auth {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(live == 1, "Vat/not-live");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Vat
Line:        36
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) external note auth { require(live == 1, "Vat/not-live"); wards[usr] = 1; }
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) external note auth { require(live == 1, "Vat/not-live"); wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Vat
Line:        37
Source: 
>     function rely(address usr) external note auth { require(live == 1, "Vat/not-live"); wards[usr] = 1; }
>     function deny(address usr) external note auth { require(live == 1, "Vat/not-live"); wards[usr] = 0; }
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Vat
Line:        44
Source: 
>     mapping(address => mapping (address => uint)) public can;
>     function hope(address usr) external note { can[msg.sender][usr] = 1; }
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nope(address usr) external note { can[msg.sender][usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Vat
Line:        45
Source: 
>     function hope(address usr) external note { can[msg.sender][usr] = 1; }
>     function nope(address usr) external note { can[msg.sender][usr] = 0; }
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function wish(address bit, address usr) internal view returns (bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Vat
Line:        139
Source: 
>     }
>     function file(bytes32 what, uint data) external note auth {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(live == 1, "Vat/not-live");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Vat
Line:        144
Source: 
>     }
>     function file(bytes32 ilk, bytes32 what, uint data) external note auth {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(live == 1, "Vat/not-live");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Vat
Line:        71
Source: 
>     uint256 public vice;  // Total Unbacked Dai  [rad]
>     uint256 public Line;  // Total Debt Ceiling  [rad]
>      ^^^^^^^^^^^^^^^^^^^
>     uint256 public live;  // Access Flag

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        11
Source: 
> //pragma solidity =0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Vat
Line:        125
Source: 
>     function add(uint x, uint y) internal pure returns (uint z) {
>         require((z = x + y) >= x);
>                   ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Vat
Line:        128
Source: 
>     function sub(uint x, uint y) internal pure returns (uint z) {
>         require((z = x - y) <= x);
>                   ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Vat
Line:        131
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x);
>                             ^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Vat
Line:        69
Source: 
> 
>     uint256 public debt;  // Total Dai Issued    [rad]
>      ^^^^^^^^^^^^^^^^^^^
>     uint256 public vice;  // Total Unbacked Dai  [rad]

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Vat
Line:        70
Source: 
>     uint256 public debt;  // Total Dai Issued    [rad]
>     uint256 public vice;  // Total Unbacked Dai  [rad]
>      ^^^^^^^^^^^^^^^^^^^
>     uint256 public Line;  // Total Debt Ceiling  [rad]

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Vat
Line:        71
Source: 
>     uint256 public vice;  // Total Unbacked Dai  [rad]
>     uint256 public Line;  // Total Debt Ceiling  [rad]
>      ^^^^^^^^^^^^^^^^^^^
>     uint256 public live;  // Access Flag

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Vat
Line:        193
Source: 
>         uint tab = mul(ilk.rate, urn.art);
>         debt     = add(debt, dtab);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Vat
Line:        210
Source: 
> 
>         gem[i][v] = sub(gem[i][v], dink);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dai[w]    = add(dai[w],    dtab);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Vat
Line:        211
Source: 
>         gem[i][v] = sub(gem[i][v], dink);
>         dai[w]    = add(dai[w],    dtab);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Vat
Line:        213
Source: 
> 
>         urns[i][u] = urn;
>          ^^^^^^^^^^^^^^^^
>         ilks[i]    = ilk;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Vat
Line:        214
Source: 
>         urns[i][u] = urn;
>         ilks[i]    = ilk;
>          ^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Vat
Line:        262
Source: 
>         dai[u] = sub(dai[u], rad);
>         vice   = sub(vice,   rad);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^
>         debt   = sub(debt,   rad);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Vat
Line:        263
Source: 
>         vice   = sub(vice,   rad);
>         debt   = sub(debt,   rad);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Vat
Line:        44
Source: 
>     mapping(address => mapping (address => uint)) public can;
>     function hope(address usr) external note { can[msg.sender][usr] = 1; }
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>     function nope(address usr) external note { can[msg.sender][usr] = 0; }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Vat
Line:        45
Source: 
>     function hope(address usr) external note { can[msg.sender][usr] = 1; }
>     function nope(address usr) external note { can[msg.sender][usr] = 0; }
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>     function wish(address bit, address usr) internal view returns (bool) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Vat
Line:        161
Source: 
>         require(wish(src, msg.sender), "Vat/not-allowed");
>         gem[ilk][src] = sub(gem[ilk][src], wad);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         gem[ilk][dst] = add(gem[ilk][dst], wad);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Vat
Line:        162
Source: 
>         gem[ilk][src] = sub(gem[ilk][src], wad);
>         gem[ilk][dst] = add(gem[ilk][dst], wad);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Vat
Line:        166
Source: 
>         require(wish(src, msg.sender), "Vat/not-allowed");
>         dai[src] = sub(dai[src], rad);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dai[dst] = add(dai[dst], rad);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Vat
Line:        167
Source: 
>         dai[src] = sub(dai[src], rad);
>         dai[dst] = add(dai[dst], rad);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Vat
Line:        222
Source: 
> 
>         u.ink = sub(u.ink, dink);
>          ^^^^^^^^^^^^^^^^^^^^^^^^
>         u.art = sub(u.art, dart);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Vat
Line:        223
Source: 
>         u.ink = sub(u.ink, dink);
>         u.art = sub(u.art, dart);
>          ^^^^^^^^^^^^^^^^^^^^^^^^
>         v.ink = add(v.ink, dink);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Vat
Line:        224
Source: 
>         u.art = sub(u.art, dart);
>         v.ink = add(v.ink, dink);
>          ^^^^^^^^^^^^^^^^^^^^^^^^
>         v.art = add(v.art, dart);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Vat
Line:        225
Source: 
>         v.ink = add(v.ink, dink);
>         v.art = add(v.art, dart);
>          ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0x694532928af9288f83aacba5b932caf51fec22d5.sol
Tool Runtime = 7.990860066999858 seconds
#############################################