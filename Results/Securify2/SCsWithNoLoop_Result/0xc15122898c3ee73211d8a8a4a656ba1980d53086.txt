[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SPIClub
Line:        81
Source: 
>  bool public onlyAmbassadors = true;
>  uint256 ACTIVATION_TIME = 1608292800; // 12/18/2020 @ 12:00pm (UTC)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SPIClub
Line:        148
Source: 
>  uint8 constant public decimals = 18;
>  uint256 internal entryFee_ = 10; // 10%
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  uint256 internal transferFee_ = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SPIClub
Line:        149
Source: 
>  uint256 internal entryFee_ = 10; // 10%
>  uint256 internal transferFee_ = 1;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  uint256 internal exitFee_ = 10; // 10%

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SPIClub
Line:        150
Source: 
>  uint256 internal transferFee_ = 1;
>  uint256 internal exitFee_ = 10; // 10%
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  uint256 internal referralFee_ = 20; // 2% of the 10% fee 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SPIClub
Line:        151
Source: 
>  uint256 internal exitFee_ = 10; // 10%
>  uint256 internal referralFee_ = 20; // 2% of the 10% fee 
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  uint256 constant internal magnitude = 2 ** 64;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SPIClub
Line:        159
Source: 
>  uint256 internal profitPerShare_;
>  uint256 public stakingRequirement;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  uint256 public totalHolder = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        68
Source: 
>  }
>  function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SPIClub
Line:        172
Source: 
> 
>  function distribute(uint256 _amount) public returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   require(_amount > 0, "must be a positive value");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SPIClub
Line:        180
Source: 
> 
>  function buy(uint256 _amount, address _referredBy) public returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   checkAndTransferSTAT(_amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SPIClub
Line:        185
Source: 
> 
>  function buyFor(uint256 _amount, address _customerAddress, address _referredBy) public returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   checkAndTransferSTAT(_amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SPIClub
Line:        194
Source: 
> 
>  function reinvest() onlyDivis public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address _customerAddress = msg.sender;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SPIClub
Line:        269
Source: 
> 
>  function setName(string memory _name) onlyOwner public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   name = _name;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SPIClub
Line:        273
Source: 
> 
>  function setSymbol(string memory _symbol) onlyOwner public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   symbol = _symbol;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SPIClub
Line:        319
Source: 
> 
>  function calculateTokensReceived(uint256 _powerToSpend) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 _dividends = SafeMath.div(SafeMath.mul(_powerToSpend, entryFee_), 100);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SPIClub
Line:        326
Source: 
> 
>  function calculatePowerReceived(uint256 _tokensToSell) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   require(_tokensToSell <= tokenSupply_);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SPIClub
Line:        381
Source: 
> 
>  function multiData()
>  ^^^^^^^^^^^^^^^^^^^^
>  public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    SPIClub
Line:        75
Source: 
> 
> contract SPIClub is Ownable {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SPIClub
Line:        180
Source: 
> 
>  function buy(uint256 _amount, address _referredBy) public returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   checkAndTransferSTAT(_amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SPIClub
Line:        185
Source: 
> 
>  function buyFor(uint256 _amount, address _customerAddress, address _referredBy) public returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   checkAndTransferSTAT(_amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SPIClub
Line:        242
Source: 
> 
>  function transfer(address _toAddress, uint256 _amountOfTokens) onlyTokenHolders external returns(bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address _customerAddress = msg.sender;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SPIClub
Line:        319
Source: 
> 
>  function calculateTokensReceived(uint256 _powerToSpend) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 _dividends = SafeMath.div(SafeMath.mul(_powerToSpend, entryFee_), 100);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SPIClub
Line:        269
Source: 
> 
>  function setName(string memory _name) onlyOwner public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   name = _name;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SPIClub
Line:        273
Source: 
> 
>  function setSymbol(string memory _symbol) onlyOwner public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   symbol = _symbol;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SPIClub
Line:        295
Source: 
> 
>  function balanceOf(address _customerAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   return tokenBalanceLedger_[_customerAddress];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SPIClub
Line:        299
Source: 
> 
>  function dividendsOf(address _customerAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   return (uint256)((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        351
Source: 
>   uint256 _amountOfTokens = SafeMath.sub(_incomingSTAT, _undividedDividends);
>   uint256 _fee = _dividends * magnitude;
>                  ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        364
Source: 
>    tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);
>    profitPerShare_ += (_dividends * magnitude / tokenSupply_);
>                        ^^^^^^^^^^^^^^^^^^^^^^
>    _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        365
Source: 
>    profitPerShare_ += (_dividends * magnitude / tokenSupply_);
>    _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));
>                                              ^^^^^^^^^^^^^^^^^^^^^^
>   } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        365
Source: 
>    profitPerShare_ += (_dividends * magnitude / tokenSupply_);
>    _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        372
Source: 
> 
>   int256 _updatedPayouts = (int256)(profitPerShare_ * _amountOfTokens - _fee);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   payoutsTo_[_customerAddress] += _updatedPayouts;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        359
Source: 
>    _dividends = SafeMath.add(_dividends, _referralBonus);
>    _fee = _dividends * magnitude;
>           ^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        27
Source: 
>   }
>   c = a * b;
>       ^^^^^
>   assert(c / a == b);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        351
Source: 
>   uint256 _amountOfTokens = SafeMath.sub(_incomingSTAT, _undividedDividends);
>   uint256 _fee = _dividends * magnitude;
>                  ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        364
Source: 
>    tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);
>    profitPerShare_ += (_dividends * magnitude / tokenSupply_);
>                        ^^^^^^^^^^^^^^^^^^^^^^
>    _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        365
Source: 
>    profitPerShare_ += (_dividends * magnitude / tokenSupply_);
>    _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));
>                                              ^^^^^^^^^^^^^^^^^^^^^^
>   } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        365
Source: 
>    profitPerShare_ += (_dividends * magnitude / tokenSupply_);
>    _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        372
Source: 
> 
>   int256 _updatedPayouts = (int256)(profitPerShare_ * _amountOfTokens - _fee);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   payoutsTo_[_customerAddress] += _updatedPayouts;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        359
Source: 
>    _dividends = SafeMath.add(_dividends, _referralBonus);
>    _fee = _dividends * magnitude;
>           ^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        197
Source: 
>   uint256 _dividends = myDividends(false);
>   payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);
>                                            ^^^^^^^^^^^^^^^^^^^^^^
>   _dividends += referralBalance_[_customerAddress];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        300
Source: 
>  function dividendsOf(address _customerAddress) public view returns(uint256) {
>   return (uint256)((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        214
Source: 
>   uint256 _dividends = myDividends(false);
>   payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);
>                                            ^^^^^^^^^^^^^^^^^^^^^^
>   _dividends += referralBalance_[_customerAddress];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        231
Source: 
> 
>   int256 _updatedPayouts = (int256)(profitPerShare_ * _amountOfTokens + (_taxedSTAT * magnitude));
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   payoutsTo_[_customerAddress] -= _updatedPayouts;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        231
Source: 
> 
>   int256 _updatedPayouts = (int256)(profitPerShare_ * _amountOfTokens + (_taxedSTAT * magnitude));
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^
>   payoutsTo_[_customerAddress] -= _updatedPayouts;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        235
Source: 
>   if (tokenSupply_ > 0) {
>    profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);
>                                                     ^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        259
Source: 
> 
>   payoutsTo_[_customerAddress] -= (int256)(profitPerShare_ * _amountOfTokens);
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   payoutsTo_[_toAddress] += (int256)(profitPerShare_ * _taxedTokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        260
Source: 
>   payoutsTo_[_customerAddress] -= (int256)(profitPerShare_ * _amountOfTokens);
>   payoutsTo_[_toAddress] += (int256)(profitPerShare_ * _taxedTokens);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SPIClub
Line:        262
Source: 
> 
>   profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);
>                                                    ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SPIClub
Line:        217
Source: 
>   referralBalance_[_customerAddress] = 0;
>   erc20.transfer(_customerAddress, _dividends);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   emit onWithdraw(_customerAddress, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        78
Source: 
>  mapping(address => bool) internal ambassadors_;
>  uint256 constant internal ambassadorMaxPurchase_ = 10000e18; // 10k
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  mapping(address => uint256) internal ambassadorAccumulatedQuota_;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        81
Source: 
>  bool public onlyAmbassadors = true;
>  uint256 ACTIVATION_TIME = 1608292800; // 12/18/2020 @ 12:00pm (UTC)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        108
Source: 
> 
>  event onDistribute(
>  ^^^^^^^^^^^^^^^^^^^
>   address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        113
Source: 
> 
>  event onTokenPurchase(
>  ^^^^^^^^^^^^^^^^^^^^^^
>   address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        121
Source: 
> 
>  event onTokenSell(
>  ^^^^^^^^^^^^^^^^^^
>   address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        128
Source: 
> 
>  event onReinvestment(
>  ^^^^^^^^^^^^^^^^^^^^^
>   address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        134
Source: 
> 
>  event onWithdraw(
>  ^^^^^^^^^^^^^^^^^
>   address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        147
Source: 
>  string public symbol = "SPIC";
>  uint8 constant public decimals = 18;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  uint256 internal entryFee_ = 10; // 10%

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        152
Source: 
>  uint256 internal referralFee_ = 20; // 2% of the 10% fee 
>  uint256 constant internal magnitude = 2 ** 64;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  mapping(address => uint256) internal tokenBalanceLedger_;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        195
Source: 
>  function reinvest() onlyDivis public {
>   address _customerAddress = msg.sender;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 _dividends = myDividends(false);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        196
Source: 
>   address _customerAddress = msg.sender;
>   uint256 _dividends = myDividends(false);
>   ^^^^^^^^^^^^^^^^^^
>   payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        200
Source: 
>   referralBalance_[_customerAddress] = 0;
>   uint256 _tokens = purchaseTokens(address(0), _customerAddress, _dividends);
>   ^^^^^^^^^^^^^^^
>   emit onReinvestment(_customerAddress, _dividends, _tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        205
Source: 
>  function exit() external {
>   address _customerAddress = msg.sender;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 _tokens = tokenBalanceLedger_[_customerAddress];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        206
Source: 
>   address _customerAddress = msg.sender;
>   uint256 _tokens = tokenBalanceLedger_[_customerAddress];
>   ^^^^^^^^^^^^^^^
>   if (_tokens > 0) sell(_tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        212
Source: 
>  function withdraw() onlyDivis public {
>   address _customerAddress = msg.sender;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 _dividends = myDividends(false);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        213
Source: 
>   address _customerAddress = msg.sender;
>   uint256 _dividends = myDividends(false);
>   ^^^^^^^^^^^^^^^^^^
>   payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        222
Source: 
>  function sell(uint256 _amountOfTokens) onlyTokenHolders public {
>   address _customerAddress = msg.sender;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        225
Source: 
> 
>   uint256 _dividends = SafeMath.div(SafeMath.mul(_amountOfTokens, exitFee_), 100);
>   ^^^^^^^^^^^^^^^^^^
>   uint256 _taxedSTAT = SafeMath.sub(_amountOfTokens, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        226
Source: 
>   uint256 _dividends = SafeMath.div(SafeMath.mul(_amountOfTokens, exitFee_), 100);
>   uint256 _taxedSTAT = SafeMath.sub(_amountOfTokens, _dividends);
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        231
Source: 
> 
>   int256 _updatedPayouts = (int256)(profitPerShare_ * _amountOfTokens + (_taxedSTAT * magnitude));
>   ^^^^^^^^^^^^^^^^^^^^^^
>   payoutsTo_[_customerAddress] -= _updatedPayouts;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        243
Source: 
>  function transfer(address _toAddress, uint256 _amountOfTokens) onlyTokenHolders external returns(bool) {
>   address _customerAddress = msg.sender;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        250
Source: 
> 
>   uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);
>   ^^^^^^^^^^^^^^^^^
>   uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        251
Source: 
>   uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);
>   uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);
>   ^^^^^^^^^^^^^^^^^^^^
>   uint256 _dividends = _tokenFee;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        252
Source: 
>   uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);
>   uint256 _dividends = _tokenFee;
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        286
Source: 
>  function myTokens() public view returns(uint256) {
>   address _customerAddress = msg.sender;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   return balanceOf(_customerAddress);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        291
Source: 
>  function myDividends(bool _includeReferralBonus) public view returns(uint256) {
>   address _customerAddress = msg.sender;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        304
Source: 
>  function sellPrice() public view returns(uint256) {
>   uint256 _stat = 1e18;
>   ^^^^^^^^^^^^^
>   uint256 _dividends = SafeMath.div(SafeMath.mul(_stat, exitFee_), 100);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        305
Source: 
>   uint256 _stat = 1e18;
>   uint256 _dividends = SafeMath.div(SafeMath.mul(_stat, exitFee_), 100);
>   ^^^^^^^^^^^^^^^^^^
>   uint256 _taxedSTAT = SafeMath.sub(_stat, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        306
Source: 
>   uint256 _dividends = SafeMath.div(SafeMath.mul(_stat, exitFee_), 100);
>   uint256 _taxedSTAT = SafeMath.sub(_stat, _dividends);
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        312
Source: 
>  function buyPrice() public view returns(uint256) {
>   uint256 _stat = 1e18;
>   ^^^^^^^^^^^^^
>   uint256 _dividends = SafeMath.div(SafeMath.mul(_stat, entryFee_), 100);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        313
Source: 
>   uint256 _stat = 1e18;
>   uint256 _dividends = SafeMath.div(SafeMath.mul(_stat, entryFee_), 100);
>   ^^^^^^^^^^^^^^^^^^
>   uint256 _taxedSTAT = SafeMath.add(_stat, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        314
Source: 
>   uint256 _dividends = SafeMath.div(SafeMath.mul(_stat, entryFee_), 100);
>   uint256 _taxedSTAT = SafeMath.add(_stat, _dividends);
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        320
Source: 
>  function calculateTokensReceived(uint256 _powerToSpend) public view returns(uint256) {
>   uint256 _dividends = SafeMath.div(SafeMath.mul(_powerToSpend, entryFee_), 100);
>   ^^^^^^^^^^^^^^^^^^
>   uint256 _amountOfTokens = SafeMath.sub(_powerToSpend, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        321
Source: 
>   uint256 _dividends = SafeMath.div(SafeMath.mul(_powerToSpend, entryFee_), 100);
>   uint256 _amountOfTokens = SafeMath.sub(_powerToSpend, _dividends);
>   ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        328
Source: 
>   require(_tokensToSell <= tokenSupply_);
>   uint256 _dividends = SafeMath.div(SafeMath.mul(_tokensToSell, exitFee_), 100);
>   ^^^^^^^^^^^^^^^^^^
>   uint256 _taxedSTAT = SafeMath.sub(_tokensToSell, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        329
Source: 
>   uint256 _dividends = SafeMath.div(SafeMath.mul(_tokensToSell, exitFee_), 100);
>   uint256 _taxedSTAT = SafeMath.sub(_tokensToSell, _dividends);
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        345
Source: 
> 
>   uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingSTAT, entryFee_), 100);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        347
Source: 
> 
>   uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, referralFee_), 100);
>   ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        349
Source: 
> 
>   uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);
>   ^^^^^^^^^^^^^^^^^^
>   uint256 _amountOfTokens = SafeMath.sub(_incomingSTAT, _undividedDividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        350
Source: 
>   uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);
>   uint256 _amountOfTokens = SafeMath.sub(_incomingSTAT, _undividedDividends);
>   ^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 _fee = _dividends * magnitude;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        351
Source: 
>   uint256 _amountOfTokens = SafeMath.sub(_incomingSTAT, _undividedDividends);
>   uint256 _fee = _dividends * magnitude;
>   ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SPIClub
Line:        372
Source: 
> 
>   int256 _updatedPayouts = (int256)(profitPerShare_ * _amountOfTokens - _fee);
>   ^^^^^^^^^^^^^^^^^^^^^^
>   payoutsTo_[_customerAddress] += _updatedPayouts;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        19
Source: 
> //pragma solidity ^ 0.4.26;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SPIClub
Line:        81
Source: 
>  bool public onlyAmbassadors = true;
>  uint256 ACTIVATION_TIME = 1608292800; // 12/18/2020 @ 12:00pm (UTC)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SPIClub
Line:        83
Source: 
> 
>  modifier antiEarlyWhale(uint256 _amountOfSTAT, address _customerAddress) {
>                          ^^^^^^^^^^^^^^^^^^^^^
>   if (now >= ACTIVATION_TIME) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SPIClub
Line:        83
Source: 
> 
>  modifier antiEarlyWhale(uint256 _amountOfSTAT, address _customerAddress) {
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>   if (now >= ACTIVATION_TIME) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SPIClub
Line:        162
Source: 
>  uint256 public totalDonation = 0;
>  TOKEN erc20;
>  ^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SPIClub
Line:        169
Source: 
>  function checkAndTransferSTAT(uint256 _amount) private {
>   require(erc20.transferFrom(msg.sender, address(this), _amount) == true, "transfer must succeed");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SPIClub
Line:        217
Source: 
>   referralBalance_[_customerAddress] = 0;
>   erc20.transfer(_customerAddress, _dividends);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   emit onWithdraw(_customerAddress, _dividends);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SPIClub
Line:        278
Source: 
>  function totalPowerBalance() public view returns(uint256) {
>   return erc20.balanceOf(address(this));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SPIClub
Line:        389
Source: 
>    balanceOf(msg.sender),
>    erc20.balanceOf(msg.sender),
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    dividendsOf(msg.sender),

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SPIClub
Line:        157
Source: 
>  mapping(address => uint256) internal invested_;
>  uint256 internal tokenSupply_;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  uint256 internal profitPerShare_;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SPIClub
Line:        158
Source: 
>  uint256 internal tokenSupply_;
>  uint256 internal profitPerShare_;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  uint256 public stakingRequirement;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    SPIClub
Line:        159
Source: 
>  uint256 internal profitPerShare_;
>  uint256 public stakingRequirement;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  uint256 public totalHolder = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SPIClub
Line:        175
Source: 
>   checkAndTransferSTAT(_amount);
>   totalDonation += _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   profitPerShare_ = SafeMath.add(profitPerShare_, (_amount * magnitude) / tokenSupply_);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SPIClub
Line:        176
Source: 
>   totalDonation += _amount;
>   profitPerShare_ = SafeMath.add(profitPerShare_, (_amount * magnitude) / tokenSupply_);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   emit onDistribute(msg.sender, _amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SPIClub
Line:        85
Source: 
>   if (now >= ACTIVATION_TIME) {
>    onlyAmbassadors = false;
>    ^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SPIClub
Line:        90
Source: 
>    require((ambassadors_[_customerAddress] == true && (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfSTAT) <= ambassadorMaxPurchase_));
>    ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfSTAT);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SPIClub
Line:        93
Source: 
>   } else {
>    onlyAmbassadors = false;
>    ^^^^^^^^^^^^^^^^^^^^^^^
>    _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SPIClub
Line:        217
Source: 
>   referralBalance_[_customerAddress] = 0;
>   erc20.transfer(_customerAddress, _dividends);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   emit onWithdraw(_customerAddress, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SPIClub
Line:        145
Source: 
> 
>  string public name = "SPI Club";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  string public symbol = "SPIC";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SPIClub
Line:        146
Source: 
>  string public name = "SPI Club";
>  string public symbol = "SPIC";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  uint8 constant public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SPIClub
Line:        147
Source: 
>  string public symbol = "SPIC";
>  uint8 constant public decimals = 18;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  uint256 internal entryFee_ = 10; // 10%

[0m

---------------------------------------------
For contract 0xc15122898c3ee73211d8a8a4a656ba1980d53086.sol
Tool Runtime = 708.4286717380019 seconds
#############################################