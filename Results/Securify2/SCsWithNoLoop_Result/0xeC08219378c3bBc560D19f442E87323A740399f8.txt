[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WasabiToken1to2
Line:        280
Source: 
> 
>     function changeOwner(address _new) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_new != address(0), 'INVALID_ADDRESS');

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        206
Source: 
>         // bytes4(keccak256(bytes('transfer(address,uint256)')));
>         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        212
Source: 
>         // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
>         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SushiHelper
Line:        175
Source: 
>     function deposit(address masterChef, uint256 pid, uint256 amount) internal {
>         (bool success, bytes memory data) = masterChef.call(abi.encodeWithSelector(0xe2bbb158, pid, amount));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && data.length == 0, "SushiHelper: DEPOSIT FAILED");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SushiHelper
Line:        180
Source: 
>     function withdraw(address masterChef, uint256 pid, uint256 amount) internal {
>         (bool success, bytes memory data) = masterChef.call(abi.encodeWithSelector(0x441a3e70, pid, amount));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && data.length == 0, "SushiHelper: WITHDRAW FAILED");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SushiHelper
Line:        185
Source: 
>     function pendingSushi(address masterChef, uint256 pid, address user) internal returns (uint256 amount) {
>         (bool success, bytes memory data) = masterChef.call(abi.encodeWithSelector(0x195426ec, pid, user));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && data.length != 0, "SushiHelper: WITHDRAW FAILED");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        200
Source: 
>         // bytes4(keccak256(bytes('approve(address,uint256)')));
>         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        217
Source: 
>     function safeTransferETH(address to, uint value) internal {
>         (bool success,) = to.call.value(value)(new bytes(0));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'TransferHelper: ETH_TRANSFER_FAILED');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WasabiToken1to2
Line:        273
Source: 
> 
>     function initialize(address _token1, address _token2, uint _rate) external onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token1 = _token1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    WasabiToken1to2
Line:        294
Source: 
>         require(amount > 0 && IERC20(token1).balanceOf(msg.sender) >= amount, 'TOKEN1_INSUFFICIENT_BALANCE');
>         uint out = amount * rate / 100;
>                    ^^^^^^^^^^^^^
>         require(out > 0 && IERC20(token2).balanceOf(address(this)) >= out, 'TOKEN2_INSUFFICIENT_BALANCE');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SushiHelper
Line:        190
Source: 
> 
>     uint public constant _nullID = 0xffffffffffffffffffffffffffffffff;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nullID() internal pure returns(uint) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TransferHelper
Line:        217
Source: 
>     function safeTransferETH(address to, uint value) internal {
>         (bool success,) = to.call.value(value)(new bytes(0));
>          ^^^^^^^^^^^^
>         require(success, 'TransferHelper: ETH_TRANSFER_FAILED');

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        9
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        248
Source: 
> //SPDX-License-Identifier: MIT
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WasabiToken1to2
Line:        286
Source: 
>     function withdraw(uint amount) external onlyOwner returns (bool) {
>         require(IERC20(token2).balanceOf(address(this)) >= amount, 'INSUFFICIENT_BALANCE');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         TransferHelper.safeTransfer(token2, msg.sender, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WasabiToken1to2
Line:        293
Source: 
>     function swap(uint amount) external returns (uint) {
>         require(amount > 0 && IERC20(token1).balanceOf(msg.sender) >= amount, 'TOKEN1_INSUFFICIENT_BALANCE');
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint out = amount * rate / 100;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WasabiToken1to2
Line:        295
Source: 
>         uint out = amount * rate / 100;
>         require(out > 0 && IERC20(token2).balanceOf(address(this)) >= out, 'TOKEN2_INSUFFICIENT_BALANCE');
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         TransferHelper.safeTransferFrom(token1, msg.sender, address(0), amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    WasabiToken1to2
Line:        257
Source: 
>     address public owner;
>     uint public rate;
>     ^^^^^^^^^^^^^^^^
>     address public token1;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    WasabiToken1to2
Line:        258
Source: 
>     uint public rate;
>     address public token1;
>     ^^^^^^^^^^^^^^^^^^^^^
>     address public token2;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    WasabiToken1to2
Line:        259
Source: 
>     address public token1;
>     address public token2;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SushiHelper
Line:        190
Source: 
> 
>     uint public constant _nullID = 0xffffffffffffffffffffffffffffffff;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nullID() internal pure returns(uint) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SushiHelper
Line:        175
Source: 
>     function deposit(address masterChef, uint256 pid, uint256 amount) internal {
>         (bool success, bytes memory data) = masterChef.call(abi.encodeWithSelector(0xe2bbb158, pid, amount));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && data.length == 0, "SushiHelper: DEPOSIT FAILED");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SushiHelper
Line:        180
Source: 
>     function withdraw(address masterChef, uint256 pid, uint256 amount) internal {
>         (bool success, bytes memory data) = masterChef.call(abi.encodeWithSelector(0x441a3e70, pid, amount));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && data.length == 0, "SushiHelper: WITHDRAW FAILED");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SushiHelper
Line:        185
Source: 
>     function pendingSushi(address masterChef, uint256 pid, address user) internal returns (uint256 amount) {
>         (bool success, bytes memory data) = masterChef.call(abi.encodeWithSelector(0x195426ec, pid, user));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && data.length != 0, "SushiHelper: WITHDRAW FAILED");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TransferHelper
Line:        200
Source: 
>         // bytes4(keccak256(bytes('approve(address,uint256)')));
>         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TransferHelper
Line:        217
Source: 
>     function safeTransferETH(address to, uint value) internal {
>         (bool success,) = to.call.value(value)(new bytes(0));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, 'TransferHelper: ETH_TRANSFER_FAILED');

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SushiHelper
Line:        190
Source: 
> 
>     uint public constant _nullID = 0xffffffffffffffffffffffffffffffff;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nullID() internal pure returns(uint) {

[0m

---------------------------------------------
For contract 0xeC08219378c3bBc560D19f442E87323A740399f8.sol
Tool Runtime = 4.6257710769996265 seconds
#############################################