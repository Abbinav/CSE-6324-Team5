[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CompoundProtocol
Line:        132
Source: 
> 
>     function deposit(
>     ^^^^^^^^^^^^^^^^^
>         address _user,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CompoundProtocol
Line:        152
Source: 
>      */
>     function withdraw(
>     ^^^^^^^^^^^^^^^^^^
>         address _user,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CompoundProtocol
Line:        132
Source: 
> 
>     function deposit(
>     ^^^^^^^^^^^^^^^^^
>         address _user,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CompoundProtocol
Line:        152
Source: 
>      */
>     function withdraw(
>     ^^^^^^^^^^^^^^^^^^
>         address _user,

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        8
Source: 
> // SPDX-License-Identifier: GPL-3.0-only
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        29
Source: 
> // SPDX-License-Identifier: GPL-3.0-only
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        58
Source: 
> // SPDX-License-Identifier: GPL-3.0-only
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        113
Source: 
> // SPDX-License-Identifier: GPL-3.0-only
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> pragma experimental ABIEncoderV2;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CompoundProtocol
Line:        140
Source: 
> 
>         require(ERC20(_token).transferFrom(_user, address(this), _amount), "Nothing to deposit");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CompoundProtocol
Line:        143
Source: 
>         ERC20(_token).approve(_cToken, uint256(-1));
>         require(cTokenContract.mint(_amount) == 0, "Failed to mint");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         cTokenContract.transfer(_user, cTokenContract.balanceOf(address(this)));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CompoundProtocol
Line:        160
Source: 
>         require(
>             cTokenContract.transferFrom(_user, address(this), ERC20(_cToken).balanceOf(_user)),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Nothing to withdraw"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CompoundProtocol
Line:        164
Source: 
>         cTokenContract.approve(_cToken, uint256(-1));
>         require(cTokenContract.redeemUnderlying(_amount) == 0, "Reedem Failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 cDaiBalance = cTokenContract.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CompoundProtocol
Line:        165
Source: 
>         require(cTokenContract.redeemUnderlying(_amount) == 0, "Reedem Failed");
>         uint256 cDaiBalance = cTokenContract.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (cDaiBalance > 0) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CompoundProtocol
Line:        142
Source: 
> 
>         ERC20(_token).approve(_cToken, uint256(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(cTokenContract.mint(_amount) == 0, "Failed to mint");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CompoundProtocol
Line:        144
Source: 
>         require(cTokenContract.mint(_amount) == 0, "Failed to mint");
>         cTokenContract.transfer(_user, cTokenContract.balanceOf(address(this)));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CompoundProtocol
Line:        144
Source: 
>         require(cTokenContract.mint(_amount) == 0, "Failed to mint");
>         cTokenContract.transfer(_user, cTokenContract.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CompoundProtocol
Line:        160
Source: 
>         require(
>             cTokenContract.transferFrom(_user, address(this), ERC20(_cToken).balanceOf(_user)),
>                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Nothing to withdraw"

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CompoundProtocol
Line:        163
Source: 
>         );
>         cTokenContract.approve(_cToken, uint256(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(cTokenContract.redeemUnderlying(_amount) == 0, "Reedem Failed");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CompoundProtocol
Line:        167
Source: 
>         if (cDaiBalance > 0) {
>             cTokenContract.transfer(_user, cDaiBalance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CompoundProtocol
Line:        169
Source: 
>         }
>         ERC20(_token).transfer(_user, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CompoundProtocol
Line:        124
Source: 
> contract CompoundProtocol is ProtocolInterface {
>     CTokenInterface public cTokenContract;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CompoundProtocol
Line:        138
Source: 
>     ) public  {
>         cTokenContract = CTokenInterface(_cToken);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CompoundProtocol
Line:        158
Source: 
>     ) public  {
>         cTokenContract = CTokenInterface(_cToken);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CompoundProtocol
Line:        142
Source: 
> 
>         ERC20(_token).approve(_cToken, uint256(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(cTokenContract.mint(_amount) == 0, "Failed to mint");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CompoundProtocol
Line:        144
Source: 
>         require(cTokenContract.mint(_amount) == 0, "Failed to mint");
>         cTokenContract.transfer(_user, cTokenContract.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CompoundProtocol
Line:        163
Source: 
>         );
>         cTokenContract.approve(_cToken, uint256(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(cTokenContract.redeemUnderlying(_amount) == 0, "Reedem Failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CompoundProtocol
Line:        167
Source: 
>         if (cDaiBalance > 0) {
>             cTokenContract.transfer(_user, cDaiBalance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CompoundProtocol
Line:        169
Source: 
>         }
>         ERC20(_token).transfer(_user, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m

---------------------------------------------
For contract 0x350ae46a6fdc97a27c1b0a00fdb24637a6ff1a3b.sol
Tool Runtime = 2.753317094000522 seconds
#############################################