[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BorrowerDeployer
Line:        169
Source: 
> 
>     function deployCollector() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(collector == ZERO && address(shelf) != ZERO);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BorrowerDeployer
Line:        175
Source: 
> 
>     function deployPile() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(pile == ZERO);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BorrowerDeployer
Line:        181
Source: 
> 
>     function deployTitle() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(title == ZERO);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BorrowerDeployer
Line:        187
Source: 
> 
>     function deployShelf() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(shelf == ZERO && title != ZERO && pile != ZERO && feed != ZERO);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BorrowerDeployer
Line:        193
Source: 
> 
>     function deployFeed() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         feed = feedFab.newFeed();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BorrowerDeployer
Line:        198
Source: 
> 
>     function deploy() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // ensures all required deploy methods were called

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        171
Source: 
>         require(collector == ZERO && address(shelf) != ZERO);
>         collector = collectorFab.newCollector(address(shelf), address(pile), address(feed));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike_1(collector).rely(root);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        172
Source: 
>         collector = collectorFab.newCollector(address(shelf), address(pile), address(feed));
>         AuthLike_1(collector).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        177
Source: 
>         require(pile == ZERO);
>         pile = pilefab.newPile();
>                ^^^^^^^^^^^^^^^^^
>         AuthLike_1(pile).rely(root);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        178
Source: 
>         pile = pilefab.newPile();
>         AuthLike_1(pile).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        183
Source: 
>         require(title == ZERO);
>         title = titlefab.newTitle(titleName, titleSymbol);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike_1(title).rely(root);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        184
Source: 
>         title = titlefab.newTitle(titleName, titleSymbol);
>         AuthLike_1(title).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        189
Source: 
>         require(shelf == ZERO && title != ZERO && pile != ZERO && feed != ZERO);
>         shelf = shelffab.newShelf(currency, address(title), address(pile), address(feed));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike_1(shelf).rely(root);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        190
Source: 
>         shelf = shelffab.newShelf(currency, address(title), address(pile), address(feed));
>         AuthLike_1(shelf).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        194
Source: 
>     function deployFeed() public {
>         feed = feedFab.newFeed();
>                ^^^^^^^^^^^^^^^^^
>         AuthLike_1(feed).rely(root);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BorrowerDeployer
Line:        195
Source: 
>         feed = feedFab.newFeed();
>         AuthLike_1(feed).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DependLike_1
Line:        97
Source: 
> 
> interface DependLike_1 {
> ^^^^^^^^^^^^^^^^^^^^^^^^
>     function depend(bytes32, address) external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AuthLike_1
Line:        101
Source: 
> 
> interface AuthLike_1 {
> ^^^^^^^^^^^^^^^^^^^^^^
>     function rely(address) external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NFTFeedLike_1
Line:        106
Source: 
> 
> interface NFTFeedLike_1 {
> ^^^^^^^^^^^^^^^^^^^^^^^^^
>     function init() external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FileLike_1
Line:        115
Source: 
> 
> interface FileLike_1 {
> ^^^^^^^^^^^^^^^^^^^^^^
>     function file(bytes32 name, uint value) external;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        9
Source: 
> //pragma solidity >=0.5.15 <0.6.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BorrowerDeployer
Line:        139
Source: 
> 
>     address constant ZERO = address(0);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BorrowerDeployer
Line:        171
Source: 
>         require(collector == ZERO && address(shelf) != ZERO);
>         collector = collectorFab.newCollector(address(shelf), address(pile), address(feed));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike_1(collector).rely(root);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BorrowerDeployer
Line:        177
Source: 
>         require(pile == ZERO);
>         pile = pilefab.newPile();
>                ^^^^^^^^^^^^^^^^^
>         AuthLike_1(pile).rely(root);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BorrowerDeployer
Line:        183
Source: 
>         require(title == ZERO);
>         title = titlefab.newTitle(titleName, titleSymbol);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike_1(title).rely(root);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BorrowerDeployer
Line:        189
Source: 
>         require(shelf == ZERO && title != ZERO && pile != ZERO && feed != ZERO);
>         shelf = shelffab.newShelf(currency, address(title), address(pile), address(feed));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike_1(shelf).rely(root);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BorrowerDeployer
Line:        194
Source: 
>     function deployFeed() public {
>         feed = feedFab.newFeed();
>                ^^^^^^^^^^^^^^^^^
>         AuthLike_1(feed).rely(root);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        172
Source: 
>         collector = collectorFab.newCollector(address(shelf), address(pile), address(feed));
>         AuthLike_1(collector).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        178
Source: 
>         pile = pilefab.newPile();
>         AuthLike_1(pile).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        184
Source: 
>         title = titlefab.newTitle(titleName, titleSymbol);
>         AuthLike_1(title).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        190
Source: 
>         shelf = shelffab.newShelf(currency, address(title), address(pile), address(feed));
>         AuthLike_1(shelf).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        195
Source: 
>         feed = feedFab.newFeed();
>         AuthLike_1(feed).rely(root);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        203
Source: 
>         // shelf allowed to call
>         AuthLike_1(pile).rely(shelf);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        205
Source: 
> 
>         DependLike_1(feed).depend("shelf", address(shelf));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DependLike_1(feed).depend("pile", address(pile));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        206
Source: 
>         DependLike_1(feed).depend("shelf", address(shelf));
>         DependLike_1(feed).depend("pile", address(pile));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        209
Source: 
>         // allow nftFeed to update rate groups
>         AuthLike_1(pile).rely(feed);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         NFTFeedLike_1(feed).init();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        210
Source: 
>         AuthLike_1(pile).rely(feed);
>         NFTFeedLike_1(feed).init();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        212
Source: 
> 
>         DependLike_1(shelf).depend("subscriber", address(feed));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        214
Source: 
> 
>         AuthLike_1(feed).rely(shelf);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike_1(title).rely(shelf);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        215
Source: 
>         AuthLike_1(feed).rely(shelf);
>         AuthLike_1(title).rely(shelf);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        218
Source: 
>         // collector allowed to call
>         AuthLike_1(shelf).rely(collector);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BorrowerDeployer
Line:        220
Source: 
> 
>         FileLike_1(feed).file("discountRate", discountRate.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BorrowerDeployer
Line:        128
Source: 
> 
>     address public title;
>     ^^^^^^^^^^^^^^^^^^^^
>     address public shelf;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BorrowerDeployer
Line:        129
Source: 
>     address public title;
>     address public shelf;
>     ^^^^^^^^^^^^^^^^^^^^
>     address public pile;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BorrowerDeployer
Line:        130
Source: 
>     address public shelf;
>     address public pile;
>     ^^^^^^^^^^^^^^^^^^^
>     address public collector;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BorrowerDeployer
Line:        131
Source: 
>     address public pile;
>     address public collector;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     address public currency;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BorrowerDeployer
Line:        133
Source: 
>     address public currency;
>     address public feed;
>     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BorrowerDeployer
Line:        171
Source: 
>         require(collector == ZERO && address(shelf) != ZERO);
>         collector = collectorFab.newCollector(address(shelf), address(pile), address(feed));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike_1(collector).rely(root);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BorrowerDeployer
Line:        177
Source: 
>         require(pile == ZERO);
>         pile = pilefab.newPile();
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike_1(pile).rely(root);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BorrowerDeployer
Line:        183
Source: 
>         require(title == ZERO);
>         title = titlefab.newTitle(titleName, titleSymbol);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike_1(title).rely(root);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BorrowerDeployer
Line:        189
Source: 
>         require(shelf == ZERO && title != ZERO && pile != ZERO && feed != ZERO);
>         shelf = shelffab.newShelf(currency, address(title), address(pile), address(feed));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike_1(shelf).rely(root);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BorrowerDeployer
Line:        194
Source: 
>     function deployFeed() public {
>         feed = feedFab.newFeed();
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         AuthLike_1(feed).rely(root);

[0m

---------------------------------------------
For contract 0xD2e2Bbb8FdA55780532894eeb9F2439bd183069B.sol
Tool Runtime = 4.0173106540000845 seconds
#############################################