[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    HbtcStakingPool
Line:        367
Source: 
>         (bool success, bytes memory data) =
>             token.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, sender, recipient, amount));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), "HbtcStakingPool: transfer from failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    HbtcStakingPool
Line:        356
Source: 
>     ) private {
>         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(TRANSFER_SELECTOR, recipient, amount));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), "HbtcStakingPool: transfer failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    HbtcStakingPool
Line:        271
Source: 
> 
>     function getReward(address staker) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 latestTokenRewardRate =

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    HbtcStakingPool
Line:        314
Source: 
> 
>     function stake(uint256 amount) external onlyStarted onlyNotEnded updateTokenRewardRate updateStakerReward(msg.sender) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         doStake(amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    HbtcStakingPool
Line:        318
Source: 
> 
>     function unstake(uint256 amount) external onlyStarted updateTokenRewardRate updateStakerReward(msg.sender) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         doUnstake(amount);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> //pragma solidity ^0.6.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HbtcStakingPool
Line:        245
Source: 
>     modifier updateTokenRewardRate() {
>         uint256 appliedUpdateTime = Math.min(block.timestamp, endTime);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 durationInSeconds = appliedUpdateTime.sub(lastTokenRewardRateUpdateTime);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HbtcStakingPool
Line:        246
Source: 
>         uint256 appliedUpdateTime = Math.min(block.timestamp, endTime);
>         uint256 durationInSeconds = appliedUpdateTime.sub(lastTokenRewardRateUpdateTime);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HbtcStakingPool
Line:        259
Source: 
> 
>     modifier updateStakerReward(address staker) {
>                                 ^^^^^^^^^^^^^^
>         uint256 stakeAmount = stakeAmounts[staker];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HbtcStakingPool
Line:        260
Source: 
>     modifier updateStakerReward(address staker) {
>         uint256 stakeAmount = stakeAmounts[staker];
>         ^^^^^^^^^^^^^^^^^^^
>         uint256 stakerEntryRate = stakerEntryRewardRates[staker];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HbtcStakingPool
Line:        261
Source: 
>         uint256 stakeAmount = stakeAmounts[staker];
>         uint256 stakerEntryRate = stakerEntryRewardRates[staker];
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 rateDifference = lastTokenRewardRate.sub(stakerEntryRate);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HbtcStakingPool
Line:        262
Source: 
>         uint256 stakerEntryRate = stakerEntryRewardRates[staker];
>         uint256 rateDifference = lastTokenRewardRate.sub(stakerEntryRate);
>         ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    HbtcStakingPool
Line:        212
Source: 
>     /* Pool Settings */
>     address public poolToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public startTime;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    HbtcStakingPool
Line:        213
Source: 
>     address public poolToken;
>     uint256 public startTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public endTime;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    HbtcStakingPool
Line:        214
Source: 
>     uint256 public startTime;
>     uint256 public endTime;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public maxStakeAmount;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    HbtcStakingPool
Line:        215
Source: 
>     uint256 public endTime;
>     uint256 public maxStakeAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalRewardAmount;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    HbtcStakingPool
Line:        216
Source: 
>     uint256 public maxStakeAmount;
>     uint256 public totalRewardAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    HbtcStakingPool
Line:        219
Source: 
>     /* Live Pool Data */
>     uint256 public totalStakeAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public stakeAmounts;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    HbtcStakingPool
Line:        229
Source: 
> 
>     uint256 public constant TOKEN_REWARD_RATE_MULTIPLIER = 10**20; // Precision loss prevention
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    HbtcStakingPool
Line:        231
Source: 
> 
>     bytes4 private constant TRANSFER_SELECTOR = bytes4(keccak256(bytes("transfer(address,uint256)")));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes4 private constant TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes("transferFrom(address,address,uint256)")));

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    HbtcStakingPool
Line:        232
Source: 
>     bytes4 private constant TRANSFER_SELECTOR = bytes4(keccak256(bytes("transfer(address,uint256)")));
>     bytes4 private constant TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes("transferFrom(address,address,uint256)")));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HbtcStakingPool
Line:        252
Source: 
>             if (totalStakeAmount > 0) {
>                 lastTokenRewardRate = lastTokenRewardRate.add(durationInSeconds.mul(outputPerSecond).div(totalStakeAmount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HbtcStakingPool
Line:        254
Source: 
>             }
>             lastTokenRewardRateUpdateTime = appliedUpdateTime;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HbtcStakingPool
Line:        330
Source: 
>         stakeAmounts[msg.sender] = stakeAmounts[msg.sender].add(amount);
>         totalStakeAmount = totalStakeAmount.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HbtcStakingPool
Line:        252
Source: 
>             if (totalStakeAmount > 0) {
>                 lastTokenRewardRate = lastTokenRewardRate.add(durationInSeconds.mul(outputPerSecond).div(totalStakeAmount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HbtcStakingPool
Line:        254
Source: 
>             }
>             lastTokenRewardRateUpdateTime = appliedUpdateTime;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HbtcStakingPool
Line:        344
Source: 
>         stakeAmounts[msg.sender] = stakeAmounts[msg.sender].sub(amount);
>         totalStakeAmount = totalStakeAmount.sub(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HbtcStakingPool
Line:        252
Source: 
>             if (totalStakeAmount > 0) {
>                 lastTokenRewardRate = lastTokenRewardRate.add(durationInSeconds.mul(outputPerSecond).div(totalStakeAmount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HbtcStakingPool
Line:        254
Source: 
>             }
>             lastTokenRewardRateUpdateTime = appliedUpdateTime;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    HbtcStakingPool
Line:        216
Source: 
>     uint256 public maxStakeAmount;
>     uint256 public totalRewardAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    HbtcStakingPool
Line:        275
Source: 
>                 ? lastTokenRewardRate.add(
>                     Math.min(block.timestamp, endTime).sub(lastTokenRewardRateUpdateTime).mul(outputPerSecond).div(
>                              ^^^^^^^^^^^^^^^
>                         totalStakeAmount

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    HbtcStakingPool
Line:        297
Source: 
>         require(_poolToken != address(0), "HbtcStakingPool: zero address");
>         require(_startTime > block.timestamp && _endTime > _startTime, "HbtcStakingPool: invalid time range");
>                              ^^^^^^^^^^^^^^^
>         require(_maxStakeAmount > 0, "HbtcStakingPool: max stake amount cannot be zero");

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    HbtcStakingPool
Line:        245
Source: 
>     modifier updateTokenRewardRate() {
>         uint256 appliedUpdateTime = Math.min(block.timestamp, endTime);
>                                              ^^^^^^^^^^^^^^^
>         uint256 durationInSeconds = appliedUpdateTime.sub(lastTokenRewardRateUpdateTime);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    HbtcStakingPool
Line:        235
Source: 
>     modifier onlyStarted() {
>         require(block.timestamp >= startTime, "HbtcStakingPool: not started");
>                 ^^^^^^^^^^^^^^^
>         _;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    HbtcStakingPool
Line:        240
Source: 
>     modifier onlyNotEnded() {
>         require(block.timestamp < endTime, "HbtcStakingPool: already ended");
>                 ^^^^^^^^^^^^^^^
>         _;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    HbtcStakingPool
Line:        235
Source: 
>     modifier onlyStarted() {
>         require(block.timestamp >= startTime, "HbtcStakingPool: not started");
>                 ^^^^^^^^^^^^^^^
>         _;

[0m

---------------------------------------------
For contract 0x0954C532155aaA5014978d62cC71Fd393694145c.sol
Tool Runtime = 5.956052241000066 seconds
#############################################