pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DGMContract
Line:        227
Source: 
> 
>     string private _name = "Test Decentralized Game Mining";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private _symbol = "TDGM";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DGMContract
Line:        228
Source: 
>     string private _name = "Test Decentralized Game Mining";
>     string private _symbol = "TDGM";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private _decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DGMContract
Line:        229
Source: 
>     string private _symbol = "TDGM";
>     uint8 private _decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DGMContract
Line:        231
Source: 
> 
>     address private _holder = 0xdbfbd3cD8E38C38Fe7D7f5Fc2edA6C178F360E57;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DGMContract
Line:        236
Source: 
>         
>     uint private dotValue = 10 ** uint(_decimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DGMContract
Line:        242
Source: 
> 
>     uint private oneDay = 1 minutes;  
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private stakeMinAge = 7 minutes; // minimum age for coin age 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DGMContract
Line:        243
Source: 
>     uint private oneDay = 1 minutes;  
>     uint private stakeMinAge = 7 minutes; // minimum age for coin age 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private oneYear = 365 minutes; 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DGMContract
Line:        244
Source: 
>     uint private stakeMinAge = 7 minutes; // minimum age for coin age 
>     uint private oneYear = 365 minutes; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DGMContract
Line:        246
Source: 
>     
>     uint private yearValue = 365 * dotValue;   //年化值
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DGMContract
Line:        248
Source: 
>     
>     uint private eightYear = oneYear * 8;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private maxMintProofOfStake = 2 * 10**17; // default 20% annual interest

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DGMContract
Line:        249
Source: 
>     uint private eightYear = oneYear * 8;
>     uint private maxMintProofOfStake = 2 * 10**17; // default 20% annual interest
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        196
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DGMContract
Line:        272
Source: 
> 
>     function name() public view returns (string memory) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _name;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DGMContract
Line:        277
Source: 
> 
>     function symbol() public view returns (string memory) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _symbol;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DGMContract
Line:        282
Source: 
> 
>     function decimals() public view returns (uint8) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _decimals;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DGMContract
Line:        286
Source: 
>     
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DGMContract
Line:        292
Source: 
>     }
>     function transfer(address _to, uint256 _value) public returns (bool) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //0地址或者本身,生产利息

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DGMContract
Line:        326
Source: 
> 
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_to != address(0), "transfer to the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DGMContract
Line:        342
Source: 
> 
>     function approve(address _spender, uint256 _value) public returns (bool) {
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DGMContract
Line:        414
Source: 
>     function setMinBalance(uint _value) public onlyOwner {
>         minBalance = _value * dotValue;
>                                      ^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DGMContract
Line:        420
Source: 
>     }
>     
>  ^^^
>     function burn(uint _value) public {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DGMContract
Line:        422
Source: 
>     function burn(uint _value) public {
>         require(msg.sender != address(0), "burn from the zero address");
>                                                                   ^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DGMContract
Line:        292
Source: 
>     }
>     function transfer(address _to, uint256 _value) public returns (bool) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //0地址或者本身,生产利息

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DGMContract
Line:        326
Source: 
> 
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_to != address(0), "transfer to the zero address");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DGMContract
Line:        410
Source: 
>     function coinAgeOf(address _addr) external view returns (uint myCoinAge) {
>         myCoinAge = getProofOfStakeReward(_addr);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DGMContract
Line:        414
Source: 
>     function setMinBalance(uint _value) public onlyOwner {
>         minBalance = _value * dotValue;
>                                      ^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DGMContract
Line:        422
Source: 
>     function burn(uint _value) public {
>         require(msg.sender != address(0), "burn from the zero address");
>                                                                   ^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DGMContract
Line:        286
Source: 
>     
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DGMContract
Line:        350
Source: 
> 
>     function allowance(address _owner, address _spender) external view returns (uint256 remaining) {
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DGMContract
Line:        420
Source: 
>     }
>     
>  ^^^
>     function burn(uint _value) public {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DGMContract
Line:        254
Source: 
> 
>     struct transferInStruct{
>           ^^^^^^^^^^^^^^^^^^
>         uint amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DGMContract
Line:        308
Source: 
>         uint _now = now;
>         if (_now > stakeStartTime.add(eightYear))
>                      ^^^^^^^^^
>             return;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DGMContract
Line:        329
Source: 
> 
>         uint256 _allowance = allowed[_from][msg.sender];
>                                               ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DGMContract
Line:        374
Source: 
>         uint _now = now;
>         uint _coinAge = getCoinAge(_address, _now);
>                                      ^^^^^^^^^
>         if (_coinAge <= 0) 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DGMContract
Line:        375
Source: 
>         uint _coinAge = getCoinAge(_address, _now);
>         if (_coinAge <= 0) 
>           ^^^^^^^^^^^^^
>             return 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DGMContract
Line:        388
Source: 
>         uint interest = 0;
>         uint iyear = _now.sub(stakeStartTime).div(oneYear);
>                               ^^^^^^^^^
>         if(iyear>=8)

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    DGMContract
Line:        225
Source: 
> 
>     uint public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DGMContract
Line:        248
Source: 
>     
>     uint private eightYear = oneYear * 8;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private maxMintProofOfStake = 2 * 10**17; // default 20% annual interest

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DGMContract
Line:        249
Source: 
>     uint private eightYear = oneYear * 8;
>     uint private maxMintProofOfStake = 2 * 10**17; // default 20% annual interest
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DGMContract
Line:        251
Source: 
> 
>     uint public minBalance =    10000 * dotValue;  // minimum balance require for super node
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public maxBalance =  1000000 * dotValue;  

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DGMContract
Line:        252
Source: 
>     uint public minBalance =    10000 * dotValue;  // minimum balance require for super node
>     uint public maxBalance =  1000000 * dotValue;  
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DGMContract
Line:        259
Source: 
> 
>     mapping(address => uint256) balances;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => mapping (address => uint256)) allowed;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DGMContract
Line:        260
Source: 
>     mapping(address => uint256) balances;
>     mapping(address => mapping (address => uint256)) allowed;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => transferInStruct) transferIns;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DGMContract
Line:        261
Source: 
>     mapping(address => mapping (address => uint256)) allowed;
>     mapping(address => transferInStruct) transferIns;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DGMContract
Line:        252
Source: 
>     uint public minBalance =    10000 * dotValue;  // minimum balance require for super node
>     uint public maxBalance =  1000000 * dotValue;  
>                                     ^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DGMContract
Line:        264
Source: 
>     constructor () public {
>         totalSupply = 10000000000 * dotValue; 
>                             ^^^^^^^^^^^
>         balances[_holder] = totalSupply;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20
Line:        210
Source: 
> contract ERC20 {
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function balanceOf(address who) external view returns (uint256);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DGMContract
Line:        363
Source: 
>         totalSupply = totalSupply.add(reward);
>         balances[addr] = balances[addr].add(reward);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         transferIns[addr] = transferInStruct(balances[addr], now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DGMContract
Line:        364
Source: 
>         balances[addr] = balances[addr].add(reward);
>         transferIns[addr] = transferInStruct(balances[addr], now);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DGMContract
Line:        364
Source: 
>         balances[addr] = balances[addr].add(reward);
>         transferIns[addr] = transferInStruct(balances[addr], now);
>                                                               ^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DGMContract
Line:        319
Source: 
>         if(balances[_addr]>=minBalance){
>             transferIns[_addr] = transferInStruct(balances[_addr], _now);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^
>         } else if(transferIns[_addr].time>0){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DGMContract
Line:        321
Source: 
>         } else if(transferIns[_addr].time>0){
>             transferIns[_addr] = transferInStruct(0, 0);
>                                                   ^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DGMContract
Line:        331
Source: 
> 
>         balances[_from] = balances[_from].sub(_value);
>                                               ^^^^^^^^
>         balances[_to] = balances[_to].add(_value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DGMContract
Line:        332
Source: 
>         balances[_from] = balances[_from].sub(_value);
>         balances[_to] = balances[_to].add(_value);
>                                               ^^^^
>         allowed[_from][msg.sender] = _allowance.sub(_value);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC20
Line:        210
Source: 
> contract ERC20 {
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function balanceOf(address who) external view returns (uint256);

[0m

---------------------------------------------
For contract 0x81c98bedddea60c10cedcd57be68a44776be9c25.sol
Tool Runtime = 7.057427440000538 seconds
#############################################