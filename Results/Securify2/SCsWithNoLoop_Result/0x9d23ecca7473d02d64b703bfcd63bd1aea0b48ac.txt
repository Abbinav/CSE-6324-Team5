[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        359
Source: 
>     address public _uniswapV2Pair;
>     address public _uniswapV2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IKeep3rV1 public constant KP3R = IKeep3rV1(0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        213
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        232
Source: 
>      */
>     function renounceOwnership() public  onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        241
Source: 
>      */
>     function transferOwnership(address newOwner) public  onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        213
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        232
Source: 
>      */
>     function renounceOwnership() public  onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        241
Source: 
>      */
>     function transferOwnership(address newOwner) public  onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NodeRunnersLiquidity
Line:        375
Source: 
> 
>     function setLiquidityRewardsDivisor(uint256 liquidityRewardsDivisor) onlyOwner external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _liquidityRewardsDivisor = liquidityRewardsDivisor;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NodeRunnersLiquidity
Line:        379
Source: 
> 
>     function lockLiquidity(uint256 _lockableSupply) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // lockable supply is the token balance of this contract

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        371
Source: 
> 
>     function setTreasury(address payable treasury) onlyOwner external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _treasury = treasury;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        465
Source: 
>     
>     function withdrawDust(uint256 amount) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _treasury.transfer(amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Router02
Line:        324
Source: 
> interface IUniswapV2Router02 {
>     function WETH() external pure returns (address);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function swapExactTokensForETHSupportingFeeOnTransferTokens(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        354
Source: 
> 
>     uint256 public _liquidityRewardsDivisor;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        356
Source: 
> 
>     address payable public _treasury;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public _token;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        357
Source: 
>     address payable public _treasury;
>     address public _token;
>     ^^^^^^^^^^^^^^^^^^^^^
>     address public _uniswapV2Pair;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        358
Source: 
>     address public _token;
>     address public _uniswapV2Pair;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public _uniswapV2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        359
Source: 
>     address public _uniswapV2Pair;
>     address public _uniswapV2Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IKeep3rV1 public constant KP3R = IKeep3rV1(0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        438
Source: 
>         uint256 uniswapBalance = IERC20(_token).balanceOf(_uniswapV2Pair);
>         uint256 _lockedSupply = uniswapBalance.mul(percentOfLpTotalSupply).div(1e12);
>         ^^^^^^^^^^^^^^^^^^^^^
>         return _lockedSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        449
Source: 
>         uint256 uniswapBalance = IERC20(_token).balanceOf(_uniswapV2Pair);
>         uint256 _burnedSupply = uniswapBalance.mul(percentOfLpTotalSupply).div(1e12);
>         ^^^^^^^^^^^^^^^^^^^^^
>         return _burnedSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity ^0.6.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    NodeRunnersLiquidity
Line:        481
Source: 
>         IERC20(_token).approve(_uniswapV2Router, tokenAmount);
>         IUniswapV2Router02(_uniswapV2Router)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             .addLiquidityETH.value(ethAmount)(_token, tokenAmount, 0, 0, address(this), block.timestamp);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    NodeRunnersLiquidity
Line:        466
Source: 
>     function withdrawDust(uint256 amount) external onlyOwner {
>         _treasury.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        481
Source: 
>         IERC20(_token).approve(_uniswapV2Router, tokenAmount);
>         IUniswapV2Router02(_uniswapV2Router)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             .addLiquidityETH.value(ethAmount)(_token, tokenAmount, 0, 0, address(this), block.timestamp);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        466
Source: 
>     function withdrawDust(uint256 amount) external onlyOwner {
>         _treasury.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        481
Source: 
>         IERC20(_token).approve(_uniswapV2Router, tokenAmount);
>         IUniswapV2Router02(_uniswapV2Router)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             .addLiquidityETH.value(ethAmount)(_token, tokenAmount, 0, 0, address(this), block.timestamp);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        466
Source: 
>     function withdrawDust(uint256 amount) external onlyOwner {
>         _treasury.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NodeRunnersLiquidity
Line:        381
Source: 
>         // lockable supply is the token balance of this contract
>         require(_lockableSupply <= IERC20(_token).balanceOf(address(this)), "NodeRunnersSave::lockLiquidity: lock amount higher than lockable balance");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_lockableSupply != 0, "NodeRunnersSave::lockLiquidity: lock amount cannot be 0");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NodeRunnersLiquidity
Line:        414
Source: 
>         // lock everything that is lockable
>         require(KP3R.isKeeper(msg.sender), "Keep3rJob::update: not a valid keeper");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         lockLiquidity(IERC20(_token).balanceOf(address(this)));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NodeRunnersLiquidity
Line:        415
Source: 
>         require(KP3R.isKeeper(msg.sender), "Keep3rJob::update: not a valid keeper");
>         lockLiquidity(IERC20(_token).balanceOf(address(this)));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         KP3R.worked(msg.sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NodeRunnersLiquidity
Line:        420
Source: 
>     function burnLiquidity() external {
>         uint256 balance = IERC20(_uniswapV2Pair).balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balance != 0, "NodeRunnersSave::burnLiquidity: burn amount cannot be 0");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NodeRunnersLiquidity
Line:        437
Source: 
> 
>         uint256 uniswapBalance = IERC20(_token).balanceOf(_uniswapV2Pair);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _lockedSupply = uniswapBalance.mul(percentOfLpTotalSupply).div(1e12);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NodeRunnersLiquidity
Line:        448
Source: 
> 
>         uint256 uniswapBalance = IERC20(_token).balanceOf(_uniswapV2Pair);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _burnedSupply = uniswapBalance.mul(percentOfLpTotalSupply).div(1e12);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        416
Source: 
>         lockLiquidity(IERC20(_token).balanceOf(address(this)));
>         KP3R.worked(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        480
Source: 
>     function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
>         IERC20(_token).approve(_uniswapV2Router, tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IUniswapV2Router02(_uniswapV2Router)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        481
Source: 
>         IERC20(_token).approve(_uniswapV2Router, tokenAmount);
>         IUniswapV2Router02(_uniswapV2Router)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             .addLiquidityETH.value(ethAmount)(_token, tokenAmount, 0, 0, address(this), block.timestamp);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        472
Source: 
>         uniswapPairPath[0] = _token;
>         uniswapPairPath[1] = IUniswapV2Router02(_uniswapV2Router).WETH();
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        474
Source: 
> 
>         IERC20(_token).approve(_uniswapV2Router, tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IUniswapV2Router02(_uniswapV2Router)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        475
Source: 
>         IERC20(_token).approve(_uniswapV2Router, tokenAmount);
>         IUniswapV2Router02(_uniswapV2Router)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             .swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, uniswapPairPath, address(this), block.timestamp);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        422
Source: 
>         require(balance != 0, "NodeRunnersSave::burnLiquidity: burn amount cannot be 0");
>         IERC20(_uniswapV2Pair).transfer(address(0), balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BurnLiquidity(balance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        428
Source: 
>     function lockableSupply() external view returns (uint256) {
>         return IERC20(_token).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        433
Source: 
>     function lockedSupply() external view returns (uint256) {
>         uint256 lpTotalSupply = IERC20(_uniswapV2Pair).totalSupply();
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 lpBalance = lockedLiquidity();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        454
Source: 
>     function burnableLiquidity() public view returns (uint256) {
>         return IERC20(_uniswapV2Pair).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        458
Source: 
>     function burnedLiquidity() public view returns (uint256) {
>         return IERC20(_uniswapV2Pair).balanceOf(address(0));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        444
Source: 
>     function burnedSupply() external view returns (uint256) {
>         uint256 lpTotalSupply = IERC20(_uniswapV2Pair).totalSupply();
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 lpBalance = burnedLiquidity();

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NodeRunnersLiquidity
Line:        354
Source: 
> 
>     uint256 public _liquidityRewardsDivisor;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NodeRunnersLiquidity
Line:        356
Source: 
> 
>     address payable public _treasury;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public _token;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    NodeRunnersLiquidity
Line:        481
Source: 
>         IERC20(_token).approve(_uniswapV2Router, tokenAmount);
>         IUniswapV2Router02(_uniswapV2Router)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             .addLiquidityETH.value(ethAmount)(_token, tokenAmount, 0, 0, address(this), block.timestamp);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        480
Source: 
>     function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
>         IERC20(_token).approve(_uniswapV2Router, tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IUniswapV2Router02(_uniswapV2Router)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        481
Source: 
>         IERC20(_token).approve(_uniswapV2Router, tokenAmount);
>         IUniswapV2Router02(_uniswapV2Router)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             .addLiquidityETH.value(ethAmount)(_token, tokenAmount, 0, 0, address(this), block.timestamp);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        472
Source: 
>         uniswapPairPath[0] = _token;
>         uniswapPairPath[1] = IUniswapV2Router02(_uniswapV2Router).WETH();
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        474
Source: 
> 
>         IERC20(_token).approve(_uniswapV2Router, tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IUniswapV2Router02(_uniswapV2Router)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        422
Source: 
>         require(balance != 0, "NodeRunnersSave::burnLiquidity: burn amount cannot be 0");
>         IERC20(_uniswapV2Pair).transfer(address(0), balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BurnLiquidity(balance);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    NodeRunnersLiquidity
Line:        487
Source: 
>         // avoid burn by calling super._transfer directly
>         IERC20(_token).transfer(_uniswapV2Pair, liquidityRewards);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IUniswapV2Pair(_uniswapV2Pair).sync();

[0m

---------------------------------------------
For contract 0x9d23ecca7473d02d64b703bfcd63bd1aea0b48ac.sol
Tool Runtime = 327.93428284299443 seconds
#############################################