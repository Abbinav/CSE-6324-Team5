[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ConTribute
Line:        170
Source: 
> 
>     string public name = "conTRIBUTE";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ConTribute
Line:        172
Source: 
> 
>     string public symbol = "CTRBT";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ConTribute
Line:        176
Source: 
> 
>     uint256 public entryFee_ = 5;// 5%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ConTribute
Line:        178
Source: 
> 
>     uint256 public exitFee_ = 15; // 15%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ConTribute
Line:        180
Source: 
> 
>     uint256 public referralFee_ = 20; // 1% from the 5% fee
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ConTribute
Line:        182
Source: 
> 
>     uint256 internal maintenanceFee_ = 0;//10; // 1% of the 10% fee
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConTribute
Line:        216
Source: 
> 
>     function activate() public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(ambassadors_[msg.sender]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConTribute
Line:        223
Source: 
>     */
>     function receiveApproval(address from, uint256 tokens, address token, bytes20 data) public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(msg.sender==address(erc20)); //calling address must be the token itself

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConTribute
Line:        276
Source: 
>     }
>     function buy(
>     ^^^^^^^^^^^^^
>         uint256 _amount,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConTribute
Line:        292
Source: 
> 
>     function buyFor(
>     ^^^^^^^^^^^^^^^^
>         uint256 _amount,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConTribute
Line:        309
Source: 
> 
>     function reinvest()
>     ^^^^^^^^^^^^^^^^^^^
>         onlyDivis

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConTribute
Line:        473
Source: 
> 
>     function getInvested()
>     ^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConTribute
Line:        491
Source: 
>     //event DebugTest3(uint256 amount,address sender,address this,uint approved,uint balance);
>     function donateTokens(uint256 todonate) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(tokenSupply_>0,"must be some shares in first to distribute to");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConTribute
Line:        599
Source: 
> 
>     function multiData()
>     ^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ConTribute
Line:        276
Source: 
>     }
>     function buy(
>     ^^^^^^^^^^^^^
>         uint256 _amount,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ConTribute
Line:        292
Source: 
> 
>     function buyFor(
>     ^^^^^^^^^^^^^^^^
>         uint256 _amount,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ConTribute
Line:        491
Source: 
>     //event DebugTest3(uint256 amount,address sender,address this,uint approved,uint balance);
>     function donateTokens(uint256 todonate) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(tokenSupply_>0,"must be some shares in first to distribute to");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConTribute
Line:        223
Source: 
>     */
>     function receiveApproval(address from, uint256 tokens, address token, bytes20 data) public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(msg.sender==address(erc20)); //calling address must be the token itself

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConTribute
Line:        427
Source: 
> 
>     function balanceOf(
>     ^^^^^^^^^^^^^^^^^^^
>         address _customerAddress

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConTribute
Line:        437
Source: 
> 
>     function dividendsOf(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address _customerAddress

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConTribute
Line:        481
Source: 
> 
>     function totalReferralEarnings(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _client

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        541
Source: 
> 
>         uint256 _fee = _dividends * magnitude;
>                        ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        568
Source: 
> 
>             profitPerShare_ += ((_dividends * magnitude) / (tokenSupply_));
>                                  ^^^^^^^^^^^^^^^^^^^^^^
>             _fee = _fee - (_fee - (_amountOfERC20s * ((_dividends * magnitude) / (tokenSupply_))));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        569
Source: 
>             profitPerShare_ += ((_dividends * magnitude) / (tokenSupply_));
>             _fee = _fee - (_fee - (_amountOfERC20s * ((_dividends * magnitude) / (tokenSupply_))));
>                                                        ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        569
Source: 
>             profitPerShare_ += ((_dividends * magnitude) / (tokenSupply_));
>             _fee = _fee - (_fee - (_amountOfERC20s * ((_dividends * magnitude) / (tokenSupply_))));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        578
Source: 
> 
>         int256 _updatedPayouts = (int256)((profitPerShare_ * _amountOfERC20s) - _fee);
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        561
Source: 
>             _dividends = SafeMath.add(_dividends, _referralBonus);
>             _fee = _dividends * magnitude;
>                    ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        16
Source: 
>     }
>     uint256 c = a * b;
>                 ^^^^^
>     require(c / a == b);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        541
Source: 
> 
>         uint256 _fee = _dividends * magnitude;
>                        ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        568
Source: 
> 
>             profitPerShare_ += ((_dividends * magnitude) / (tokenSupply_));
>                                  ^^^^^^^^^^^^^^^^^^^^^^
>             _fee = _fee - (_fee - (_amountOfERC20s * ((_dividends * magnitude) / (tokenSupply_))));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        569
Source: 
>             profitPerShare_ += ((_dividends * magnitude) / (tokenSupply_));
>             _fee = _fee - (_fee - (_amountOfERC20s * ((_dividends * magnitude) / (tokenSupply_))));
>                                                        ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        569
Source: 
>             profitPerShare_ += ((_dividends * magnitude) / (tokenSupply_));
>             _fee = _fee - (_fee - (_amountOfERC20s * ((_dividends * magnitude) / (tokenSupply_))));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        578
Source: 
> 
>         int256 _updatedPayouts = (int256)((profitPerShare_ * _amountOfERC20s) - _fee);
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        561
Source: 
>             _dividends = SafeMath.add(_dividends, _referralBonus);
>             _fee = _dividends * magnitude;
>                    ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        317
Source: 
> 
>         payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);
>                                                  ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        445
Source: 
>         return (uint256)((int256)(
>             profitPerShare_ * tokenBalanceLedger_[_customerAddress]) -
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             payoutsTo_[_customerAddress]) / magnitude;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        347
Source: 
> 
>         payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);
>                                                  ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        376
Source: 
>         int256 _updatedPayouts =
>             (int256)(profitPerShare_ * _amountOfERC20s + (_taxedERC20 * magnitude));
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        376
Source: 
>         int256 _updatedPayouts =
>             (int256)(profitPerShare_ * _amountOfERC20s + (_taxedERC20 * magnitude));
>                                                           ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ConTribute
Line:        382
Source: 
>             profitPerShare_ = SafeMath.add(
>                 profitPerShare_, (_dividends * magnitude) / tokenSupply_
>                                   ^^^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConTribute
Line:        353
Source: 
> 
>         erc20.transfer(_customerAddress, _dividends);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        83
Source: 
> 
>     uint256 constant internal ambassadorMaxPurchase_ = 2500e18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        89
Source: 
> 
>     uint256 ACTIVATION_TIME = now+100 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        133
Source: 
> 
>     event onDistribute(
>     ^^^^^^^^^^^^^^^^^^^
>         address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        138
Source: 
> 
>     event onTokenPurchase(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        146
Source: 
> 
>     event onTokenSell(
>     ^^^^^^^^^^^^^^^^^^
>         address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        153
Source: 
> 
>     event onReinvestment(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        159
Source: 
> 
>     event onWithdraw(
>     ^^^^^^^^^^^^^^^^^
>         address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        174
Source: 
> 
>     uint8 constant public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        186
Source: 
> 
>     uint256 constant internal magnitude = 2 ** 64;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        313
Source: 
>     {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        315
Source: 
> 
>         uint256 _dividends = myDividends(false);
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        323
Source: 
> 
>         uint256 _tokens = purchaseTokens(address(0), _customerAddress, _dividends);
>         ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        330
Source: 
> 
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        332
Source: 
> 
>         uint256 _tokens = tokenBalanceLedger_[_customerAddress];
>         ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        343
Source: 
>     {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        345
Source: 
> 
>         uint256 _dividends = myDividends(false);
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        364
Source: 
>     {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amountOfERC20s <= tokenBalanceLedger_[_customerAddress]);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        367
Source: 
> 
>         uint256 _dividends = SafeMath.div(SafeMath.mul(_amountOfERC20s, exitFee_), 100);
>         ^^^^^^^^^^^^^^^^^^
>         uint256 _taxedERC20 = SafeMath.sub(_amountOfERC20s, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        368
Source: 
>         uint256 _dividends = SafeMath.div(SafeMath.mul(_amountOfERC20s, exitFee_), 100);
>         uint256 _taxedERC20 = SafeMath.sub(_amountOfERC20s, _dividends);
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        375
Source: 
> 
>         int256 _updatedPayouts =
>         ^^^^^^^^^^^^^^^^^^^^^^
>             (int256)(profitPerShare_ * _amountOfERC20s + (_taxedERC20 * magnitude));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        411
Source: 
>     {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         return balanceOf(_customerAddress);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        422
Source: 
>     {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         return _includeReferralBonus ? dividendsOf(_customerAddress) +

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        454
Source: 
>     {
>         uint256 _erc20 = 1e18;
>         ^^^^^^^^^^^^^^
>         uint256 _dividends = SafeMath.div(SafeMath.mul(_erc20, exitFee_), 100);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        455
Source: 
>         uint256 _erc20 = 1e18;
>         uint256 _dividends = SafeMath.div(SafeMath.mul(_erc20, exitFee_), 100);
>         ^^^^^^^^^^^^^^^^^^
>         uint256 _taxedERC20 = SafeMath.sub(_erc20, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        456
Source: 
>         uint256 _dividends = SafeMath.div(SafeMath.mul(_erc20, exitFee_), 100);
>         uint256 _taxedERC20 = SafeMath.sub(_erc20, _dividends);
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        466
Source: 
>     {
>         uint256 _erc20 = 1e18;
>         ^^^^^^^^^^^^^^
>         uint256 _dividends = SafeMath.div(SafeMath.mul(_erc20, entryFee_), 100);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        467
Source: 
>         uint256 _erc20 = 1e18;
>         uint256 _dividends = SafeMath.div(SafeMath.mul(_erc20, entryFee_), 100);
>         ^^^^^^^^^^^^^^^^^^
>         uint256 _taxedERC20 = SafeMath.add(_erc20, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        468
Source: 
>         uint256 _dividends = SafeMath.div(SafeMath.mul(_erc20, entryFee_), 100);
>         uint256 _taxedERC20 = SafeMath.add(_erc20, _dividends);
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        509
Source: 
> 
>         uint256 _undividedDividends =
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             SafeMath.div(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        516
Source: 
> 
>         uint256 _maintenance =
>         ^^^^^^^^^^^^^^^^^^^^
>             SafeMath.div(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        524
Source: 
> 
>         uint256 _referralBonus =
>         ^^^^^^^^^^^^^^^^^^^^^^
>             SafeMath.div(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        531
Source: 
> 
>         uint256 _dividends =
>         ^^^^^^^^^^^^^^^^^^
>             SafeMath.sub(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        538
Source: 
> 
>         uint256 _amountOfERC20s =
>         ^^^^^^^^^^^^^^^^^^^^^^^
>             SafeMath.sub(_incomingERC20, _undividedDividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        541
Source: 
> 
>         uint256 _fee = _dividends * magnitude;
>         ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ConTribute
Line:        578
Source: 
> 
>         int256 _updatedPayouts = (int256)((profitPerShare_ * _amountOfERC20s) - _fee);
>         ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ConTribute
Line:        89
Source: 
> 
>     uint256 ACTIVATION_TIME = now+100 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ConTribute
Line:        92
Source: 
>     modifier antiEarlyWhale(
>         uint256 _amountOfERC20,
>         ^^^^^^^^^^^^^^^^^^^^^^
>         address _customerAddress

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ConTribute
Line:        93
Source: 
>         uint256 _amountOfERC20,
>         address _customerAddress
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     )

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ConTribute
Line:        202
Source: 
> 
>     ERC20 erc20;
>     ^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConTribute
Line:        250
Source: 
>         require(
>             erc20.transferFrom(
>             ^^^^^^^^^^^^^^^^^^^
>                 _from,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConTribute
Line:        233
Source: 
>         require(
>             erc20.transferFrom(
>             ^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConTribute
Line:        353
Source: 
> 
>         erc20.transfer(_customerAddress, _dividends);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConTribute
Line:        395
Source: 
>     {
>         return erc20.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConTribute
Line:        625
Source: 
>         // [3] User ERC20 balance
>         erc20.balanceOf(msg.sender),
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ConTribute
Line:        198
Source: 
> 
>     uint256 internal tokenSupply_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ConTribute
Line:        200
Source: 
> 
>     uint256 internal profitPerShare_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        97
Source: 
>         if (now >= ACTIVATION_TIME) {
>             onlyAmbassadors = false;
>             ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        107
Source: 
> 
>             ambassadorAccumulatedQuota_[_customerAddress] =
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfERC20);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        507
Source: 
>     {
>         invested_[_customerAddress] += _incomingERC20;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        548
Source: 
> 
>         referralBalance_[maintenanceAddress] =
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             SafeMath.add(referralBalance_[maintenanceAddress], _maintenance);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        554
Source: 
>         {
>             referralBalance_[_referredBy] =
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 SafeMath.add(referralBalance_[_referredBy], _referralBonus);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        557
Source: 
> 
>             totalReferralEarnings_[_referredBy] =
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 SafeMath.add(totalReferralEarnings_[_referredBy], _referralBonus);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        566
Source: 
>         {
>             tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfERC20s);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        568
Source: 
> 
>             profitPerShare_ += ((_dividends * magnitude) / (tokenSupply_));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _fee = _fee - (_fee - (_amountOfERC20s * ((_dividends * magnitude) / (tokenSupply_))));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        575
Source: 
> 
>         tokenBalanceLedger_[_customerAddress] =
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfERC20s);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        580
Source: 
> 
>         payoutsTo_[_customerAddress] += _updatedPayouts;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        572
Source: 
>         } else {
>             tokenSupply_ = _amountOfERC20s;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        507
Source: 
>     {
>         invested_[_customerAddress] += _incomingERC20;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        548
Source: 
> 
>         referralBalance_[maintenanceAddress] =
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             SafeMath.add(referralBalance_[maintenanceAddress], _maintenance);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        554
Source: 
>         {
>             referralBalance_[_referredBy] =
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 SafeMath.add(referralBalance_[_referredBy], _referralBonus);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        557
Source: 
> 
>             totalReferralEarnings_[_referredBy] =
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 SafeMath.add(totalReferralEarnings_[_referredBy], _referralBonus);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        566
Source: 
>         {
>             tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfERC20s);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        568
Source: 
> 
>             profitPerShare_ += ((_dividends * magnitude) / (tokenSupply_));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _fee = _fee - (_fee - (_amountOfERC20s * ((_dividends * magnitude) / (tokenSupply_))));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        575
Source: 
> 
>         tokenBalanceLedger_[_customerAddress] =
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfERC20s);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        580
Source: 
> 
>         payoutsTo_[_customerAddress] += _updatedPayouts;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        572
Source: 
>         } else {
>             tokenSupply_ = _amountOfERC20s;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ConTribute
Line:        496
Source: 
>       checkAndTransfer(todonate);
>       profitPerShare_ = SafeMath.add(profitPerShare_, (todonate * magnitude) / tokenSupply_);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConTribute
Line:        353
Source: 
> 
>         erc20.transfer(_customerAddress, _dividends);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMath
Line:        56
Source: 
>     uint256 d = sub(c,1);
>     return mul(div(d,m),m);
>                ^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ConTribute
Line:        170
Source: 
> 
>     string public name = "conTRIBUTE";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ConTribute
Line:        172
Source: 
> 
>     string public symbol = "CTRBT";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ConTribute
Line:        174
Source: 
> 
>     uint8 constant public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0x8ee57d45794b80588e9e5102ce0bdcc4f612bbd3.sol
Tool Runtime = 827.1366326669995 seconds
#############################################