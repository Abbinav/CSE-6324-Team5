[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        330
Source: 
>      *
>      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * of certain opcodes, possibly making contracts go over the 2300 gas limit

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        432
Source: 
> 
> // File: @openzeppelin/contracts/token/ERC20/ERC20.sol
>                                              ^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        123
Source: 
>      */
>     event Approval(address indexed owner, address indexed spender, uint256 value);
>                                                                  ^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        136
Source: 
>  *
>  * Arithmetic operations in Solidity wrap on overflow. This can easily result
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * in bugs, because programmers usually assume that an overflow raises an

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        511
Source: 
>     /**
>      * @dev Returns the number of decimals used to get its user representation.
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * For example, if `decimals` equals `2`, a balance of `505` tokens should

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        513
Source: 
>      * For example, if `decimals` equals `2`, a balance of `505` tokens should
>      * be displayed to a user as `5,05` (`505 / 10 ** 2`).
>                                       ^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        537
Source: 
>      */
>     function balanceOf(address account) public view  returns (uint256) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        542
Source: 
>     /**
>      * @dev See {IERC20-transfer}.
>                          ^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        547
Source: 
>      * - `recipient` cannot be the zero address.
>      * - the caller must have a balance of at least `amount`.
>                                                       ^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        557
Source: 
>      */
>     function allowance(address owner, address spender) public view   returns (uint256) {
>                                                                                  ^^^^^^^
>         return _allowances[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        568
Source: 
>      */
>     function approve(address spender, uint256 amount) public   returns (bool) {
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(_msgSender(), spender, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        577
Source: 
>      * Emits an {Approval} event indicating the updated allowance. This is not
>      * required by the EIP. See the note at the beginning of {ERC20};
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        588
Source: 
>         _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
>         return true;
>                 ^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        609
Source: 
>     /**
>      * @dev Atomically decreases the allowance granted to `spender` by the caller.
>                                                                           ^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        628
Source: 
>     /**
>      * @dev Moves tokens `amount` from `sender` to `recipient`.
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        789
Source: 
>     /**
>      * @dev Leaves the contract without owner. It will not be possible to call
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * `onlyOwner` functions anymore. Can only be called by the current owner.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        804
Source: 
>      */
>     function transferOwnership(address newOwner) public  onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        812
Source: 
> 
> // File: @openzeppelin/contracts/token/ERC20/ERC20Burnable.sol
>                                                       ^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        511
Source: 
>     /**
>      * @dev Returns the number of decimals used to get its user representation.
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * For example, if `decimals` equals `2`, a balance of `505` tokens should

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        513
Source: 
>      * For example, if `decimals` equals `2`, a balance of `505` tokens should
>      * be displayed to a user as `5,05` (`505 / 10 ** 2`).
>                                       ^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        537
Source: 
>      */
>     function balanceOf(address account) public view  returns (uint256) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        542
Source: 
>     /**
>      * @dev See {IERC20-transfer}.
>                          ^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        547
Source: 
>      * - `recipient` cannot be the zero address.
>      * - the caller must have a balance of at least `amount`.
>                                                       ^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        557
Source: 
>      */
>     function allowance(address owner, address spender) public view   returns (uint256) {
>                                                                                  ^^^^^^^
>         return _allowances[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        577
Source: 
>      * Emits an {Approval} event indicating the updated allowance. This is not
>      * required by the EIP. See the note at the beginning of {ERC20};
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        588
Source: 
>         _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
>         return true;
>                 ^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        609
Source: 
>     /**
>      * @dev Atomically decreases the allowance granted to `spender` by the caller.
>                                                                           ^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        628
Source: 
>     /**
>      * @dev Moves tokens `amount` from `sender` to `recipient`.
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        789
Source: 
>     /**
>      * @dev Leaves the contract without owner. It will not be possible to call
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * `onlyOwner` functions anymore. Can only be called by the current owner.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        804
Source: 
>      */
>     function transferOwnership(address newOwner) public  onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        812
Source: 
> 
> // File: @openzeppelin/contracts/token/ERC20/ERC20Burnable.sol
>                                                       ^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Burnable
Line:        841
Source: 
>      *
>      * - the caller must have allowance for ``accounts``'s tokens of at least
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * `amount`.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Burnable
Line:        853
Source: 
> 
> // File: contracts/YFIDigital.sol
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
Traceback (most recent call last):
  File "securify/__main__.py", line 286, in <module>
    main()
  File "securify/__main__.py", line 282, in main
    exclude_contracts=args.exclude_contracts)
  File "/sec/securify/analyses/analysis.py", line 148, in print_pattern_matches
    msg = format_match(analysis_context, pattern, match, include_contracts=include_contracts, exclude_contracts=exclude_contracts)
  File "/sec/securify/analyses/analysis.py", line 211, in format_match
    "^" * min(location.length, len(src_lines[line]) - indicator_offset - 2)
IndexError: list index out of range

---------------------------------------------
For contract 0x94d17e458e437d02b358f8154a83a7f024024d72.sol
Tool Runtime = 7.437964646000182 seconds
#############################################