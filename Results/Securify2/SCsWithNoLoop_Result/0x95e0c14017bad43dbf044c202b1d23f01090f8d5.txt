[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StableCreditHelper
Line:        110
Source: 
>     // Calculate share of credit pool remaining [_token_amount, _USD_amount]
>     function calculateBalance(address token) external view returns (uint[] memory amounts) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return calculateBalanceOf(msg.sender, token);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StableCreditHelper
Line:        114
Source: 
>     // Calculate share of credit pool for given owner [_token_amount, _USD_amount]
>     function calculateBalanceOf(address owner, address token) public view returns (uint[] memory amounts) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _pair = UniswapFactory(UNI.factory()).getPair(token, address(STABLE));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StableCreditHelper
Line:        126
Source: 
>     // Calculate maxium amount of credit a depositer will get for their token
>     function calculateCreditMax(address token) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return calculateCreditMaxOf(msg.sender, token);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StableCreditHelper
Line:        129
Source: 
>     }
>     function calculateCreditMaxOf(address owner, address token) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return calculateCredit(token, IERC20(token).balanceOf(owner));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StableCreditHelper
Line:        132
Source: 
>     }
>     function calculateCredit(address token, uint amount) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return amount.mul(_utilization(token, amount)).div(STABLE.BASE());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StableCreditHelper
Line:        136
Source: 
>     // Calculate how much USD required to borrow exact amount of output token
>     function calculateBorrowExactOut(address token, uint outExact) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory _path = new address[](2);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StableCreditHelper
Line:        143
Source: 
>     // Calculate maximum amount of output token given amount of USD owner by owner
>     function calculateBorrowMax(address token) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return calculateBorrowMaxOf(msg.sender, token);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StableCreditHelper
Line:        146
Source: 
>     }
>     function calculateBorrowMaxOf(address owner, address token) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return calculateBorrowExactIn(token, STABLE.balanceOf(owner));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StableCreditHelper
Line:        150
Source: 
>     // Calculate amount of token received given exact amount of USD input
>     function calculateBorrowExactIn(address token, uint inExact) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory _path = new address[](2);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StableCreditHelper
Line:        157
Source: 
>     // Calculate amount of USD required to repay exact amount of token
>     function calculateRepayExactOut(address token, uint outExact) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory _path = new address[](2);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StableCreditHelper
Line:        164
Source: 
>     // calculate maximum amount of token repaid given USD input
>     function calculateRepayMax(address token) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return calculateRepayMaxOf(msg.sender, token);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StableCreditHelper
Line:        168
Source: 
>     
>     function calculateRepayMaxOf(address owner, address token) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return calculateRepayExactIn(token, IERC20(token).balanceOf(owner));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StableCreditHelper
Line:        173
Source: 
>     // Calculate amount of token repaid given exact amount of USD input
>     function calculateRepayExactIn(address token, uint inExact) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory _path = new address[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StableCreditProtocol
Line:        82
Source: 
>     function utilization(address token) external view returns (uint);
>     function BASE() external view returns (uint);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function MAX() external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StableCreditProtocol
Line:        83
Source: 
>     function BASE() external view returns (uint);
>     function MAX() external view returns (uint);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function totalSupply() external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StableCreditHelper
Line:        99
Source: 
>     function _utilization(address token, uint amount) internal view returns (uint) {
>         uint _max = STABLE.MAX();
>         ^^^^^^^^^
>         uint _base = STABLE.BASE();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StableCreditHelper
Line:        100
Source: 
>         uint _max = STABLE.MAX();
>         uint _base = STABLE.BASE();
>         ^^^^^^^^^^
>         address _pair = UniswapFactory(UNI.factory()).getPair(token, address(STABLE));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StableCreditHelper
Line:        101
Source: 
>         uint _base = STABLE.BASE();
>         address _pair = UniswapFactory(UNI.factory()).getPair(token, address(STABLE));
>         ^^^^^^^^^^^^^
>         uint _ratio = _base.sub(_base.mul(STABLE.balanceOf(_pair).add(amount)).div(STABLE.totalSupply()));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StableCreditHelper
Line:        102
Source: 
>         address _pair = UniswapFactory(UNI.factory()).getPair(token, address(STABLE));
>         uint _ratio = _base.sub(_base.mul(STABLE.balanceOf(_pair).add(amount)).div(STABLE.totalSupply()));
>         ^^^^^^^^^^^
>         if (_ratio == 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StableCreditHelper
Line:        115
Source: 
>     function calculateBalanceOf(address owner, address token) public view returns (uint[] memory amounts) {
>         address _pair = UniswapFactory(UNI.factory()).getPair(token, address(STABLE));
>         ^^^^^^^^^^^^^
>         uint _supply = IERC20(_pair).totalSupply();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StableCreditHelper
Line:        116
Source: 
>         address _pair = UniswapFactory(UNI.factory()).getPair(token, address(STABLE));
>         uint _supply = IERC20(_pair).totalSupply();
>         ^^^^^^^^^^^^
>         uint _balance = IERC20(token).balanceOf(_pair);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StableCreditHelper
Line:        117
Source: 
>         uint _supply = IERC20(_pair).totalSupply();
>         uint _balance = IERC20(token).balanceOf(_pair);
>         ^^^^^^^^^^^^^
>         uint _share = STABLE.balances(owner, token);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StableCreditHelper
Line:        118
Source: 
>         uint _balance = IERC20(token).balanceOf(_pair);
>         uint _share = STABLE.balances(owner, token);
>         ^^^^^^^^^^^
>         amounts = new uint[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StableCreditHelper
Line:        137
Source: 
>     function calculateBorrowExactOut(address token, uint outExact) external view returns (uint) {
>         address[] memory _path = new address[](2);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         _path[0] = address(STABLE);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StableCreditHelper
Line:        151
Source: 
>     function calculateBorrowExactIn(address token, uint inExact) public view returns (uint) {
>         address[] memory _path = new address[](2);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         _path[0] = address(STABLE);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StableCreditHelper
Line:        158
Source: 
>     function calculateRepayExactOut(address token, uint outExact) external view returns (uint) {
>         address[] memory _path = new address[](2);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         _path[0] = token;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StableCreditHelper
Line:        174
Source: 
>     function calculateRepayExactIn(address token, uint inExact) public view returns (uint) {
>         address[] memory _path = new address[](2);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         _path[0] = token;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StableCreditHelper
Line:        100
Source: 
>         uint _max = STABLE.MAX();
>         uint _base = STABLE.BASE();
>                      ^^^^^^^^^^^^^
>         address _pair = UniswapFactory(UNI.factory()).getPair(token, address(STABLE));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StableCreditHelper
Line:        101
Source: 
>         uint _base = STABLE.BASE();
>         address _pair = UniswapFactory(UNI.factory()).getPair(token, address(STABLE));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _ratio = _base.sub(_base.mul(STABLE.balanceOf(_pair).add(amount)).div(STABLE.totalSupply()));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StableCreditHelper
Line:        102
Source: 
>         address _pair = UniswapFactory(UNI.factory()).getPair(token, address(STABLE));
>         uint _ratio = _base.sub(_base.mul(STABLE.balanceOf(_pair).add(amount)).div(STABLE.totalSupply()));
>                                           ^^^^^^^^^^^^^^^^^^^^^^^
>         if (_ratio == 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StableCreditHelper
Line:        115
Source: 
>     function calculateBalanceOf(address owner, address token) public view returns (uint[] memory amounts) {
>         address _pair = UniswapFactory(UNI.factory()).getPair(token, address(STABLE));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _supply = IERC20(_pair).totalSupply();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StableCreditHelper
Line:        117
Source: 
>         uint _supply = IERC20(_pair).totalSupply();
>         uint _balance = IERC20(token).balanceOf(_pair);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _share = STABLE.balances(owner, token);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StableCreditHelper
Line:        118
Source: 
>         uint _balance = IERC20(token).balanceOf(_pair);
>         uint _share = STABLE.balances(owner, token);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         amounts = new uint[](2);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StableCreditHelper
Line:        122
Source: 
>         
>         _balance = STABLE.balanceOf(_pair);
>                    ^^^^^^^^^^^^^^^^^^^^^^^
>         amounts[1] = _balance.mul(_share).div(_supply);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StableCreditHelper
Line:        130
Source: 
>     function calculateCreditMaxOf(address owner, address token) public view returns (uint) {
>         return calculateCredit(token, IERC20(token).balanceOf(owner));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StableCreditHelper
Line:        147
Source: 
>     function calculateBorrowMaxOf(address owner, address token) public view returns (uint) {
>         return calculateBorrowExactIn(token, STABLE.balanceOf(owner));
>                                              ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StableCreditHelper
Line:        169
Source: 
>     function calculateRepayMaxOf(address owner, address token) public view returns (uint) {
>         return calculateRepayExactIn(token, IERC20(token).balanceOf(owner));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StableCreditHelper
Line:        99
Source: 
>     function _utilization(address token, uint amount) internal view returns (uint) {
>         uint _max = STABLE.MAX();
>                     ^^^^^^^^^^^^
>         uint _base = STABLE.BASE();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StableCreditHelper
Line:        101
Source: 
>         uint _base = STABLE.BASE();
>         address _pair = UniswapFactory(UNI.factory()).getPair(token, address(STABLE));
>                                        ^^^^^^^^^^^^^
>         uint _ratio = _base.sub(_base.mul(STABLE.balanceOf(_pair).add(amount)).div(STABLE.totalSupply()));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StableCreditHelper
Line:        102
Source: 
>         address _pair = UniswapFactory(UNI.factory()).getPair(token, address(STABLE));
>         uint _ratio = _base.sub(_base.mul(STABLE.balanceOf(_pair).add(amount)).div(STABLE.totalSupply()));
>                                                                                    ^^^^^^^^^^^^^^^^^^^^
>         if (_ratio == 0) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StableCreditHelper
Line:        115
Source: 
>     function calculateBalanceOf(address owner, address token) public view returns (uint[] memory amounts) {
>         address _pair = UniswapFactory(UNI.factory()).getPair(token, address(STABLE));
>                                        ^^^^^^^^^^^^^
>         uint _supply = IERC20(_pair).totalSupply();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StableCreditHelper
Line:        116
Source: 
>         address _pair = UniswapFactory(UNI.factory()).getPair(token, address(STABLE));
>         uint _supply = IERC20(_pair).totalSupply();
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _balance = IERC20(token).balanceOf(_pair);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StableCreditHelper
Line:        133
Source: 
>     function calculateCredit(address token, uint amount) public view returns (uint) {
>         return amount.mul(_utilization(token, amount)).div(STABLE.BASE());
>                                                            ^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StableCreditHelper
Line:        140
Source: 
>         _path[1] = token;
>         return UNI.getAmountsIn(outExact, _path)[0];
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StableCreditHelper
Line:        154
Source: 
>         _path[1] = token;
>         return UNI.getAmountsOut(inExact, _path)[1];
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StableCreditHelper
Line:        161
Source: 
>         _path[1] = address(STABLE);
>         return UNI.getAmountsIn(outExact, _path)[0];
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StableCreditHelper
Line:        177
Source: 
>         _path[1] = address(STABLE);
>         return UNI.getAmountsOut(inExact, _path)[1];
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StableCreditHelper
Line:        101
Source: 
>         uint _base = STABLE.BASE();
>         address _pair = UniswapFactory(UNI.factory()).getPair(token, address(STABLE));
>                                        ^^^^^^^^^^^^^
>         uint _ratio = _base.sub(_base.mul(STABLE.balanceOf(_pair).add(amount)).div(STABLE.totalSupply()));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StableCreditHelper
Line:        115
Source: 
>     function calculateBalanceOf(address owner, address token) public view returns (uint[] memory amounts) {
>         address _pair = UniswapFactory(UNI.factory()).getPair(token, address(STABLE));
>                                        ^^^^^^^^^^^^^
>         uint _supply = IERC20(_pair).totalSupply();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StableCreditHelper
Line:        140
Source: 
>         _path[1] = token;
>         return UNI.getAmountsIn(outExact, _path)[0];
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StableCreditHelper
Line:        161
Source: 
>         _path[1] = address(STABLE);
>         return UNI.getAmountsIn(outExact, _path)[0];
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m

---------------------------------------------
For contract 0x95e0c14017bad43dbf044c202b1d23f01090f8d5.sol
Tool Runtime = 654.8183773110068 seconds
#############################################