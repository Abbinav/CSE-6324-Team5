[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    OMAGE
Line:        75
Source: 
>         bool public isMinting = true;
>         bool public isExchangeListed = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string public constant generatedBy  = "OMAGE LGBTI COMMUNITY";

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OMAGE
Line:        110
Source: 
>         //allows owner to burn tokens that are not sold in a crowdsale
>         function burnTokens(uint256 _value) onlyOwner public {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OMAGE
Line:        135
Source: 
> 
>         function endCrowdsale() onlyOwner  public{
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             isMinting = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OMAGE
Line:        139
Source: 
> 
>         function changeCrowdsaleRate(uint256 _value) onlyOwner public {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             RATE = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OMAGE
Line:        145
Source: 
> 
>         function totalSupply() view public returns(uint256){
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OMAGE
Line:        149
Source: 
>         // What is the balance of a particular account?
>         function balanceOf(address _owner) view public returns(uint256){
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OMAGE
Line:        154
Source: 
>          // Transfer the balance from owner's account to another account
>         function transfer(address _to, uint256 _value)  public returns(bool) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(balances[msg.sender] >= _value && _value > 0 );

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OMAGE
Line:        168
Source: 
>     // these standardized APIs for approval:
>     function transferFrom(address _from, address _to, uint256 _value) public  returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OMAGE
Line:        179
Source: 
>     // If this function is called again it overwrites the current allowance with _value.
>     function approve(address _spender, uint256 _value) public returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OMAGE
Line:        186
Source: 
>     // Returns the amount which _spender is still allowed to withdraw from _owner
>     function allowance(address _owner, address _spender) view public returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OMAGE
Line:        139
Source: 
> 
>         function changeCrowdsaleRate(uint256 _value) onlyOwner public {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             RATE = _value;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OMAGE
Line:        154
Source: 
>          // Transfer the balance from owner's account to another account
>         function transfer(address _to, uint256 _value)  public returns(bool) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(balances[msg.sender] >= _value && _value > 0 );

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OMAGE
Line:        168
Source: 
>     // these standardized APIs for approval:
>     function transferFrom(address _from, address _to, uint256 _value) public  returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OMAGE
Line:        149
Source: 
>         // What is the balance of a particular account?
>         function balanceOf(address _owner) view public returns(uint256){
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OMAGE
Line:        179
Source: 
>     // If this function is called again it overwrites the current allowance with _value.
>     function approve(address _spender, uint256 _value) public returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OMAGE
Line:        186
Source: 
>     // Returns the amount which _spender is still allowed to withdraw from _owner
>     function allowance(address _owner, address _spender) view public returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        13
Source: 
>   function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>     uint256 c = a * b;
>                 ^^^^^
>     assert(a == 0 || c / a == b);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        21
Source: 
>     uint256 c = a / b;
>     assert(a == b * c + a % b); // There is no case in which this doesn't hold
>                 ^^^^^
>     return c;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OMAGE
Line:        69
Source: 
> 
>         string public constant name = "OMAGE";
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string public constant symbol = "OMA";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OMAGE
Line:        70
Source: 
>         string public constant name = "OMAGE";
>         string public constant symbol = "OMA";
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OMAGE
Line:        71
Source: 
>         string public constant symbol = "OMA";
>         uint8 public constant decimals = 18;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint public _totalSupply = 8000000000000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OMAGE
Line:        72
Source: 
>         uint8 public constant decimals = 18;
>         uint public _totalSupply = 8000000000000000000000000;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 public RATE = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OMAGE
Line:        73
Source: 
>         uint public _totalSupply = 8000000000000000000000000;
>         uint256 public RATE = 1;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         bool public isMinting = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OMAGE
Line:        76
Source: 
>         bool public isExchangeListed = true;
>         string public constant generatedBy  = "OMAGE LGBTI COMMUNITY";
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> //pragma solidity ^0.6.6;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OMAGE
Line:        90
Source: 
>         // Balances for each account
>         mapping(address => uint256) balances;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Owner of account approves the transfer of an amount to another account

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OMAGE
Line:        92
Source: 
>         // Owner of account approves the transfer of an amount to another account
>         mapping(address => mapping(address=>uint256)) allowed;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OMAGE
Line:        72
Source: 
>         uint8 public constant decimals = 18;
>         uint public _totalSupply = 8000000000000000000000000;
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 public RATE = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OMAGE
Line:        124
Source: 
>                 require(msg.value > 0);
>                 uint256  tokens = msg.value.div(100000000000000).mul(RATE);
>                                                 ^^^^^^^^^^^^^^^
>                 balances[msg.sender] = balances[msg.sender].add(tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    OMAGE
Line:        127
Source: 
>                 _totalSupply = _totalSupply.add(tokens);
>                 owner.transfer(msg.value);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    OMAGE
Line:        127
Source: 
>                 _totalSupply = _totalSupply.add(tokens);
>                 owner.transfer(msg.value);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    OMAGE
Line:        127
Source: 
>                 _totalSupply = _totalSupply.add(tokens);
>                 owner.transfer(msg.value);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OMAGE
Line:        126
Source: 
>                 balances[msg.sender] = balances[msg.sender].add(tokens);
>                 _totalSupply = _totalSupply.add(tokens);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 owner.transfer(msg.value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OMAGE
Line:        180
Source: 
>     function approve(address _spender, uint256 _value) public returns(bool){
>         allowed[msg.sender][_spender] = _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    OMAGE
Line:        69
Source: 
> 
>         string public constant name = "OMAGE";
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string public constant symbol = "OMA";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    OMAGE
Line:        70
Source: 
>         string public constant name = "OMAGE";
>         string public constant symbol = "OMA";
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    OMAGE
Line:        71
Source: 
>         string public constant symbol = "OMA";
>         uint8 public constant decimals = 18;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint public _totalSupply = 8000000000000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    OMAGE
Line:        75
Source: 
>         bool public isMinting = true;
>         bool public isExchangeListed = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string public constant generatedBy  = "OMAGE LGBTI COMMUNITY";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    OMAGE
Line:        76
Source: 
>         bool public isExchangeListed = true;
>         string public constant generatedBy  = "OMAGE LGBTI COMMUNITY";
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0x29117ff22c7f156ba0fcbdff92a07344e1d3440c.sol
Tool Runtime = 3.610352441000032 seconds
#############################################