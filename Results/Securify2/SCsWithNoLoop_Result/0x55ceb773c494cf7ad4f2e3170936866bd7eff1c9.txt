[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        308
Source: 
> 
>         assembly { codehash := extcodehash(account) }
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    LPTokenWrapper
Line:        628
Source: 
> 
>     IERC20 public uni = IERC20(
>        ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    dgStaking3
Line:        724
Source: 
> 
>     IERC20 public dg = IERC20(
>        ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        210
Source: 
> 
>         return _msgSender() == _owner;
>                   ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    dgStaking3
Line:        846
Source: 
> 
>         if (totalSupply() == 0) {
>                ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        48
Source: 
> 
>         if (a == 0) {
>                ^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        58
Source: 
> 
>         require(c / a == b, 'SafeMath: multiplication overflow');
>                    ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        184
Source: 
> 
>     function owner() public view returns (address) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        216
Source: 
> 
>     function renounceOwnership() public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        232
Source: 
> 
>     function transferOwnership(address newOwner) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LPTokenWrapper
Line:        642
Source: 
> 
>     function totalSupply() public view returns (uint256) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LPTokenWrapper
Line:        650
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        184
Source: 
> 
>     function owner() public view returns (address) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        216
Source: 
> 
>     function renounceOwnership() public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        232
Source: 
> 
>     function transferOwnership(address newOwner) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dgStaking3
Line:        898
Source: 
> 
>     function stake(
>        ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        336
Source: 
> 
>         (bool success, ) = recipient.call.value(amount)('');
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        588
Source: 
> 
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                      ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        336
Source: 
> 
>         (bool success, ) = recipient.call.value(amount)('');
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        588
Source: 
> 
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                      ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        336
Source: 
> 
>         (bool success, ) = recipient.call.value(amount)('');
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        588
Source: 
> 
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                      ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        336
Source: 
> 
>         (bool success, ) = recipient.call.value(amount)('');
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        232
Source: 
> 
>     function transferOwnership(address newOwner) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    dgStaking3
Line:        872
Source: 
> 
>     function earned(
>        ^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    dgStaking3
Line:        1010
Source: 
> 
>     function notifyRewardAmount(uint256 reward)
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LPTokenWrapper
Line:        650
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        56
Source: 
> 
>         uint256 c = a * b;
>                        ^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        336
Source: 
> 
>         (bool success, ) = recipient.call.value(amount)('');
>             ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    dgStaking3
Line:        714
Source: 
> 
> contract dgStaking3 is LPTokenWrapper, Ownable {
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        14
Source: 
> //pragma solidity ^0.7.5;
> pragma solidity >=0.5 <0.7.17;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    dgStaking3
Line:        790
Source: 
> 
>     modifier updateReward(address account) {
>                              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        310
Source: 
> 
>         return (codehash != 0x0 && codehash != accountHash);
>                    ^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    LPTokenWrapper
Line:        636
Source: 
> 
>     uint256 private _totalSupply;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    dgStaking3
Line:        736
Source: 
> 
>     uint256 public periodFinish;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    dgStaking3
Line:        738
Source: 
> 
>     uint256 public rewardRate;
>        ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    dgStaking3
Line:        740
Source: 
> 
>     uint256 public lastUpdateTime;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    dgStaking3
Line:        742
Source: 
> 
>     uint256 public rewardPerTokenStored;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    LPTokenWrapper
Line:        636
Source: 
> 
>     uint256 private _totalSupply;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    dgStaking3
Line:        794
Source: 
> 
>         rewardPerTokenStored = rewardPerToken();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    dgStaking3
Line:        796
Source: 
> 
>         lastUpdateTime = lastTimeRewardApplicable();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    dgStaking3
Line:        794
Source: 
> 
>         rewardPerTokenStored = rewardPerToken();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    dgStaking3
Line:        796
Source: 
> 
>         lastUpdateTime = lastTimeRewardApplicable();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    dgStaking3
Line:        794
Source: 
> 
>         rewardPerTokenStored = rewardPerToken();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    dgStaking3
Line:        796
Source: 
> 
>         lastUpdateTime = lastTimeRewardApplicable();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        336
Source: 
> 
>         (bool success, ) = recipient.call.value(amount)('');
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        580
Source: 
> 
>             address(token).isContract(),
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        588
Source: 
> 
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                      ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        452
Source: 
> 
>             (value == 0) || (token.allowance(address(this), spender) == 0),
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        492
Source: 
> 
>         uint256 newAllowance = token.allowance(
>                                   ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        536
Source: 
> 
>         uint256 newAllowance = token.allowance(
>                                   ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        336
Source: 
> 
>         (bool success, ) = recipient.call.value(amount)('');
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        580
Source: 
> 
>             address(token).isContract(),
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        588
Source: 
> 
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                      ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        452
Source: 
> 
>             (value == 0) || (token.allowance(address(this), spender) == 0),
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        492
Source: 
> 
>         uint256 newAllowance = token.allowance(
>                                   ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        536
Source: 
> 
>         uint256 newAllowance = token.allowance(
>                                   ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        580
Source: 
> 
>             address(token).isContract(),
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        588
Source: 
> 
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                      ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        336
Source: 
> 
>         (bool success, ) = recipient.call.value(amount)('');
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        452
Source: 
> 
>             (value == 0) || (token.allowance(address(this), spender) == 0),
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        492
Source: 
> 
>         uint256 newAllowance = token.allowance(
>                                   ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        536
Source: 
> 
>         uint256 newAllowance = token.allowance(
>                                   ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        336
Source: 
> 
>         (bool success, ) = recipient.call.value(amount)('');
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        452
Source: 
> 
>             (value == 0) || (token.allowance(address(this), spender) == 0),
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        492
Source: 
> 
>         uint256 newAllowance = token.allowance(
>                                   ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        536
Source: 
> 
>         uint256 newAllowance = token.allowance(
>                                   ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LPTokenWrapper
Line:        628
Source: 
> 
>     IERC20 public uni = IERC20(
>        ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    dgStaking3
Line:        826
Source: 
> 
>             block.timestamp,
>                ^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    dgStaking3
Line:        1020
Source: 
> 
>         if (block.timestamp >= periodFinish) {
>                ^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    dgStaking3
Line:        1034
Source: 
> 
>         lastUpdateTime = block.timestamp;
>                             ^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    dgStaking3
Line:        1036
Source: 
> 
>         periodFinish = block.timestamp.add(DURATION);
>                           ^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    dgStaking3
Line:        1026
Source: 
> 
>             uint256 remaining = periodFinish.sub(block.timestamp);
>                                                     ^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0x55ceb773c494cf7ad4f2e3170936866bd7eff1c9.sol
Tool Runtime = 211.46976610500133 seconds
#############################################