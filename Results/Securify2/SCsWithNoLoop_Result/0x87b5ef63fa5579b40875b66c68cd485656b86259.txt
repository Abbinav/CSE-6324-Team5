[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenSale
Line:        45
Source: 
>     uint256 public price = 500;              // 1eth = 500 tokens
>     uint256 public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        34
Source: 
> 
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0), "ERC20: sending to the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenSale
Line:        100
Source: 
> 
>     function endSale() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenSale
Line:        78
Source: 
>     
>     function setPrice(uint256 price_) external onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         price = price_;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenSale
Line:        91
Source: 
>         require(owner.send(_amount), "Unable to transfer eth to owner");
>         require(tokenContract.transfer(_receiver, tokensToBuy), "Unable to transfer token to user"); 
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokensSold += tokensToBuy; 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    TokenSale
Line:        90
Source: 
>         uint tokensToBuy = multiply(_amount, price);
>         require(owner.send(_amount), "Unable to transfer eth to owner");
>                 ^^^^^^^^^^^^^^^^^^^
>         require(tokenContract.transfer(_receiver, tokensToBuy), "Unable to transfer token to user"); 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenSale
Line:        49
Source: 
>     uint256 public ethRaised;
>     uint256 public MaxETHAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenSale
Line:        85
Source: 
>         require(ethRaised < MaxETHAmount, "Presale finished");
>         uint _amount = msg.value; 
>         ^^^^^^^^^^^^
>         require(_receiver != address(0), "Can't send to 0x00 address"); 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        11
Source: 
> //pragma solidity 0.7.5;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    TokenSale
Line:        106
Source: 
> 
>         msg.sender.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TokenSale
Line:        90
Source: 
>         uint tokensToBuy = multiply(_amount, price);
>         require(owner.send(_amount), "Unable to transfer eth to owner");
>                 ^^^^^^^^^^^^^^^^^^^
>         require(tokenContract.transfer(_receiver, tokensToBuy), "Unable to transfer token to user"); 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TokenSale
Line:        106
Source: 
> 
>         msg.sender.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TokenSale
Line:        90
Source: 
>         uint tokensToBuy = multiply(_amount, price);
>         require(owner.send(_amount), "Unable to transfer eth to owner");
>                 ^^^^^^^^^^^^^^^^^^^
>         require(tokenContract.transfer(_receiver, tokensToBuy), "Unable to transfer token to user"); 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TokenSale
Line:        106
Source: 
> 
>         msg.sender.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenSale
Line:        91
Source: 
>         require(owner.send(_amount), "Unable to transfer eth to owner");
>         require(tokenContract.transfer(_receiver, tokensToBuy), "Unable to transfer token to user"); 
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokensSold += tokensToBuy; 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenSale
Line:        104
Source: 
>         // Send unsold tokens to the owner.
>         require(tokenContract.transfer(owner, tokenContract.balanceOf(address(this))));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenSale
Line:        104
Source: 
>         // Send unsold tokens to the owner.
>         require(tokenContract.transfer(owner, tokenContract.balanceOf(address(this))));
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    TokenSale
Line:        75
Source: 
>     function multiply(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x);
>                            ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenSale
Line:        47
Source: 
>     
>     uint256 public tokensSold;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public ethRaised;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenSale
Line:        48
Source: 
>     uint256 public tokensSold;
>     uint256 public ethRaised;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public MaxETHAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    TokenSale
Line:        90
Source: 
>         uint tokensToBuy = multiply(_amount, price);
>         require(owner.send(_amount), "Unable to transfer eth to owner");
>                 ^^^^^^^^^^^^^^^^^^^
>         require(tokenContract.transfer(_receiver, tokensToBuy), "Unable to transfer token to user"); 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenSale
Line:        92
Source: 
>         require(tokenContract.transfer(_receiver, tokensToBuy), "Unable to transfer token to user"); 
>         tokensSold += tokensToBuy; 
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         ethRaised += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenSale
Line:        93
Source: 
>         tokensSold += tokensToBuy; 
>         ethRaised += _amount;
>         ^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenSale
Line:        45
Source: 
>     uint256 public price = 500;              // 1eth = 500 tokens
>     uint256 public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m

---------------------------------------------
For contract 0x87b5ef63fa5579b40875b66c68cd485656b86259.sol
Tool Runtime = 2.6603853279993928 seconds
#############################################