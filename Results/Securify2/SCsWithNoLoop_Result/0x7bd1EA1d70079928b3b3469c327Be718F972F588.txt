[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Migrator
Line:        108
Source: 
> 
>     function migrate(IUniswapV2Pair orig) public returns (IUniswapV2Pair) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == chef, "not from master chef");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Migrator
Line:        108
Source: 
> 
>     function migrate(IUniswapV2Pair orig) public returns (IUniswapV2Pair) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == chef, "not from master chef");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        24
Source: 
> 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function PERMIT_TYPEHASH() external pure returns (bytes32);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        25
Source: 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     function PERMIT_TYPEHASH() external pure returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nonces(address owner) external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        42
Source: 
> 
>     function MINIMUM_LIQUIDITY() external pure returns (uint);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function factory() external view returns (address);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        62
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        84
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Migrator
Line:        111
Source: 
>         require(block.number >= notBeforeBlock, "too early to migrate");
>         require(orig.factory() == oldFactory, "not from old factory");
>                 ^^^^^^^^^^^^^^
>         address token0 = orig.token0();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Migrator
Line:        114
Source: 
>         address token1 = orig.token1();
>         IUniswapV2Pair pair = IUniswapV2Pair(factory.getPair(token0, token1));
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (pair == IUniswapV2Pair(address(0))) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Migrator
Line:        118
Source: 
>         }
>         uint256 lp = orig.balanceOf(msg.sender);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (lp == 0) return pair;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Migrator
Line:        112
Source: 
>         require(orig.factory() == oldFactory, "not from old factory");
>         address token0 = orig.token0();
>                          ^^^^^^^^^^^^^
>         address token1 = orig.token1();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Migrator
Line:        113
Source: 
>         address token0 = orig.token0();
>         address token1 = orig.token1();
>                          ^^^^^^^^^^^^^
>         IUniswapV2Pair pair = IUniswapV2Pair(factory.getPair(token0, token1));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Migrator
Line:        116
Source: 
>         if (pair == IUniswapV2Pair(address(0))) {
>             pair = IUniswapV2Pair(factory.createPair(token0, token1));
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Migrator
Line:        121
Source: 
>         desiredLiquidity = lp;
>         orig.transferFrom(msg.sender, address(orig), lp);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         orig.burn(address(pair));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Migrator
Line:        122
Source: 
>         orig.transferFrom(msg.sender, address(orig), lp);
>         orig.burn(address(pair));
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         pair.mint(msg.sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Migrator
Line:        123
Source: 
>         orig.burn(address(pair));
>         pair.mint(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^
>         desiredLiquidity = uint256(-1);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Migrator
Line:        121
Source: 
>         desiredLiquidity = lp;
>         orig.transferFrom(msg.sender, address(orig), lp);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         orig.burn(address(pair));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Migrator
Line:        122
Source: 
>         orig.transferFrom(msg.sender, address(orig), lp);
>         orig.burn(address(pair));
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         pair.mint(msg.sender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Migrator
Line:        123
Source: 
>         orig.burn(address(pair));
>         pair.mint(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^
>         desiredLiquidity = uint256(-1);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Migrator
Line:        94
Source: 
>     uint256 public notBeforeBlock;
>     uint256 public desiredLiquidity = uint256(-1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0x7bd1EA1d70079928b3b3469c327Be718F972F588.sol
Tool Runtime = 3.0623456700013776 seconds
#############################################