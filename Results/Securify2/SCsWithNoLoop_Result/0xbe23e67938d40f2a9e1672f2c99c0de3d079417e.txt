[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ClerkTeamReserve
Line:        38
Source: 
>     // This can only ever be incremented - never decreased
>     function updateUnlockDate(uint256 _newDate) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newDate > unlockDate, "Date specified is less than current unlock date");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ClerkTeamReserve
Line:        49
Source: 
>     // callable by owner only, after specified time
>     function withdrawAll() onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(block.timestamp >= unlockDate);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ClerkTeamReserve
Line:        57
Source: 
>     // callable by owner only, after specified time, only for Tokens implementing ERC20
>     function withdrawERC20(address _tokenContract) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(block.timestamp >= unlockDate, "Funds cannot be withdrawn yet");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ClerkTeamReserve
Line:        66
Source: 
>     // callable by owner only, after specified time, only for Tokens implementing ERC20
>     function withdrawERC20Amount(address _tokenContract, uint256 _amount) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(block.timestamp >= unlockDate, "Funds cannot be withdrawn yet");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ClerkTeamReserve
Line:        75
Source: 
> 
>     function info() public view returns(address, uint256, uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (owner, unlockDate, address(this).balance);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ClerkTeamReserve
Line:        79
Source: 
> 
>     function infoERC20(address _tokenContract) public view returns(address, uint256, uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20 token = ERC20(_tokenContract);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ClerkTeamReserve
Line:        57
Source: 
>     // callable by owner only, after specified time, only for Tokens implementing ERC20
>     function withdrawERC20(address _tokenContract) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(block.timestamp >= unlockDate, "Funds cannot be withdrawn yet");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ClerkTeamReserve
Line:        66
Source: 
>     // callable by owner only, after specified time, only for Tokens implementing ERC20
>     function withdrawERC20Amount(address _tokenContract, uint256 _amount) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(block.timestamp >= unlockDate, "Funds cannot be withdrawn yet");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ClerkTeamReserve
Line:        79
Source: 
> 
>     function infoERC20(address _tokenContract) public view returns(address, uint256, uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20 token = ERC20(_tokenContract);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ClerkTeamReserve
Line:        52
Source: 
>        // withdraw balance
>        msg.sender.transfer(address(this).balance);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        emit Withdrew(msg.sender, address(this).balance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ClerkTeamReserve
Line:        52
Source: 
>        // withdraw balance
>        msg.sender.transfer(address(this).balance);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        emit Withdrew(msg.sender, address(this).balance);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ClerkTeamReserve
Line:        60
Source: 
>        ERC20 token = ERC20(_tokenContract);
>        uint256 tokenBalance = token.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        token.transfer(owner, tokenBalance);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ClerkTeamReserve
Line:        69
Source: 
>        ERC20 token = ERC20(_tokenContract);
>        uint256 tokenBalance = token.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(tokenBalance >= _amount, "Not enough funds in the reserve");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ClerkTeamReserve
Line:        61
Source: 
>        uint256 tokenBalance = token.balanceOf(address(this));
>        token.transfer(owner, tokenBalance);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        emit WithdrewTokens(_tokenContract, msg.sender, tokenBalance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ClerkTeamReserve
Line:        71
Source: 
>        require(tokenBalance >= _amount, "Not enough funds in the reserve");
>        token.transfer(owner, _amount);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        emit WithdrewTokens(_tokenContract, msg.sender, _amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ClerkTeamReserve
Line:        81
Source: 
>         ERC20 token = ERC20(_tokenContract);
>         return (owner, unlockDate, token.balanceOf(address(this)));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ClerkTeamReserve
Line:        61
Source: 
>        uint256 tokenBalance = token.balanceOf(address(this));
>        token.transfer(owner, tokenBalance);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        emit WithdrewTokens(_tokenContract, msg.sender, tokenBalance);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ClerkTeamReserve
Line:        71
Source: 
>        require(tokenBalance >= _amount, "Not enough funds in the reserve");
>        token.transfer(owner, _amount);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        emit WithdrewTokens(_tokenContract, msg.sender, _amount);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    ClerkTeamReserve
Line:        50
Source: 
>     function withdrawAll() onlyOwner public {
>        require(block.timestamp >= unlockDate);
>                ^^^^^^^^^^^^^^^
>        // withdraw balance

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    ClerkTeamReserve
Line:        58
Source: 
>     function withdrawERC20(address _tokenContract) onlyOwner public {
>        require(block.timestamp >= unlockDate, "Funds cannot be withdrawn yet");
>                ^^^^^^^^^^^^^^^
>        ERC20 token = ERC20(_tokenContract);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    ClerkTeamReserve
Line:        67
Source: 
>     function withdrawERC20Amount(address _tokenContract, uint256 _amount) onlyOwner public {
>        require(block.timestamp >= unlockDate, "Funds cannot be withdrawn yet");
>                ^^^^^^^^^^^^^^^
>        ERC20 token = ERC20(_tokenContract);

[0m

---------------------------------------------
For contract 0xbe23e67938d40f2a9e1672f2c99c0de3d079417e.sol
Tool Runtime = 2.9109464299999672 seconds
#############################################