[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IcbPurchase
Line:        83
Source: 
> 	
> 	function getIcbFromContractAllowance(uint256 _amount) payable public returns(bool success) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint _icbAmount = _amount * 10 ** 4;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    IcbPurchase
Line:        83
Source: 
> 	
> 	function getIcbFromContractAllowance(uint256 _amount) payable public returns(bool success) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint _icbAmount = _amount * 10 ** 4;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IcbPurchase
Line:        78
Source: 
> 	
> 	function getEstimatedEthFromJpy (uint256 _jpyAmount) public view returns (uint256 estimatedEth) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 estimatedUsd = uint256(getLatestJpyUsdPrice()).mul(_jpyAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IcbPurchase
Line:        41
Source: 
> 
> 	address payable icb_supplyer;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public icb_address;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IcbPurchase
Line:        42
Source: 
> 	address payable icb_supplyer;
> 	address public icb_address;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	AggregatorV3Interface internal priceFeedEthUsd;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IcbPurchase
Line:        84
Source: 
> 	function getIcbFromContractAllowance(uint256 _amount) payable public returns(bool success) {
> 		uint _icbAmount = _amount * 10 ** 4;
>   ^^^^^^^^^^^^^^^
> 		require(_icbInterface.allowance(icb_supplyer, address(this)) >= _icbAmount, "insufficient allowance amount in contract");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity ^0.6.2;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    IcbPurchase
Line:        41
Source: 
> 
> 	address payable icb_supplyer;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public icb_address;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    IcbPurchase
Line:        88
Source: 
> 		require(msg.value == ethAmount, "msg.value does not match with a necessary ether amount");
> 		icb_supplyer.transfer(ethAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_icbInterface.transferFrom(icb_supplyer, msg.sender, _icbAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    IcbPurchase
Line:        88
Source: 
> 		require(msg.value == ethAmount, "msg.value does not match with a necessary ether amount");
> 		icb_supplyer.transfer(ethAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_icbInterface.transferFrom(icb_supplyer, msg.sender, _icbAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    IcbPurchase
Line:        88
Source: 
> 		require(msg.value == ethAmount, "msg.value does not match with a necessary ether amount");
> 		icb_supplyer.transfer(ethAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_icbInterface.transferFrom(icb_supplyer, msg.sender, _icbAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    IcbPurchase
Line:        85
Source: 
> 		uint _icbAmount = _amount * 10 ** 4;
> 		require(_icbInterface.allowance(icb_supplyer, address(this)) >= _icbAmount, "insufficient allowance amount in contract");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 ethAmount = getEstimatedEthFromJpy(_amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    IcbPurchase
Line:        63
Source: 
> 			uint80 answeredInRound
> 		) = priceFeedEthUsd.latestRoundData();
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return price;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    IcbPurchase
Line:        74
Source: 
> 			uint80 answeredInRound
> 		) = priceFeedJpyUsd.latestRoundData();
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return price;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    IcbPurchase
Line:        89
Source: 
> 		icb_supplyer.transfer(ethAmount);
> 		_icbInterface.transferFrom(icb_supplyer, msg.sender, _icbAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		success = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    IcbPurchase
Line:        88
Source: 
> 		require(msg.value == ethAmount, "msg.value does not match with a necessary ether amount");
> 		icb_supplyer.transfer(ethAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_icbInterface.transferFrom(icb_supplyer, msg.sender, _icbAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    IcbPurchase
Line:        89
Source: 
> 		icb_supplyer.transfer(ethAmount);
> 		_icbInterface.transferFrom(icb_supplyer, msg.sender, _icbAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		success = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IcbPurchase
Line:        42
Source: 
> 	address payable icb_supplyer;
> 	address public icb_address;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	AggregatorV3Interface internal priceFeedEthUsd;

[0m

---------------------------------------------
For contract 0x70806c363c8f9ba2b5dbb9947767c9c6918ea15e.sol
Tool Runtime = 2.4843556389996593 seconds
#############################################