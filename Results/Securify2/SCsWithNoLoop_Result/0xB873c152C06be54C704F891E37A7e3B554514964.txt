[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DSNote
Line:        44
Source: 
> 
>         assembly {
>         ^^^^^^^^^^
>             foo := calldataload(4)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Auth
Line:        78
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) public auth note { wards[usr] = 0; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Auth
Line:        79
Source: 
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     function deny(address usr) public auth note { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth { require(wards[msg.sender] == 1); _; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        116
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        120
Source: 
> 
>     function rmul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = safeMul(x, y) / ONE;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        124
Source: 
> 
>     function rdiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y > 0, "division by zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Auth
Line:        78
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) public auth note { wards[usr] = 0; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Auth
Line:        79
Source: 
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     function deny(address usr) public auth note { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth { require(wards[msg.sender] == 1); _; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        116
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        120
Source: 
> 
>     function rmul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = safeMul(x, y) / ONE;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        124
Source: 
> 
>     function rdiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y > 0, "division by zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Reserve
Line:        192
Source: 
> 
>     function file(bytes32 what, uint amount) public auth {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (what == "currencyAvailable") {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Reserve
Line:        198
Source: 
> 
>     function depend(bytes32 contractName, address addr) public auth {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (contractName == "shelf") {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Reserve
Line:        210
Source: 
> 
>     function totalBalance() public view returns (uint) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balance_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Reserve
Line:        215
Source: 
>     // deposits currency in the the reserve
>     function deposit(uint currencyAmount) public auth {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _deposit(msg.sender, currencyAmount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Reserve
Line:        225
Source: 
>     // remove currency from the reserve
>     function payout(uint currencyAmount) public auth {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _payout(msg.sender, currencyAmount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Reserve
Line:        236
Source: 
>     // currency is moved between shelf and reserve if needed
>     function balance() public {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (bool requestWant, uint256 currencyAmount) = shelf.balanceRequest();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        192
Source: 
> 
>     function file(bytes32 what, uint amount) public auth {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (what == "currencyAvailable") {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        198
Source: 
> 
>     function depend(bytes32 contractName, address addr) public auth {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (contractName == "shelf") {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Auth
Line:        78
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) public auth note { wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Auth
Line:        79
Source: 
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     function deny(address usr) public auth note { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth { require(wards[msg.sender] == 1); _; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        104
Source: 
> 
>     function safeAdd(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x + y) >= x, "safe-add-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        108
Source: 
> 
>     function safeSub(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x - y) <= x, "safe-sub-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        112
Source: 
> 
>     function safeMul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y == 0 || (z = x * y) / y == x, "safe-mul-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        116
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        120
Source: 
> 
>     function rmul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = safeMul(x, y) / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        124
Source: 
> 
>     function rdiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y > 0, "division by zero");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Auth
Line:        78
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) public auth note { wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Auth
Line:        79
Source: 
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     function deny(address usr) public auth note { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth { require(wards[msg.sender] == 1); _; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        104
Source: 
> 
>     function safeAdd(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x + y) >= x, "safe-add-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        108
Source: 
> 
>     function safeSub(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x - y) <= x, "safe-sub-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        112
Source: 
> 
>     function safeMul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y == 0 || (z = x * y) / y == x, "safe-mul-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        116
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        120
Source: 
> 
>     function rmul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = safeMul(x, y) / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        124
Source: 
> 
>     function rdiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y > 0, "division by zero");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Reserve
Line:        215
Source: 
>     // deposits currency in the the reserve
>     function deposit(uint currencyAmount) public auth {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _deposit(msg.sender, currencyAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Reserve
Line:        225
Source: 
>     // remove currency from the reserve
>     function payout(uint currencyAmount) public auth {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _payout(msg.sender, currencyAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Reserve
Line:        237
Source: 
>     function balance() public {
>         (bool requestWant, uint256 currencyAmount) = shelf.balanceRequest();
>                                                       ^^^^^^^^^^^^^^^^^^^^^^
>         if (requestWant) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Reserve
Line:        246
Source: 
>             _payout(address(shelf), currencyAmount);
>             assessor.borrowUpdate(currencyAmount);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Reserve
Line:        250
Source: 
>         _deposit(address(shelf), currencyAmount);
>         assessor.repaymentUpdate(currencyAmount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20Like_2
Line:        144
Source: 
> 
> contract ERC20Like_2 {
>  ^^^^^^^^^^^^^^^^^^^^^
>     function balanceOf(address) public view returns (uint256);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ShelfLike_3
Line:        160
Source: 
> 
> contract ShelfLike_3 {
>  ^^^^^^^^^^^^^^^^^^^^^
>     function balanceRequest() public returns (bool requestWant, uint256 amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AssessorLike_4
Line:        164
Source: 
> 
> contract AssessorLike_4 {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
>     function repaymentUpdate(uint amount) public;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        9
Source: 
> //pragma solidity >=0.4.23 >=0.5.15 <0.6.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSNote
Line:        40
Source: 
>     modifier note {
>         bytes32 foo;
>         ^^^^^^^^^^^
>         bytes32 bar;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSNote
Line:        41
Source: 
>         bytes32 foo;
>         bytes32 bar;
>         ^^^^^^^^^^^
>         uint256 wad;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSNote
Line:        42
Source: 
>         bytes32 bar;
>         uint256 wad;
>         ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Math
Line:        102
Source: 
> contract Math {
>     uint256 constant ONE = 10 ** 27;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Reserve
Line:        181
Source: 
>     // by default it is address(this)
>     address pot;
>      ^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Reserve
Line:        220
Source: 
>     function _deposit(address usr, uint currencyAmount) internal {
>         require(currency.transferFrom(usr, pot, currencyAmount), "reserve-deposit-failed");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balance_ = safeAdd(balance_, currencyAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Reserve
Line:        230
Source: 
>     function _payout(address usr, uint currencyAmount)  internal {
>       require(currency.transferFrom(pot, usr, currencyAmount), "reserve-payout-failed");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       balance_ = safeSub(balance_, currencyAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Reserve
Line:        237
Source: 
>     function balance() public {
>         (bool requestWant, uint256 currencyAmount) = shelf.balanceRequest();
>                                                       ^^^^^^^^^^^^^^^^^^^^^^
>         if (requestWant) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reserve
Line:        246
Source: 
>             _payout(address(shelf), currencyAmount);
>             assessor.borrowUpdate(currencyAmount);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reserve
Line:        250
Source: 
>         _deposit(address(shelf), currencyAmount);
>         assessor.repaymentUpdate(currencyAmount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Math
Line:        105
Source: 
>     function safeAdd(uint x, uint y) public pure returns (uint z) {
>         require((z = x + y) >= x, "safe-add-failed");
>                   ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Math
Line:        109
Source: 
>     function safeSub(uint x, uint y) public pure returns (uint z) {
>         require((z = x - y) <= x, "safe-sub-failed");
>                   ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Math
Line:        113
Source: 
>     function safeMul(uint x, uint y) public pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "safe-mul-failed");
>                             ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Reserve
Line:        173
Source: 
>     ERC20Like_2 public currency;
>     ShelfLike_3 public shelf;
>      ^^^^^^^^^^^^^^^^^^^^^^^^
>     AssessorLike_4 public assessor;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Reserve
Line:        174
Source: 
>     ShelfLike_3 public shelf;
>     AssessorLike_4 public assessor;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Reserve
Line:        177
Source: 
>     // currency available for borrowing new loans
>     uint256 public currencyAvailable;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Reserve
Line:        184
Source: 
>     // total currency in the reserve
>     uint public balance_;
>      ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Reserve
Line:        231
Source: 
>       require(currency.transferFrom(pot, usr, currencyAmount), "reserve-payout-failed");
>       balance_ = safeSub(balance_, currencyAmount);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Reserve
Line:        244
Source: 
> 
>             currencyAvailable = safeSub(currencyAvailable, currencyAmount);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _payout(address(shelf), currencyAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Reserve
Line:        221
Source: 
>         require(currency.transferFrom(usr, pot, currencyAmount), "reserve-deposit-failed");
>         balance_ = safeAdd(balance_, currencyAmount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m

---------------------------------------------
For contract 0xB873c152C06be54C704F891E37A7e3B554514964.sol
Tool Runtime = 5.344015489999947 seconds
#############################################