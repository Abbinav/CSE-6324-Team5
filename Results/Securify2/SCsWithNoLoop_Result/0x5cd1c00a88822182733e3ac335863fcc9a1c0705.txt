[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Stake
Line:        225
Source: 
>     
>     address public XFI = 0x5BEfBB272290dD5b8521D4a938f6c4757742c430;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Stake
Line:        228
Source: 
>     uint256 public totalStakes = 0;
>     uint256 stakingFee = 25; // 2.5%
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 unstakingFee = 25; // 2.5% 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Stake
Line:        229
Source: 
>     uint256 stakingFee = 25; // 2.5%
>     uint256 unstakingFee = 25; // 2.5% 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalDividends = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Stake
Line:        232
Source: 
>     uint256 private scaledRemainder = 0;
>     uint256 private scaling = uint256(10) ** 12;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public round = 1;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        197
Source: 
> 
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Stake
Line:        309
Source: 
>     // ------------------------------------------------------------------------
>     function CLAIMREWARD() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(totalDividends > stakers[msg.sender].fromTotalDividend){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Stake
Line:        336
Source: 
>     
>     function getPendingReward(address staker) public view returns(uint256 _pendingReward) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 amount =  ((totalDividends.sub(payouts[stakers[staker].round - 1])).mul(stakers[staker].stakedTokens)).div(scaling);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        197
Source: 
> 
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Stake
Line:        336
Source: 
>     
>     function getPendingReward(address staker) public view returns(uint256 _pendingReward) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 amount =  ((totalDividends.sub(payouts[stakers[staker].round - 1])).mul(stakers[staker].stakedTokens)).div(scaling);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Stake
Line:        346
Source: 
>     // ------------------------------------------------------------------------
>     function WITHDRAW(uint256 tokens) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Stake
Line:        393
Source: 
>     // ------------------------------------------------------------------------
>     function yourXFIBalance(address user) external view returns(uint256 XFIBalance){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return IERC20(XFI).balanceOf(user);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Stake
Line:        255
Source: 
>     // ------------------------------------------------------------------------
>     function STAKE(uint256 tokens) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(IERC20(XFI).transferFrom(msg.sender, address(this), tokens), "Tokens cannot be transferred from user account");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Stake
Line:        284
Source: 
>     // ------------------------------------------------------------------------
>     function ADDFUNDS(uint256 tokens) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(IERC20(XFI).transferFrom(msg.sender, address(this), tokens), "Tokens cannot be transferred from funder account");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Stake
Line:        385
Source: 
>     // ------------------------------------------------------------------------
>     function yourStakedXFI(address staker) external view returns(uint256 stakedXFI){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return stakers[staker].stakedTokens;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        100
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        176
Source: 
>     function ceil(uint a, uint m) internal pure returns (uint r) {
>         return (a + m - 1) / m * m;
>                ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Stake
Line:        256
Source: 
>     function STAKE(uint256 tokens) external {
>         require(IERC20(XFI).transferFrom(msg.sender, address(this), tokens), "Tokens cannot be transferred from user account");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Stake
Line:        225
Source: 
>     
>     address public XFI = 0x5BEfBB272290dD5b8521D4a938f6c4757742c430;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Stake
Line:        255
Source: 
>     // ------------------------------------------------------------------------
>     function STAKE(uint256 tokens) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(IERC20(XFI).transferFrom(msg.sender, address(this), tokens), "Tokens cannot be transferred from user account");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Stake
Line:        258
Source: 
>         
>         uint256 _stakingFee = 0;
>         ^^^^^^^^^^^^^^^^^^^
>         if(totalStakes > 0)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Stake
Line:        284
Source: 
>     // ------------------------------------------------------------------------
>     function ADDFUNDS(uint256 tokens) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(IERC20(XFI).transferFrom(msg.sender, address(this), tokens), "Tokens cannot be transferred from funder account");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Stake
Line:        309
Source: 
>     // ------------------------------------------------------------------------
>     function CLAIMREWARD() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(totalDividends > stakers[msg.sender].fromTotalDividend){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Stake
Line:        346
Source: 
>     // ------------------------------------------------------------------------
>     function WITHDRAW(uint256 tokens) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Stake
Line:        350
Source: 
>         
>         uint256 _unstakingFee = (onePercent(tokens).mul(unstakingFee)).div(10);
>         ^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        10
Source: 
> // SPDX-License-Identifier: UNLICENSED
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Stake
Line:        228
Source: 
>     uint256 public totalStakes = 0;
>     uint256 stakingFee = 25; // 2.5%
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 unstakingFee = 25; // 2.5% 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Stake
Line:        229
Source: 
>     uint256 stakingFee = 25; // 2.5%
>     uint256 unstakingFee = 25; // 2.5% 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalDividends = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Stake
Line:        243
Source: 
>     
>     mapping(address => USER) stakers;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint => uint256) public payouts;                   // keeps record of each payout

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Stake
Line:        256
Source: 
>     function STAKE(uint256 tokens) external {
>         require(IERC20(XFI).transferFrom(msg.sender, address(this), tokens), "Tokens cannot be transferred from user account");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Stake
Line:        285
Source: 
>     function ADDFUNDS(uint256 tokens) external {
>         require(IERC20(XFI).transferFrom(msg.sender, address(this), tokens), "Tokens cannot be transferred from funder account");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPayout(tokens);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Stake
Line:        316
Source: 
>         
>             require(IERC20(XFI).transfer(msg.sender,owing), "ERROR: error in sending reward from contract");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Stake
Line:        356
Source: 
>                 
>         require(IERC20(XFI).transfer(msg.sender, tokens.sub(_unstakingFee)), "Error in un-staking tokens");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Stake
Line:        394
Source: 
>     function yourXFIBalance(address user) external view returns(uint256 XFIBalance){
>         return IERC20(XFI).balanceOf(user);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Stake
Line:        268
Source: 
>         uint256 owing = pendingReward(msg.sender);
>         stakers[msg.sender].remainder += owing;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Stake
Line:        270
Source: 
>         
>         stakers[msg.sender].stakedTokens = (tokens.sub(_stakingFee)).add(stakers[msg.sender].stakedTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakers[msg.sender].lastDividends = owing;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Stake
Line:        271
Source: 
>         stakers[msg.sender].stakedTokens = (tokens.sub(_stakingFee)).add(stakers[msg.sender].stakedTokens);
>         stakers[msg.sender].lastDividends = owing;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakers[msg.sender].fromTotalDividend= totalDividends;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Stake
Line:        272
Source: 
>         stakers[msg.sender].lastDividends = owing;
>         stakers[msg.sender].fromTotalDividend= totalDividends;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakers[msg.sender].round =  round;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Stake
Line:        273
Source: 
>         stakers[msg.sender].fromTotalDividend= totalDividends;
>         stakers[msg.sender].round =  round;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Stake
Line:        275
Source: 
>         
>         totalStakes = totalStakes.add(tokens.sub(_stakingFee));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Stake
Line:        332
Source: 
>         uint256 amount =  ((totalDividends.sub(payouts[stakers[staker].round - 1])).mul(stakers[staker].stakedTokens)).div(scaling);
>         stakers[staker].remainder += ((totalDividends.sub(payouts[stakers[staker].round - 1])).mul(stakers[staker].stakedTokens)) % scaling ;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return amount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Stake
Line:        297
Source: 
>         uint256 dividendPerToken = available.div(totalStakes);
>         scaledRemainder = available.mod(totalStakes);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Stake
Line:        299
Source: 
>         
>         totalDividends = totalDividends.add(dividendPerToken);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         payouts[round] = payouts[round-1].add(dividendPerToken);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Stake
Line:        300
Source: 
>         totalDividends = totalDividends.add(dividendPerToken);
>         payouts[round] = payouts[round-1].add(dividendPerToken);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Stake
Line:        303
Source: 
>         emit PAYOUT(round, tokens, msg.sender);
>         round++;
>         ^^^^^^^
>     }

[0m

---------------------------------------------
For contract 0x5cd1c00a88822182733e3ac335863fcc9a1c0705.sol
Tool Runtime = 8.299737888999516 seconds
#############################################