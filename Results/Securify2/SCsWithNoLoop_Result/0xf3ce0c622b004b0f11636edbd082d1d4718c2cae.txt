[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        452
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != 0x0 && codehash != accountHash);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DegenPizzaToken
Line:        782
Source: 
>     mapping (address => mapping (address => uint256)) public  allowance;
>     bytes32                                           public  symbol = "DGP";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256                                           public  decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DegenPizzaToken
Line:        783
Source: 
>     bytes32                                           public  symbol = "DGP";
>     uint256                                           public  decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32                                           public  name = "DegenPizza";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DegenPizzaToken
Line:        784
Source: 
>     uint256                                           public  decimals = 18;
>     bytes32                                           public  name = "DegenPizza";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        852
Source: 
>     address owner;
>     IUniswapV2Factory public uniswapFactory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool public sended;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        310
Source: 
>     function isOwner() public view returns (bool) {
>         return _msgSender() == _owner;
>                ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    OVENPool
Line:        672
Source: 
>     function rewardPerToken() public view returns (uint256) {
>         if (totalSupply() == 0) {
>             ^^^^^^^^^^^^^^^^^^
>             return rewardPerTokenStored;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        154
Source: 
>         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        159
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    IRewardDistributionRecipient
Line:        582
Source: 
>     modifier onlyRewardDistribution() {
>         require(_msgSender() == rewardDistribution, "Caller is not reward distribution");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        294
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        320
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        329
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LPTokenWrapper
Line:        607
Source: 
> 
>     function totalSupply() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LPTokenWrapper
Line:        611
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LPTokenWrapper
Line:        615
Source: 
> 
>     function stake(uint256 amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.add(amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LPTokenWrapper
Line:        621
Source: 
> 
>     function withdraw(uint256 amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.sub(amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        294
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        320
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        329
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OVENPool
Line:        694
Source: 
>     // stake visibility is public as overriding LPTokenWrapper's stake() function
>     function stake(uint256 amount) public updateReward(msg.sender) checkStart {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount > 0, "Cannot stake 0");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OVENPool
Line:        700
Source: 
> 
>     function withdraw(uint256 amount) public updateReward(msg.sender) checkStart {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount > 0, "Cannot withdraw 0");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DegenPizzaToken
Line:        800
Source: 
> 
>     function approve(address guy, uint wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][guy] = wad;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DegenPizzaFactory
Line:        860
Source: 
> 
>     function initSEED() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(usdcSeedPool) == address(0), "Already initialized");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DegenPizzaFactory
Line:        870
Source: 
> 
>     function initWBTC() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(wbtcPool) == address(0), "Already initialized");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DegenPizzaFactory
Line:        880
Source: 
> 
>     function initWETH() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(wethPool) == address(0), "Already initialized");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DegenPizzaFactory
Line:        890
Source: 
> 
>     function initYFV() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(yfvPool) == address(0), "Already initialized");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DegenPizzaFactory
Line:        900
Source: 
> 
>     function initMBN() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(mbnPool) == address(0), "Already initialized");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DegenPizzaFactory
Line:        910
Source: 
> 
>     function initUSDC() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(usdcPool) == address(0), "Already initialized");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DegenPizzaFactory
Line:        921
Source: 
>    
>     function initUNI() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(uniswapPool) == address(0), "Already initialized");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DegenPizzaFactory
Line:        932
Source: 
> 
>     function transferToDegenDevs() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(msg.sender) == owner, "You are not allowed to do that!");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DegenPizzaFactory
Line:        939
Source: 
>     
>     function transferRestToForPhase2() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(msg.sender) == owner, "You are not allowed to do that!");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        488
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        560
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        488
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        560
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        488
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        560
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        488
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        560
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        488
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        560
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        488
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        560
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        329
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LPTokenWrapper
Line:        615
Source: 
> 
>     function stake(uint256 amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.add(amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LPTokenWrapper
Line:        621
Source: 
> 
>     function withdraw(uint256 amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.sub(amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        329
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    IRewardDistributionRecipient
Line:        586
Source: 
> 
>     function setRewardDistribution(address _rewardDistribution)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LPTokenWrapper
Line:        615
Source: 
> 
>     function stake(uint256 amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.add(amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LPTokenWrapper
Line:        621
Source: 
> 
>     function withdraw(uint256 amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.sub(amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OVENPool
Line:        685
Source: 
> 
>     function earned(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OVENPool
Line:        700
Source: 
> 
>     function withdraw(uint256 amount) public updateReward(msg.sender) checkStart {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount > 0, "Cannot withdraw 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LPTokenWrapper
Line:        611
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OVENPool
Line:        720
Source: 
> 
>     function notifyRewardAmount(uint256 reward)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DegenPizzaToken
Line:        796
Source: 
> 
>     function approve(address guy) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return approve(guy, uint(-1));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DegenPizzaToken
Line:        800
Source: 
> 
>     function approve(address guy, uint wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][guy] = wad;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DegenPizzaToken
Line:        808
Source: 
> 
>     function transfer(address dst, uint wad) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferFrom(msg.sender, dst, wad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DegenPizzaToken
Line:        812
Source: 
> 
>     function transferFrom(address src, address dst, uint wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DegenPizzaToken
Line:        835
Source: 
> 
>     function retrieve(address chef) external view returns (uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balanceOf[chef];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        863
Source: 
>         usdcSeedPool = new OVENPool(address(degenPizza), 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, 60 hours, now);
>         usdcSeedPool.setRewardDistribution(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         degenPizza.transfer(address(usdcSeedPool), 1000000000000000000000000);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        864
Source: 
>         usdcSeedPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(usdcSeedPool), 1000000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcSeedPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcSeedPool)));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        865
Source: 
>         degenPizza.transfer(address(usdcSeedPool), 1000000000000000000000000);
>         usdcSeedPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcSeedPool)));
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcSeedPool.setRewardDistribution(address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        865
Source: 
>         degenPizza.transfer(address(usdcSeedPool), 1000000000000000000000000);
>         usdcSeedPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcSeedPool)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcSeedPool.setRewardDistribution(address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        866
Source: 
>         usdcSeedPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcSeedPool)));
>         usdcSeedPool.setRewardDistribution(address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcSeedPool.renounceOwnership();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        867
Source: 
>         usdcSeedPool.setRewardDistribution(address(0));
>         usdcSeedPool.renounceOwnership();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        873
Source: 
>         wbtcPool = new OVENPool(address(degenPizza), 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599, 120 days, now + 48 hours);
>         wbtcPool.setRewardDistribution(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         degenPizza.transfer(address(wbtcPool), 600000000000000000000000);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        874
Source: 
>         wbtcPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(wbtcPool), 600000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wbtcPool.notifyRewardAmount(degenPizza.balanceOf(address(wbtcPool)));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        875
Source: 
>         degenPizza.transfer(address(wbtcPool), 600000000000000000000000);
>         wbtcPool.notifyRewardAmount(degenPizza.balanceOf(address(wbtcPool)));
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wbtcPool.setRewardDistribution(address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        875
Source: 
>         degenPizza.transfer(address(wbtcPool), 600000000000000000000000);
>         wbtcPool.notifyRewardAmount(degenPizza.balanceOf(address(wbtcPool)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wbtcPool.setRewardDistribution(address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        876
Source: 
>         wbtcPool.notifyRewardAmount(degenPizza.balanceOf(address(wbtcPool)));
>         wbtcPool.setRewardDistribution(address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wbtcPool.renounceOwnership();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        877
Source: 
>         wbtcPool.setRewardDistribution(address(0));
>         wbtcPool.renounceOwnership();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        883
Source: 
>         wethPool = new OVENPool(address(degenPizza), 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, 120 days, now + 48 hours);
>         wethPool.setRewardDistribution(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         degenPizza.transfer(address(wethPool), 600000000000000000000000);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        884
Source: 
>         wethPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(wethPool), 600000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wethPool.notifyRewardAmount(degenPizza.balanceOf(address(wethPool)));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        885
Source: 
>         degenPizza.transfer(address(wethPool), 600000000000000000000000);
>         wethPool.notifyRewardAmount(degenPizza.balanceOf(address(wethPool)));
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wethPool.setRewardDistribution(address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        885
Source: 
>         degenPizza.transfer(address(wethPool), 600000000000000000000000);
>         wethPool.notifyRewardAmount(degenPizza.balanceOf(address(wethPool)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wethPool.setRewardDistribution(address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        886
Source: 
>         wethPool.notifyRewardAmount(degenPizza.balanceOf(address(wethPool)));
>         wethPool.setRewardDistribution(address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wethPool.renounceOwnership();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        887
Source: 
>         wethPool.setRewardDistribution(address(0));
>         wethPool.renounceOwnership();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        893
Source: 
>         yfvPool = new OVENPool(address(degenPizza), 0x45f24BaEef268BB6d63AEe5129015d69702BCDfa, 120 days, now + 48 hours);
>         yfvPool.setRewardDistribution(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         degenPizza.transfer(address(yfvPool), 800000000000000000000000);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        894
Source: 
>         yfvPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(yfvPool), 800000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         yfvPool.notifyRewardAmount(degenPizza.balanceOf(address(yfvPool)));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        895
Source: 
>         degenPizza.transfer(address(yfvPool), 800000000000000000000000);
>         yfvPool.notifyRewardAmount(degenPizza.balanceOf(address(yfvPool)));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         yfvPool.setRewardDistribution(address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        895
Source: 
>         degenPizza.transfer(address(yfvPool), 800000000000000000000000);
>         yfvPool.notifyRewardAmount(degenPizza.balanceOf(address(yfvPool)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         yfvPool.setRewardDistribution(address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        896
Source: 
>         yfvPool.notifyRewardAmount(degenPizza.balanceOf(address(yfvPool)));
>         yfvPool.setRewardDistribution(address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         yfvPool.renounceOwnership();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        897
Source: 
>         yfvPool.setRewardDistribution(address(0));
>         yfvPool.renounceOwnership();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        903
Source: 
>         mbnPool = new OVENPool(address(degenPizza), 0x4Eeea7B48b9C3ac8F70a9c932A8B1E8a5CB624c7, 120 days, now + 48 hours);
>         mbnPool.setRewardDistribution(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         degenPizza.transfer(address(mbnPool), 400000000000000000000000);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        904
Source: 
>         mbnPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(mbnPool), 400000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mbnPool.notifyRewardAmount(degenPizza.balanceOf(address(mbnPool)));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        905
Source: 
>         degenPizza.transfer(address(mbnPool), 400000000000000000000000);
>         mbnPool.notifyRewardAmount(degenPizza.balanceOf(address(mbnPool)));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mbnPool.setRewardDistribution(address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        905
Source: 
>         degenPizza.transfer(address(mbnPool), 400000000000000000000000);
>         mbnPool.notifyRewardAmount(degenPizza.balanceOf(address(mbnPool)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mbnPool.setRewardDistribution(address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        906
Source: 
>         mbnPool.notifyRewardAmount(degenPizza.balanceOf(address(mbnPool)));
>         mbnPool.setRewardDistribution(address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mbnPool.renounceOwnership();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        907
Source: 
>         mbnPool.setRewardDistribution(address(0));
>         mbnPool.renounceOwnership();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        913
Source: 
>         usdcPool = new OVENPool(address(degenPizza), 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, 120 days, now + 48 hours);
>         usdcPool.setRewardDistribution(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         degenPizza.transfer(address(usdcPool), 400000000000000000000000);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        914
Source: 
>         usdcPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(usdcPool), 400000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcPool)));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        915
Source: 
>         degenPizza.transfer(address(usdcPool), 400000000000000000000000);
>         usdcPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcPool)));
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcPool.setRewardDistribution(address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        915
Source: 
>         degenPizza.transfer(address(usdcPool), 400000000000000000000000);
>         usdcPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcPool)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcPool.setRewardDistribution(address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        916
Source: 
>         usdcPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcPool)));
>         usdcPool.setRewardDistribution(address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcPool.renounceOwnership();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        917
Source: 
>         usdcPool.setRewardDistribution(address(0));
>         usdcPool.renounceOwnership();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        923
Source: 
>         require(address(uniswapPool) == address(0), "Already initialized");
>         uniswap = uniswapFactory.createPair(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, address(degenPizza));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswapPool = new OVENPool(address(degenPizza), uniswap, 120 days, now + 48 hours);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        925
Source: 
>         uniswapPool = new OVENPool(address(degenPizza), uniswap, 120 days, now + 48 hours);
>         uniswapPool.setRewardDistribution(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         degenPizza.transfer(address(uniswapPool), 400000000000000000000000);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        926
Source: 
>         uniswapPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(uniswapPool), 400000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswapPool.notifyRewardAmount(degenPizza.balanceOf(address(uniswapPool)));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        927
Source: 
>         degenPizza.transfer(address(uniswapPool), 400000000000000000000000);
>         uniswapPool.notifyRewardAmount(degenPizza.balanceOf(address(uniswapPool)));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswapPool.setRewardDistribution(address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        927
Source: 
>         degenPizza.transfer(address(uniswapPool), 400000000000000000000000);
>         uniswapPool.notifyRewardAmount(degenPizza.balanceOf(address(uniswapPool)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswapPool.setRewardDistribution(address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        928
Source: 
>         uniswapPool.notifyRewardAmount(degenPizza.balanceOf(address(uniswapPool)));
>         uniswapPool.setRewardDistribution(address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswapPool.renounceOwnership();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        929
Source: 
>         uniswapPool.setRewardDistribution(address(0));
>         uniswapPool.renounceOwnership();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegenPizzaFactory
Line:        936
Source: 
>         sended = true;
>         degenPizza.transfer(0x315045A5eA1192d517D89E0880Dd45eEB051e45C, 100000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        488
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>          ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OVENPool
Line:        630
Source: 
>     IERC20 public degenPizza;
>     uint256 public DURATION;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        46
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        78
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        237
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        267
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        345
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        424
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        495
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        572
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        596
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OVENPool
Line:        657
Source: 
> 
>     modifier updateReward(address account) {
>                           ^^^^^^^^^^^^^^^
>         rewardPerTokenStored = rewardPerToken();

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DegenPizzaFactory
Line:        851
Source: 
>     address public uniswap;
>     address owner;
>     ^^^^^^^^^^^^^
>     IUniswapV2Factory public uniswapFactory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DegenPizzaToken
Line:        788
Source: 
>         // hard limit 10,000,000 DEGEN PIZZA
>         totalSupply = 10000000000000000000000000;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balanceOf[chef] = 10000000000000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DegenPizzaToken
Line:        789
Source: 
>         totalSupply = 10000000000000000000000000;
>         balanceOf[chef] = 10000000000000000000000000;
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        864
Source: 
>         usdcSeedPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(usdcSeedPool), 1000000000000000000000000);
>                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcSeedPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcSeedPool)));

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        874
Source: 
>         wbtcPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(wbtcPool), 600000000000000000000000);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^
>         wbtcPool.notifyRewardAmount(degenPizza.balanceOf(address(wbtcPool)));

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        884
Source: 
>         wethPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(wethPool), 600000000000000000000000);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^
>         wethPool.notifyRewardAmount(degenPizza.balanceOf(address(wethPool)));

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        894
Source: 
>         yfvPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(yfvPool), 800000000000000000000000);
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^
>         yfvPool.notifyRewardAmount(degenPizza.balanceOf(address(yfvPool)));

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        904
Source: 
>         mbnPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(mbnPool), 400000000000000000000000);
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^
>         mbnPool.notifyRewardAmount(degenPizza.balanceOf(address(mbnPool)));

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        914
Source: 
>         usdcPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(usdcPool), 400000000000000000000000);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcPool)));

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        926
Source: 
>         uniswapPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(uniswapPool), 400000000000000000000000);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswapPool.notifyRewardAmount(degenPizza.balanceOf(address(uniswapPool)));

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        936
Source: 
>         sended = true;
>         degenPizza.transfer(0x315045A5eA1192d517D89E0880Dd45eEB051e45C, 100000000000000000000000);
>                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        863
Source: 
>         usdcSeedPool = new OVENPool(address(degenPizza), 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, 60 hours, now);
>         usdcSeedPool.setRewardDistribution(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         degenPizza.transfer(address(usdcSeedPool), 1000000000000000000000000);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        864
Source: 
>         usdcSeedPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(usdcSeedPool), 1000000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcSeedPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcSeedPool)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        865
Source: 
>         degenPizza.transfer(address(usdcSeedPool), 1000000000000000000000000);
>         usdcSeedPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcSeedPool)));
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcSeedPool.setRewardDistribution(address(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        865
Source: 
>         degenPizza.transfer(address(usdcSeedPool), 1000000000000000000000000);
>         usdcSeedPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcSeedPool)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcSeedPool.setRewardDistribution(address(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        866
Source: 
>         usdcSeedPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcSeedPool)));
>         usdcSeedPool.setRewardDistribution(address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcSeedPool.renounceOwnership();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        867
Source: 
>         usdcSeedPool.setRewardDistribution(address(0));
>         usdcSeedPool.renounceOwnership();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        873
Source: 
>         wbtcPool = new OVENPool(address(degenPizza), 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599, 120 days, now + 48 hours);
>         wbtcPool.setRewardDistribution(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         degenPizza.transfer(address(wbtcPool), 600000000000000000000000);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        874
Source: 
>         wbtcPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(wbtcPool), 600000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wbtcPool.notifyRewardAmount(degenPizza.balanceOf(address(wbtcPool)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        875
Source: 
>         degenPizza.transfer(address(wbtcPool), 600000000000000000000000);
>         wbtcPool.notifyRewardAmount(degenPizza.balanceOf(address(wbtcPool)));
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wbtcPool.setRewardDistribution(address(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        875
Source: 
>         degenPizza.transfer(address(wbtcPool), 600000000000000000000000);
>         wbtcPool.notifyRewardAmount(degenPizza.balanceOf(address(wbtcPool)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wbtcPool.setRewardDistribution(address(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        876
Source: 
>         wbtcPool.notifyRewardAmount(degenPizza.balanceOf(address(wbtcPool)));
>         wbtcPool.setRewardDistribution(address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wbtcPool.renounceOwnership();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        877
Source: 
>         wbtcPool.setRewardDistribution(address(0));
>         wbtcPool.renounceOwnership();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        883
Source: 
>         wethPool = new OVENPool(address(degenPizza), 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, 120 days, now + 48 hours);
>         wethPool.setRewardDistribution(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         degenPizza.transfer(address(wethPool), 600000000000000000000000);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        884
Source: 
>         wethPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(wethPool), 600000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wethPool.notifyRewardAmount(degenPizza.balanceOf(address(wethPool)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        885
Source: 
>         degenPizza.transfer(address(wethPool), 600000000000000000000000);
>         wethPool.notifyRewardAmount(degenPizza.balanceOf(address(wethPool)));
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wethPool.setRewardDistribution(address(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        885
Source: 
>         degenPizza.transfer(address(wethPool), 600000000000000000000000);
>         wethPool.notifyRewardAmount(degenPizza.balanceOf(address(wethPool)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wethPool.setRewardDistribution(address(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        886
Source: 
>         wethPool.notifyRewardAmount(degenPizza.balanceOf(address(wethPool)));
>         wethPool.setRewardDistribution(address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wethPool.renounceOwnership();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        887
Source: 
>         wethPool.setRewardDistribution(address(0));
>         wethPool.renounceOwnership();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        893
Source: 
>         yfvPool = new OVENPool(address(degenPizza), 0x45f24BaEef268BB6d63AEe5129015d69702BCDfa, 120 days, now + 48 hours);
>         yfvPool.setRewardDistribution(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         degenPizza.transfer(address(yfvPool), 800000000000000000000000);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        894
Source: 
>         yfvPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(yfvPool), 800000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         yfvPool.notifyRewardAmount(degenPizza.balanceOf(address(yfvPool)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        895
Source: 
>         degenPizza.transfer(address(yfvPool), 800000000000000000000000);
>         yfvPool.notifyRewardAmount(degenPizza.balanceOf(address(yfvPool)));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         yfvPool.setRewardDistribution(address(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        895
Source: 
>         degenPizza.transfer(address(yfvPool), 800000000000000000000000);
>         yfvPool.notifyRewardAmount(degenPizza.balanceOf(address(yfvPool)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         yfvPool.setRewardDistribution(address(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        896
Source: 
>         yfvPool.notifyRewardAmount(degenPizza.balanceOf(address(yfvPool)));
>         yfvPool.setRewardDistribution(address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         yfvPool.renounceOwnership();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        897
Source: 
>         yfvPool.setRewardDistribution(address(0));
>         yfvPool.renounceOwnership();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        903
Source: 
>         mbnPool = new OVENPool(address(degenPizza), 0x4Eeea7B48b9C3ac8F70a9c932A8B1E8a5CB624c7, 120 days, now + 48 hours);
>         mbnPool.setRewardDistribution(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         degenPizza.transfer(address(mbnPool), 400000000000000000000000);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        904
Source: 
>         mbnPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(mbnPool), 400000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mbnPool.notifyRewardAmount(degenPizza.balanceOf(address(mbnPool)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        905
Source: 
>         degenPizza.transfer(address(mbnPool), 400000000000000000000000);
>         mbnPool.notifyRewardAmount(degenPizza.balanceOf(address(mbnPool)));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mbnPool.setRewardDistribution(address(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        905
Source: 
>         degenPizza.transfer(address(mbnPool), 400000000000000000000000);
>         mbnPool.notifyRewardAmount(degenPizza.balanceOf(address(mbnPool)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mbnPool.setRewardDistribution(address(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        906
Source: 
>         mbnPool.notifyRewardAmount(degenPizza.balanceOf(address(mbnPool)));
>         mbnPool.setRewardDistribution(address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mbnPool.renounceOwnership();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        907
Source: 
>         mbnPool.setRewardDistribution(address(0));
>         mbnPool.renounceOwnership();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        913
Source: 
>         usdcPool = new OVENPool(address(degenPizza), 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, 120 days, now + 48 hours);
>         usdcPool.setRewardDistribution(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         degenPizza.transfer(address(usdcPool), 400000000000000000000000);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        914
Source: 
>         usdcPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(usdcPool), 400000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcPool)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        915
Source: 
>         degenPizza.transfer(address(usdcPool), 400000000000000000000000);
>         usdcPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcPool)));
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcPool.setRewardDistribution(address(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        915
Source: 
>         degenPizza.transfer(address(usdcPool), 400000000000000000000000);
>         usdcPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcPool)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcPool.setRewardDistribution(address(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        916
Source: 
>         usdcPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcPool)));
>         usdcPool.setRewardDistribution(address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcPool.renounceOwnership();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        917
Source: 
>         usdcPool.setRewardDistribution(address(0));
>         usdcPool.renounceOwnership();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        923
Source: 
>         require(address(uniswapPool) == address(0), "Already initialized");
>         uniswap = uniswapFactory.createPair(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, address(degenPizza));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswapPool = new OVENPool(address(degenPizza), uniswap, 120 days, now + 48 hours);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        925
Source: 
>         uniswapPool = new OVENPool(address(degenPizza), uniswap, 120 days, now + 48 hours);
>         uniswapPool.setRewardDistribution(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         degenPizza.transfer(address(uniswapPool), 400000000000000000000000);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        926
Source: 
>         uniswapPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(uniswapPool), 400000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswapPool.notifyRewardAmount(degenPizza.balanceOf(address(uniswapPool)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        927
Source: 
>         degenPizza.transfer(address(uniswapPool), 400000000000000000000000);
>         uniswapPool.notifyRewardAmount(degenPizza.balanceOf(address(uniswapPool)));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswapPool.setRewardDistribution(address(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        927
Source: 
>         degenPizza.transfer(address(uniswapPool), 400000000000000000000000);
>         uniswapPool.notifyRewardAmount(degenPizza.balanceOf(address(uniswapPool)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswapPool.setRewardDistribution(address(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        928
Source: 
>         uniswapPool.notifyRewardAmount(degenPizza.balanceOf(address(uniswapPool)));
>         uniswapPool.setRewardDistribution(address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswapPool.renounceOwnership();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        929
Source: 
>         uniswapPool.setRewardDistribution(address(0));
>         uniswapPool.renounceOwnership();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        936
Source: 
>         sended = true;
>         degenPizza.transfer(0x315045A5eA1192d517D89E0880Dd45eEB051e45C, 100000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        941
Source: 
>         require(address(msg.sender) == owner, "You are not allowed to do that!");
>         degenPizza.transfer(msg.sender, degenPizza.retrieve(address(this)));
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        941
Source: 
>         require(address(msg.sender) == owner, "You are not allowed to do that!");
>         degenPizza.transfer(msg.sender, degenPizza.retrieve(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        453
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != 0x0 && codehash != accountHash);
>                 ^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DSMath
Line:        747
Source: 
>     function add(uint x, uint y) internal pure returns (uint z) {
>         require((z = x + y) >= x, "ds-math-add-overflow");
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DSMath
Line:        750
Source: 
>     function sub(uint x, uint y) internal pure returns (uint z) {
>         require((z = x - y) <= x, "ds-math-sub-underflow");
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DSMath
Line:        753
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");
>                            ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    LPTokenWrapper
Line:        604
Source: 
> 
>     uint256 private _totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) private _balances;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    IRewardDistributionRecipient
Line:        577
Source: 
> contract IRewardDistributionRecipient is Ownable {
>     address public rewardDistribution;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    LPTokenWrapper
Line:        604
Source: 
> 
>     uint256 private _totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) private _balances;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    OVENPool
Line:        635
Source: 
>     uint256 public rewardRate = 0;
>     uint256 public lastUpdateTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rewardPerTokenStored;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    OVENPool
Line:        636
Source: 
>     uint256 public lastUpdateTime;
>     uint256 public rewardPerTokenStored;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public userRewardPerTokenPaid;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DegenPizzaFactory
Line:        843
Source: 
>     DegenPizzaToken public degenPizza;
>     OVENPool public usdcSeedPool;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     OVENPool public wbtcPool; 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DegenPizzaFactory
Line:        844
Source: 
>     OVENPool public usdcSeedPool;
>     OVENPool public wbtcPool; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     OVENPool public wethPool; 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DegenPizzaFactory
Line:        845
Source: 
>     OVENPool public wbtcPool; 
>     OVENPool public wethPool; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     OVENPool public yfvPool; 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DegenPizzaFactory
Line:        846
Source: 
>     OVENPool public wethPool; 
>     OVENPool public yfvPool; 
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     OVENPool public mbnPool;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DegenPizzaFactory
Line:        847
Source: 
>     OVENPool public yfvPool; 
>     OVENPool public mbnPool;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     OVENPool public usdcPool;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DegenPizzaFactory
Line:        848
Source: 
>     OVENPool public mbnPool;
>     OVENPool public usdcPool;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     OVENPool public uniswapPool;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DegenPizzaFactory
Line:        849
Source: 
>     OVENPool public usdcPool;
>     OVENPool public uniswapPool;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public uniswap;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DegenPizzaFactory
Line:        850
Source: 
>     OVENPool public uniswapPool;
>     address public uniswap;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     address owner;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DegenPizzaFactory
Line:        853
Source: 
>     IUniswapV2Factory public uniswapFactory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);
>     bool public sended;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    LPTokenWrapper
Line:        602
Source: 
> 
>     IERC20 public lpt;
>     ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LPTokenWrapper
Line:        616
Source: 
>     function stake(uint256 amount) public {
>         _totalSupply = _totalSupply.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[msg.sender] = _balances[msg.sender].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OVENPool
Line:        658
Source: 
>     modifier updateReward(address account) {
>         rewardPerTokenStored = rewardPerToken();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lastUpdateTime = lastTimeRewardApplicable();

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OVENPool
Line:        659
Source: 
>         rewardPerTokenStored = rewardPerToken();
>         lastUpdateTime = lastTimeRewardApplicable();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (account != address(0)) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OVENPool
Line:        658
Source: 
>     modifier updateReward(address account) {
>         rewardPerTokenStored = rewardPerToken();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lastUpdateTime = lastTimeRewardApplicable();

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OVENPool
Line:        659
Source: 
>         rewardPerTokenStored = rewardPerToken();
>         lastUpdateTime = lastTimeRewardApplicable();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (account != address(0)) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OVENPool
Line:        658
Source: 
>     modifier updateReward(address account) {
>         rewardPerTokenStored = rewardPerToken();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lastUpdateTime = lastTimeRewardApplicable();

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OVENPool
Line:        659
Source: 
>         rewardPerTokenStored = rewardPerToken();
>         lastUpdateTime = lastTimeRewardApplicable();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (account != address(0)) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LPTokenWrapper
Line:        616
Source: 
>     function stake(uint256 amount) public {
>         _totalSupply = _totalSupply.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[msg.sender] = _balances[msg.sender].add(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LPTokenWrapper
Line:        622
Source: 
>     function withdraw(uint256 amount) public {
>         _totalSupply = _totalSupply.sub(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[msg.sender] = _balances[msg.sender].sub(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DegenPizzaToken
Line:        801
Source: 
>     function approve(address guy, uint wad) public returns (bool) {
>         allowance[msg.sender][guy] = wad;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        862
Source: 
>         require(address(usdcSeedPool) == address(0), "Already initialized");
>         usdcSeedPool = new OVENPool(address(degenPizza), 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, 60 hours, now);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcSeedPool.setRewardDistribution(address(this));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        872
Source: 
>         require(address(wbtcPool) == address(0), "Already initialized");
>         wbtcPool = new OVENPool(address(degenPizza), 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599, 120 days, now + 48 hours);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wbtcPool.setRewardDistribution(address(this));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        882
Source: 
>         require(address(wethPool) == address(0), "Already initialized");
>         wethPool = new OVENPool(address(degenPizza), 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, 120 days, now + 48 hours);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wethPool.setRewardDistribution(address(this));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        892
Source: 
>         require(address(yfvPool) == address(0), "Already initialized");
>         yfvPool = new OVENPool(address(degenPizza), 0x45f24BaEef268BB6d63AEe5129015d69702BCDfa, 120 days, now + 48 hours);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         yfvPool.setRewardDistribution(address(this));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        902
Source: 
>         require(address(mbnPool) == address(0), "Already initialized");
>         mbnPool = new OVENPool(address(degenPizza), 0x4Eeea7B48b9C3ac8F70a9c932A8B1E8a5CB624c7, 120 days, now + 48 hours);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mbnPool.setRewardDistribution(address(this));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        912
Source: 
>         require(address(usdcPool) == address(0), "Already initialized");
>         usdcPool = new OVENPool(address(degenPizza), 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, 120 days, now + 48 hours);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcPool.setRewardDistribution(address(this));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        923
Source: 
>         require(address(uniswapPool) == address(0), "Already initialized");
>         uniswap = uniswapFactory.createPair(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, address(degenPizza));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswapPool = new OVENPool(address(degenPizza), uniswap, 120 days, now + 48 hours);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DegenPizzaFactory
Line:        924
Source: 
>         uniswap = uniswapFactory.createPair(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48, address(degenPizza));
>         uniswapPool = new OVENPool(address(degenPizza), uniswap, 120 days, now + 48 hours);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswapPool.setRewardDistribution(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        488
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        557
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        560
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        526
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        533
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        538
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        488
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        557
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        560
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        526
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        533
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        538
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        488
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        526
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        533
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        538
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        488
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        526
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        533
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        538
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        488
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        557
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        560
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        526
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        533
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        538
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        488
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        557
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        560
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        526
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        533
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        538
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DegenPizzaFactory
Line:        864
Source: 
>         usdcSeedPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(usdcSeedPool), 1000000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcSeedPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcSeedPool)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DegenPizzaFactory
Line:        874
Source: 
>         wbtcPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(wbtcPool), 600000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wbtcPool.notifyRewardAmount(degenPizza.balanceOf(address(wbtcPool)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DegenPizzaFactory
Line:        884
Source: 
>         wethPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(wethPool), 600000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wethPool.notifyRewardAmount(degenPizza.balanceOf(address(wethPool)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DegenPizzaFactory
Line:        894
Source: 
>         yfvPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(yfvPool), 800000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         yfvPool.notifyRewardAmount(degenPizza.balanceOf(address(yfvPool)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DegenPizzaFactory
Line:        904
Source: 
>         mbnPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(mbnPool), 400000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mbnPool.notifyRewardAmount(degenPizza.balanceOf(address(mbnPool)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DegenPizzaFactory
Line:        914
Source: 
>         usdcPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(usdcPool), 400000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usdcPool.notifyRewardAmount(degenPizza.balanceOf(address(usdcPool)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DegenPizzaFactory
Line:        926
Source: 
>         uniswapPool.setRewardDistribution(address(this));
>         degenPizza.transfer(address(uniswapPool), 400000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswapPool.notifyRewardAmount(degenPizza.balanceOf(address(uniswapPool)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DegenPizzaFactory
Line:        936
Source: 
>         sended = true;
>         degenPizza.transfer(0x315045A5eA1192d517D89E0880Dd45eEB051e45C, 100000000000000000000000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DegenPizzaFactory
Line:        941
Source: 
>         require(address(msg.sender) == owner, "You are not allowed to do that!");
>         degenPizza.transfer(msg.sender, degenPizza.retrieve(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        488
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        557
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        560
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        526
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        533
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        538
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DegenPizzaToken
Line:        782
Source: 
>     mapping (address => mapping (address => uint256)) public  allowance;
>     bytes32                                           public  symbol = "DGP";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256                                           public  decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DegenPizzaToken
Line:        783
Source: 
>     bytes32                                           public  symbol = "DGP";
>     uint256                                           public  decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32                                           public  name = "DegenPizza";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DegenPizzaToken
Line:        784
Source: 
>     uint256                                           public  decimals = 18;
>     bytes32                                           public  name = "DegenPizza";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    OVENPool
Line:        668
Source: 
>     function lastTimeRewardApplicable() public view returns (uint256) {
>         return Math.min(block.timestamp, periodFinish);
>                         ^^^^^^^^^^^^^^^
>     }

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    OVENPool
Line:        653
Source: 
>     modifier checkStart() {
>         require(block.timestamp >= starttime,"not start");
>                 ^^^^^^^^^^^^^^^
>         _;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    OVENPool
Line:        725
Source: 
>     {
>         if (block.timestamp > starttime) {
>             ^^^^^^^^^^^^^^^
>           if (block.timestamp >= periodFinish) {

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    OVENPool
Line:        726
Source: 
>         if (block.timestamp > starttime) {
>           if (block.timestamp >= periodFinish) {
>               ^^^^^^^^^^^^^^^
>               rewardRate = reward.div(DURATION);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    OVENPool
Line:        734
Source: 
>           lastUpdateTime = block.timestamp;
>           periodFinish = block.timestamp.add(DURATION);
>                          ^^^^^^^^^^^^^^^
>           emit RewardAdded(reward);

[0m

---------------------------------------------
For contract 0xf3ce0c622b004b0f11636edbd082d1d4718c2cae.sol
Tool Runtime = 239.03903381900454 seconds
#############################################