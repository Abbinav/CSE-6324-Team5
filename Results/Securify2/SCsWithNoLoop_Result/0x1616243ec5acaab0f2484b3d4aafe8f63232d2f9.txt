[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        270
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { size := extcodesize(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return size > 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        371
Source: 
>                 // solhint-disable-next-line no-inline-assembly
>                 assembly {
>                 ^^^^^^^^^^
>                     let returndata_size := mload(returndata)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        485
Source: 
>      */
>     function token() public view returns (IERC20) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _token;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        492
Source: 
>      */
>     function beneficiary() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _beneficiary;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        499
Source: 
>      */
>     function releaseTime() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _releaseTime;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        506
Source: 
>      */
>     function release() public  {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // solhint-disable-next-line not-rely-on-time

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        362
Source: 
>         //(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
>         (bool success, bytes memory returndata) = target.call.value(weiValue)(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (success) {

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        295
Source: 
>         //(bool success, ) = recipient.call{ value: amount }("");
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TokenTimelock
Line:        472
Source: 
>     constructor () public {
>         IERC20 token = IERC20(0x60CEE60BE1eE37e7787F3dFd18fEF3299d9fA216);
>         ^^^^^^^^^^^^
>         address beneficiary = address(0xa1299BFD41F2D381f3c83D9fe9DDCB9E1db7bBCd);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TokenTimelock
Line:        473
Source: 
>         IERC20 token = IERC20(0x60CEE60BE1eE37e7787F3dFd18fEF3299d9fA216);
>         address beneficiary = address(0xa1299BFD41F2D381f3c83D9fe9DDCB9E1db7bBCd);
>         ^^^^^^^^^^^^^^^^^^^
>         uint256 releaseTime = 1600214400;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TokenTimelock
Line:        474
Source: 
>         address beneficiary = address(0xa1299BFD41F2D381f3c83D9fe9DDCB9E1db7bBCd);
>         uint256 releaseTime = 1600214400;
>         ^^^^^^^^^^^^^^^^^^^
>         // solhint-disable-next-line not-rely-on-time

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        295
Source: 
>         //(bool success, ) = recipient.call{ value: amount }("");
>         (bool success, ) = recipient.call.value(amount)("");
>          ^^^^^^^^^^^^
> 		require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Address
Line:        362
Source: 
>         //(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
>         (bool success, bytes memory returndata) = target.call.value(weiValue)(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (success) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Address
Line:        362
Source: 
>         //(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
>         (bool success, bytes memory returndata) = target.call.value(weiValue)(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (success) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenTimelock
Line:        510
Source: 
> 
>         uint256 amount = _token.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount > 0, "TokenTimelock: no tokens to release");

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        271
Source: 
>         assembly { size := extcodesize(account) }
>         return size > 0;
>                ^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Address
Line:        362
Source: 
>         //(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
>         (bool success, bytes memory returndata) = target.call.value(weiValue)(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (success) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        295
Source: 
>         //(bool success, ) = recipient.call{ value: amount }("");
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        416
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        423
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        428
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TokenTimelock
Line:        476
Source: 
>         // solhint-disable-next-line not-rely-on-time
>         require(releaseTime > block.timestamp, "TokenTimelock: release time is before current time");
>                               ^^^^^^^^^^^^^^^
>         _token = token;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TokenTimelock
Line:        508
Source: 
>         // solhint-disable-next-line not-rely-on-time
>         require(block.timestamp >= _releaseTime, "TokenTimelock: current time is before release time");
>                 ^^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0x1616243ec5acaab0f2484b3d4aafe8f63232d2f9.sol
Tool Runtime = 4.42478750600003 seconds
#############################################