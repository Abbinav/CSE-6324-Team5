[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        74
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != 0x0 && codehash != accountHash);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        188
Source: 
>     
>     function setFactory(address _factory) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        193
Source: 
>     
>     function setSplit(uint _split) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        198
Source: 
>     
>     function setOneSplit(address _onesplit) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        203
Source: 
>     
>     function setGovernance(address _governance) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        208
Source: 
>     
>     function setVault(address _token, address _vault) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        214
Source: 
>     
>     function setConverter(address _input, address _output, address _converter) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        219
Source: 
>     
>     function setStrategy(address _token, address _strategy) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //某个币对应一个策略,比如现在的ycrv就是挖 yfii

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        253
Source: 
>     
>     function inCaseTokensGetStuck(address _token, uint _amount) public {//转任意erc20
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        255
Source: 
>         require(msg.sender == governance, "!governance");
>         IERC20(_token).safeTransfer(governance, _amount);
>                                            ^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        259
Source: 
>     function getExpectedReturn(address _strategy, address _token, uint parts) public view returns (uint expected) {
>         uint _balance = IERC20(_token).balanceOf(_strategy);//获取策略器 某个代币的余额
>                                                                           ^
>         address _want = Strategy(_strategy).want();//策略器需要的代币.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        267
Source: 
>         // This contract should never have value in it, but just incase since this is a public call
>         uint _before = IERC20(_token).balanceOf(address(this));
>                                                        ^^^^^^^^
>         Strategy(_strategy).withdraw(_token);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        295
Source: 
> 
> }
>                                                  

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        111
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        84
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Controller
Line:        198
Source: 
>     
>     function setOneSplit(address _onesplit) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Controller
Line:        203
Source: 
>     
>     function setGovernance(address _governance) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Controller
Line:        231
Source: 
>     function earn(address _token, uint _amount) public {
>         address _strategy = strategies[_token]; //获取策略的合约地址
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _want = Strategy(_strategy).want();//策略需要的token地址

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Controller
Line:        255
Source: 
>         require(msg.sender == governance, "!governance");
>         IERC20(_token).safeTransfer(governance, _amount);
>                                            ^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Controller
Line:        295
Source: 
> 
> }
>                                                  

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        188
Source: 
>     
>     function setFactory(address _factory) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        193
Source: 
>     
>     function setSplit(uint _split) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        208
Source: 
>     
>     function setVault(address _token, address _vault) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        214
Source: 
>     
>     function setConverter(address _input, address _output, address _converter) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        219
Source: 
>     
>     function setStrategy(address _token, address _strategy) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //某个币对应一个策略,比如现在的ycrv就是挖 yfii

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        248
Source: 
>     
>     function withdrawAll(address _token) public {
>                                               ^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        253
Source: 
>     
>     function inCaseTokensGetStuck(address _token, uint _amount) public {//转任意erc20
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        259
Source: 
>     function getExpectedReturn(address _strategy, address _token, uint parts) public view returns (uint expected) {
>         uint _balance = IERC20(_token).balanceOf(_strategy);//获取策略器 某个代币的余额
>                                                                           ^
>         address _want = Strategy(_strategy).want();//策略器需要的代币.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        267
Source: 
>         // This contract should never have value in it, but just incase since this is a public call
>         uint _before = IERC20(_token).balanceOf(address(this));
>                                                        ^^^^^^^^
>         Strategy(_strategy).withdraw(_token);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Controller
Line:        226
Source: 
>         }
>         strategies[_token] = _strategy;
>                             ^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Controller
Line:        271
Source: 
>         if (_after > _before) {
>             uint _amount = _after.sub(_before);
>                                            ^^^^
>             address _want = Strategy(_strategy).want();

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Controller
Line:        274
Source: 
>             uint[] memory _distribution;
>             uint _expected;
>         ^^^^^^^^^^^^^^^^^^^
>             _before = IERC20(_want).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Controller
Line:        278
Source: 
>             IERC20(_token).safeApprove(onesplit, _amount);
>             (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);
>                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Controller
Line:        284
Source: 
>                 uint _reward = _amount.mul(split).div(max);
>                 earn(_want, _amount.sub(_reward));
>                                            ^^^^^^^
>                 IERC20(_want).safeTransfer(rewards, _reward);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        84
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>          ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        176
Source: 
>     uint public split = 5000;
>     uint public constant max = 10000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        222
Source: 
>         require(msg.sender == governance, "!governance");
>         address _current = strategies[_token];
>                                           ^^^^
>         if (_current != address(0)) {//之前的策略存在的话,那么就先提取所有资金

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        232
Source: 
>         address _strategy = strategies[_token]; //获取策略的合约地址
>         address _want = Strategy(_strategy).want();//策略需要的token地址
>                     ^^^^^^^^^^^^^^^^^
>         if (_want != _token) {//如果策略需要的和输入的不一样,需要先转换

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        233
Source: 
>         address _want = Strategy(_strategy).want();//策略需要的token地址
>         if (_want != _token) {//如果策略需要的和输入的不一样,需要先转换
>                                 ^^^^^^^^^^^^^
>             address converter = converters[_token][_want];//转换器合约地址.

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        261
Source: 
>         address _want = Strategy(_strategy).want();//策略器需要的代币.
>         (expected,) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _balance, parts, 0);
>                                                        ^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        264
Source: 
>     
>     // Only allows to withdraw non-core strategy tokens ~ this is over and above normal yield
>                                             ^^^^^^^^^^^^^
>     function yearn(address _strategy, address _token, uint parts) public {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        271
Source: 
>         if (_after > _before) {
>             uint _amount = _after.sub(_before);
>                             ^^^^^^^^^^^^
>             address _want = Strategy(_strategy).want();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        273
Source: 
>             address _want = Strategy(_strategy).want();
>             uint[] memory _distribution;
>                                   ^^^^^^
>             uint _expected;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        276
Source: 
>             _before = IERC20(_want).balanceOf(address(this));
>             IERC20(_token).safeApprove(onesplit, 0);
>    ^^^^^^^^^^^^
>             IERC20(_token).safeApprove(onesplit, _amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        276
Source: 
>             _before = IERC20(_want).balanceOf(address(this));
>             IERC20(_token).safeApprove(onesplit, 0);
>                                                    ^
>             IERC20(_token).safeApprove(onesplit, _amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        277
Source: 
>             IERC20(_token).safeApprove(onesplit, 0);
>             IERC20(_token).safeApprove(onesplit, _amount);
>                                                       ^^^^
>             (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        278
Source: 
>             IERC20(_token).safeApprove(onesplit, _amount);
>             (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);
>                                     ^^^^^^^^^^^^^^
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        290
Source: 
>     
>     function withdraw(address _token, uint _amount) public {
>                                   ^^^^^^^^^^^^
>         require(msg.sender == vaults[_token], "!vault");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        11
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        233
Source: 
>         address _want = Strategy(_strategy).want();//策略需要的token地址
>         if (_want != _token) {//如果策略需要的和输入的不一样,需要先转换
>                                                 ^^^^
>             address converter = converters[_token][_want];//转换器合约地址.

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        239
Source: 
>         } else {
>             IERC20(_token).safeTransfer(_strategy, _amount);
>                                          ^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        264
Source: 
>     
>     // Only allows to withdraw non-core strategy tokens ~ this is over and above normal yield
>                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function yearn(address _strategy, address _token, uint parts) public {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        271
Source: 
>         if (_after > _before) {
>             uint _amount = _after.sub(_before);
>                                            ^^^^
>             address _want = Strategy(_strategy).want();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        274
Source: 
>             uint[] memory _distribution;
>             uint _expected;
>         ^^^^^^^^^^^^^^^^^^^
>             _before = IERC20(_want).balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        277
Source: 
>             IERC20(_token).safeApprove(onesplit, 0);
>             IERC20(_token).safeApprove(onesplit, _amount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        278
Source: 
>             IERC20(_token).safeApprove(onesplit, _amount);
>             (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);
>                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        284
Source: 
>                 uint _reward = _amount.mul(split).div(max);
>                 earn(_want, _amount.sub(_reward));
>                                            ^^^^^^^
>                 IERC20(_want).safeTransfer(rewards, _reward);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SafeERC20
Line:        102
Source: 
>     function safeApprove(IERC20 token, address spender, uint256 value) internal {
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        226
Source: 
>         }
>         strategies[_token] = _strategy;
>                             ^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        246
Source: 
>         return Strategy(strategies[_token]).balanceOf();
>     }
>    ^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        250
Source: 
>         require(msg.sender == governance, "!governance");
>         Strategy(strategies[_token]).withdrawAll();
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        254
Source: 
>     function inCaseTokensGetStuck(address _token, uint _amount) public {//转任意erc20
>         require(msg.sender == governance, "!governance");
>                                           ^^^^^^^^^^^^^^^
>         IERC20(_token).safeTransfer(governance, _amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        261
Source: 
>         address _want = Strategy(_strategy).want();//策略器需要的代币.
>         (expected,) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _balance, parts, 0);
>                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        265
Source: 
>     // Only allows to withdraw non-core strategy tokens ~ this is over and above normal yield
>     function yearn(address _strategy, address _token, uint parts) public {
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // This contract should never have value in it, but just incase since this is a public call

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        272
Source: 
>             uint _amount = _after.sub(_before);
>             address _want = Strategy(_strategy).want();
>                                             ^^^^^^^^^^^
>             uint[] memory _distribution;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        280
Source: 
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);
>             _after = IERC20(_want).balanceOf(address(this));
>                                                       ^^^^^^
>             if (_after > _before) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        282
Source: 
>             if (_after > _before) {
>                 _amount = _after.sub(_before);
>                                               
>                 uint _reward = _amount.mul(split).div(max);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        295
Source: 
> 
> }
>                                                                                                                                                                            

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        75
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != 0x0 && codehash != accountHash);
>                 ^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Controller
Line:        170
Source: 
>     address public rewards;
>     address public factory;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => address) public vaults;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Controller
Line:        226
Source: 
>         }
>         strategies[_token] = _strategy;
>                             ^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Controller
Line:        254
Source: 
>     function inCaseTokensGetStuck(address _token, uint _amount) public {//转任意erc20
>         require(msg.sender == governance, "!governance");
>                                           ^^^^^^^^^^^^^^^
>         IERC20(_token).safeTransfer(governance, _amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Controller
Line:        282
Source: 
>             if (_after > _before) {
>                 _amount = _after.sub(_before);
>                                               
>                 uint _reward = _amount.mul(split).div(max);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        84
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Controller
Line:        170
Source: 
>     address public rewards;
>     address public factory;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => address) public vaults;

[0m

---------------------------------------------
For contract 0xcDCf1f9Ac816Fed665B09a00f60c885dd8848b02.sol
Tool Runtime = 11.47532663300035 seconds
#############################################