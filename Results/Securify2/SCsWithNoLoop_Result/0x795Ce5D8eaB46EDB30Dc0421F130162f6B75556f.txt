[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        77
Source: 
> 
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        86
Source: 
> 
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        77
Source: 
> 
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        86
Source: 
> 
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakingPoolFunds
Line:        178
Source: 
>     
>     function setDivPoolAddress(address _a) public onlyOwner returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         divPoolAddress = _a;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakingPoolFunds
Line:        178
Source: 
>     
>     function setDivPoolAddress(address _a) public onlyOwner returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         divPoolAddress = _a;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BIDSInterface
Line:        99
Source: 
>     function balanceOf(address account) external view returns (uint256);
>     function BURN_RATE() external view returns(uint256);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function isStackingActive() external view returns(bool);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakingPoolFunds
Line:        109
Source: 
>     address public divPoolAddress;
>     address public constant bidsTokenAddress = 0x912B38134F395D1BFAb4C6F9db632C31667ACF98;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakingPoolFunds
Line:        126
Source: 
>         // Calculate remaining amount to be tranferred at staking portal
>         uint256 BURN_RATE = BIDSInterface(bidsTokenAddress).BURN_RATE();
>         ^^^^^^^^^^^^^^^^^
>         bool isStakingActive = BIDSInterface(bidsTokenAddress).isStackingActive();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakingPoolFunds
Line:        160
Source: 
>          // Calculate remaining amount to be tranferred at staking portal
>         uint256 BURN_RATE = BIDSInterface(bidsTokenAddress).BURN_RATE();
>         ^^^^^^^^^^^^^^^^^
>         bool isStakingActive = BIDSInterface(bidsTokenAddress).isStackingActive();

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> // SPDX-License-Identifier: MIT
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    StakingPoolFunds
Line:        147
Source: 
>         if(ethRewards > 0){
>             msg.sender.transfer(ethRewards);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    StakingPoolFunds
Line:        147
Source: 
>         if(ethRewards > 0){
>             msg.sender.transfer(ethRewards);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    StakingPoolFunds
Line:        147
Source: 
>         if(ethRewards > 0){
>             msg.sender.transfer(ethRewards);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakingPoolFunds
Line:        123
Source: 
>         
>         bidsRewards = BIDSInterface(bidsTokenAddress).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakingPoolFunds
Line:        126
Source: 
>         // Calculate remaining amount to be tranferred at staking portal
>         uint256 BURN_RATE = BIDSInterface(bidsTokenAddress).BURN_RATE();
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bool isStakingActive = BIDSInterface(bidsTokenAddress).isStackingActive();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakingPoolFunds
Line:        127
Source: 
>         uint256 BURN_RATE = BIDSInterface(bidsTokenAddress).BURN_RATE();
>         bool isStakingActive = BIDSInterface(bidsTokenAddress).isStackingActive();
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakingPoolFunds
Line:        156
Source: 
>         
>         bidsRewards = BIDSInterface(bidsTokenAddress).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ethRewards = address(this).balance;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakingPoolFunds
Line:        160
Source: 
>          // Calculate remaining amount to be tranferred at staking portal
>         uint256 BURN_RATE = BIDSInterface(bidsTokenAddress).BURN_RATE();
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bool isStakingActive = BIDSInterface(bidsTokenAddress).isStackingActive();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakingPoolFunds
Line:        161
Source: 
>         uint256 BURN_RATE = BIDSInterface(bidsTokenAddress).BURN_RATE();
>         bool isStakingActive = BIDSInterface(bidsTokenAddress).isStackingActive();
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakingPoolFunds
Line:        142
Source: 
>         if(bidsRewards > 0){
>             BIDSInterface(bidsTokenAddress).transfer(msg.sender, bidsRewards);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StakingPoolFunds
Line:        108
Source: 
> 
>     address public divPoolAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public constant bidsTokenAddress = 0x912B38134F395D1BFAb4C6F9db632C31667ACF98;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StakingPoolFunds
Line:        142
Source: 
>         if(bidsRewards > 0){
>             BIDSInterface(bidsTokenAddress).transfer(msg.sender, bidsRewards);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m

---------------------------------------------
For contract 0x795Ce5D8eaB46EDB30Dc0421F130162f6B75556f.sol
Tool Runtime = 3.8115622400000575 seconds
#############################################