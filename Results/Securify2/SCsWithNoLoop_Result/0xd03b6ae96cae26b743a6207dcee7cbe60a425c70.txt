[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Crowdsale
Line:        224
Source: 
>     constructor() public {
>         owner = msg.sender;
>                   ^^^^^^^^^
>         token.transfer(owner, token.totalSupply() / 100 * (100 - percentSell));

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Crowdsale
Line:        225
Source: 
>         owner = msg.sender;
>         token.transfer(owner, token.totalSupply() / 100 * (100 - percentSell));
>                       ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Crowdsale
Line:        225
Source: 
>         owner = msg.sender;
>         token.transfer(owner, token.totalSupply() / 100 * (100 - percentSell));
>                                                                       ^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Crowdsale
Line:        228
Source: 
> 
>     function() external payable {
>                ^^^^^^^^^^^^^^^^^^
>         require(startFst < now && now < stopSell, "Period error");

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Crowdsale
Line:        229
Source: 
>     function() external payable {
>         require(startFst < now && now < stopSell, "Period error");
>           ^^^^^^^^^^^^^^^^^^^^^^^
>         uint amount = msg.value / getPrice() * 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Crowdsale
Line:        229
Source: 
>     function() external payable {
>         require(startFst < now && now < stopSell, "Period error");
>                                        ^^^^^^^^^^^^^^^^^^^^^
>         uint amount = msg.value / getPrice() * 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Crowdsale
Line:        229
Source: 
>     function() external payable {
>         require(startFst < now && now < stopSell, "Period error");
>                                                                   
>         uint amount = msg.value / getPrice() * 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Crowdsale
Line:        230
Source: 
>         require(startFst < now && now < stopSell, "Period error");
>         uint amount = msg.value / getPrice() * 10;
>                                     ^^^^^^^^^^^^^^
>         require(amount <= token.balanceOf(address(this)), "Infucient token balance in ICO");

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Crowdsale
Line:        231
Source: 
>         uint amount = msg.value / getPrice() * 10;
>         require(amount <= token.balanceOf(address(this)), "Infucient token balance in ICO");
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token.transfer(msg.sender, amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Crowdsale
Line:        231
Source: 
>         uint amount = msg.value / getPrice() * 10;
>         require(amount <= token.balanceOf(address(this)), "Infucient token balance in ICO");
>                                                                                         ^^^^
>         token.transfer(msg.sender, amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Crowdsale
Line:        232
Source: 
>         require(amount <= token.balanceOf(address(this)), "Infucient token balance in ICO");
>         token.transfer(msg.sender, amount);
>                                      ^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    ERC20
Line:        147
Source: 
> 
>     function transfer(address recipient, uint256 amount) public returns (bool) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    ERC20
Line:        148
Source: 
>     function transfer(address recipient, uint256 amount) public returns (bool) {
>         _transfer(msg.sender, recipient, amount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        108
Source: 
> 
>     function transferOwnership(address newOwner) public onlyOwner {
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        115
Source: 
>         emit OwnershipTransferred(_owner, newOwner);
>         _owner = newOwner;
>        ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        124
Source: 
> 
>     mapping (address => mapping (address => uint256)) private _allowances;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        108
Source: 
> 
>     function transferOwnership(address newOwner) public onlyOwner {
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        115
Source: 
>         emit OwnershipTransferred(_owner, newOwner);
>         _owner = newOwner;
>        ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        124
Source: 
> 
>     mapping (address => mapping (address => uint256)) private _allowances;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        153
Source: 
>     function allowance(address owner, address spender) public view returns (uint256) {
>         return _allowances[owner][spender];
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        156
Source: 
> 
>     function approve(address spender, uint256 amount) public returns (bool) {
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        161
Source: 
> 
>     function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        163
Source: 
>         _transfer(sender, recipient, amount);
>         _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        167
Source: 
> 
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        168
Source: 
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
>                                                                   ^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        174
Source: 
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
>         return true;
>                    ^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        179
Source: 
>         require(sender != address(0), "ERC20: transfer from the zero address");
>         require(recipient != address(0), "ERC20: transfer to the zero address");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Crowdsale
Line:        247
Source: 
>     function getPrice() public view returns (uint) {
>         return now < startScd ? priceFst : priceScd;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Crowdsale
Line:        254
Source: 
>     }
>     function getStartScd() public view returns (uint) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return startScd - now;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Crowdsale
Line:        264
Source: 
>     function ICO_deposit() public view returns(uint){
>         return token.balanceOf(address(this));
>                                  ^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Crowdsale
Line:        267
Source: 
>     function myBalance() public view returns(uint){
>         return token.balanceOf(msg.sender);
>                      ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Crowdsale
Line:        270
Source: 
> 
> }
>                                                                

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Crowdsale
Line:        270
Source: 
> 
> }
>                                                                                                                                                           

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Crowdsale
Line:        270
Source: 
> 
> }
>                                                                                                                                                                                                                                                           

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Crowdsale
Line:        270
Source: 
> 
> }
>                                                                                                                                                                                                                                                                                                                                                                      

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        124
Source: 
> 
>     mapping (address => mapping (address => uint256)) private _allowances;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        161
Source: 
> 
>     function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        168
Source: 
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
>                                                                   ^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        174
Source: 
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
>         return true;
>                    ^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        179
Source: 
>         require(sender != address(0), "ERC20: transfer from the zero address");
>         require(recipient != address(0), "ERC20: transfer to the zero address");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        156
Source: 
> 
>     function approve(address spender, uint256 amount) public returns (bool) {
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        163
Source: 
>         _transfer(sender, recipient, amount);
>         _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        167
Source: 
> 
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Crowdsale
Line:        236
Source: 
>     function manualGetETH() public payable {
>         require(msg.sender == owner, "You is not owner");
>                                                       ^^^
>         owner.transfer(address(this).balance);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Crowdsale
Line:        242
Source: 
>         require(msg.sender == owner, "You is not owner");
>         require(now > stopSell, "ICO is not closed");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token.transfer(owner, token.balanceOf(address(this)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20
Line:        163
Source: 
>         _transfer(sender, recipient, amount);
>         _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));
>                                          ^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20
Line:        211
Source: 
>     // *** Config ***
>     uint startFst = 1599753600;
>         ^^^^^^^^^^^^^
>     uint periodFst = 1 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20
Line:        139
Source: 
> 
>     function totalSupply() public view returns (uint256) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20
Line:        140
Source: 
>     function totalSupply() public view returns (uint256) {
>         return _totalSupply;
>       ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20
Line:        143
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20
Line:        143
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>                                                       ^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Crowdsale
Line:        270
Source: 
> 
> }
>                                                                                                                                                                                                                                                           

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ownable
Line:        99
Source: 
> 
>     function isOwner() public view returns (bool) {
>                         ^^^^^^^^^^^^^^^^^^^^^^
>         return msg.sender == _owner;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        133
Source: 
>     event Transfer(address indexed from, address indexed to, uint256 value);
>     event Approval(address indexed owner, address indexed spender, uint256 value);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        135
Source: 
> 
>     constructor() public {
>                        ^^^
>         _mint(msg.sender, total * 10**decimals);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        140
Source: 
>     function totalSupply() public view returns (uint256) {
>         return _totalSupply;
>       ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        143
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>                                                       ^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        144
Source: 
>     function balanceOf(address account) public view returns (uint256) {
>         return _balances[account];
>               ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Crowdsale
Line:        224
Source: 
>     constructor() public {
>         owner = msg.sender;
>                   ^^^^^^^^^
>         token.transfer(owner, token.totalSupply() / 100 * (100 - percentSell));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Crowdsale
Line:        225
Source: 
>         owner = msg.sender;
>         token.transfer(owner, token.totalSupply() / 100 * (100 - percentSell));
>                       ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Crowdsale
Line:        225
Source: 
>         owner = msg.sender;
>         token.transfer(owner, token.totalSupply() / 100 * (100 - percentSell));
>                                                                       ^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Crowdsale
Line:        228
Source: 
> 
>     function() external payable {
>                ^^^^^^^^^^^^^^^^^^
>         require(startFst < now && now < stopSell, "Period error");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Crowdsale
Line:        229
Source: 
>     function() external payable {
>         require(startFst < now && now < stopSell, "Period error");
>           ^^^^^^^^^^^^^^^^^^^^^^^
>         uint amount = msg.value / getPrice() * 10;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Crowdsale
Line:        229
Source: 
>     function() external payable {
>         require(startFst < now && now < stopSell, "Period error");
>                                        ^^^^^^^^^^^^^^^^^^^^^
>         uint amount = msg.value / getPrice() * 10;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Crowdsale
Line:        229
Source: 
>     function() external payable {
>         require(startFst < now && now < stopSell, "Period error");
>                                                                   
>         uint amount = msg.value / getPrice() * 10;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Crowdsale
Line:        230
Source: 
>         require(startFst < now && now < stopSell, "Period error");
>         uint amount = msg.value / getPrice() * 10;
>                                     ^^^^^^^^^^^^^^
>         require(amount <= token.balanceOf(address(this)), "Infucient token balance in ICO");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Crowdsale
Line:        231
Source: 
>         uint amount = msg.value / getPrice() * 10;
>         require(amount <= token.balanceOf(address(this)), "Infucient token balance in ICO");
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token.transfer(msg.sender, amount);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Crowdsale
Line:        231
Source: 
>         uint amount = msg.value / getPrice() * 10;
>         require(amount <= token.balanceOf(address(this)), "Infucient token balance in ICO");
>                                                                                         ^^^^
>         token.transfer(msg.sender, amount);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Crowdsale
Line:        232
Source: 
>         require(amount <= token.balanceOf(address(this)), "Infucient token balance in ICO");
>         token.transfer(msg.sender, amount);
>                                      ^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Crowdsale
Line:        251
Source: 
>     // Utils
>     function getStartICO() public view returns (uint) {
>                                                     ^^^
>         return startFst - now;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Crowdsale
Line:        251
Source: 
>     // Utils
>     function getStartICO() public view returns (uint) {
>                                                     ^^^
>         return startFst - now;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Crowdsale
Line:        251
Source: 
>     // Utils
>     function getStartICO() public view returns (uint) {
>                                                     ^^^
>         return startFst - now;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Crowdsale
Line:        243
Source: 
>         require(now > stopSell, "ICO is not closed");
>         token.transfer(owner, token.balanceOf(address(this)));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Crowdsale
Line:        236
Source: 
>     function manualGetETH() public payable {
>         require(msg.sender == owner, "You is not owner");
>                                                       ^^^
>         owner.transfer(address(this).balance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Crowdsale
Line:        236
Source: 
>     function manualGetETH() public payable {
>         require(msg.sender == owner, "You is not owner");
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner.transfer(address(this).balance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Crowdsale
Line:        246
Source: 
>     
>     function getPrice() public view returns (uint) {
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return now < startScd ? priceFst : priceScd;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Crowdsale
Line:        260
Source: 
>     }
>     function tokenAddress() public view returns (address){
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(token);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Crowdsale
Line:        258
Source: 
>     function getStopSell() public view returns(uint){
>         return stopSell - now;
>                     ^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Crowdsale
Line:        270
Source: 
> 
> }
>                                                                                                                                                                                                                                                                                                                            

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Crowdsale
Line:        270
Source: 
> 
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        219
Source: 
> 
>     uint startScd =  startFst + periodFst;
>                   ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint stopSell = startScd + periodScd;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        190
Source: 
>         _totalSupply = _totalSupply.add(amount);
>         _balances[account] = _balances[account].add(amount);
>                                                      ^^^^^^^
>         emit Transfer(address(0), account, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        194
Source: 
> 
>     function _approve(address owner, address spender, uint256 amount) internal {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(owner != address(0), "ERC20: approve from the zero address");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Crowdsale
Line:        236
Source: 
>     function manualGetETH() public payable {
>         require(msg.sender == owner, "You is not owner");
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner.transfer(address(this).balance);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Crowdsale
Line:        246
Source: 
>     
>     function getPrice() public view returns (uint) {
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return now < startScd ? priceFst : priceScd;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Crowdsale
Line:        258
Source: 
>     function getStopSell() public view returns(uint){
>         return stopSell - now;
>                     ^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC20
Line:        139
Source: 
> 
>     function totalSupply() public view returns (uint256) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC20
Line:        140
Source: 
>     function totalSupply() public view returns (uint256) {
>         return _totalSupply;
>       ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Crowdsale
Line:        224
Source: 
>     constructor() public {
>         owner = msg.sender;
>                   ^^^^^^^^^
>         token.transfer(owner, token.totalSupply() / 100 * (100 - percentSell));

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Crowdsale
Line:        225
Source: 
>         owner = msg.sender;
>         token.transfer(owner, token.totalSupply() / 100 * (100 - percentSell));
>                       ^^^^^^^^^^^^^^^
>     }

[0m

---------------------------------------------
For contract 0xd03b6ae96cae26b743a6207dcee7cbe60a425c70.sol
Tool Runtime = 5.404145532000257 seconds
#############################################