[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        58
Source: 
> 
>         function transferOwnership(address _newOwner) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             newOwner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        61
Source: 
>         }
>         function acceptOwnership() public {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(msg.sender == newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        58
Source: 
> 
>         function transferOwnership(address _newOwner) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             newOwner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        61
Source: 
>         }
>         function acceptOwnership() public {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(msg.sender == newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BITTO
Line:        89
Source: 
> 
>         function totalSupply() public view  returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return _totalSupply.sub(balances[address(0)]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BITTO
Line:        93
Source: 
> 
>         function balanceOf(address tokenOwner) public view  returns (uint balance) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return balances[tokenOwner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BITTO
Line:        97
Source: 
> 
>         function transfer(address to, uint tokens) public  returns (bool success) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balances[msg.sender] = balances[msg.sender].sub(tokens);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BITTO
Line:        104
Source: 
> 
>         function approve(address spender, uint tokens) public  returns (bool success) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             allowed[msg.sender][spender] = tokens;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BITTO
Line:        110
Source: 
> 
>         function transferFrom(address from, address to, uint tokens) public  returns (bool success) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balances[from] = balances[from].sub(tokens);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BITTO
Line:        119
Source: 
> 
>         function allowance(address tokenOwner, address spender) public view  returns (uint remaining) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return allowed[tokenOwner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BITTO
Line:        124
Source: 
> 
>         function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             allowed[msg.sender][spender] = tokens;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BITTO
Line:        136
Source: 
> 
>         function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return ERC20Interface(tokenAddress).transfer(owner, tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        58
Source: 
> 
>         function transferOwnership(address _newOwner) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             newOwner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BITTO
Line:        97
Source: 
> 
>         function transfer(address to, uint tokens) public  returns (bool success) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balances[msg.sender] = balances[msg.sender].sub(tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BITTO
Line:        110
Source: 
> 
>         function transferFrom(address from, address to, uint tokens) public  returns (bool success) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balances[from] = balances[from].sub(tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BITTO
Line:        93
Source: 
> 
>         function balanceOf(address tokenOwner) public view  returns (uint balance) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return balances[tokenOwner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BITTO
Line:        104
Source: 
> 
>         function approve(address spender, uint tokens) public  returns (bool success) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             allowed[msg.sender][spender] = tokens;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BITTO
Line:        119
Source: 
> 
>         function allowance(address tokenOwner, address spender) public view  returns (uint remaining) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return allowed[tokenOwner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BITTO
Line:        124
Source: 
> 
>         function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             allowed[msg.sender][spender] = tokens;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BITTO
Line:        136
Source: 
> 
>         function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return ERC20Interface(tokenAddress).transfer(owner, tokens);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BITTO
Line:        75
Source: 
>         uint8 public decimals;
>         uint _totalSupply;
>         ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BITTO
Line:        77
Source: 
> 
>         mapping(address => uint) balances;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mapping(address => mapping(address => uint)) allowed;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BITTO
Line:        78
Source: 
>         mapping(address => uint) balances;
>         mapping(address => mapping(address => uint)) allowed;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BITTO
Line:        127
Source: 
>             emit Approval(msg.sender, spender, tokens);
>             ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BITTO
Line:        137
Source: 
>         function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
>             return ERC20Interface(tokenAddress).transfer(owner, tokens);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        45
Source: 
>         address public owner;
>         address public newOwner;
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BITTO
Line:        99
Source: 
>             balances[msg.sender] = balances[msg.sender].sub(tokens);
>             balances[to] = balances[to].add(tokens);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Transfer(msg.sender, to, tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BITTO
Line:        105
Source: 
>         function approve(address spender, uint tokens) public  returns (bool success) {
>             allowed[msg.sender][spender] = tokens;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Approval(msg.sender, spender, tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BITTO
Line:        111
Source: 
>         function transferFrom(address from, address to, uint tokens) public  returns (bool success) {
>             balances[from] = balances[from].sub(tokens);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BITTO
Line:        113
Source: 
>             allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
>             balances[to] = balances[to].add(tokens);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Transfer(from, to, tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BITTO
Line:        125
Source: 
>         function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
>             allowed[msg.sender][spender] = tokens;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Approval(msg.sender, spender, tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    BITTO
Line:        72
Source: 
> 
>         string public symbol;
>         ^^^^^^^^^^^^^^^^^^^^
>         string public  name;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    BITTO
Line:        73
Source: 
>         string public symbol;
>         string public  name;
>         ^^^^^^^^^^^^^^^^^^^
>         uint8 public decimals;

[0m

---------------------------------------------
For contract 0x55a290f08bb4cae8dcf1ea5635a3fcfd4da60456.sol
Tool Runtime = 3.3681124939994334 seconds
#############################################