[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        305
Source: 
>      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
>      * of certain opcodes, possibly making contracts go over the 2300 gas limit
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * imposed by `transfer`, making them unable to receive funds via

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        409
Source: 
>  * @dev Wrappers around ERC20 operations that throw on failure (when the token
>  * contract returns false). Tokens that return no value (and instead revert or
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * throw on failure) are also supported, non-reverting calls are assumed to be

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        113
Source: 
> /**
>  * @dev Wrappers over Solidity's arithmetic operations with added overflow
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * checks.

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        118
Source: 
>  * in bugs, because programmers usually assume that an overflow raises an
>  * error, which is the standard behavior in high level programming languages.
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * `SafeMath` restores this intuition by reverting the transaction when an

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        516
Source: 
>     /**
>      * @dev Leaves the contract without owner. It will not be possible to call
>                                                                    ^^^^^^^^^^^
>      * `onlyOwner` functions anymore. Can only be called by the current owner.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        532
Source: 
>     function transferOwnership(address newOwner) public  onlyOwner {
>         require(newOwner != address(0), "Ownable: new owner is the zero address");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        542
Source: 
>  *
>  * This implementation is agnostic to the way tokens are created. This means
>                                                                ^^^^^^^^^^^^^
>  * that a supply mechanism has to be added in a derived contract using {_mint}.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        608
Source: 
>     /**
>      * @dev Returns the number of decimals used to get its user representation.
>                                                                      ^^^^^^^^^^
>      * For example, if `decimals` equals `2`, a balance of `505` tokens should

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        612
Source: 
>      *
>      * Tokens usually opt for a value of 18, imitating the relationship between
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        635
Source: 
>     function balanceOf(address account) public view  returns (uint256) {
>         return _balances[account];
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        643
Source: 
>      *
>      * - `recipient` cannot be the zero address.
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * - the caller must have a balance of at least `amount`.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        646
Source: 
>      */
>     function transfer(address recipient, uint256 amount) public   returns (bool) {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(_msgSender(), recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        658
Source: 
> 
>     /**
>        
>      * @dev See {IERC20-approve}.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        666
Source: 
>     function approve(address spender, uint256 amount) public   returns (bool) {
>         _approve(_msgSender(), spender, amount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        675
Source: 
>      * required by the EIP. See the note at the beginning of {ERC20};
>      *
>   ^^^^
>      * Requirements:

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        689
Source: 
>     /**
>      * @dev Atomically increases the allowance granted to `spender` by the caller.
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        708
Source: 
>      *
>      * This is an alternative to {approve} that can be used as a mitigation for
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * problems described in {IERC20-approve}.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        727
Source: 
>      *
>      * This is internal function is equivalent to {transfer}, and can be used to
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * e.g. implement automatic token fees, slashing mechanisms, etc.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        516
Source: 
>     /**
>      * @dev Leaves the contract without owner. It will not be possible to call
>                                                                    ^^^^^^^^^^^
>      * `onlyOwner` functions anymore. Can only be called by the current owner.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        532
Source: 
>     function transferOwnership(address newOwner) public  onlyOwner {
>         require(newOwner != address(0), "Ownable: new owner is the zero address");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        542
Source: 
>  *
>  * This implementation is agnostic to the way tokens are created. This means
>                                                                ^^^^^^^^^^^^^
>  * that a supply mechanism has to be added in a derived contract using {_mint}.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        608
Source: 
>     /**
>      * @dev Returns the number of decimals used to get its user representation.
>                                                                      ^^^^^^^^^^
>      * For example, if `decimals` equals `2`, a balance of `505` tokens should

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        612
Source: 
>      *
>      * Tokens usually opt for a value of 18, imitating the relationship between
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        635
Source: 
>     function balanceOf(address account) public view  returns (uint256) {
>         return _balances[account];
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        643
Source: 
>      *
>      * - `recipient` cannot be the zero address.
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * - the caller must have a balance of at least `amount`.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        646
Source: 
>      */
>     function transfer(address recipient, uint256 amount) public   returns (bool) {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(_msgSender(), recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        658
Source: 
> 
>     /**
>        
>      * @dev See {IERC20-approve}.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        666
Source: 
>     function approve(address spender, uint256 amount) public   returns (bool) {
>         _approve(_msgSender(), spender, amount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        675
Source: 
>      * required by the EIP. See the note at the beginning of {ERC20};
>      *
>   ^^^^
>      * Requirements:

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        689
Source: 
>     /**
>      * @dev Atomically increases the allowance granted to `spender` by the caller.
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        708
Source: 
>      *
>      * This is an alternative to {approve} that can be used as a mitigation for
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * problems described in {IERC20-approve}.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        727
Source: 
>      *
>      * This is internal function is equivalent to {transfer}, and can be used to
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * e.g. implement automatic token fees, slashing mechanisms, etc.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LogicToken
Line:        845
Source: 
> 
> }
>                                                                                                                                                                                                                                                                    

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        329
Source: 
>      *
>      * If `target` reverts with a revert reason, it is bubbled up by this
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * function (like regular Solidity function calls).

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        394
Source: 
> 
>                 // solhint-disable-next-line no-inline-assembly
>                                                     ^^^^^^^^^^^
>                 assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        329
Source: 
>      *
>      * If `target` reverts with a revert reason, it is bubbled up by this
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * function (like regular Solidity function calls).

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        394
Source: 
> 
>                 // solhint-disable-next-line no-inline-assembly
>                                                     ^^^^^^^^^^^
>                 assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        329
Source: 
>      *
>      * If `target` reverts with a revert reason, it is bubbled up by this
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * function (like regular Solidity function calls).

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        394
Source: 
> 
>                 // solhint-disable-next-line no-inline-assembly
>                                                     ^^^^^^^^^^^
>                 assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        329
Source: 
>      *
>      * If `target` reverts with a revert reason, it is bubbled up by this
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * function (like regular Solidity function calls).

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        394
Source: 
> 
>                 // solhint-disable-next-line no-inline-assembly
>                                                     ^^^^^^^^^^^
>                 assembly {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        658
Source: 
> 
>     /**
>        
>      * @dev See {IERC20-approve}.

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        689
Source: 
>     /**
>      * @dev Atomically increases the allowance granted to `spender` by the caller.
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        708
Source: 
>      *
>      * This is an alternative to {approve} that can be used as a mitigation for
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * problems described in {IERC20-approve}.

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        727
Source: 
>      *
>      * This is internal function is equivalent to {transfer}, and can be used to
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * e.g. implement automatic token fees, slashing mechanisms, etc.

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        658
Source: 
> 
>     /**
>        
>      * @dev See {IERC20-approve}.

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        689
Source: 
>     /**
>      * @dev Atomically increases the allowance granted to `spender` by the caller.
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        708
Source: 
>      *
>      * This is an alternative to {approve} that can be used as a mitigation for
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * problems described in {IERC20-approve}.

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        727
Source: 
>      *
>      * This is internal function is equivalent to {transfer}, and can be used to
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * e.g. implement automatic token fees, slashing mechanisms, etc.

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LogicToken
Line:        845
Source: 
> 
> }
>                                                                                                                                                                                                                                                                    

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        646
Source: 
>      */
>     function transfer(address recipient, uint256 amount) public   returns (bool) {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(_msgSender(), recipient, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        666
Source: 
>     function approve(address spender, uint256 amount) public   returns (bool) {
>         _approve(_msgSender(), spender, amount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        675
Source: 
>      * required by the EIP. See the note at the beginning of {ERC20};
>      *
>   ^^^^
>      * Requirements:

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        646
Source: 
>      */
>     function transfer(address recipient, uint256 amount) public   returns (bool) {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(_msgSender(), recipient, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        666
Source: 
>     function approve(address spender, uint256 amount) public   returns (bool) {
>         _approve(_msgSender(), spender, amount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        675
Source: 
>      * required by the EIP. See the note at the beginning of {ERC20};
>      *
>   ^^^^
>      * Requirements:

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20
Line:        600
Source: 
>     /**
>      * @dev Returns the symbol of the token, usually a shorter version of the
>                                                                           ^^^
>      * name.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20
Line:        602
Source: 
>      * name.
>      */
>    ^^^^
>     function symbol() public view returns (string memory) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        329
Source: 
>      *
>      * If `target` reverts with a revert reason, it is bubbled up by this
>                        ^^^^^^^^^^^^
>      * function (like regular Solidity function calls).

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ownable
Line:        497
Source: 
>         _owner = msgSender;
>         emit OwnershipTransferred(address(0), msgSender);
>                                                ^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        579
Source: 
>      * @dev Sets the values for {name} and {symbol}, initializes {decimals} with
>      * a default value of 18.
>                          ^^^^
>      *

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        581
Source: 
>      *
>      * To select a different value for {decimals}, use {_setupDecimals}.
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        583
Source: 
>      *
>      * All three of these values are immutable: they can only be set once during
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * construction.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        583
Source: 
>      *
>      * All three of these values are immutable: they can only be set once during
>                                                                         ^^^^^^^^
>      * construction.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        584
Source: 
>      * All three of these values are immutable: they can only be set once during
>      * construction.
>                  ^^^
>      */

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        586
Source: 
>      */
>     constructor (string memory name, string memory symbol) public {
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>         _name = name;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        305
Source: 
>      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
>      * of certain opcodes, possibly making contracts go over the 2300 gas limit
>                                                                  ^^^^^^^^
>      * imposed by `transfer`, making them unable to receive funds via

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ERC20
Line:        583
Source: 
>      *
>      * All three of these values are immutable: they can only be set once during
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * construction.

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20
Line:        583
Source: 
>      *
>      * All three of these values are immutable: they can only be set once during
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * construction.

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        815
Source: 
>      * applications that interact with token contracts will not expect
>      * {decimals} to ever change, and may work incorrectly if it does.
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        752
Source: 
>      *
>      * Emits a {Transfer} event with `from` set to the zero address.
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        756
Source: 
>      *
>      * - `to` cannot be the zero address.
>                               ^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        752
Source: 
>      *
>      * Emits a {Transfer} event with `from` set to the zero address.
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        756
Source: 
>      *
>      * - `to` cannot be the zero address.
>                               ^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        329
Source: 
>      *
>      * If `target` reverts with a revert reason, it is bubbled up by this
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * function (like regular Solidity function calls).

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        391
Source: 
>             // Look for revert reason and bubble it up if present
>             if (returndata.length > 0) {
>                       ^^^^^^^^^^^^^^^^^^
>                 // The easiest way to bubble the revert reason is using memory via assembly

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        394
Source: 
> 
>                 // solhint-disable-next-line no-inline-assembly
>                                                     ^^^^^^^^^^^
>                 assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        446
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        451
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        457
Source: 
>      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
>      * on the return value: the return value is optional (but if data is returned, it must not be false).
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param token The token targeted by the call.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        329
Source: 
>      *
>      * If `target` reverts with a revert reason, it is bubbled up by this
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * function (like regular Solidity function calls).

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        391
Source: 
>             // Look for revert reason and bubble it up if present
>             if (returndata.length > 0) {
>                       ^^^^^^^^^^^^^^^^^^
>                 // The easiest way to bubble the revert reason is using memory via assembly

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        394
Source: 
> 
>                 // solhint-disable-next-line no-inline-assembly
>                                                     ^^^^^^^^^^^
>                 assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        446
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        451
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        457
Source: 
>      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
>      * on the return value: the return value is optional (but if data is returned, it must not be false).
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param token The token targeted by the call.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        329
Source: 
>      *
>      * If `target` reverts with a revert reason, it is bubbled up by this
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * function (like regular Solidity function calls).

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        391
Source: 
>             // Look for revert reason and bubble it up if present
>             if (returndata.length > 0) {
>                       ^^^^^^^^^^^^^^^^^^
>                 // The easiest way to bubble the revert reason is using memory via assembly

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        394
Source: 
> 
>                 // solhint-disable-next-line no-inline-assembly
>                                                     ^^^^^^^^^^^
>                 assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        446
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        451
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        457
Source: 
>      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
>      * on the return value: the return value is optional (but if data is returned, it must not be false).
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param token The token targeted by the call.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        329
Source: 
>      *
>      * If `target` reverts with a revert reason, it is bubbled up by this
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * function (like regular Solidity function calls).

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        391
Source: 
>             // Look for revert reason and bubble it up if present
>             if (returndata.length > 0) {
>                       ^^^^^^^^^^^^^^^^^^
>                 // The easiest way to bubble the revert reason is using memory via assembly

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        394
Source: 
> 
>                 // solhint-disable-next-line no-inline-assembly
>                                                     ^^^^^^^^^^^
>                 assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        446
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        451
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        457
Source: 
>      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
>      * on the return value: the return value is optional (but if data is returned, it must not be false).
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param token The token targeted by the call.

[0m

---------------------------------------------
For contract 0x8e6469c328d33956fe921efd4179c604ad79d3c4.sol
Tool Runtime = 8.683231772 seconds
#############################################