[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    UniHourglass
Line:        73
Source: 
>     bool public onlyAmbassadors = true;
>     uint256 ACTIVATION_TIME =  1600358400; // CHANGE THIS
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    UniHourglass
Line:        140
Source: 
>     uint8 constant public decimals = 18;
>     uint256 internal entryFee_ = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal transferFee_ = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    UniHourglass
Line:        141
Source: 
>     uint256 internal entryFee_ = 5;
>     uint256 internal transferFee_ = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal exitFee_ = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    UniHourglass
Line:        142
Source: 
>     uint256 internal transferFee_ = 1;
>     uint256 internal exitFee_ = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal referralFee_ = 20; // 20% of the 5% buy or sell fees makes it 1%

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    UniHourglass
Line:        143
Source: 
>     uint256 internal exitFee_ = 5;
>     uint256 internal referralFee_ = 20; // 20% of the 5% buy or sell fees makes it 1%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal maintenanceFee_ = 10; // 10% of the 5% buy or sell fees makes it 0.5%

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    UniHourglass
Line:        144
Source: 
>     uint256 internal referralFee_ = 20; // 20% of the 5% buy or sell fees makes it 1%
>     uint256 internal maintenanceFee_ = 10; // 10% of the 5% buy or sell fees makes it 0.5%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address internal maintenanceAddress1;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    UniHourglass
Line:        157
Source: 
>     uint256 internal profitPerShare_;
>     uint256 public stakingRequirement = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalHolder = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        59
Source: 
> 
>   function transferOwnership(address newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniHourglass
Line:        175
Source: 
> 
>     function updateMaintenanceAddress1(address maintenance) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(maintenance != address(0) && msg.sender == maintenanceAddress1);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniHourglass
Line:        180
Source: 
> 
>     function updateMaintenanceAddress2(address maintenance) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(maintenance != address(0) && msg.sender == maintenanceAddress2);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniHourglass
Line:        189
Source: 
> 
>     function distribute(uint256 _amount) public returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount > 0, "must be a positive value");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniHourglass
Line:        197
Source: 
> 
>     function buy(uint256 _amount, address _referredBy) public returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkAndTransferUNI(_amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniHourglass
Line:        202
Source: 
> 
>     function buyFor(uint256 _amount, address _customerAddress, address _referredBy) public returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkAndTransferUNI(_amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniHourglass
Line:        211
Source: 
> 
>     function reinvest() onlyDivis public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _customerAddress = msg.sender;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniHourglass
Line:        310
Source: 
> 
>     function setName(string memory _name) onlyOwner public
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniHourglass
Line:        315
Source: 
> 
>     function setSymbol(string memory _symbol) onlyOwner public
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniHourglass
Line:        337
Source: 
>     }
>     function myReferrals() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _customerAddress = msg.sender;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniHourglass
Line:        362
Source: 
> 
>     function calculateTokensReceived(uint256 _UNIToSpend) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _dividends = SafeMath.div(SafeMath.mul(_UNIToSpend, entryFee_), 100);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniHourglass
Line:        369
Source: 
> 
>     function calculateUNIReceived(uint256 _tokensToSell) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_tokensToSell <= tokenSupply_);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniHourglass
Line:        430
Source: 
> 
>     function getOneTimeData() public view returns(uint256, uint256, uint256, string memory, string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (entryFee_, exitFee_, decimals, name, symbol);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniHourglass
Line:        434
Source: 
> 
>     function multiData() public view returns(uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   return (

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    UniHourglass
Line:        67
Source: 
> 
> contract UniHourglass is Ownable {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniHourglass
Line:        197
Source: 
> 
>     function buy(uint256 _amount, address _referredBy) public returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkAndTransferUNI(_amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniHourglass
Line:        202
Source: 
> 
>     function buyFor(uint256 _amount, address _customerAddress, address _referredBy) public returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkAndTransferUNI(_amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniHourglass
Line:        283
Source: 
> 
>     function transfer(address _toAddress, uint256 _amountOfTokens) onlyTokenHolders external returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _customerAddress = msg.sender;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniHourglass
Line:        362
Source: 
> 
>     function calculateTokensReceived(uint256 _UNIToSpend) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _dividends = SafeMath.div(SafeMath.mul(_UNIToSpend, entryFee_), 100);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UniHourglass
Line:        310
Source: 
> 
>     function setName(string memory _name) onlyOwner public
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UniHourglass
Line:        315
Source: 
> 
>     function setSymbol(string memory _symbol) onlyOwner public
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UniHourglass
Line:        342
Source: 
> 
>     function balanceOf(address _customerAddress) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenBalanceLedger_[_customerAddress];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UniHourglass
Line:        346
Source: 
> 
>     function dividendsOf(address _customerAddress) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        395
Source: 
>         uint256 _amountOfTokens = SafeMath.sub(_incomingUNI, _undividedDividends);
>         uint256 _fee = _dividends * magnitude;
>                        ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        413
Source: 
>             tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);
>             profitPerShare_ += (_dividends * magnitude / tokenSupply_);
>                                 ^^^^^^^^^^^^^^^^^^^^^^
>             _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        414
Source: 
>             profitPerShare_ += (_dividends * magnitude / tokenSupply_);
>             _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));
>                                                       ^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        414
Source: 
>             profitPerShare_ += (_dividends * magnitude / tokenSupply_);
>             _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        421
Source: 
> 
>         int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         payoutsTo_[_customerAddress] += _updatedPayouts;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        408
Source: 
>             _dividends = SafeMath.add(_dividends, _referralBonus);
>             _fee = _dividends * magnitude;
>                    ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        13
Source: 
>     }
>     c = a * b;
>         ^^^^^
>     assert(c / a == b);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        395
Source: 
>         uint256 _amountOfTokens = SafeMath.sub(_incomingUNI, _undividedDividends);
>         uint256 _fee = _dividends * magnitude;
>                        ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        413
Source: 
>             tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);
>             profitPerShare_ += (_dividends * magnitude / tokenSupply_);
>                                 ^^^^^^^^^^^^^^^^^^^^^^
>             _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        414
Source: 
>             profitPerShare_ += (_dividends * magnitude / tokenSupply_);
>             _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));
>                                                       ^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        414
Source: 
>             profitPerShare_ += (_dividends * magnitude / tokenSupply_);
>             _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        421
Source: 
> 
>         int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         payoutsTo_[_customerAddress] += _updatedPayouts;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        408
Source: 
>             _dividends = SafeMath.add(_dividends, _referralBonus);
>             _fee = _dividends * magnitude;
>                    ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        214
Source: 
>         uint256 _dividends = myDividends(false);
>         payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);
>                                                    ^^^^^^^^^^^^^^^^^^^^^^
>         _dividends += referralBalance_[_customerAddress];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        347
Source: 
>     function dividendsOf(address _customerAddress) public view returns (uint256) {
>         return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        231
Source: 
>         uint256 _dividends = myDividends(false);
>         payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^
>         _dividends += referralBalance_[_customerAddress];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        254
Source: 
> 
>         uint256 _fee = _dividends * magnitude;
>                        ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        271
Source: 
> 
>         int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens + (_taxedUNI * magnitude));
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         payoutsTo_[_customerAddress] -= _updatedPayouts;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        271
Source: 
> 
>         int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens + (_taxedUNI * magnitude));
>                                                                                 ^^^^^^^^^^^^^^^^^^^^^
>         payoutsTo_[_customerAddress] -= _updatedPayouts;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        275
Source: 
>         if (tokenSupply_ > 0) {
>             profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);
>                                                              ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        267
Source: 
>             _dividends = SafeMath.add(_dividends, _referralBonus);
>             _fee = _dividends * magnitude;
>                    ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        300
Source: 
> 
>         payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        301
Source: 
>         payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);
>         payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        303
Source: 
> 
>         profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);
>                                                          ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniHourglass
Line:        353
Source: 
> 
>         return SafeMath.div(_UNI * SafeMath.sub(100, exitFee_), 100);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UniHourglass
Line:        235
Source: 
>         totalWithdrawn_[_customerAddress] = SafeMath.add(totalWithdrawn_[_customerAddress], _dividends);
>         erc20.transfer(_customerAddress, _dividends);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit onWithdraw(_customerAddress, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        70
Source: 
>     mapping(address => bool) internal ambassadors_;
>     uint256 constant internal ambassadorMaxPurchase_ = 1000e18; // 10k
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) internal ambassadorAccumulatedQuota_;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        73
Source: 
>     bool public onlyAmbassadors = true;
>     uint256 ACTIVATION_TIME =  1600358400; // CHANGE THIS
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        100
Source: 
> 
>     event onDistribute(
>     ^^^^^^^^^^^^^^^^^^^
>         address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        105
Source: 
> 
>     event onTokenPurchase(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        113
Source: 
> 
>     event onTokenSell(
>     ^^^^^^^^^^^^^^^^^^
>         address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        120
Source: 
> 
>     event onReinvestment(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        126
Source: 
> 
>     event onWithdraw(
>     ^^^^^^^^^^^^^^^^^
>         address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        139
Source: 
>     string public symbol = "STAKE";
>     uint8 constant public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal entryFee_ = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        147
Source: 
>     address internal maintenanceAddress2;
>     uint256 constant internal magnitude = 2 ** 64;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) internal tokenBalanceLedger_;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        212
Source: 
>     function reinvest() onlyDivis public {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _dividends = myDividends(false);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        213
Source: 
>         address _customerAddress = msg.sender;
>         uint256 _dividends = myDividends(false);
>         ^^^^^^^^^^^^^^^^^^
>         payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        217
Source: 
>         referralBalance_[_customerAddress] = 0;
>         uint256 _tokens = purchaseTokens(address(0x0), _customerAddress, _dividends);
>         ^^^^^^^^^^^^^^^
>         emit onReinvestment(_customerAddress, _dividends, _tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        222
Source: 
>     function exit() external {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _tokens = tokenBalanceLedger_[_customerAddress];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        223
Source: 
>         address _customerAddress = msg.sender;
>         uint256 _tokens = tokenBalanceLedger_[_customerAddress];
>         ^^^^^^^^^^^^^^^
>         if (_tokens > 0) sell(_tokens, address(0x0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        229
Source: 
>     function withdraw() onlyDivis public {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _dividends = myDividends(false);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        230
Source: 
>         address _customerAddress = msg.sender;
>         uint256 _dividends = myDividends(false);
>         ^^^^^^^^^^^^^^^^^^
>         payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        240
Source: 
>     function sell(uint256 _amountOfTokens,address _referredBy) onlyTokenHolders public {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        243
Source: 
> 
>         uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_amountOfTokens, exitFee_), 100);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        246
Source: 
> 
>         uint256 _maintenance = SafeMath.div(SafeMath.mul(_undividedDividends, maintenanceFee_), 100);
>         ^^^^^^^^^^^^^^^^^^^^
>         uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, referralFee_), 100);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        247
Source: 
>         uint256 _maintenance = SafeMath.div(SafeMath.mul(_undividedDividends, maintenanceFee_), 100);
>         uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, referralFee_), 100);
>         ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        249
Source: 
> 
>         uint256 _dividends = SafeMath.sub(_undividedDividends, SafeMath.add(_referralBonus,_maintenance));
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        251
Source: 
> 
>         uint256 _taxedUNI = SafeMath.sub(_amountOfTokens, _undividedDividends);
>         ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        254
Source: 
> 
>         uint256 _fee = _dividends * magnitude;
>         ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        271
Source: 
> 
>         int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens + (_taxedUNI * magnitude));
>         ^^^^^^^^^^^^^^^^^^^^^^
>         payoutsTo_[_customerAddress] -= _updatedPayouts;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        284
Source: 
>     function transfer(address _toAddress, uint256 _amountOfTokens) onlyTokenHolders external returns (bool){
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        291
Source: 
> 
>         uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);
>         ^^^^^^^^^^^^^^^^^
>         uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        292
Source: 
>         uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);
>         uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);
>         ^^^^^^^^^^^^^^^^^^^^
>         uint256 _dividends = _tokenFee;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        293
Source: 
>         uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);
>         uint256 _dividends = _tokenFee;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        329
Source: 
>     function myTokens() public view returns (uint256) {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         return balanceOf(_customerAddress);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        334
Source: 
>     function myDividends(bool _includeReferralBonus) public view returns (uint256) {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        338
Source: 
>     function myReferrals() public view returns (uint256) {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         return referralBalance_[_customerAddress];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        351
Source: 
>     function sellPrice() public view returns (uint256) {
>         uint256 _UNI = 1e18;
>         ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        357
Source: 
>     function buyPrice() public view returns (uint256) {
>         uint256 _UNI = 1e18;
>         ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        363
Source: 
>     function calculateTokensReceived(uint256 _UNIToSpend) public view returns (uint256) {
>         uint256 _dividends = SafeMath.div(SafeMath.mul(_UNIToSpend, entryFee_), 100);
>         ^^^^^^^^^^^^^^^^^^
>         uint256 _amountOfTokens = SafeMath.sub(_UNIToSpend, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        364
Source: 
>         uint256 _dividends = SafeMath.div(SafeMath.mul(_UNIToSpend, entryFee_), 100);
>         uint256 _amountOfTokens = SafeMath.sub(_UNIToSpend, _dividends);
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        371
Source: 
>         require(_tokensToSell <= tokenSupply_);
>         uint256 _dividends = SafeMath.div(SafeMath.mul(_tokensToSell, exitFee_), 100);
>         ^^^^^^^^^^^^^^^^^^
>         uint256 _taxedUNI = SafeMath.sub(_tokensToSell, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        372
Source: 
>         uint256 _dividends = SafeMath.div(SafeMath.mul(_tokensToSell, exitFee_), 100);
>         uint256 _taxedUNI = SafeMath.sub(_tokensToSell, _dividends);
>         ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        388
Source: 
> 
>         uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingUNI, entryFee_), 100);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        390
Source: 
> 
>         uint256 _maintenance = SafeMath.div(SafeMath.mul(_undividedDividends, maintenanceFee_), 100);
>         ^^^^^^^^^^^^^^^^^^^^
>         uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, referralFee_), 100);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        391
Source: 
>         uint256 _maintenance = SafeMath.div(SafeMath.mul(_undividedDividends, maintenanceFee_), 100);
>         uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, referralFee_), 100);
>         ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        393
Source: 
> 
>         uint256 _dividends = SafeMath.sub(_undividedDividends, SafeMath.add(_referralBonus,_maintenance));
>         ^^^^^^^^^^^^^^^^^^
>         uint256 _amountOfTokens = SafeMath.sub(_incomingUNI, _undividedDividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        394
Source: 
>         uint256 _dividends = SafeMath.sub(_undividedDividends, SafeMath.add(_referralBonus,_maintenance));
>         uint256 _amountOfTokens = SafeMath.sub(_incomingUNI, _undividedDividends);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _fee = _dividends * magnitude;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        395
Source: 
>         uint256 _amountOfTokens = SafeMath.sub(_incomingUNI, _undividedDividends);
>         uint256 _fee = _dividends * magnitude;
>         ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniHourglass
Line:        421
Source: 
> 
>         int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         payoutsTo_[_customerAddress] += _updatedPayouts;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniHourglass
Line:        73
Source: 
>     bool public onlyAmbassadors = true;
>     uint256 ACTIVATION_TIME =  1600358400; // CHANGE THIS
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniHourglass
Line:        75
Source: 
> 
>     modifier antiEarlyWhale(uint256 _amountOfUNI, address _customerAddress){
>                             ^^^^^^^^^^^^^^^^^^^^
>       if (now >= ACTIVATION_TIME) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniHourglass
Line:        75
Source: 
> 
>     modifier antiEarlyWhale(uint256 _amountOfUNI, address _customerAddress){
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
>       if (now >= ACTIVATION_TIME) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniHourglass
Line:        160
Source: 
>     uint256 public totalDonation = 0;
>     TOKEN erc20;
>     ^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UniHourglass
Line:        186
Source: 
>     function checkAndTransferUNI(uint256 _amount) private {
>         require(erc20.transferFrom(msg.sender, address(this), _amount) == true, "transfer must succeed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UniHourglass
Line:        235
Source: 
>         totalWithdrawn_[_customerAddress] = SafeMath.add(totalWithdrawn_[_customerAddress], _dividends);
>         erc20.transfer(_customerAddress, _dividends);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit onWithdraw(_customerAddress, _dividends);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UniHourglass
Line:        321
Source: 
>     function totalUNIBalance() public view returns (uint256) {
>         return erc20.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UniHourglass
Line:        446
Source: 
>         // [3] User UNI balance
>         erc20.balanceOf(msg.sender),
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UniHourglass
Line:        155
Source: 
>     mapping(address => uint256) public totalWithdrawn_;
>     uint256 internal tokenSupply_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal profitPerShare_;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UniHourglass
Line:        156
Source: 
>     uint256 internal tokenSupply_;
>     uint256 internal profitPerShare_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public stakingRequirement = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UniHourglass
Line:        192
Source: 
>         checkAndTransferUNI(_amount);
>         totalDonation += _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         profitPerShare_ = SafeMath.add(profitPerShare_, (_amount * magnitude) / tokenSupply_);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UniHourglass
Line:        193
Source: 
>         totalDonation += _amount;
>         profitPerShare_ = SafeMath.add(profitPerShare_, (_amount * magnitude) / tokenSupply_);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit onDistribute(msg.sender, _amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UniHourglass
Line:        77
Source: 
>       if (now >= ACTIVATION_TIME) {
>          onlyAmbassadors = false;
>          ^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UniHourglass
Line:        82
Source: 
>          require((ambassadors_[_customerAddress] == true && (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfUNI) <= ambassadorMaxPurchase_));
>          ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfUNI);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UniHourglass
Line:        85
Source: 
>       } else {
>          onlyAmbassadors = false;
>          ^^^^^^^^^^^^^^^^^^^^^^^
>          _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniHourglass
Line:        235
Source: 
>         totalWithdrawn_[_customerAddress] = SafeMath.add(totalWithdrawn_[_customerAddress], _dividends);
>         erc20.transfer(_customerAddress, _dividends);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit onWithdraw(_customerAddress, _dividends);

[0m

---------------------------------------------
For contract 0xc690d096e8e3e90e2ba8b31c70aa63d86a82a845.sol
Tool Runtime = 1221.0163109389978 seconds
#############################################