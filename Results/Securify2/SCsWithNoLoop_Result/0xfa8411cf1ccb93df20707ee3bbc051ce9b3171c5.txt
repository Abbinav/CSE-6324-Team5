[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        54
Source: 
>   }
>   function transferOwnership(address newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SCARCEsale
Line:        76
Source: 
>   
>   function startSale(address _tokenAddr) public onlyOwner { 
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(initialized == false); //Call when you are ready to start the sale

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SCARCEsale
Line:        87
Source: 
>   }
>   function goalReached() public view returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return (raisedAmount >= CAP * 1 ether);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SCARCEsale
Line:        105
Source: 
>   }
>   function tokensAvailable() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return token.balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SCARCEsale
Line:        108
Source: 
>   }
>   function endSale() onlyOwner public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 tokenBalance = token.balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SCARCEsale
Line:        76
Source: 
>   
>   function startSale(address _tokenAddr) public onlyOwner { 
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(initialized == false); //Call when you are ready to start the sale

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SCARCEsale
Line:        79
Source: 
>       token = IERC20(_tokenAddr);
>       token.approve(address(this), 115792089237316195423570985008687907853269984665640564039457584007913129639935);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    SCARCEsale
Line:        102
Source: 
>     raisedAmount = raisedAmount.add(msg.value);
>     ownerPayable.transfer(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     token.transferFrom(address(this), msg.sender, tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SCARCEsale
Line:        64
Source: 
>   IERC20 token;
>   string public constant Info = "This is the official Presale contract for SCARCE";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public constant RATE = 12; //number of tokens per ether

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        18
Source: 
> //pragma solidity >=0.6.0 <0.8.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> interface IERC20 {

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        30
Source: 
> //pragma solidity ^0.7.5;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> library SafeMath {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SCARCEsale
Line:        63
Source: 
>   using SafeMath for uint256;
>   IERC20 token;
>   ^^^^^^^^^^^^
>   string public constant Info = "This is the official Presale contract for SCARCE";

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SCARCEsale
Line:        102
Source: 
>     raisedAmount = raisedAmount.add(msg.value);
>     ownerPayable.transfer(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     token.transferFrom(address(this), msg.sender, tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SCARCEsale
Line:        102
Source: 
>     raisedAmount = raisedAmount.add(msg.value);
>     ownerPayable.transfer(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     token.transferFrom(address(this), msg.sender, tokens);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SCARCEsale
Line:        79
Source: 
>       token = IERC20(_tokenAddr);
>       token.approve(address(this), 115792089237316195423570985008687907853269984665640564039457584007913129639935);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SCARCEsale
Line:        103
Source: 
>     ownerPayable.transfer(msg.value);
>     token.transferFrom(address(this), msg.sender, tokens);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SCARCEsale
Line:        106
Source: 
>   function tokensAvailable() public view returns (uint256) {
>     return token.balanceOf(address(this));
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SCARCEsale
Line:        109
Source: 
>   function endSale() onlyOwner public {
>     uint256 tokenBalance = token.balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     token.transferFrom(address(this), owner, tokenBalance); //Tokens returned to owner wallet

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SCARCEsale
Line:        110
Source: 
>     uint256 tokenBalance = token.balanceOf(address(this));
>     token.transferFrom(address(this), owner, tokenBalance); //Tokens returned to owner wallet
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     selfdestruct(ownerPayable);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SCARCEsale
Line:        63
Source: 
>   using SafeMath for uint256;
>   IERC20 token;
>   ^^^^^^^^^^^^
>   string public constant Info = "This is the official Presale contract for SCARCE";

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    SCARCEsale
Line:        102
Source: 
>     raisedAmount = raisedAmount.add(msg.value);
>     ownerPayable.transfer(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     token.transferFrom(address(this), msg.sender, tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SCARCEsale
Line:        101
Source: 
>     uint256 tokens = weiAmount.mul(RATE);
>     raisedAmount = raisedAmount.add(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ownerPayable.transfer(msg.value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SCARCEsale
Line:        79
Source: 
>       token = IERC20(_tokenAddr);
>       token.approve(address(this), 115792089237316195423570985008687907853269984665640564039457584007913129639935);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SCARCEsale
Line:        103
Source: 
>     ownerPayable.transfer(msg.value);
>     token.transferFrom(address(this), msg.sender, tokens);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SCARCEsale
Line:        110
Source: 
>     uint256 tokenBalance = token.balanceOf(address(this));
>     token.transferFrom(address(this), owner, tokenBalance); //Tokens returned to owner wallet
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     selfdestruct(ownerPayable);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Ownable
Line:        45
Source: 
>   address public owner;
>   address payable public ownerPayable;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   constructor() public {

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SCARCEsale
Line:        64
Source: 
>   IERC20 token;
>   string public constant Info = "This is the official Presale contract for SCARCE";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public constant RATE = 12; //number of tokens per ether

[0m

---------------------------------------------
For contract 0xfa8411cf1ccb93df20707ee3bbc051ce9b3171c5.sol
Tool Runtime = 3.113227640000332 seconds
#############################################