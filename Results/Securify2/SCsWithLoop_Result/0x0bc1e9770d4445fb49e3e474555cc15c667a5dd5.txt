[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        357
Source: 
>         uint32 size;
>         assembly {
>         ^^^^^^^^^^
>             size := extcodesize(_user)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DigiExchange
Line:        176
Source: 
>     uint8 constant public _decimals = 0;
>     uint256 public _totalSupply = 1600000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public _rewardsSupply = 240000;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DigiExchange
Line:        177
Source: 
>     uint256 public _totalSupply = 1600000;
>     uint256 public _rewardsSupply = 240000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public circulatingSupply = 514538;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        254
Source: 
> 
>     function upgradeContract(address[] memory users) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint i = 0; i < users.length; i++) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        264
Source: 
> 
>     function upgradeDetails(uint256 _bp, uint256 _sp, uint256 _circSup, uint8 _currentRp, uint8 _sellRp, uint256 _crs, uint256 _srs, uint256 _commFunds) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         buyPrice = _bp;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        275
Source: 
> 
>     function stake(address _user, uint256 _tokens, uint256 nonce) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_tokens <= _balances[_user], "User dont have enough tokens to stake");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        291
Source: 
> 
>     function unStake(address _user, uint256 _tokens) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_tokens <= stakeBalanceOf[_user], "User doesnt have amount of token in stake");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        304
Source: 
> 
>     function releaseLockIn(address _user, uint256 _tokens) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_tokens <= _lockInBalances[_user], "User dont have enough balance in Tokens");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        321
Source: 
> 
>     function sell(uint256 _tokens) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_tokens > 0, "Tokens can not be zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        569
Source: 
> 
>     function releaseUserIncome(address _user, uint256 _etherAmount) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_etherAmount <= userIncomes[commissionHolder], "Not enough amount");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        578
Source: 
> 
>     function getSaleSummary(uint256 _tokens) public view returns (uint256 saleAmount){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _saleAmount = uint256(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        623
Source: 
> 
>     function getPurchaseSummary(uint256 _tokens) public view returns (uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _purchaseAmount = uint256(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        666
Source: 
> 
>     function kill(address payable addr) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        670
Source: 
> 
>     function totalCommissionFunds() public onlyAdministrators view returns (uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return commissionFunds;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        674
Source: 
> 
>     function addAdministrator(address admin) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(administrators[admin] != true, "address already exists");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        679
Source: 
> 
>     function removeAdministrator(address admin) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(administrators[admin] == true, "address not exists");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        684
Source: 
> 
>     function updateCommissionHolders(address _dev1, address _dev2, address _dev3, address _dev4, address _dev5) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dev1 = _dev1;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        692
Source: 
> 
>     function updateCommissionPercent(uint256 _percent) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         commissionPercent = _percent;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        696
Source: 
> 
>     function updateSellCommissionPercentage(uint256 _percent) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sellCommission = _percent;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        700
Source: 
> 
>     function updateTokenCommissionPercent(uint256 _percent) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenCommissionPercent = _percent;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        704
Source: 
> 
>     function getCommBalance() public view returns (uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return commissionOf[msg.sender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        708
Source: 
> 
>     function getCommBalanceAdmin(address _address) public onlyAdministrators view returns (uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return commissionOf[_address];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        712
Source: 
> 
>     function distributeCommission(uint256 _amount) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount <= commissionFunds, "Dont have enough funds to distribute");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        728
Source: 
> 
>     function upgradeContract(uint256 _dev1, uint256 _dev2, uint256 _dev3, uint256 _dev4, uint256 _dev5) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dev1Com = _dev1;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        736
Source: 
> 
>     function updateTransFeesAdd(address _address) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(dev != _address, "Address already added");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        741
Source: 
> 
>     function withdrawCommission(uint256 _amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount <= commissionOf[msg.sender], "Dont have funds to withdraw");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        748
Source: 
> 
>     function withdrawTokenCommission(address _user, uint256 _amount, uint256 nonce) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount <= _balances[commissionHolder], "Dont have enough tokens");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        755
Source: 
> 
>     function withdrawStakeEarning(address _user, uint256 _amount, uint256 nonce) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount <= _balances[stakeHolder], "Dont have enough tokens");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        762
Source: 
> 
>     function updateTokenCommHolder(address _address) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(commissionHolder != _address, "Holder already exist");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        769
Source: 
> 
>     function updateStakeHolder(address _address) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(stakeHolder != _address, "Holder already exist");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        930
Source: 
> 
>     function getBuyPrice() public view returns (uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return buyPrice;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        934
Source: 
> 
>     function getSellPrice() public view returns (uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return sellPrice;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        938
Source: 
> 
>     function name() public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _name;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        942
Source: 
> 
>     function symbol() public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _symbol;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        946
Source: 
> 
>     function decimals() public view returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _decimals;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        950
Source: 
> 
>     function totalSupply() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        954
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        958
Source: 
> 
>     function totalEthBalance() public view returns (uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(this).balance;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        962
Source: 
> 
>     function updateBuyLimit(bool limit) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         buyLimit = limit;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        966
Source: 
> 
>     function updateBuyLimitToken(uint256 _noOfTokens) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         buyLimitToken = _noOfTokens;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        970
Source: 
> 
>     function updateMinBuyToken(uint256 _tokens) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minBuyToken = _tokens;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DigiExchange
Line:        974
Source: 
> 
>     function updateLockablePercent(uint256 _percent) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         locakablePercent = _percent;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DigiExchange
Line:        317
Source: 
> 
>     function purchase(uint256 tokens) external payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         purchaseExt(msg.sender, tokens, msg.value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DigiExchange
Line:        728
Source: 
> 
>     function upgradeContract(uint256 _dev1, uint256 _dev2, uint256 _dev3, uint256 _dev4, uint256 _dev5) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dev1Com = _dev1;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DigiExchange
Line:        962
Source: 
> 
>     function updateBuyLimit(bool limit) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         buyLimit = limit;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DigiExchange
Line:        970
Source: 
> 
>     function updateMinBuyToken(uint256 _tokens) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minBuyToken = _tokens;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DigiExchange
Line:        264
Source: 
> 
>     function upgradeDetails(uint256 _bp, uint256 _sp, uint256 _circSup, uint8 _currentRp, uint8 _sellRp, uint256 _crs, uint256 _srs, uint256 _commFunds) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         buyPrice = _bp;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DigiExchange
Line:        275
Source: 
> 
>     function stake(address _user, uint256 _tokens, uint256 nonce) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_tokens <= _balances[_user], "User dont have enough tokens to stake");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DigiExchange
Line:        569
Source: 
> 
>     function releaseUserIncome(address _user, uint256 _etherAmount) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_etherAmount <= userIncomes[commissionHolder], "Not enough amount");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DigiExchange
Line:        666
Source: 
> 
>     function kill(address payable addr) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DigiExchange
Line:        684
Source: 
> 
>     function updateCommissionHolders(address _dev1, address _dev2, address _dev3, address _dev4, address _dev5) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dev1 = _dev1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DigiExchange
Line:        692
Source: 
> 
>     function updateCommissionPercent(uint256 _percent) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         commissionPercent = _percent;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DigiExchange
Line:        696
Source: 
> 
>     function updateSellCommissionPercentage(uint256 _percent) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sellCommission = _percent;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DigiExchange
Line:        700
Source: 
> 
>     function updateTokenCommissionPercent(uint256 _percent) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenCommissionPercent = _percent;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DigiExchange
Line:        708
Source: 
> 
>     function getCommBalanceAdmin(address _address) public onlyAdministrators view returns (uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return commissionOf[_address];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DigiExchange
Line:        748
Source: 
> 
>     function withdrawTokenCommission(address _user, uint256 _amount, uint256 nonce) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount <= _balances[commissionHolder], "Dont have enough tokens");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DigiExchange
Line:        755
Source: 
> 
>     function withdrawStakeEarning(address _user, uint256 _amount, uint256 nonce) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount <= _balances[stakeHolder], "Dont have enough tokens");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DigiExchange
Line:        954
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DigiExchange
Line:        966
Source: 
> 
>     function updateBuyLimitToken(uint256 _noOfTokens) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         buyLimitToken = _noOfTokens;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DigiExchange
Line:        974
Source: 
> 
>     function updateLockablePercent(uint256 _percent) public onlyAdministrators {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         locakablePercent = _percent;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        88
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        173
Source: 
> 
>     string constant public _name = "Digi Exchange";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string constant public _symbol = "DIGIX";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        174
Source: 
>     string constant public _name = "Digi Exchange";
>     string constant public _symbol = "DIGIX";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant public _decimals = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        175
Source: 
>     string constant public _symbol = "DIGIX";
>     uint8 constant public _decimals = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public _totalSupply = 1600000;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        176
Source: 
>     uint8 constant public _decimals = 0;
>     uint256 public _totalSupply = 1600000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public _rewardsSupply = 240000;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        177
Source: 
>     uint256 public _totalSupply = 1600000;
>     uint256 public _rewardsSupply = 240000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public circulatingSupply = 514538;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        221
Source: 
>     mapping(uint8 => Roadmap) public priceRoadmap;
>     mapping(address => uint256) public _lockInBalances;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        331
Source: 
>         _balances[_user] -= _tokens;
>         uint256 _commission = saleAmount.mul(sellCommission).div(10000);
>         ^^^^^^^^^^^^^^^^^^^
>         uint256 _balanceAfterCommission = saleAmount.sub(_commission);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        332
Source: 
>         uint256 _commission = saleAmount.mul(sellCommission).div(10000);
>         uint256 _balanceAfterCommission = saleAmount.sub(_commission);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 txnFees = _commission * 200 / 1000;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        362
Source: 
> 
>         uint256 _commission = _amountInEth.mul(commissionPercent).div(10000);
>         ^^^^^^^^^^^^^^^^^^^
>         uint256 _balanceEthAfterCommission = _amountInEth - _commission;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        363
Source: 
>         uint256 _commission = _amountInEth.mul(commissionPercent).div(10000);
>         uint256 _balanceEthAfterCommission = _amountInEth - _commission;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 purchaseAmount = updatePurchase(_tokens, _balanceEthAfterCommission);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        370
Source: 
>         commissionFunds += (_commission - txnFees) - userInc;
>         uint256 _tokenCommission = _tokens.mul(tokenCommissionPercent).div(1000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _tokensAfterCommission = _tokens - _tokenCommission;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        371
Source: 
>         uint256 _tokenCommission = _tokens.mul(tokenCommissionPercent).div(1000);
>         uint256 _tokensAfterCommission = _tokens - _tokenCommission;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (buyLimit) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        399
Source: 
>     function updateSale(uint256 _tokens) private returns (uint256 saleAmount){
>         uint256 _saleAmount = uint256(0);
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        401
Source: 
> 
>         Roadmap memory _roadmap = priceRoadmap[sellRoadmap];
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        403
Source: 
> 
>         uint256 _sellRoadmapUsedSupply = sellRoadmapUsedSupply;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        405
Source: 
> 
>         uint256 _balanceSupplyInCurrentRoadmap = _sellRoadmapUsedSupply;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        440
Source: 
>         uint256 noOfTokensToSell = _tokens;
>         uint256 _sellPrice = uint256(0);
>         ^^^^^^^^^^^^^^^^^^
>         for (uint8 i = sellRoadmap; i > 0; i--) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        482
Source: 
>     function updatePurchase(uint256 _tokens, uint256 _userEthAmount) private returns (uint256 purchaseAmount){
>         uint256 _purchaseAmount = uint256(0);
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        484
Source: 
> 
>         Roadmap memory _roadmap = priceRoadmap[currentRoadmap];
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        486
Source: 
> 
>         uint256 _currentRoadmapUsedSupply = currentRoadmapUsedSupply;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        488
Source: 
> 
>         uint256 _balanceSupplyInCurrentRoadmap = _currentRoadmapUsedSupply > _roadmap.supply ? _currentRoadmapUsedSupply - _roadmap.supply : _roadmap.supply - _currentRoadmapUsedSupply;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_tokens < _balanceSupplyInCurrentRoadmap) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        518
Source: 
>         uint256 noOfTokensToBuy = _tokens;
>         uint256 _buyPrice = uint256(0);
>         ^^^^^^^^^^^^^^^^^
>         for (uint8 i = currentRoadmap; i <= LAST_ROADMAP; i++) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        579
Source: 
>     function getSaleSummary(uint256 _tokens) public view returns (uint256 saleAmount){
>         uint256 _saleAmount = uint256(0);
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        581
Source: 
> 
>         Roadmap memory _roadmap = priceRoadmap[sellRoadmap];
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        583
Source: 
> 
>         uint256 _sellRoadmapUsedSupply = sellRoadmapUsedSupply;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        585
Source: 
> 
>         uint256 _balanceSupplyInCurrentRoadmap = _sellRoadmapUsedSupply;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        599
Source: 
>         uint256 noOfTokensToSell = _tokens;
>         uint256 _sellPrice = uint256(0);
>         ^^^^^^^^^^^^^^^^^^
>         for (uint8 i = sellRoadmap; i > 0; i--) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        624
Source: 
>     function getPurchaseSummary(uint256 _tokens) public view returns (uint256){
>         uint256 _purchaseAmount = uint256(0);
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        626
Source: 
> 
>         Roadmap memory _roadmap = priceRoadmap[currentRoadmap];
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        628
Source: 
> 
>         uint256 _currentRoadmapUsedSupply = currentRoadmapUsedSupply;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        630
Source: 
> 
>         uint256 _balanceSupplyInCurrentRoadmap = _currentRoadmapUsedSupply > _roadmap.supply ? _currentRoadmapUsedSupply - _roadmap.supply : _roadmap.supply - _currentRoadmapUsedSupply;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_tokens < _balanceSupplyInCurrentRoadmap) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DigiExchange
Line:        642
Source: 
>         uint256 noOfTokensToBuy = _tokens;
>         uint256 _buyPrice = uint256(0);
>         ^^^^^^^^^^^^^^^^^
>         for (uint8 i = currentRoadmap; i <= LAST_ROADMAP; i++) {

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity >=0.5.6 <0.6.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        182
Source: 
> 
>     address commissionHolder;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     address stakeHolder;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        183
Source: 
>     address commissionHolder;
>     address stakeHolder;
>     ^^^^^^^^^^^^^^^^^^^
>     uint256 commissionFunds = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        184
Source: 
>     address stakeHolder;
>     uint256 commissionFunds = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public commissionPercent = 400;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        198
Source: 
>     uint256 public locakablePercent = 750;
>     bool buyLimit = true;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint256 buyLimitToken = 2100;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        199
Source: 
>     bool buyLimit = true;
>     uint256 buyLimitToken = 2100;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 minBuyToken = 10;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        200
Source: 
>     uint256 buyLimitToken = 2100;
>     uint256 minBuyToken = 10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        202
Source: 
> 
>     address dev; //Backend Operation
>     ^^^^^^^^^^^
>     address dev1; //  Operations

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        203
Source: 
>     address dev; //Backend Operation
>     address dev1; //  Operations
>     ^^^^^^^^^^^^
>     address dev2; // Research Funds

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        204
Source: 
>     address dev1; //  Operations
>     address dev2; // Research Funds
>     ^^^^^^^^^^^^
>     address dev3; //Marketing

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        205
Source: 
>     address dev2; // Research Funds
>     address dev3; //Marketing
>     ^^^^^^^^^^^^
>     address dev4; // Development

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        206
Source: 
>     address dev3; //Marketing
>     address dev4; // Development
>     ^^^^^^^^^^^^
>     address dev5; //Compliance

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        207
Source: 
>     address dev4; // Development
>     address dev5; //Compliance
>     ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        209
Source: 
> 
>     uint256 dev1Com;
>     ^^^^^^^^^^^^^^^
>     uint256 dev2Com;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        210
Source: 
>     uint256 dev1Com;
>     uint256 dev2Com;
>     ^^^^^^^^^^^^^^^
>     uint256 dev3Com;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        211
Source: 
>     uint256 dev2Com;
>     uint256 dev3Com;
>     ^^^^^^^^^^^^^^^
>     uint256 dev4Com;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        212
Source: 
>     uint256 dev3Com;
>     uint256 dev4Com;
>     ^^^^^^^^^^^^^^^
>     uint256 dev5Com;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        213
Source: 
>     uint256 dev4Com;
>     uint256 dev5Com;
>     ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        216
Source: 
> 
>     mapping(address => uint256) commissionOf;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) userIncomes;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DigiExchange
Line:        217
Source: 
>     mapping(address => uint256) commissionOf;
>     mapping(address => uint256) userIncomes;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) private _balances;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        176
Source: 
>     uint8 constant public _decimals = 0;
>     uint256 public _totalSupply = 1600000;
>                                   ^^^^^^^
>     uint256 public _rewardsSupply = 240000;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        241
Source: 
>         createRoadmap();
>         buyPrice = 867693750000000;
>                    ^^^^^^^^^^^^^^^
>         sellPrice = 867688750000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        242
Source: 
>         buyPrice = 867693750000000;
>         sellPrice = 867688750000000;
>                     ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        779
Source: 
>         Roadmap memory roadmap = Roadmap({
>         supply : 100000,
>                  ^^^^^^
>         startPrice : 0.00027 ether,

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        781
Source: 
>         startPrice : 0.00027 ether,
>         incPrice : 0.00000000125 ether
>                    ^^^^^^^^^^^^^^^^^^^
>         });

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        787
Source: 
>         roadmap = Roadmap({
>         supply : 400000,
>                  ^^^^^^
>         startPrice : 0.00039499975 ether,

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        789
Source: 
>         startPrice : 0.00039499975 ether,
>         incPrice : 0.000000001 ether
>                    ^^^^^^^^^^^^^^^^^
>         });

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        795
Source: 
>         roadmap = Roadmap({
>         supply : 100000,
>                  ^^^^^^
>         startPrice : 0.00079500375 ether,

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        797
Source: 
>         startPrice : 0.00079500375 ether,
>         incPrice : 0.000000005 ether
>                    ^^^^^^^^^^^^^^^^^
>         });

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        803
Source: 
>         roadmap = Roadmap({
>         supply : 100000,
>                  ^^^^^^
>         startPrice : 0.00129500875 ether,

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        805
Source: 
>         startPrice : 0.00129500875 ether,
>         incPrice : 0.00000001 ether
>                    ^^^^^^^^^^^^^^^^
>         });

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        811
Source: 
>         roadmap = Roadmap({
>         supply : 100000,
>                  ^^^^^^
>         startPrice : 0.00229501875 ether,

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        813
Source: 
>         startPrice : 0.00229501875 ether,
>         incPrice : 0.00000002 ether
>                    ^^^^^^^^^^^^^^^^
>         });

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        821
Source: 
>         startPrice : 0.00429504375 ether,
>         incPrice : 0.000000045 ether
>                    ^^^^^^^^^^^^^^^^^
>         });

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        829
Source: 
>         startPrice : 0.00834507875 ether,
>         incPrice : 0.00000008 ether
>                    ^^^^^^^^^^^^^^^^
>         });

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        837
Source: 
>         startPrice : 0.01554517875 ether,
>         incPrice : 0.00000018 ether
>                    ^^^^^^^^^^^^^^^^
>         });

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        845
Source: 
>         startPrice : 0.02814534875 ether,
>         incPrice : 0.00000035 ether
>                    ^^^^^^^^^^^^^^^^
>         });

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        853
Source: 
>         startPrice : 0.052645748750 ether,
>         incPrice : 0.00000075 ether
>                    ^^^^^^^^^^^^^^^^
>         });

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        861
Source: 
>         startPrice : 0.10514679875 ether,
>         incPrice : 0.0000018 ether
>                    ^^^^^^^^^^^^^^^
>         });

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        869
Source: 
>         startPrice : 0.21314779875 ether,
>         incPrice : 0.0000028 ether
>                    ^^^^^^^^^^^^^^^
>         });

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DigiExchange
Line:        877
Source: 
>         startPrice : 0.38115099875 ether,
>         incPrice : 0.000006 ether
>                    ^^^^^^^^^^^^^^
>         });

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DigiExchange
Line:        925
Source: 
>     function sendBalanceAmount(address _receiver, uint256 _amount) private {
>         if (!address(uint160(_receiver)).send(_amount)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             address(uint160(_receiver)).transfer(_amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DigiExchange
Line:        926
Source: 
>         if (!address(uint160(_receiver)).send(_amount)) {
>             address(uint160(_receiver)).transfer(_amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    DigiExchange
Line:        925
Source: 
>     function sendBalanceAmount(address _receiver, uint256 _amount) private {
>         if (!address(uint160(_receiver)).send(_amount)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             address(uint160(_receiver)).transfer(_amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    DigiExchange
Line:        926
Source: 
>         if (!address(uint160(_receiver)).send(_amount)) {
>             address(uint160(_receiver)).transfer(_amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DigiExchange
Line:        925
Source: 
>     function sendBalanceAmount(address _receiver, uint256 _amount) private {
>         if (!address(uint160(_receiver)).send(_amount)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             address(uint160(_receiver)).transfer(_amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DigiExchange
Line:        926
Source: 
>         if (!address(uint160(_receiver)).send(_amount)) {
>             address(uint160(_receiver)).transfer(_amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DigiExchange
Line:        360
Source: 
>         }
>         require(size == 0, "cannot be a contract");
>                 ^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    DigiExchange
Line:        203
Source: 
>     address dev; //Backend Operation
>     address dev1; //  Operations
>     ^^^^^^^^^^^^
>     address dev2; // Research Funds

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    DigiExchange
Line:        204
Source: 
>     address dev1; //  Operations
>     address dev2; // Research Funds
>     ^^^^^^^^^^^^
>     address dev3; //Marketing

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    DigiExchange
Line:        205
Source: 
>     address dev2; // Research Funds
>     address dev3; //Marketing
>     ^^^^^^^^^^^^
>     address dev4; // Development

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    DigiExchange
Line:        206
Source: 
>     address dev3; //Marketing
>     address dev4; // Development
>     ^^^^^^^^^^^^
>     address dev5; //Compliance

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    DigiExchange
Line:        207
Source: 
>     address dev4; // Development
>     address dev5; //Compliance
>     ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    DigiExchange
Line:        209
Source: 
> 
>     uint256 dev1Com;
>     ^^^^^^^^^^^^^^^
>     uint256 dev2Com;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    DigiExchange
Line:        210
Source: 
>     uint256 dev1Com;
>     uint256 dev2Com;
>     ^^^^^^^^^^^^^^^
>     uint256 dev3Com;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    DigiExchange
Line:        211
Source: 
>     uint256 dev2Com;
>     uint256 dev3Com;
>     ^^^^^^^^^^^^^^^
>     uint256 dev4Com;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    DigiExchange
Line:        212
Source: 
>     uint256 dev3Com;
>     uint256 dev4Com;
>     ^^^^^^^^^^^^^^^
>     uint256 dev5Com;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    DigiExchange
Line:        213
Source: 
>     uint256 dev4Com;
>     uint256 dev5Com;
>     ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    DigiExchange
Line:        925
Source: 
>     function sendBalanceAmount(address _receiver, uint256 _amount) private {
>         if (!address(uint160(_receiver)).send(_amount)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             address(uint160(_receiver)).transfer(_amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    DigiExchange
Line:        926
Source: 
>         if (!address(uint160(_receiver)).send(_amount)) {
>             address(uint160(_receiver)).transfer(_amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        300
Source: 
>     function lockInExt(address _user, uint256 _tokens) private {
>         _lockInBalances[_user] += _tokens;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalLockInTokens += _tokens;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        301
Source: 
>         _lockInBalances[_user] += _tokens;
>         totalLockInTokens += _tokens;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        367
Source: 
>         uint256 userInc = _commission * 100 / 10000;
>         commissionOf[dev] += txnFees;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         userIncomes[commissionHolder] += userInc;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        368
Source: 
>         commissionOf[dev] += txnFees;
>         userIncomes[commissionHolder] += userInc;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         commissionFunds += (_commission - txnFees) - userInc;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        369
Source: 
>         userIncomes[commissionHolder] += userInc;
>         commissionFunds += (_commission - txnFees) - userInc;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _tokenCommission = _tokens.mul(tokenCommissionPercent).div(1000);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        374
Source: 
>             uint256 lockableTokens = _tokensAfterCommission.mul(locakablePercent).div(1000);
>             _balances[commissionHolder] += _tokenCommission;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _balances[_user] += _tokensAfterCommission - lockableTokens;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        375
Source: 
>             _balances[commissionHolder] += _tokenCommission;
>             _balances[_user] += _tokensAfterCommission - lockableTokens;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             lockInExt(_user, lockableTokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        384
Source: 
>         } else {
>             _balances[commissionHolder] += _tokenCommission;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _balances[_user] += _tokens - _tokenCommission;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        385
Source: 
>             _balances[commissionHolder] += _tokenCommission;
>             _balances[_user] += _tokens - _tokenCommission;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        493
Source: 
> 
>             sellPrice = buyPrice + (_tokens * _roadmap.incPrice) - _roadmap.incPrice;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             buyPrice = buyPrice + (_tokens * _roadmap.incPrice);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        494
Source: 
>             sellPrice = buyPrice + (_tokens * _roadmap.incPrice) - _roadmap.incPrice;
>             buyPrice = buyPrice + (_tokens * _roadmap.incPrice);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        496
Source: 
> 
>             currentRoadmapUsedSupply += _tokens;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             sellRoadmapUsedSupply = currentRoadmapUsedSupply;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        497
Source: 
>             currentRoadmapUsedSupply += _tokens;
>             sellRoadmapUsedSupply = currentRoadmapUsedSupply;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             circulatingSupply += _tokens;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        498
Source: 
>             sellRoadmapUsedSupply = currentRoadmapUsedSupply;
>             circulatingSupply += _tokens;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             sellRoadmap = currentRoadmap;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        499
Source: 
>             circulatingSupply += _tokens;
>             sellRoadmap = currentRoadmap;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return _purchaseAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        506
Source: 
> 
>             sellPrice = buyPrice + (_tokens * _roadmap.incPrice) - _roadmap.incPrice;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             buyPrice = priceRoadmap[currentRoadmap + 1].startPrice;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        507
Source: 
>             sellPrice = buyPrice + (_tokens * _roadmap.incPrice) - _roadmap.incPrice;
>             buyPrice = priceRoadmap[currentRoadmap + 1].startPrice;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             currentRoadmapUsedSupply = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        508
Source: 
>             buyPrice = priceRoadmap[currentRoadmap + 1].startPrice;
>             currentRoadmapUsedSupply = 0;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             sellRoadmapUsedSupply = priceRoadmap[currentRoadmap].supply;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        509
Source: 
>             currentRoadmapUsedSupply = 0;
>             sellRoadmapUsedSupply = priceRoadmap[currentRoadmap].supply;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             currentRoadmap += 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        510
Source: 
>             sellRoadmapUsedSupply = priceRoadmap[currentRoadmap].supply;
>             currentRoadmap += 1;
>             ^^^^^^^^^^^^^^^^^^^
>             sellRoadmap = currentRoadmap;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        511
Source: 
>             currentRoadmap += 1;
>             sellRoadmap = currentRoadmap;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             circulatingSupply += _tokens;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        512
Source: 
>             sellRoadmap = currentRoadmap;
>             circulatingSupply += _tokens;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return _purchaseAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        537
Source: 
>                 if (noOfTokensToBuy == 1) {
>                     sellPrice = priceRoadmap[i - 1].startPrice + (priceRoadmap[i - 1].supply * priceRoadmap[i - 1].incPrice) - priceRoadmap[i - 1].incPrice;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     buyPrice = priceRoadmap[i].startPrice + (noOfTokensToBuy * priceRoadmap[i].incPrice);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        538
Source: 
>                     sellPrice = priceRoadmap[i - 1].startPrice + (priceRoadmap[i - 1].supply * priceRoadmap[i - 1].incPrice) - priceRoadmap[i - 1].incPrice;
>                     buyPrice = priceRoadmap[i].startPrice + (noOfTokensToBuy * priceRoadmap[i].incPrice);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     sellRoadmapUsedSupply = priceRoadmap[i - 1].supply;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        539
Source: 
>                     buyPrice = priceRoadmap[i].startPrice + (noOfTokensToBuy * priceRoadmap[i].incPrice);
>                     sellRoadmapUsedSupply = priceRoadmap[i - 1].supply;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     sellRoadmap = i - 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        540
Source: 
>                     sellRoadmapUsedSupply = priceRoadmap[i - 1].supply;
>                     sellRoadmap = i - 1;
>                     ^^^^^^^^^^^^^^^^^^^
>                 } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        549
Source: 
> 
>                 currentRoadmap = i;
>                 ^^^^^^^^^^^^^^^^^^
>                 currentRoadmapUsedSupply = noOfTokensToBuy;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        550
Source: 
>                 currentRoadmap = i;
>                 currentRoadmapUsedSupply = noOfTokensToBuy;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 circulatingSupply += _tokens;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        551
Source: 
>                 currentRoadmapUsedSupply = noOfTokensToBuy;
>                 circulatingSupply += _tokens;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return _purchaseAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        542
Source: 
>                 } else {
>                     sellPrice = _buyPrice + (noOfTokensToBuy * _roadmap.incPrice) - _roadmap.incPrice;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     buyPrice = _buyPrice + (noOfTokensToBuy * _roadmap.incPrice);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        543
Source: 
>                     sellPrice = _buyPrice + (noOfTokensToBuy * _roadmap.incPrice) - _roadmap.incPrice;
>                     buyPrice = _buyPrice + (noOfTokensToBuy * _roadmap.incPrice);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     sellRoadmapUsedSupply = noOfTokensToBuy;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        544
Source: 
>                     buyPrice = _buyPrice + (noOfTokensToBuy * _roadmap.incPrice);
>                     sellRoadmapUsedSupply = noOfTokensToBuy;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     sellRoadmap = i;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        545
Source: 
>                     sellRoadmapUsedSupply = noOfTokensToBuy;
>                     sellRoadmap = i;
>                     ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        556
Source: 
>                 require(_purchaseAmount <= _userEthAmount, "Dont have sufficient balance to purchase");
>                 sellPrice = _buyPrice + (noOfTokensToBuy * _roadmap.incPrice) - _roadmap.incPrice;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 buyPrice = priceRoadmap[i + 1].startPrice;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        557
Source: 
>                 sellPrice = _buyPrice + (noOfTokensToBuy * _roadmap.incPrice) - _roadmap.incPrice;
>                 buyPrice = priceRoadmap[i + 1].startPrice;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 currentRoadmapUsedSupply = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        558
Source: 
>                 buyPrice = priceRoadmap[i + 1].startPrice;
>                 currentRoadmapUsedSupply = 0;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 sellRoadmapUsedSupply = priceRoadmap[i].supply;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        559
Source: 
>                 currentRoadmapUsedSupply = 0;
>                 sellRoadmapUsedSupply = priceRoadmap[i].supply;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 circulatingSupply += _tokens;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        560
Source: 
>                 sellRoadmapUsedSupply = priceRoadmap[i].supply;
>                 circulatingSupply += _tokens;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 currentRoadmap = i + 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        561
Source: 
>                 circulatingSupply += _tokens;
>                 currentRoadmap = i + 1;
>                 ^^^^^^^^^^^^^^^^^^^^^^
>                 sellRoadmap = i;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DigiExchange
Line:        562
Source: 
>                 currentRoadmap = i + 1;
>                 sellRoadmap = i;
>                 ^^^^^^^^^^^^^^^
>                 return _purchaseAmount;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DigiExchange
Line:        177
Source: 
>     uint256 public _totalSupply = 1600000;
>     uint256 public _rewardsSupply = 240000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public circulatingSupply = 514538;

[0m

---------------------------------------------
For contract 0x0bc1e9770d4445fb49e3e474555cc15c667a5dd5.sol
Tool Runtime = 23.20590264400016 seconds
#############################################