pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AINTERCHAIN
Line:        96
Source: 
>   uint256 _totalSupply = 	300000000 * (10   **   18);
>   uint256 public basePercent = 100;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        73
Source: 
> 
>   function name() public view returns(string memory) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _name;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        77
Source: 
> 
>   function symbol() public view returns(string memory) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _symbol;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        81
Source: 
> 
>   function decimals() public view returns(uint8) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _decimals;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AINTERCHAIN
Line:        108
Source: 
> 
>   function balanceOf(address owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _balances[owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AINTERCHAIN
Line:        128
Source: 
> 
>   function allowance(address owner, address spender) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _allowed[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AINTERCHAIN
Line:        134
Source: 
> 
>   function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AINTERCHAIN
Line:        146
Source: 
> 
>   function approve(address spender, uint256 value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AINTERCHAIN
Line:        155
Source: 
>   }
>     function totalSupply() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AINTERCHAIN
Line:        160
Source: 
> 
>   function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AINTERCHAIN
Line:        169
Source: 
> 
>   function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AINTERCHAIN
Line:        187
Source: 
> 
>   function transferFrom(address from, address to, uint256 value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(value <= _balances[from]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    AINTERCHAIN
Line:        86
Source: 
> 
> contract AINTERCHAIN is ERC20Detailed {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AINTERCHAIN
Line:        102
Source: 
> 
>   function findOnePercent(uint256 value) public view returns (uint256)  {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 BolivianPowder = value.ceil(basePercent);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AINTERCHAIN
Line:        134
Source: 
> 
>   function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AINTERCHAIN
Line:        160
Source: 
> 
>   function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AINTERCHAIN
Line:        169
Source: 
> 
>   function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AINTERCHAIN
Line:        182
Source: 
> 
>   function burn(uint256 amount) external {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _burn(msg.sender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AINTERCHAIN
Line:        108
Source: 
> 
>   function balanceOf(address owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _balances[owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AINTERCHAIN
Line:        128
Source: 
> 
>   function allowance(address owner, address spender) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _allowed[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AINTERCHAIN
Line:        146
Source: 
> 
>   function approve(address spender, uint256 value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        33
Source: 
>     }
>     uint256 CIKKY = ATOM * BOB;
>                     ^^^^^^^^^^
>     assert(CIKKY / ATOM == BOB);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        67
Source: 
> 
>   constructor(string memory name, string memory symbol, uint8 decimals) public {
>               ^^^^^^^^^^^^^^^^^^
>     _name = name;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        67
Source: 
> 
>   constructor(string memory name, string memory symbol, uint8 decimals) public {
>                                   ^^^^^^^^^^^^^^^^^^^^
>     _name = name;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        67
Source: 
> 
>   constructor(string memory name, string memory symbol, uint8 decimals) public {
>                                                         ^^^^^^^^^^^^^^
>     _name = name;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SafeMath
Line:        33
Source: 
>     }
>     uint256 CIKKY = ATOM * BOB;
>     ^^^^^^^^^^^^^
>     assert(CIKKY / ATOM == BOB);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SafeMath
Line:        39
Source: 
>   function div(uint256 ALAMA, uint256 BALAMA) internal pure returns (uint256) {
>     uint256 CAK = ALAMA / BALAMA;
>     ^^^^^^^^^^^
>     return CAK;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SafeMath
Line:        49
Source: 
>   function add(uint256 ARPHY, uint256 BOOBY) internal pure returns (uint256) {
>     uint256 CORT = ARPHY + BOOBY;
>     ^^^^^^^^^^^^
>     assert(CORT >= ARPHY);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SafeMath
Line:        55
Source: 
>   function ceil(uint256 AL, uint256 MAMMA) internal pure returns (uint256) {
>     uint256 CL = add(AL,MAMMA);
>     ^^^^^^^^^^
>     uint256 DICK = sub(CL,1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SafeMath
Line:        56
Source: 
>     uint256 CL = add(AL,MAMMA);
>     uint256 DICK = sub(CL,1);
>     ^^^^^^^^^^^^
>     return mul(div(DICK,MAMMA),MAMMA);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AINTERCHAIN
Line:        92
Source: 
> 
>   string constant tokenName = "interchain.exchange";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string constant tokenSymbol = "KEX";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AINTERCHAIN
Line:        93
Source: 
>   string constant tokenName = "interchain.exchange";
>   string constant tokenSymbol = "KEX";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint8  constant tokenDecimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AINTERCHAIN
Line:        94
Source: 
>   string constant tokenSymbol = "KEX";
>   uint8  constant tokenDecimals = 18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 _totalSupply = 	300000000 * (10   **   18);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AINTERCHAIN
Line:        103
Source: 
>   function findOnePercent(uint256 value) public view returns (uint256)  {
>     uint256 BolivianPowder = value.ceil(basePercent);
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint256 Cac = BolivianPowder.mul(basePercent).div(10000);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AINTERCHAIN
Line:        104
Source: 
>     uint256 BolivianPowder = value.ceil(basePercent);
>     uint256 Cac = BolivianPowder.mul(basePercent).div(10000);
>     ^^^^^^^^^^^
>     return Cac;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AINTERCHAIN
Line:        194
Source: 
> 
>     uint256 CAKEWALK = findOnePercent(value);
>     ^^^^^^^^^^^^^^^^
>     uint256 NIGA = value.sub(CAKEWALK);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AINTERCHAIN
Line:        195
Source: 
>     uint256 CAKEWALK = findOnePercent(value);
>     uint256 NIGA = value.sub(CAKEWALK);
>     ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        14
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AINTERCHAIN
Line:        92
Source: 
> 
>   string constant tokenName = "interchain.exchange";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string constant tokenSymbol = "KEX";

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AINTERCHAIN
Line:        93
Source: 
>   string constant tokenName = "interchain.exchange";
>   string constant tokenSymbol = "KEX";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint8  constant tokenDecimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AINTERCHAIN
Line:        94
Source: 
>   string constant tokenSymbol = "KEX";
>   uint8  constant tokenDecimals = 18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 _totalSupply = 	300000000 * (10   **   18);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AINTERCHAIN
Line:        95
Source: 
>   uint8  constant tokenDecimals = 18;
>   uint256 _totalSupply = 	300000000 * (10   **   18);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public basePercent = 100;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    AINTERCHAIN
Line:        95
Source: 
>   uint8  constant tokenDecimals = 18;
>   uint256 _totalSupply = 	300000000 * (10   **   18);
>                           ^^^^^^^^^
>   uint256 public basePercent = 100;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AINTERCHAIN
Line:        218
Source: 
>     require(amount <= _balances[account]);
>     _totalSupply = _totalSupply.sub(amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _balances[account] = _balances[account].sub(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AINTERCHAIN
Line:        219
Source: 
>     _totalSupply = _totalSupply.sub(amount);
>     _balances[account] = _balances[account].sub(amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Transfer(account, address(0), amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AINTERCHAIN
Line:        149
Source: 
>     
>     _allowed[msg.sender][spender] = value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AINTERCHAIN
Line:        163
Source: 
>     
>     _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AINTERCHAIN
Line:        171
Source: 
>     require(spender != address(0));
>     _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);

[0m

---------------------------------------------
For contract 0xfee3d089590625e16681cf87483d455b39f4715b.sol
Tool Runtime = 5.275988378999955 seconds
#############################################