pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    YFM
Line:        118
Source: 
>   function totalSupply() public view returns (uint256) {
>     return _totalSupply;
>                       ^^
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        78
Source: 
> 
>   function name() public view returns(string memory) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _name;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        82
Source: 
> 
>   function symbol() public view returns(string memory) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _symbol;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        86
Source: 
> 
>   function decimals() public view returns(uint8) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _decimals;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFM
Line:        125
Source: 
> 
>   function allowance(address owner, address spender) public view returns (uint256) {
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _allowed[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFM
Line:        129
Source: 
> 
>   function findOnePercent(uint256 value) public view returns (uint256)  {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 roundValue = value.ceil(basePercent);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFM
Line:        130
Source: 
>   function findOnePercent(uint256 value) public view returns (uint256)  {
>     uint256 roundValue = value.ceil(basePercent);
>                                            ^^^^^^
>     uint256 onePercent = roundValue.mul(basePercent).div(10000);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFM
Line:        158
Source: 
> 
>   function approve(address spender, uint256 value) public returns (bool) {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFM
Line:        165
Source: 
> 
>   function transferFrom(address from, address to, uint256 value) public returns (bool) {
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(value <= _balances[from]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFM
Line:        170
Source: 
> 
>     _balances[from] = _balances[from].sub(value);
>                                   ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFM
Line:        189
Source: 
>     _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
>     emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFM
Line:        196
Source: 
>     _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
>     emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    YFM
Line:        108
Source: 
>   string constant tokenName = "YFMoney.Finance";
>   string constant tokenSymbol = "YFM";
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint8  constant tokenDecimals = 18;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YFM
Line:        135
Source: 
> 
>   function transfer(address to, uint256 value) public returns (bool) {
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(value <= _balances[msg.sender]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YFM
Line:        158
Source: 
> 
>   function approve(address spender, uint256 value) public returns (bool) {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YFM
Line:        189
Source: 
>     _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
>     emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YFM
Line:        196
Source: 
>     _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
>     emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YFM
Line:        213
Source: 
>     require(amount <= _balances[account]);
>     _totalSupply = _totalSupply.sub(amount);
>                                    ^^^^^^^^^
>     _balances[account] = _balances[account].sub(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YFM
Line:        129
Source: 
> 
>   function findOnePercent(uint256 value) public view returns (uint256)  {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 roundValue = value.ceil(basePercent);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YFM
Line:        130
Source: 
>   function findOnePercent(uint256 value) public view returns (uint256)  {
>     uint256 roundValue = value.ceil(basePercent);
>                                            ^^^^^^
>     uint256 onePercent = roundValue.mul(basePercent).div(10000);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YFM
Line:        165
Source: 
> 
>   function transferFrom(address from, address to, uint256 value) public returns (bool) {
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(value <= _balances[from]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        38
Source: 
>     }
>     uint256 c = a * b;
>                 ^^^^^
>     assert(c / a == b);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        72
Source: 
> 
>   constructor(string memory name, string memory symbol, uint8 decimals) public {
>               ^^^^^^^^^^^^^^^^^^
>     _name = name;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        72
Source: 
> 
>   constructor(string memory name, string memory symbol, uint8 decimals) public {
>                                   ^^^^^^^^^^^^^^^^^^^^
>     _name = name;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        72
Source: 
> 
>   constructor(string memory name, string memory symbol, uint8 decimals) public {
>                                                         ^^^^^^^^^^^^^^
>     _name = name;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YFM
Line:        113
Source: 
> 
>   constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _mint(msg.sender, _totalSupply);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YFM
Line:        113
Source: 
> 
>   constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {
>                                                                                 ^^^^^
>     _mint(msg.sender, _totalSupply);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YFM
Line:        114
Source: 
>   constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {
>     _mint(msg.sender, _totalSupply);
>                                  ^^^
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        19
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    YFM
Line:        109
Source: 
>   string constant tokenSymbol = "YFM";
>   uint8  constant tokenDecimals = 18;
>                                    ^^
>   uint256 _totalSupply = 90000000000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    YFM
Line:        113
Source: 
> 
>   constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _mint(msg.sender, _totalSupply);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    YFM
Line:        113
Source: 
> 
>   constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {
>                                                                                 ^^^^^
>     _mint(msg.sender, _totalSupply);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    YFM
Line:        114
Source: 
>   constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {
>     _mint(msg.sender, _totalSupply);
>                                  ^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    YFM
Line:        117
Source: 
> 
>   function totalSupply() public view returns (uint256) {
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    YFM
Line:        118
Source: 
>   function totalSupply() public view returns (uint256) {
>     return _totalSupply;
>                       ^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    YFM
Line:        117
Source: 
> 
>   function totalSupply() public view returns (uint256) {
>                                                     ^^^^
>     return _totalSupply;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YFM
Line:        219
Source: 
>   function burnFrom(address account, uint256 amount) external {
>     require(amount <= _allowed[account][msg.sender]);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YFM
Line:        220
Source: 
>     require(amount <= _allowed[account][msg.sender]);
>     _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _burn(account, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YFM
Line:        167
Source: 
>     require(value <= _balances[from]);
>     require(value <= _allowed[from][msg.sender]);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(to != address(0));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YFM
Line:        193
Source: 
> 
>   function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YFM
Line:        201
Source: 
>   function _mint(address account, uint256 amount) internal {
>     require(amount != 0);
>   ^^^^^^^^^^^^^^^^^^^^^^^
>     _balances[account] = _balances[account].add(amount);

[0m

---------------------------------------------
For contract 0xacfb5a0cc16e1cc0e0d4f42d8bc42996f491b901.sol
Tool Runtime = 5.324212808000084 seconds
#############################################