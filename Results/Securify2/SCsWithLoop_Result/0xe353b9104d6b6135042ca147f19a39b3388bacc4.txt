pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DirectMigration
Line:        176
Source: 
>         // change lengths back to count
>         assembly{mstore(protos, count)}
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly{mstore(qualities, count)}

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DirectMigration
Line:        177
Source: 
>         assembly{mstore(protos, count)}
>         assembly{mstore(qualities, count)}
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DirectMigration
Line:        129
Source: 
> 
>     function multiMigrate() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         while (gasleft() > 3000000) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DirectMigration
Line:        140
Source: 
>         address owner = first;
>         uint last = old.totalSupply();
>                     ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DirectMigration
Line:        181
Source: 
>         if (count <= threshold) {
>             newStart = cards.mintCards(first, protos, qualities);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DirectMigration
Line:        183
Source: 
>         } else {
>             newStart = cards.batchMintCards(first, protos, qualities);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    DirectMigration
Line:        137
Source: 
>         uint start = migrated;
>         address first = old.ownerOf(start);
>                         ^^^^^^^^^^^^^^^^^^
>         current = start;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    DirectMigration
Line:        162
Source: 
>         for (uint i = 0; i < size; i++) {
>             (im.proto, im.purity) = old.getCard(start+i);
>                                     ^^^^^^^^^^^^^^^^^^^^
>             im.p = convertProto(im.proto);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    DirectMigration
Line:        166
Source: 
>             if (im.p > 377) {
>                 im.id = cards.mintCard(first, im.p, im.q);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit NonGenesisMigrated(first, start + i, im.id);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    DirectMigration
Line:        147
Source: 
>             }
>             owner = old.ownerOf(current);
>                     ^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DirectMigration
Line:        194
Source: 
> 
>     function convertPurity(uint16 purity) public pure returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return uint8(4 - (purity / 1000));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DirectMigration
Line:        137
Source: 
>         uint start = migrated;
>         address first = old.ownerOf(start);
>                         ^^^^^^^^^^^^^^^^^^
>         current = start;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DirectMigration
Line:        140
Source: 
>         address owner = first;
>         uint last = old.totalSupply();
>                     ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DirectMigration
Line:        162
Source: 
>         for (uint i = 0; i < size; i++) {
>             (im.proto, im.purity) = old.getCard(start+i);
>                                     ^^^^^^^^^^^^^^^^^^^^
>             im.p = convertProto(im.proto);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DirectMigration
Line:        166
Source: 
>             if (im.p > 377) {
>                 im.id = cards.mintCard(first, im.p, im.q);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit NonGenesisMigrated(first, start + i, im.id);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DirectMigration
Line:        181
Source: 
>         if (count <= threshold) {
>             newStart = cards.mintCards(first, protos, qualities);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DirectMigration
Line:        183
Source: 
>         } else {
>             newStart = cards.batchMintCards(first, protos, qualities);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DirectMigration
Line:        147
Source: 
>             }
>             owner = old.ownerOf(current);
>                     ^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DirectMigration
Line:        103
Source: 
> 
>     uint threshold;
>     ^^^^^^^^^^^^^^
>     OldToken old;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DirectMigration
Line:        104
Source: 
>     uint threshold;
>     OldToken old;
>     ^^^^^^^^^^^^
>     ICards cards;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DirectMigration
Line:        105
Source: 
>     OldToken old;
>     ICards cards;
>     ^^^^^^^^^^^^
>     uint limit;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DirectMigration
Line:        106
Source: 
>     ICards cards;
>     uint limit;
>     ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DirectMigration
Line:        130
Source: 
>     function multiMigrate() public {
>         while (gasleft() > 3000000) {
>                            ^^^^^^^
>             activatedMigration();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DirectMigration
Line:        137
Source: 
>         uint start = migrated;
>         address first = old.ownerOf(start);
>                         ^^^^^^^^^^^^^^^^^^
>         current = start;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DirectMigration
Line:        140
Source: 
>         address owner = first;
>         uint last = old.totalSupply();
>                     ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DirectMigration
Line:        147
Source: 
>             }
>             owner = old.ownerOf(current);
>                     ^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DirectMigration
Line:        162
Source: 
>         for (uint i = 0; i < size; i++) {
>             (im.proto, im.purity) = old.getCard(start+i);
>                                     ^^^^^^^^^^^^^^^^^^^^
>             im.p = convertProto(im.proto);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DirectMigration
Line:        166
Source: 
>             if (im.p > 377) {
>                 im.id = cards.mintCard(first, im.p, im.q);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit NonGenesisMigrated(first, start + i, im.id);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DirectMigration
Line:        181
Source: 
>         if (count <= threshold) {
>             newStart = cards.mintCards(first, protos, qualities);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DirectMigration
Line:        183
Source: 
>         } else {
>             newStart = cards.batchMintCards(first, protos, qualities);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DirectMigration
Line:        162
Source: 
>         for (uint i = 0; i < size; i++) {
>             (im.proto, im.purity) = old.getCard(start+i);
>              ^^
>             im.p = convertProto(im.proto);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    DirectMigration
Line:        127
Source: 
> 
>     uint public migrated;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DirectMigration
Line:        186
Source: 
> 
>         migrated = current;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DirectMigration
Line:        162
Source: 
>         for (uint i = 0; i < size; i++) {
>             (im.proto, im.purity) = old.getCard(start+i);
>                                     ^^^^^^^^^^^^^^^^^^^^
>             im.p = convertProto(im.proto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DirectMigration
Line:        166
Source: 
>             if (im.p > 377) {
>                 im.id = cards.mintCard(first, im.p, im.q);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit NonGenesisMigrated(first, start + i, im.id);

[0m

---------------------------------------------
For contract 0xe353b9104d6b6135042ca147f19a39b3388bacc4.sol
Tool Runtime = 5.348284390000117 seconds
#############################################