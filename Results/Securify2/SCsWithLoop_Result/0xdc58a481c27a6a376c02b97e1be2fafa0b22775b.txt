[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        226
Source: 
> 
>     function setGovernance(address _governance) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        231
Source: 
> 
>     function setOperator(address _operator) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        236
Source: 
> 
>     function setVotingConfig(address poolAddress, uint256 votingItem, uint64 minValue, uint64 maxValue, uint256 starttime, uint256 endtime) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        247
Source: 
> 
>     function setStakeGovernancePool(address _stakeGovernancePool) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        252
Source: 
> 
>     function setPoolVotingValueBitRanges(address poolAddress, uint8 leftBitRange, uint8 rightBitRange) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        272
Source: 
>     // for VIP: multiply by 100 for more precise
>     function averageVotingValueX100(address poolAddress, uint256 votingItem) public view returns (uint64) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (numVoters[poolAddress][votingItem] == 0) return 0; // no votes

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        301
Source: 
> 
>     function verifyOfflineVote(address poolAddress, uint256 votingItem, uint64 votingValue, uint256 timestamp, address voter, uint8 v, bytes32 r, bytes32 s) public pure returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 signatureHash = keccak256(abi.encodePacked(voter, poolAddress, votingItem, votingValue, timestamp));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        307
Source: 
>     // if more than 200 voters participate, we may need to replace a weak (low power) voter by a stronger (high power) one
>     function replaceVoter(address poolAddress, uint256 votingItem, uint8 voterIndex, address newVoter) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance || msg.sender == operator, "!governance && !operator");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        319
Source: 
> 
>     function vote(address poolAddress, uint256 votingItem, uint64 votingValue) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp >= votingStarttimes[poolAddress][votingItem], "voting is not open yet");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        374
Source: 
> 
>     function votingValueGovernance(address poolAddress, uint256 votingItem, uint16) public view returns (uint16) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return averageVotingValue(poolAddress, votingItem);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        264
Source: 
>         // hasn't any staking power
>         if (rewards.stakingPower(account) == 0) return false;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        313
Source: 
>         address currentVoter = voters[poolAddress][votingItem][voterIndex];
>         require(rewards.stakingPower(currentVoter) < rewards.stakingPower(newVoter), "newVoter does not have high power than currentVoter");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isInTopVoters[poolAddress][votingItem][currentVoter] = false;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        313
Source: 
>         address currentVoter = voters[poolAddress][votingItem][voterIndex];
>         require(rewards.stakingPower(currentVoter) < rewards.stakingPower(newVoter), "newVoter does not have high power than currentVoter");
>                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isInTopVoters[poolAddress][votingItem][currentVoter] = false;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        381
Source: 
>         require(msg.sender == governance, "!governance");
>         token.transfer(governance, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        279
Source: 
>             address voter = voters[poolAddress][votingItem][i];
>             totalStakingPower = totalStakingPower.add(rewards.stakingPower(voter));
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalWeightedVotingValue = totalWeightedVotingValue.add(rewards.stakingPower(voter).mul(voter2VotingValue[poolAddress][votingItem][voter]));

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        280
Source: 
>             totalStakingPower = totalStakingPower.add(rewards.stakingPower(voter));
>             totalWeightedVotingValue = totalWeightedVotingValue.add(rewards.stakingPower(voter).mul(voter2VotingValue[poolAddress][votingItem][voter]));
>                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        294
Source: 
>             address voter = voters[poolAddress][votingItem][i];
>             totalStakingPower = totalStakingPower.add(rewards.stakingPower(voter));
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint64 votingValueByBits = (voter2VotingValue[poolAddress][votingItem][voter] >> rightBitRange) & bitmask;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        296
Source: 
>             uint64 votingValueByBits = (voter2VotingValue[poolAddress][votingItem][voter] >> rightBitRange) & bitmask;
>             totalWeightedVotingValue = totalWeightedVotingValue.add(rewards.stakingPower(voter).mul(votingValueByBits));
>                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        360
Source: 
>             address voter = voters[stakeGovernancePool][POOL_REWARD_SUPPLY_INFLATION_RATE_VOTE_ITEM][i];
>             totalFarmingPower = totalFarmingPower.add(farmingPool.stakingPower(voter));
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalStakingPower = totalStakingPower.add(stakingPool.stakingPower(voter));

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        361
Source: 
>             totalFarmingPower = totalFarmingPower.add(farmingPool.stakingPower(voter));
>             totalStakingPower = totalStakingPower.add(stakingPool.stakingPower(voter));
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint64 votingValueByBits = (voter2VotingValue[stakeGovernancePool][POOL_REWARD_SUPPLY_INFLATION_RATE_VOTE_ITEM][voter] >> rightBitRange) & bitmask;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        363
Source: 
>             uint64 votingValueByBits = (voter2VotingValue[stakeGovernancePool][POOL_REWARD_SUPPLY_INFLATION_RATE_VOTE_ITEM][voter] >> rightBitRange) & bitmask;
>             totalWeightedFarmingVotingValue = totalWeightedFarmingVotingValue.add(farmingPool.stakingPower(voter).mul(votingValueByBits));
>                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalWeightedStakingVotingValue = totalWeightedStakingVotingValue.add(stakingPool.stakingPower(voter).mul(votingValueByBits));

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        364
Source: 
>             totalWeightedFarmingVotingValue = totalWeightedFarmingVotingValue.add(farmingPool.stakingPower(voter).mul(votingValueByBits));
>             totalWeightedStakingVotingValue = totalWeightedStakingVotingValue.add(stakingPool.stakingPower(voter).mul(votingValueByBits));
>                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        226
Source: 
> 
>     function setGovernance(address _governance) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        231
Source: 
> 
>     function setOperator(address _operator) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        247
Source: 
> 
>     function setStakeGovernancePool(address _stakeGovernancePool) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        258
Source: 
> 
>     function isVotable(address poolAddress, address account, uint256 votingItem) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (block.timestamp < votingStarttimes[poolAddress][votingItem]) return false; // vote is not open yet

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        319
Source: 
> 
>     function vote(address poolAddress, uint256 votingItem, uint64 votingValue) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp >= votingStarttimes[poolAddress][votingItem], "voting is not open yet");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        236
Source: 
> 
>     function setVotingConfig(address poolAddress, uint256 votingItem, uint64 minValue, uint64 maxValue, uint256 starttime, uint256 endtime) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        252
Source: 
> 
>     function setPoolVotingValueBitRanges(address poolAddress, uint8 leftBitRange, uint8 rightBitRange) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        286
Source: 
>     // multiply by 100 for more precise
>     function averageVotingValueByBitsX100(address poolAddress, uint256 votingItem, uint8 leftBitRange, uint8 rightBitRange) public view returns (uint64) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (numVoters[poolAddress][votingItem] == 0) return 0; // no votes

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        301
Source: 
> 
>     function verifyOfflineVote(address poolAddress, uint256 votingItem, uint64 votingValue, uint256 timestamp, address voter, uint8 v, bytes32 r, bytes32 s) public pure returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 signatureHash = keccak256(abi.encodePacked(voter, poolAddress, votingItem, votingValue, timestamp));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        339
Source: 
> 
>     function averageVotingValue(address poolAddress, uint256) public view returns (uint16) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint8 numInflationVoters = numVoters[stakeGovernancePool][POOL_REWARD_SUPPLY_INFLATION_RATE_VOTE_ITEM];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        374
Source: 
> 
>     function votingValueGovernance(address poolAddress, uint256 votingItem, uint16) public view returns (uint16) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return averageVotingValue(poolAddress, votingItem);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        379
Source: 
>     // governance can drain tokens that are sent here by mistake
>     function emergencyERC20Drain(ERC20 token, uint amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        88
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        371
Source: 
>         if (avgValue > 20) return 120;
>         return 20 + avgValue * 5;
>                     ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        313
Source: 
>         address currentVoter = voters[poolAddress][votingItem][voterIndex];
>         require(rewards.stakingPower(currentVoter) < rewards.stakingPower(newVoter), "newVoter does not have high power than currentVoter");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isInTopVoters[poolAddress][votingItem][currentVoter] = false;

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        313
Source: 
>         address currentVoter = voters[poolAddress][votingItem][voterIndex];
>         require(rewards.stakingPower(currentVoter) < rewards.stakingPower(newVoter), "newVoter does not have high power than currentVoter");
>                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isInTopVoters[poolAddress][votingItem][currentVoter] = false;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        8
Source: 
> //pragma solidity 0.5.17;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        187
Source: 
> 
>     mapping(address => uint8) poolVotingValueLeftBitRanges; // poolAddress -> left bit range
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint8) poolVotingValueRightBitRanges; // poolAddress -> right bit range

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        188
Source: 
>     mapping(address => uint8) poolVotingValueLeftBitRanges; // poolAddress -> left bit range
>     mapping(address => uint8) poolVotingValueRightBitRanges; // poolAddress -> right bit range
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        264
Source: 
>         // hasn't any staking power
>         if (rewards.stakingPower(account) == 0) return false;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        279
Source: 
>             address voter = voters[poolAddress][votingItem][i];
>             totalStakingPower = totalStakingPower.add(rewards.stakingPower(voter));
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalWeightedVotingValue = totalWeightedVotingValue.add(rewards.stakingPower(voter).mul(voter2VotingValue[poolAddress][votingItem][voter]));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        280
Source: 
>             totalStakingPower = totalStakingPower.add(rewards.stakingPower(voter));
>             totalWeightedVotingValue = totalWeightedVotingValue.add(rewards.stakingPower(voter).mul(voter2VotingValue[poolAddress][votingItem][voter]));
>                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        294
Source: 
>             address voter = voters[poolAddress][votingItem][i];
>             totalStakingPower = totalStakingPower.add(rewards.stakingPower(voter));
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint64 votingValueByBits = (voter2VotingValue[poolAddress][votingItem][voter] >> rightBitRange) & bitmask;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        296
Source: 
>             uint64 votingValueByBits = (voter2VotingValue[poolAddress][votingItem][voter] >> rightBitRange) & bitmask;
>             totalWeightedVotingValue = totalWeightedVotingValue.add(rewards.stakingPower(voter).mul(votingValueByBits));
>                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        313
Source: 
>         address currentVoter = voters[poolAddress][votingItem][voterIndex];
>         require(rewards.stakingPower(currentVoter) < rewards.stakingPower(newVoter), "newVoter does not have high power than currentVoter");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isInTopVoters[poolAddress][votingItem][currentVoter] = false;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        313
Source: 
>         address currentVoter = voters[poolAddress][votingItem][voterIndex];
>         require(rewards.stakingPower(currentVoter) < rewards.stakingPower(newVoter), "newVoter does not have high power than currentVoter");
>                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isInTopVoters[poolAddress][votingItem][currentVoter] = false;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        360
Source: 
>             address voter = voters[stakeGovernancePool][POOL_REWARD_SUPPLY_INFLATION_RATE_VOTE_ITEM][i];
>             totalFarmingPower = totalFarmingPower.add(farmingPool.stakingPower(voter));
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalStakingPower = totalStakingPower.add(stakingPool.stakingPower(voter));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        361
Source: 
>             totalFarmingPower = totalFarmingPower.add(farmingPool.stakingPower(voter));
>             totalStakingPower = totalStakingPower.add(stakingPool.stakingPower(voter));
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint64 votingValueByBits = (voter2VotingValue[stakeGovernancePool][POOL_REWARD_SUPPLY_INFLATION_RATE_VOTE_ITEM][voter] >> rightBitRange) & bitmask;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        363
Source: 
>             uint64 votingValueByBits = (voter2VotingValue[stakeGovernancePool][POOL_REWARD_SUPPLY_INFLATION_RATE_VOTE_ITEM][voter] >> rightBitRange) & bitmask;
>             totalWeightedFarmingVotingValue = totalWeightedFarmingVotingValue.add(farmingPool.stakingPower(voter).mul(votingValueByBits));
>                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalWeightedStakingVotingValue = totalWeightedStakingVotingValue.add(stakingPool.stakingPower(voter).mul(votingValueByBits));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    YFVVIPVoteV2
Line:        364
Source: 
>             totalWeightedFarmingVotingValue = totalWeightedFarmingVotingValue.add(farmingPool.stakingPower(voter).mul(votingValueByBits));
>             totalWeightedStakingVotingValue = totalWeightedStakingVotingValue.add(stakingPool.stakingPower(voter).mul(votingValueByBits));
>                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        381
Source: 
>         require(msg.sender == governance, "!governance");
>         token.transfer(governance, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        381
Source: 
>         require(msg.sender == governance, "!governance");
>         token.transfer(governance, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        240
Source: 
>         require(starttime < endtime, "Invalid time range");
>         require(endtime > block.timestamp, "Endtime has passed");
>                           ^^^^^^^^^^^^^^^
>         votingValueMinimums[poolAddress][votingItem] = minValue;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        259
Source: 
>     function isVotable(address poolAddress, address account, uint256 votingItem) public view returns (bool) {
>         if (block.timestamp < votingStarttimes[poolAddress][votingItem]) return false; // vote is not open yet
>             ^^^^^^^^^^^^^^^
>         if (block.timestamp > votingEndtimes[poolAddress][votingItem]) return false; // vote is closed

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    YFVVIPVoteV2
Line:        260
Source: 
>         if (block.timestamp < votingStarttimes[poolAddress][votingItem]) return false; // vote is not open yet
>         if (block.timestamp > votingEndtimes[poolAddress][votingItem]) return false; // vote is closed
>             ^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    YFVVIPVoteV2
Line:        320
Source: 
>     function vote(address poolAddress, uint256 votingItem, uint64 votingValue) public {
>         require(block.timestamp >= votingStarttimes[poolAddress][votingItem], "voting is not open yet");
>                 ^^^^^^^^^^^^^^^
>         require(block.timestamp <= votingEndtimes[poolAddress][votingItem], "voting is closed");

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    YFVVIPVoteV2
Line:        321
Source: 
>         require(block.timestamp >= votingStarttimes[poolAddress][votingItem], "voting is not open yet");
>         require(block.timestamp <= votingEndtimes[poolAddress][votingItem], "voting is closed");
>                 ^^^^^^^^^^^^^^^
>         if (votingValueMinimums[poolAddress][votingItem] > 0 || votingValueMaximums[poolAddress][votingItem] > 0) {

[0m

---------------------------------------------
For contract 0xdc58a481c27a6a376c02b97e1be2fafa0b22775b.sol
Tool Runtime = 93.00693960400031 seconds
#############################################