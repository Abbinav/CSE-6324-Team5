pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        218
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { size := extcodesize(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return size > 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        327
Source: 
>      */
>     function token() public view returns (IERC20) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _token;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        334
Source: 
>      */
>     function beneficiary() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _beneficiary;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        341
Source: 
>      */
>     function releaseTime() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _releaseTime;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        348
Source: 
>      */
>     function release() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // solhint-disable-next-line not-rely-on-time

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BeneficiaryOperations
Line:        419
Source: 
> 
>     function beneficiariesCount() public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return beneficiaries.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BeneficiaryOperations
Line:        423
Source: 
> 
>     function allOperationsCount() public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allOperations.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BeneficiaryOperations
Line:        614
Source: 
>     */
>     function cancelPending(bytes32 operation) public onlyAnyBeneficiary {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BeneficiaryOperations
Line:        634
Source: 
> 
>     function cancelAllPending() public onlyManyBeneficiaries {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        _cancelAllPending();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BeneficiaryOperations
Line:        646
Source: 
>     */
>     function transferBeneficiaryShip(address[] memory newBeneficiaries) public {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         transferBeneficiaryShipWithHowMany(newBeneficiaries, newBeneficiaries.length);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        327
Source: 
>      */
>     function token() public view returns (IERC20) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _token;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        334
Source: 
>      */
>     function beneficiary() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _beneficiary;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        341
Source: 
>      */
>     function releaseTime() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _releaseTime;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        348
Source: 
>      */
>     function release() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // solhint-disable-next-line not-rely-on-time

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BeneficiaryOperations
Line:        419
Source: 
> 
>     function beneficiariesCount() public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return beneficiaries.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BeneficiaryOperations
Line:        423
Source: 
> 
>     function allOperationsCount() public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allOperations.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BeneficiaryOperations
Line:        614
Source: 
>     */
>     function cancelPending(bytes32 operation) public onlyAnyBeneficiary {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BeneficiaryOperations
Line:        634
Source: 
> 
>     function cancelAllPending() public onlyManyBeneficiaries {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        _cancelAllPending();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkropolisTimeLock
Line:        722
Source: 
> 
>         function pendingBeneficiary() public view returns (address) {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return _pendingBeneficiary;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkropolisTimeLock
Line:        731
Source: 
>         */
>         function transferBeneficiaryShipWithHowMany(address[] memory _newBeneficiaries, uint256 _newHowManyBeneficiariesDecide) public {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             super.transferBeneficiaryShipWithHowMany(_newBeneficiaries, _newHowManyBeneficiariesDecide);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkropolisTimeLock
Line:        741
Source: 
> 
>         function transferBeneficiaryShip(address[] memory _newBeneficiaries) public {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             super.transferBeneficiaryShip(_newBeneficiaries);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkropolisTimeLock
Line:        750
Source: 
>         */
>         function changeBeneficiary(address _newBeneficiary) public onlyManyBeneficiaries {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _setPendingBeneficiary(_newBeneficiary);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkropolisTimeLock
Line:        757
Source: 
>         */
>         function claimBeneficiary() public onlyPendingBeneficiary {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _changeBeneficiary(_pendingBeneficiary);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenTimelock
Line:        352
Source: 
> 
>         uint256 amount = _token.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount > 0, "TokenTimelock: no tokens to release");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SafeERC20
Line:        286
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        286
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        646
Source: 
>     */
>     function transferBeneficiaryShip(address[] memory newBeneficiaries) public {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         transferBeneficiaryShipWithHowMany(newBeneficiaries, newBeneficiaries.length);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AkropolisTimeLock
Line:        731
Source: 
>         */
>         function transferBeneficiaryShipWithHowMany(address[] memory _newBeneficiaries, uint256 _newHowManyBeneficiariesDecide) public {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             super.transferBeneficiaryShipWithHowMany(_newBeneficiaries, _newHowManyBeneficiariesDecide);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AkropolisTimeLock
Line:        741
Source: 
> 
>         function transferBeneficiaryShip(address[] memory _newBeneficiaries) public {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             super.transferBeneficiaryShip(_newBeneficiaries);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AkropolisTimeLock
Line:        750
Source: 
>         */
>         function changeBeneficiary(address _newBeneficiary) public onlyManyBeneficiaries {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _setPendingBeneficiary(_newBeneficiary);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BeneficiaryOperations
Line:        414
Source: 
> 
>     function isExistBeneficiary(address wallet) public view returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return beneficiariesIndices[wallet] > 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TokenTimelock
Line:        316
Source: 
> 
>     constructor (IERC20 token, address beneficiary, uint256 releaseTime) public {
>                  ^^^^^^^^^^^^
>         // solhint-disable-next-line not-rely-on-time

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TokenTimelock
Line:        316
Source: 
> 
>     constructor (IERC20 token, address beneficiary, uint256 releaseTime) public {
>                                ^^^^^^^^^^^^^^^^^^^
>         // solhint-disable-next-line not-rely-on-time

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TokenTimelock
Line:        316
Source: 
> 
>     constructor (IERC20 token, address beneficiary, uint256 releaseTime) public {
>                                                     ^^^^^^^^^^^^^^^^^^^
>         // solhint-disable-next-line not-rely-on-time

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AkropolisTimeLock
Line:        701
Source: 
> 
>         constructor (IERC20 _token, uint256 _releaseTime) public
>                                ^^^^^^^^^^^^^
>             TokenTimelock(_token, msg.sender, _releaseTime) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AkropolisTimeLock
Line:        701
Source: 
> 
>         constructor (IERC20 _token, uint256 _releaseTime) public
>                                               ^^^^^^^^^^^^^^^^^^
>             TokenTimelock(_token, msg.sender, _releaseTime) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AkropolisTimeLock
Line:        709
Source: 
>         */
>         modifier onlyExistingBeneficiary(address _beneficiary) {
>                                                    ^^^^^^^^^^^^^
>             require(isExistBeneficiary(_beneficiary), "address is not in beneficiary array");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        8
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BeneficiaryOperations
Line:        459
Source: 
>         if (checkHowManyBeneficiaries(1)) {
>             bool update = (insideCallSender == address(0));
>             ^^^^^^^^^^^
>             if (update) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BeneficiaryOperations
Line:        477
Source: 
>         if (checkHowManyBeneficiaries(howManyBeneficiariesDecide)) {
>             bool update = (insideCallSender == address(0));
>             ^^^^^^^^^^^
>             if (update) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BeneficiaryOperations
Line:        495
Source: 
>         if (checkHowManyBeneficiaries(beneficiaries.length)) {
>             bool update = (insideCallSender == address(0));
>             ^^^^^^^^^^^
>             if (update) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BeneficiaryOperations
Line:        511
Source: 
>     */
>     modifier onlySomeBeneficiaries(uint howMany) {
>                                    ^^^^^^^^^^^^
>         require(howMany > 0, "onlySomeBeneficiaries: howMany argument is zero");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BeneficiaryOperations
Line:        516
Source: 
>         if (checkHowManyBeneficiaries(howMany)) {
>             bool update = (insideCallSender == address(0));
>             ^^^^^^^^^^^
>             if (update) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AkropolisTimeLock
Line:        689
Source: 
> 
>         address private _pendingBeneficiary;
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AkropolisTimeLock
Line:        709
Source: 
>         */
>         modifier onlyExistingBeneficiary(address _beneficiary) {
>                                                    ^^^^^^^^^^^^^
>             require(isExistBeneficiary(_beneficiary), "address is not in beneficiary array");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenTimelock
Line:        352
Source: 
> 
>         uint256 amount = _token.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount > 0, "TokenTimelock: no tokens to release");

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        219
Source: 
>         assembly { size := extcodesize(account) }
>         return size > 0;
>                ^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        383
Source: 
> 
>     uint256 public beneficiariesGeneration;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public howManyBeneficiariesDecide;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        387
Source: 
>     bytes32[] public allOperations;
>     address internal insideCallSender;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal insideCallCount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        388
Source: 
>     address internal insideCallSender;
>     uint256 internal insideCallCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        383
Source: 
> 
>     uint256 public beneficiariesGeneration;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public howManyBeneficiariesDecide;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        387
Source: 
>     bytes32[] public allOperations;
>     address internal insideCallSender;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal insideCallCount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        388
Source: 
>     address internal insideCallSender;
>     uint256 internal insideCallCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AkropolisTimeLock
Line:        689
Source: 
> 
>         address private _pendingBeneficiary;
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        444
Source: 
> 
>         allOperations.length = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         //delete operations count for beneficiary

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        447
Source: 
>         for (uint8 j = 0; j < beneficiaries.length; j++) {
>             operationsCountByBeneficiaryIndex[j] = 0;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        461
Source: 
>             if (update) {
>                 insideCallSender = msg.sender;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 insideCallCount = 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        462
Source: 
>                 insideCallSender = msg.sender;
>                 insideCallCount = 1;
>                 ^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        479
Source: 
>             if (update) {
>                 insideCallSender = msg.sender;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 insideCallCount = howManyBeneficiariesDecide;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        480
Source: 
>                 insideCallSender = msg.sender;
>                 insideCallCount = howManyBeneficiariesDecide;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        484
Source: 
>             if (update) {
>                 insideCallSender = address(0);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 insideCallCount = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        485
Source: 
>                 insideCallSender = address(0);
>                 insideCallCount = 0;
>                 ^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        479
Source: 
>             if (update) {
>                 insideCallSender = msg.sender;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 insideCallCount = howManyBeneficiariesDecide;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        480
Source: 
>                 insideCallSender = msg.sender;
>                 insideCallCount = howManyBeneficiariesDecide;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        668
Source: 
>             require(beneficiariesIndices[newBeneficiaries[i]] == 0, "transferBeneficiaryShipWithHowMany: beneficiaries array contains duplicates");
>             beneficiariesIndices[newBeneficiaries[i]] = uint8(i.add(1));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        672
Source: 
>         emit BeneficiaryshipTransferred(beneficiaries, howManyBeneficiariesDecide, newBeneficiaries, newHowManyBeneficiariesDecide);
>         beneficiaries = newBeneficiaries;
>                   ^^^^^^^^^^^^^^^^^^^^^^^
>         howManyBeneficiariesDecide = newHowManyBeneficiariesDecide;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        673
Source: 
>         beneficiaries = newBeneficiaries;
>         howManyBeneficiariesDecide = newHowManyBeneficiariesDecide;
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        677
Source: 
>        
>         beneficiariesGeneration++;
>                   ^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        484
Source: 
>             if (update) {
>                 insideCallSender = address(0);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 insideCallCount = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        485
Source: 
>                 insideCallSender = address(0);
>                 insideCallCount = 0;
>                 ^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        444
Source: 
> 
>         allOperations.length = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         //delete operations count for beneficiary

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        447
Source: 
>         for (uint8 j = 0; j < beneficiaries.length; j++) {
>             operationsCountByBeneficiaryIndex[j] = 0;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        594
Source: 
>         if (index < allOperations.length - 1) { // Not last
>             allOperations[index] = allOperations[allOperations.length.sub(1)];
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             allOperationsIndicies[allOperations[index]] = index;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        595
Source: 
>             allOperations[index] = allOperations[allOperations.length.sub(1)];
>             allOperationsIndicies[allOperations[index]] = index;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        597
Source: 
>         }
>         allOperations.length = allOperations.length.sub(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        600
Source: 
>         uint8 beneficiaryIndex = uint8(operationsByBeneficiaryIndex[operation]);
>         operationsCountByBeneficiaryIndex[beneficiaryIndex] = uint8(operationsCountByBeneficiaryIndex[beneficiaryIndex].sub(1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        461
Source: 
>             if (update) {
>                 insideCallSender = msg.sender;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 insideCallCount = 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        462
Source: 
>                 insideCallSender = msg.sender;
>                 insideCallCount = 1;
>                 ^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        479
Source: 
>             if (update) {
>                 insideCallSender = msg.sender;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 insideCallCount = howManyBeneficiariesDecide;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        480
Source: 
>                 insideCallSender = msg.sender;
>                 insideCallCount = howManyBeneficiariesDecide;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        484
Source: 
>             if (update) {
>                 insideCallSender = address(0);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 insideCallCount = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        485
Source: 
>                 insideCallSender = address(0);
>                 insideCallCount = 0;
>                 ^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        479
Source: 
>             if (update) {
>                 insideCallSender = msg.sender;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 insideCallCount = howManyBeneficiariesDecide;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        480
Source: 
>                 insideCallSender = msg.sender;
>                 insideCallCount = howManyBeneficiariesDecide;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        668
Source: 
>             require(beneficiariesIndices[newBeneficiaries[i]] == 0, "transferBeneficiaryShipWithHowMany: beneficiaries array contains duplicates");
>             beneficiariesIndices[newBeneficiaries[i]] = uint8(i.add(1));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        672
Source: 
>         emit BeneficiaryshipTransferred(beneficiaries, howManyBeneficiariesDecide, newBeneficiaries, newHowManyBeneficiariesDecide);
>         beneficiaries = newBeneficiaries;
>                   ^^^^^^^^^^^^^^^^^^^^^^^
>         howManyBeneficiariesDecide = newHowManyBeneficiariesDecide;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        673
Source: 
>         beneficiaries = newBeneficiaries;
>         howManyBeneficiariesDecide = newHowManyBeneficiariesDecide;
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        677
Source: 
>        
>         beneficiariesGeneration++;
>                   ^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        484
Source: 
>             if (update) {
>                 insideCallSender = address(0);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 insideCallCount = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        485
Source: 
>                 insideCallSender = address(0);
>                 insideCallCount = 0;
>                 ^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AkropolisTimeLock
Line:        772
Source: 
>         function _setPendingBeneficiary(address _newBeneficiary) internal onlyExistingBeneficiary(_newBeneficiary) {
>             _pendingBeneficiary = _newBeneficiary;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit LogBeneficiaryTransferProposed(_newBeneficiary);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        479
Source: 
>             if (update) {
>                 insideCallSender = msg.sender;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 insideCallCount = howManyBeneficiariesDecide;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        480
Source: 
>                 insideCallSender = msg.sender;
>                 insideCallCount = howManyBeneficiariesDecide;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        484
Source: 
>             if (update) {
>                 insideCallSender = address(0);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 insideCallCount = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BeneficiaryOperations
Line:        485
Source: 
>                 insideCallSender = address(0);
>                 insideCallCount = 0;
>                 ^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        252
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        259
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        264
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        283
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        286
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        252
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        259
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        264
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        252
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        259
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        264
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TokenTimelock
Line:        318
Source: 
>         // solhint-disable-next-line not-rely-on-time
>         require(releaseTime > block.timestamp, "TokenTimelock: release time is before current time");
>                               ^^^^^^^^^^^^^^^
>         _token = token;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TokenTimelock
Line:        350
Source: 
>         // solhint-disable-next-line not-rely-on-time
>         require(block.timestamp >= _releaseTime, "TokenTimelock: current time is before release time");
>                 ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TokenTimelock
Line:        318
Source: 
>         // solhint-disable-next-line not-rely-on-time
>         require(releaseTime > block.timestamp, "TokenTimelock: release time is before current time");
>                               ^^^^^^^^^^^^^^^
>         _token = token;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    TokenTimelock
Line:        350
Source: 
>         // solhint-disable-next-line not-rely-on-time
>         require(block.timestamp >= _releaseTime, "TokenTimelock: current time is before release time");
>                 ^^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0xe422c577fe8debbec1c3b1ae5774c3b259a2ee76.sol
Tool Runtime = 142.97880020599405 seconds
#############################################