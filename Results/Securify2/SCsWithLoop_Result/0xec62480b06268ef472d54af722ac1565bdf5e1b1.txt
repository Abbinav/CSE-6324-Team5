[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    RicardianLLC
Line:        51
Source: 
>     event ApprovalForAll(address indexed holder, address indexed operator, bool approved);
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event UpdateMasterOperatingAgreement(uint256 indexed version, string indexed masterOperatingAgreement);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    RicardianLLC
Line:        51
Source: 
>     event ApprovalForAll(address indexed holder, address indexed operator, bool approved);
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
>                                                                                     ^^
>     event UpdateMasterOperatingAgreement(uint256 indexed version, string indexed masterOperatingAgreement);

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    RicardianLLC
Line:        61
Source: 
>         supportsInterface[0x80ac58cd] = true; // ERC721 
>         supportsInterface[0x5b5e139f] = true; // METADATA
>                                       ^^^^^^^^^^^^^^^^^^^
>         supportsInterface[0x780e9d63] = true; // ENUMERABLE

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    RicardianLLC
Line:        66
Source: 
>     function approve(address spender, uint256 tokenId) external {
>         require(msg.sender == ownerOf[tokenId] || isApprovedForAll[ownerOf[tokenId]][msg.sender], "!owner/operator");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         getApproved[tokenId] = spender;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    RicardianLLC
Line:        103
Source: 
>     function transfer(address to, uint256 tokenId) external {
>         require(msg.sender == ownerOf[tokenId], "!owner");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, tokenId);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    RicardianLLC
Line:        103
Source: 
>     function transfer(address to, uint256 tokenId) external {
>         require(msg.sender == ownerOf[tokenId], "!owner");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, tokenId);

[0m
Traceback (most recent call last):
  File "securify/__main__.py", line 286, in <module>
    main()
  File "securify/__main__.py", line 282, in main
    exclude_contracts=args.exclude_contracts)
  File "/sec/securify/analyses/analysis.py", line 148, in print_pattern_matches
    msg = format_match(analysis_context, pattern, match, include_contracts=include_contracts, exclude_contracts=exclude_contracts)
  File "/sec/securify/analyses/analysis.py", line 211, in format_match
    "^" * min(location.length, len(src_lines[line]) - indicator_offset - 2)
IndexError: list index out of range

---------------------------------------------
For contract 0xec62480b06268ef472d54af722ac1565bdf5e1b1.sol
Tool Runtime = 3.81468235300008 seconds
#############################################