pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        288
Source: 
>     // Voken
>     IVoken public VOKEN = IVoken(0x82070415FEe803f94Ce5617Be1878503e58F0a6a);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        297
Source: 
>     // Referral rewards, 35% for 15 levels
>     uint16 private WHITELIST_REF_REWARDS_PCT_SUM = 35;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint16[15] private WHITELIST_REF_REWARDS_PCT = [

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        298
Source: 
>     uint16 private WHITELIST_REF_REWARDS_PCT_SUM = 35;
>     uint16[15] private WHITELIST_REF_REWARDS_PCT = [
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         6,  // 6% for Level.1

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        317
Source: 
>     // Wei & Gas
>     uint72 private WEI_MIN = 0.1 ether;     // 0.1 Ether Minimum
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint72 private WEI_MAX = 100 ether;     // 100 Ether Maximum

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        318
Source: 
>     uint72 private WEI_MIN = 0.1 ether;     // 0.1 Ether Minimum
>     uint72 private WEI_MAX = 100 ether;     // 100 Ether Maximum
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint72 private WEI_BONUS = 10 ether;    // >10 Ether for Bonus

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        319
Source: 
>     uint72 private WEI_MAX = 100 ether;     // 100 Ether Maximum
>     uint72 private WEI_BONUS = 10 ether;    // >10 Ether for Bonus
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint24 private GAS_MIN = 3000000;       // 3.0 Mwei gas Mininum

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        320
Source: 
>     uint72 private WEI_BONUS = 10 ether;    // >10 Ether for Bonus
>     uint24 private GAS_MIN = 3000000;       // 3.0 Mwei gas Mininum
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint24 private GAS_EX = 1500000;        // 1.5 Mwei gas for ex

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        321
Source: 
>     uint24 private GAS_MIN = 3000000;       // 3.0 Mwei gas Mininum
>     uint24 private GAS_EX = 1500000;        // 1.5 Mwei gas for ex
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        324
Source: 
>     // Price
>     uint256 private VOKEN_USD_PRICE_START = 1000;       // $      0.00100 USD    
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private VOKEN_USD_PRICE_STEP = 10;          // $    + 0.00001 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        325
Source: 
>     uint256 private VOKEN_USD_PRICE_START = 1000;       // $      0.00100 USD    
>     uint256 private VOKEN_USD_PRICE_STEP = 10;          // $    + 0.00001 USD
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_START = 100000000;    // $    100 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        326
Source: 
>     uint256 private VOKEN_USD_PRICE_STEP = 10;          // $    + 0.00001 USD
>     uint256 private STAGE_USD_CAP_START = 100000000;    // $    100 USD
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_STEP = 1000000;       // $     +1 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        327
Source: 
>     uint256 private STAGE_USD_CAP_START = 100000000;    // $    100 USD
>     uint256 private STAGE_USD_CAP_STEP = 1000000;       // $     +1 USD
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_MAX = 15100000000;    // $ 15,100 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        328
Source: 
>     uint256 private STAGE_USD_CAP_STEP = 1000000;       // $     +1 USD
>     uint256 private STAGE_USD_CAP_MAX = 15100000000;    // $ 15,100 USD
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        333
Source: 
>     // Progress
>     uint16 private STAGE_MAX = 60000;   // 60,000 stages total
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint16 private SEASON_MAX = 100;    // 100 seasons total

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        334
Source: 
>     uint16 private STAGE_MAX = 60000;   // 60,000 stages total
>     uint16 private SEASON_MAX = 100;    // 100 seasons total
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint16 private SEASON_STAGES = 600; // each 600 stages is a season

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        335
Source: 
>     uint16 private SEASON_MAX = 100;    // 100 seasons total
>     uint16 private SEASON_STAGES = 600; // each 600 stages is a season
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        356
Source: 
>     // Top-Sales
>     uint256 private TOP_SALES_RATIO_START = 15000000;         // 15%, with 8 decimals
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private TOP_SALES_RATIO_DISTANCE = 50000000;      // 50%, with 8 decimals

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    VokenPublicSale
Line:        357
Source: 
>     uint256 private TOP_SALES_RATIO_START = 15000000;         // 15%, with 8 decimals
>     uint256 private TOP_SALES_RATIO_DISTANCE = 50000000;      // 50%, with 8 decimals
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        152
Source: 
>      */
>     function owner() public view returns (address) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        231
Source: 
>      */
>     function paused() public view returns (bool) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        152
Source: 
>      */
>     function owner() public view returns (address) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VokenPublicSale
Line:        411
Source: 
>      */
>     function startTimestamp() public view returns (uint32) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _startTimestamp;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VokenPublicSale
Line:        441
Source: 
>      */
>     function etherPriceAuditor(address account) public view returns (bool) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _etherPriceAuditors[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VokenPublicSale
Line:        551
Source: 
>      */
>     function status() public view returns (uint256 auditEtherPrice,
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                                            uint16 stage,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VokenPublicSale
Line:        588
Source: 
>      */
>     function sum() public view returns(uint256 weiSold,
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                                        uint256 weiReferralRewarded,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VokenPublicSale
Line:        660
Source: 
>      */
>     function stageStatus(uint16 stageIndex) public view returns (uint256 vokenUsdPrice,
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                                                                  uint256 vokenCap,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VokenPublicSale
Line:        695
Source: 
>      */
>     function seasonTopSalesRewards(uint16 seasonNumber) public view returns (uint256 weiSold,
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                                                                              uint256 weiTopSales,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VokenPublicSale
Line:        708
Source: 
>      */
>     function accountQuery(address account) public view returns (uint256 vokenIssued,
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                                                                 uint256 vokenBonus,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VokenPublicSale
Line:        723
Source: 
>      */
>     function seasonRefAccounts(uint16 seasonNumber) public view returns (address[] memory accounts) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         accounts = _seasonRefAccounts[seasonNumber];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VokenPublicSale
Line:        730
Source: 
>      */
>     function usdSeasonAccountPurchased(uint16 seasonNumber, address account) public view returns (uint256) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _usdSeasonAccountPurchased[seasonNumber][account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VokenPublicSale
Line:        737
Source: 
>      */
>     function usdSeasonAccountRef(uint16 seasonNumber, address account) public view returns (uint256) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _usdSeasonAccountRef[seasonNumber][account];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Ownable
Line:        195
Source: 
>         require(receiver != address(0));
>         uint256 balance = _token.balanceOf(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balance >= amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Ownable
Line:        198
Source: 
> 
>         assert(_token.transfer(receiver, amount));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Ownable
Line:        209
Source: 
> 
>         to.transfer(amount);
>           ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VokenPublicSale
Line:        514
Source: 
>         emit SeasonTopSalesWeiTransfered(seasonNumber, to, __weiRemain);
>         to.transfer(__weiRemain);
>           ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VokenPublicSale
Line:        533
Source: 
>         emit PendingWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>           ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VokenPublicSale
Line:        545
Source: 
>         emit TeamWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>           ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VokenPublicSale
Line:        923
Source: 
> 
>         assert(VOKEN.transfer(msg.sender, amount));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit VokenIssuedTransfered(_stage, msg.sender, amount, _etherPrice, usdAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VokenPublicSale
Line:        800
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VokenPublicSale
Line:        818
Source: 
>         _weiTeam = _weiTeam.add(__weiTeam);
>         _receiver.transfer(__weiTeam);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VokenPublicSale
Line:        951
Source: 
> 
>         assert(VOKEN.transfer(msg.sender, amount));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit VokenWhitelistTransfered(msg.sender, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VokenPublicSale
Line:        937
Source: 
> 
>         assert(VOKEN.transfer(msg.sender, amount));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit VokenBonusTransfered(msg.sender, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VokenPublicSale
Line:        831
Source: 
> 
>         _inWhitelist_ = VOKEN.inWhitelist(msg.sender);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    VokenPublicSale
Line:        988
Source: 
> 
>             __receiver.transfer(__weiReward);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    VokenPublicSale
Line:        836
Source: 
>         for(uint16 i = 0; i < WHITELIST_REF_REWARDS_PCT.length; i++) {
>             address __refAccount = VOKEN.referrer(__cursor);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    VokenPublicSale
Line:        841
Source: 
> 
>             if (VOKEN.refCount(__refAccount) > i) {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (!_seasonHasRefAccount[_season][__refAccount]) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VokenPublicSale
Line:        418
Source: 
>      */
>     function setStartTimestamp(uint32 timestamp) external onlyOwner {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _startTimestamp = timestamp;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VokenPublicSale
Line:        433
Source: 
>      */
>     function setEtherPrice(uint256 value) external onlyEtherPriceAuditor {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _etherPrice = value;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VokenPublicSale
Line:        484
Source: 
>      */
>     function usd2vokenByStage(uint256 usdAmount, uint16 stageIndex) public view returns (uint256) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return usdAmount.mul(1000000).div(stageVokenUsdPrice(stageIndex));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VokenPublicSale
Line:        508
Source: 
>      */
>     function transferTopSales(uint16 seasonNumber, address payable to) external onlyOwner {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 __weiRemain = seasonTopSalesRemain(seasonNumber);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VokenPublicSale
Line:        660
Source: 
>      */
>     function stageStatus(uint16 stageIndex) public view returns (uint256 vokenUsdPrice,
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                                                                  uint256 vokenCap,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VokenPublicSale
Line:        695
Source: 
>      */
>     function seasonTopSalesRewards(uint16 seasonNumber) public view returns (uint256 weiSold,
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                                                                              uint256 weiTopSales,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ownable
Line:        192
Source: 
>      */
>     function rescueTokens(address tokenAddr, address receiver, uint256 amount) external onlyOwner {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20 _token = IERC20(tokenAddr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VokenPublicSale
Line:        441
Source: 
>      */
>     function etherPriceAuditor(address account) public view returns (bool) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _etherPriceAuditors[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VokenPublicSale
Line:        448
Source: 
>      */
>     function setEtherPriceAuditor(address account, bool state) external onlyOwner {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _etherPriceAuditors[account] = state;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VokenPublicSale
Line:        708
Source: 
>      */
>     function accountQuery(address account) public view returns (uint256 vokenIssued,
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                                                                 uint256 vokenBonus,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VokenPublicSale
Line:        723
Source: 
>      */
>     function seasonRefAccounts(uint16 seasonNumber) public view returns (address[] memory accounts) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         accounts = _seasonRefAccounts[seasonNumber];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VokenPublicSale
Line:        730
Source: 
>      */
>     function usdSeasonAccountPurchased(uint16 seasonNumber, address account) public view returns (uint256) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _usdSeasonAccountPurchased[seasonNumber][account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VokenPublicSale
Line:        737
Source: 
>      */
>     function usdSeasonAccountRef(uint16 seasonNumber, address account) public view returns (uint256) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _usdSeasonAccountRef[seasonNumber][account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath256
Line:        48
Source: 
>         }
>         c = a * b;
>               ^^^^
>         assert(c / a == b);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath256
Line:        60
Source: 
>         uint256 c = a / b;
>         assert(a == b * c + a % b);
>                       ^^^^^
>         return a / b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath16
Line:        115
Source: 
>         uint256 c = a / b;
>         assert(a == b * c + a % b);
>                       ^^^^^
>         return a / b;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    VokenPublicSale
Line:        923
Source: 
> 
>         assert(VOKEN.transfer(msg.sender, amount));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit VokenIssuedTransfered(_stage, msg.sender, amount, _etherPrice, usdAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    VokenPublicSale
Line:        951
Source: 
> 
>         assert(VOKEN.transfer(msg.sender, amount));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit VokenWhitelistTransfered(msg.sender, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    VokenPublicSale
Line:        937
Source: 
> 
>         assert(VOKEN.transfer(msg.sender, amount));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit VokenBonusTransfered(msg.sender, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    VokenPublicSale
Line:        831
Source: 
> 
>         _inWhitelist_ = VOKEN.inWhitelist(msg.sender);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    VokenPublicSale
Line:        836
Source: 
>         for(uint16 i = 0; i < WHITELIST_REF_REWARDS_PCT.length; i++) {
>             address __refAccount = VOKEN.referrer(__cursor);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    VokenPublicSale
Line:        841
Source: 
> 
>             if (VOKEN.refCount(__refAccount) > i) {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (!_seasonHasRefAccount[_season][__refAccount]) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    VokenPublicSale
Line:        514
Source: 
>         emit SeasonTopSalesWeiTransfered(seasonNumber, to, __weiRemain);
>         to.transfer(__weiRemain);
>           ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    VokenPublicSale
Line:        533
Source: 
>         emit PendingWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>           ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    VokenPublicSale
Line:        545
Source: 
>         emit TeamWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>           ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    VokenPublicSale
Line:        800
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    VokenPublicSale
Line:        818
Source: 
>         _weiTeam = _weiTeam.add(__weiTeam);
>         _receiver.transfer(__weiTeam);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    VokenPublicSale
Line:        988
Source: 
> 
>             __receiver.transfer(__weiReward);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        170
Source: 
>         require(newOwner != address(0));
>         address __previousOwner = _owner;
>           ^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = newOwner;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        180
Source: 
>         require(newReceiver != address(0));
>         address __previousReceiver = _receiver;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _receiver = newReceiver;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        193
Source: 
>     function rescueTokens(address tokenAddr, address receiver, uint256 amount) external onlyOwner {
>         IERC20 _token = IERC20(tokenAddr);
>           ^^^^^^^^^^^^^
>         require(receiver != address(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        288
Source: 
>     // Voken
>     IVoken public VOKEN = IVoken(0x82070415FEe803f94Ce5617Be1878503e58F0a6a);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        297
Source: 
>     // Referral rewards, 35% for 15 levels
>     uint16 private WHITELIST_REF_REWARDS_PCT_SUM = 35;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint16[15] private WHITELIST_REF_REWARDS_PCT = [

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        298
Source: 
>     uint16 private WHITELIST_REF_REWARDS_PCT_SUM = 35;
>     uint16[15] private WHITELIST_REF_REWARDS_PCT = [
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         6,  // 6% for Level.1

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        317
Source: 
>     // Wei & Gas
>     uint72 private WEI_MIN = 0.1 ether;     // 0.1 Ether Minimum
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint72 private WEI_MAX = 100 ether;     // 100 Ether Maximum

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        318
Source: 
>     uint72 private WEI_MIN = 0.1 ether;     // 0.1 Ether Minimum
>     uint72 private WEI_MAX = 100 ether;     // 100 Ether Maximum
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint72 private WEI_BONUS = 10 ether;    // >10 Ether for Bonus

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        319
Source: 
>     uint72 private WEI_MAX = 100 ether;     // 100 Ether Maximum
>     uint72 private WEI_BONUS = 10 ether;    // >10 Ether for Bonus
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint24 private GAS_MIN = 3000000;       // 3.0 Mwei gas Mininum

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        320
Source: 
>     uint72 private WEI_BONUS = 10 ether;    // >10 Ether for Bonus
>     uint24 private GAS_MIN = 3000000;       // 3.0 Mwei gas Mininum
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint24 private GAS_EX = 1500000;        // 1.5 Mwei gas for ex

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        321
Source: 
>     uint24 private GAS_MIN = 3000000;       // 3.0 Mwei gas Mininum
>     uint24 private GAS_EX = 1500000;        // 1.5 Mwei gas for ex
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        324
Source: 
>     // Price
>     uint256 private VOKEN_USD_PRICE_START = 1000;       // $      0.00100 USD    
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private VOKEN_USD_PRICE_STEP = 10;          // $    + 0.00001 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        325
Source: 
>     uint256 private VOKEN_USD_PRICE_START = 1000;       // $      0.00100 USD    
>     uint256 private VOKEN_USD_PRICE_STEP = 10;          // $    + 0.00001 USD
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_START = 100000000;    // $    100 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        326
Source: 
>     uint256 private VOKEN_USD_PRICE_STEP = 10;          // $    + 0.00001 USD
>     uint256 private STAGE_USD_CAP_START = 100000000;    // $    100 USD
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_STEP = 1000000;       // $     +1 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        327
Source: 
>     uint256 private STAGE_USD_CAP_START = 100000000;    // $    100 USD
>     uint256 private STAGE_USD_CAP_STEP = 1000000;       // $     +1 USD
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_MAX = 15100000000;    // $ 15,100 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        328
Source: 
>     uint256 private STAGE_USD_CAP_STEP = 1000000;       // $     +1 USD
>     uint256 private STAGE_USD_CAP_MAX = 15100000000;    // $ 15,100 USD
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        333
Source: 
>     // Progress
>     uint16 private STAGE_MAX = 60000;   // 60,000 stages total
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint16 private SEASON_MAX = 100;    // 100 seasons total

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        334
Source: 
>     uint16 private STAGE_MAX = 60000;   // 60,000 stages total
>     uint16 private SEASON_MAX = 100;    // 100 seasons total
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint16 private SEASON_STAGES = 600; // each 600 stages is a season

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        335
Source: 
>     uint16 private SEASON_MAX = 100;    // 100 seasons total
>     uint16 private SEASON_STAGES = 600; // each 600 stages is a season
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        356
Source: 
>     // Top-Sales
>     uint256 private TOP_SALES_RATIO_START = 15000000;         // 15%, with 8 decimals
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private TOP_SALES_RATIO_DISTANCE = 50000000;      // 50%, with 8 decimals

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        357
Source: 
>     uint256 private TOP_SALES_RATIO_START = 15000000;         // 15%, with 8 decimals
>     uint256 private TOP_SALES_RATIO_DISTANCE = 50000000;      // 50%, with 8 decimals
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        493
Source: 
>         if (stageIndex > 0) {
>             uint16 __seasonNumber = stageIndex.div(SEASON_STAGES);
>               ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        509
Source: 
>     function transferTopSales(uint16 seasonNumber, address payable to) external onlyOwner {
>         uint256 __weiRemain = seasonTopSalesRemain(seasonNumber);
>           ^^^^^^^^^^^^^^^^^^^
>         require(to != address(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        528
Source: 
>     function transferPending(address payable to) external onlyOwner {
>         uint256 __weiRemain = pendingRemain();
>           ^^^^^^^^^^^^^^^^^^^
>         require(to != address(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        540
Source: 
>     function transferTeam(address payable to) external onlyOwner {
>         uint256 __weiRemain = _weiSold.sub(_weiRefRewarded).sub(_weiTopSales).sub(_weiPending).sub(_weiTeam);
>           ^^^^^^^^^^^^^^^^^^^
>         require(to != address(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        641
Source: 
>     function stageUsdCap(uint16 stageIndex) private view returns (uint256) {
>         uint256 __usdCap = STAGE_USD_CAP_START.add(STAGE_USD_CAP_STEP.mul(stageIndex)); 
>           ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        759
Source: 
>         setTemporaryVariables();
>         uint256 __usdAmount = wei2usd(msg.value);
>           ^^^^^^^^^^^^^^^^^^^
>         uint256 __usdRemain = __usdAmount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        760
Source: 
>         uint256 __usdAmount = wei2usd(msg.value);
>         uint256 __usdRemain = __usdAmount;
>           ^^^^^^^^^^^^^^^^^^^
>         uint256 __vokenIssued;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        761
Source: 
>         uint256 __usdRemain = __usdAmount;
>         uint256 __vokenIssued;
>           ^^^^^^^^^^^^^^^^^^^^
>         uint256 __vokenBonus;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        762
Source: 
>         uint256 __vokenIssued;
>         uint256 __vokenBonus;
>           ^^^^^^^^^^^^^^^^^^^
>         uint256 __usdUsed;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        763
Source: 
>         uint256 __vokenBonus;
>         uint256 __usdUsed;
>           ^^^^^^^^^^^^^^^^
>         uint256 __weiUsed;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        764
Source: 
>         uint256 __usdUsed;
>         uint256 __weiUsed;
>           ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        768
Source: 
>         while (gasleft() > GAS_EX && __usdRemain > 0 && _stage <= STAGE_MAX) {
>             uint256 __txVokenIssued;
>               ^^^^^^^^^^^^^^^^^^^^^^
>             (__txVokenIssued, __usdRemain) = ex(__usdRemain);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        795
Source: 
>         if (__usdRemain > 0) {
>             uint256 __weiRemain = usd2wei(__usdRemain);
>               ^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        811
Source: 
>         // Wei team
>         uint256 __weiTeam;
>           ^^^^^^^^^^^^^^^^
>         if (_season > SEASON_MAX)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        834
Source: 
> 
>         address __cursor = msg.sender;
>           ^^^^^^^^^^^^^^^^
>         for(uint16 i = 0; i < WHITELIST_REF_REWARDS_PCT.length; i++) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        836
Source: 
>         for(uint16 i = 0; i < WHITELIST_REF_REWARDS_PCT.length; i++) {
>             address __refAccount = VOKEN.referrer(__cursor);
>               ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        860
Source: 
>     function ex(uint256 usdAmount) private returns (uint256, uint256) {
>         uint256 __stageUsdCap = stageUsdCap(_stage);
>           ^^^^^^^^^^^^^^^^^^^^^
>         uint256 __vokenIssued;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        861
Source: 
>         uint256 __stageUsdCap = stageUsdCap(_stage);
>         uint256 __vokenIssued;
>           ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        879
Source: 
>         // close stage
>         uint256 __usdUsed = __stageUsdCap.sub(_stageUsdSold[_stage]);
>           ^^^^^^^^^^^^^^^^^
>         uint256 __usdRemain = usdAmount.sub(__usdUsed);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        880
Source: 
>         uint256 __usdUsed = __stageUsdCap.sub(_stageUsdSold[_stage]);
>         uint256 __usdRemain = usdAmount.sub(__usdUsed);
>           ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        895
Source: 
>     function exCount(uint256 usdAmount) private {
>         uint256 __weiSold = usd2wei(usdAmount);
>           ^^^^^^^^^^^^^^^^^
>         uint256 __weiTopSales = usd2weiTopSales(usdAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        896
Source: 
>         uint256 __weiSold = usd2wei(usdAmount);
>         uint256 __weiTopSales = usd2weiTopSales(usdAmount);
>           ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        966
Source: 
>         // Close current season
>         uint16 __seasonNumber = calcSeason(_stage);
>           ^^^^^^^^^^^^^^^^^^^^^
>         if (_season < __seasonNumber) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        979
Source: 
>     function sendWhitelistReferralRewards(uint256 weiAmount) private {
>         uint256 __weiRemain = weiAmount;
>           ^^^^^^^^^^^^^^^^^^^
>         for (uint16 i = 0; i < _rewards_.length; i++) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        981
Source: 
>         for (uint16 i = 0; i < _rewards_.length; i++) {
>             uint256 __weiReward = weiAmount.mul(_rewards_[i]).div(100);
>               ^^^^^^^^^^^^^^^^^^^
>             address payable __receiver = address(uint160(_referrers_[i]));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VokenPublicSale
Line:        982
Source: 
>             uint256 __weiReward = weiAmount.mul(_rewards_[i]).div(100);
>             address payable __receiver = address(uint160(_referrers_[i]));
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    VokenPublicSale
Line:        291
Source: 
>     // Start timestamp
>     uint32 _startTimestamp;
>       ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    VokenPublicSale
Line:        320
Source: 
>     uint72 private WEI_BONUS = 10 ether;    // >10 Ether for Bonus
>     uint24 private GAS_MIN = 3000000;       // 3.0 Mwei gas Mininum
>                                ^^^^^^^
>     uint24 private GAS_EX = 1500000;        // 1.5 Mwei gas for ex

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    VokenPublicSale
Line:        321
Source: 
>     uint24 private GAS_MIN = 3000000;       // 3.0 Mwei gas Mininum
>     uint24 private GAS_EX = 1500000;        // 1.5 Mwei gas for ex
>                               ^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    VokenPublicSale
Line:        326
Source: 
>     uint256 private VOKEN_USD_PRICE_STEP = 10;          // $    + 0.00001 USD
>     uint256 private STAGE_USD_CAP_START = 100000000;    // $    100 USD
>                                             ^^^^^^^^^
>     uint256 private STAGE_USD_CAP_STEP = 1000000;       // $     +1 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    VokenPublicSale
Line:        327
Source: 
>     uint256 private STAGE_USD_CAP_START = 100000000;    // $    100 USD
>     uint256 private STAGE_USD_CAP_STEP = 1000000;       // $     +1 USD
>                                            ^^^^^^^
>     uint256 private STAGE_USD_CAP_MAX = 15100000000;    // $ 15,100 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    VokenPublicSale
Line:        328
Source: 
>     uint256 private STAGE_USD_CAP_STEP = 1000000;       // $     +1 USD
>     uint256 private STAGE_USD_CAP_MAX = 15100000000;    // $ 15,100 USD
>                                           ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    VokenPublicSale
Line:        356
Source: 
>     // Top-Sales
>     uint256 private TOP_SALES_RATIO_START = 15000000;         // 15%, with 8 decimals
>                                               ^^^^^^^^
>     uint256 private TOP_SALES_RATIO_DISTANCE = 50000000;      // 50%, with 8 decimals

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    VokenPublicSale
Line:        357
Source: 
>     uint256 private TOP_SALES_RATIO_START = 15000000;         // 15%, with 8 decimals
>     uint256 private TOP_SALES_RATIO_DISTANCE = 50000000;      // 50%, with 8 decimals
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    VokenPublicSale
Line:        478
Source: 
>     function usd2voken(uint256 usdAmount) private view returns (uint256) {
>         return usdAmount.mul(1000000).div(_vokenUsdPrice);
>                                ^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    VokenPublicSale
Line:        485
Source: 
>     function usd2vokenByStage(uint256 usdAmount, uint16 stageIndex) public view returns (uint256) {
>         return usdAmount.mul(1000000).div(stageVokenUsdPrice(stageIndex));
>                                ^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    VokenPublicSale
Line:        634
Source: 
>     function usd2weiTopSales(uint256 usdAmount) private view returns (uint256) {
>         return usd2wei(usdAmount.mul(_topSalesRatio).div(100000000));
>                                                            ^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Ownable
Line:        209
Source: 
> 
>         to.transfer(amount);
>           ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    VokenPublicSale
Line:        514
Source: 
>         emit SeasonTopSalesWeiTransfered(seasonNumber, to, __weiRemain);
>         to.transfer(__weiRemain);
>           ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    VokenPublicSale
Line:        533
Source: 
>         emit PendingWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>           ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    VokenPublicSale
Line:        545
Source: 
>         emit TeamWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>           ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    VokenPublicSale
Line:        800
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    VokenPublicSale
Line:        818
Source: 
>         _weiTeam = _weiTeam.add(__weiTeam);
>         _receiver.transfer(__weiTeam);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    VokenPublicSale
Line:        988
Source: 
> 
>             __receiver.transfer(__weiReward);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Ownable
Line:        209
Source: 
> 
>         to.transfer(amount);
>           ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    VokenPublicSale
Line:        514
Source: 
>         emit SeasonTopSalesWeiTransfered(seasonNumber, to, __weiRemain);
>         to.transfer(__weiRemain);
>           ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    VokenPublicSale
Line:        533
Source: 
>         emit PendingWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>           ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    VokenPublicSale
Line:        545
Source: 
>         emit TeamWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>           ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    VokenPublicSale
Line:        800
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    VokenPublicSale
Line:        818
Source: 
>         _weiTeam = _weiTeam.add(__weiTeam);
>         _receiver.transfer(__weiTeam);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    VokenPublicSale
Line:        988
Source: 
> 
>             __receiver.transfer(__weiReward);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Ownable
Line:        209
Source: 
> 
>         to.transfer(amount);
>           ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    VokenPublicSale
Line:        514
Source: 
>         emit SeasonTopSalesWeiTransfered(seasonNumber, to, __weiRemain);
>         to.transfer(__weiRemain);
>           ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    VokenPublicSale
Line:        533
Source: 
>         emit PendingWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>           ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    VokenPublicSale
Line:        545
Source: 
>         emit TeamWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>           ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    VokenPublicSale
Line:        800
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    VokenPublicSale
Line:        818
Source: 
>         _weiTeam = _weiTeam.add(__weiTeam);
>         _receiver.transfer(__weiTeam);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    VokenPublicSale
Line:        988
Source: 
> 
>             __receiver.transfer(__weiReward);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        195
Source: 
>         require(receiver != address(0));
>         uint256 balance = _token.balanceOf(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balance >= amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        198
Source: 
> 
>         assert(_token.transfer(receiver, amount));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        195
Source: 
>         require(receiver != address(0));
>         uint256 balance = _token.balanceOf(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balance >= amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        198
Source: 
> 
>         assert(_token.transfer(receiver, amount));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        195
Source: 
>         require(receiver != address(0));
>         uint256 balance = _token.balanceOf(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balance >= amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        198
Source: 
> 
>         assert(_token.transfer(receiver, amount));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VokenPublicSale
Line:        923
Source: 
> 
>         assert(VOKEN.transfer(msg.sender, amount));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit VokenIssuedTransfered(_stage, msg.sender, amount, _etherPrice, usdAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VokenPublicSale
Line:        951
Source: 
> 
>         assert(VOKEN.transfer(msg.sender, amount));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit VokenWhitelistTransfered(msg.sender, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VokenPublicSale
Line:        937
Source: 
> 
>         assert(VOKEN.transfer(msg.sender, amount));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit VokenBonusTransfered(msg.sender, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VokenPublicSale
Line:        831
Source: 
> 
>         _inWhitelist_ = VOKEN.inWhitelist(msg.sender);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VokenPublicSale
Line:        836
Source: 
>         for(uint16 i = 0; i < WHITELIST_REF_REWARDS_PCT.length; i++) {
>             address __refAccount = VOKEN.referrer(__cursor);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VokenPublicSale
Line:        841
Source: 
> 
>             if (VOKEN.refCount(__refAccount) > i) {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (!_seasonHasRefAccount[_season][__refAccount]) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VokenPublicSale
Line:        291
Source: 
>     // Start timestamp
>     uint32 _startTimestamp;
>       ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VokenPublicSale
Line:        294
Source: 
>     // Audit ether price
>     uint256 private _etherPrice;    // 1 Ether = xx.xxxxxx USD, with 6 decimals
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VokenPublicSale
Line:        341
Source: 
>     // Sum
>     uint256 private _txs;
>       ^^^^^^^^^^^^^^^^^^^
>     uint256 private _vokenTxs;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VokenPublicSale
Line:        342
Source: 
>     uint256 private _txs;
>     uint256 private _vokenTxs;
>       ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _vokenBonusTxs;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VokenPublicSale
Line:        343
Source: 
>     uint256 private _vokenTxs;
>     uint256 private _vokenBonusTxs;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _vokenWhitelistTxs;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VokenPublicSale
Line:        344
Source: 
>     uint256 private _vokenBonusTxs;
>     uint256 private _vokenWhitelistTxs;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _vokenIssued;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VokenPublicSale
Line:        345
Source: 
>     uint256 private _vokenWhitelistTxs;
>     uint256 private _vokenIssued;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _vokenBonus;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VokenPublicSale
Line:        346
Source: 
>     uint256 private _vokenIssued;
>     uint256 private _vokenBonus;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _vokenWhitelist;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VokenPublicSale
Line:        347
Source: 
>     uint256 private _vokenBonus;
>     uint256 private _vokenWhitelist;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _weiSold;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VokenPublicSale
Line:        348
Source: 
>     uint256 private _vokenWhitelist;
>     uint256 private _weiSold;
>       ^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _weiRefRewarded;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VokenPublicSale
Line:        349
Source: 
>     uint256 private _weiSold;
>     uint256 private _weiRefRewarded;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _weiTopSales;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VokenPublicSale
Line:        350
Source: 
>     uint256 private _weiRefRewarded;
>     uint256 private _weiTopSales;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _weiTeam;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VokenPublicSale
Line:        351
Source: 
>     uint256 private _weiTopSales;
>     uint256 private _weiTeam;
>       ^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _weiPending;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VokenPublicSale
Line:        352
Source: 
>     uint256 private _weiTeam;
>     uint256 private _weiPending;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _weiPendingTransfered;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VokenPublicSale
Line:        353
Source: 
>     uint256 private _weiPending;
>     uint256 private _weiPendingTransfered;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VokenPublicSale
Line:        362
Source: 
>     // During tx
>     bool private _inWhitelist_;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    VokenPublicSale
Line:        800
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    VokenPublicSale
Line:        818
Source: 
>         _weiTeam = _weiTeam.add(__weiTeam);
>         _receiver.transfer(__weiTeam);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    VokenPublicSale
Line:        988
Source: 
> 
>             __receiver.transfer(__weiReward);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        961
Source: 
>         emit StageClosed(_stage, msg.sender);
>         _stage = _stage.add(1);
>           ^^^^^^^^^^^^^^^^^^^^^
>         _vokenUsdPrice = stageVokenUsdPrice(_stage);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        962
Source: 
>         _stage = _stage.add(1);
>         _vokenUsdPrice = stageVokenUsdPrice(_stage);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _topSalesRatio = topSalesRatio(_stage);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        963
Source: 
>         _vokenUsdPrice = stageVokenUsdPrice(_stage);
>         _topSalesRatio = topSalesRatio(_stage);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        969
Source: 
>             emit SeasonClosed(_season, msg.sender);
>             _season = __seasonNumber;
>               ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        917
Source: 
>     function transfervokenIssued(uint256 amount, uint256 usdAmount) private returns (bool) {
>         _vokenTxs = _vokenTxs.add(1);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        919
Source: 
>         
>         _vokenIssued = _vokenIssued.add(amount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _stageVokenIssued[_stage] = _stageVokenIssued[_stage].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        920
Source: 
>         _vokenIssued = _vokenIssued.add(amount);
>         _stageVokenIssued[_stage] = _stageVokenIssued[_stage].add(amount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _accountVokenIssued[msg.sender] = _accountVokenIssued[msg.sender].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        900
Source: 
>         
>         _stageUsdSold[_stage] = _stageUsdSold[_stage].add(usdAmount);                   // stage sold, in USD
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _seasonWeiSold[_season] = _seasonWeiSold[_season].add(__weiSold);               // season sold, in wei

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        901
Source: 
>         _stageUsdSold[_stage] = _stageUsdSold[_stage].add(usdAmount);                   // stage sold, in USD
>         _seasonWeiSold[_season] = _seasonWeiSold[_season].add(__weiSold);               // season sold, in wei
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _seasonWeiTopSales[_season] = _seasonWeiTopSales[_season].add(__weiTopSales);   // season Top-Sales, in wei

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        902
Source: 
>         _seasonWeiSold[_season] = _seasonWeiSold[_season].add(__weiSold);               // season sold, in wei
>         _seasonWeiTopSales[_season] = _seasonWeiTopSales[_season].add(__weiTopSales);   // season Top-Sales, in wei
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _weiTopSales = _weiTopSales.add(__weiTopSales);                                 // sum Top-Sales, in wei

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        903
Source: 
>         _seasonWeiTopSales[_season] = _seasonWeiTopSales[_season].add(__weiTopSales);   // season Top-Sales, in wei
>         _weiTopSales = _weiTopSales.add(__weiTopSales);                                 // sum Top-Sales, in wei
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        908
Source: 
>             for (uint16 i = 0; i < _rewards_.length; i++) {
>                 _usdSeasonAccountRef[_season][_referrers_[i]] = _usdSeasonAccountRef[_season][_referrers_[i]].add(usdAmount);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        805
Source: 
>         if (__weiUsed > 0) {
>             _txs = _txs.add(1);
>               ^^^^^^^^^^^^^^^^^
>             _weiSold = _weiSold.add(__weiUsed);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        806
Source: 
>             _txs = _txs.add(1);
>             _weiSold = _weiSold.add(__weiUsed);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _accountWeiPurchased[msg.sender] = _accountWeiPurchased[msg.sender].add(__weiUsed);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        817
Source: 
> 
>         _weiTeam = _weiTeam.add(__weiTeam);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _receiver.transfer(__weiTeam);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        984
Source: 
> 
>             _weiRefRewarded = _weiRefRewarded.add(__weiReward);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _accountWeiRefRewarded[__receiver] = _accountWeiRefRewarded[__receiver].add(__weiReward);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        985
Source: 
>             _weiRefRewarded = _weiRefRewarded.add(__weiReward);
>             _accountWeiRefRewarded[__receiver] = _accountWeiRefRewarded[__receiver].add(__weiReward);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             __weiRemain = __weiRemain.sub(__weiReward);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        992
Source: 
>         if (_pending_ > 0)
>             _weiPending = _weiPending.add(weiAmount.mul(_pending_).div(100));
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        946
Source: 
>     function transferVokenWhitelisted(uint256 amount) private returns (bool) {
>         _vokenWhitelistTxs = _vokenWhitelistTxs.add(1);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        948
Source: 
> 
>         _vokenWhitelist = _vokenWhitelist.add(amount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _accountVokenWhitelisted[msg.sender] = _accountVokenWhitelisted[msg.sender].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        932
Source: 
>     function transferVokenBonus(uint256 amount) private returns (bool) {
>         _vokenBonusTxs = _vokenBonusTxs.add(1);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        934
Source: 
> 
>         _vokenBonus = _vokenBonus.add(amount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _accountVokenBonus[msg.sender] = _accountVokenBonus[msg.sender].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        828
Source: 
>     function setTemporaryVariables() private {
>         delete _referrers_;
>           ^^^^^^^^^^^^^^^^^
>         delete _rewards_;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        829
Source: 
>         delete _referrers_;
>         delete _rewards_;
>           ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        831
Source: 
> 
>         _inWhitelist_ = VOKEN.inWhitelist(msg.sender);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    VokenPublicSale
Line:        832
Source: 
>         _inWhitelist_ = VOKEN.inWhitelist(msg.sender);
>         _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0xac873993e43a5af7b39ab4a5a50ce1fbdb7191d3.sol
Tool Runtime = 4103.848663680001 seconds
#############################################