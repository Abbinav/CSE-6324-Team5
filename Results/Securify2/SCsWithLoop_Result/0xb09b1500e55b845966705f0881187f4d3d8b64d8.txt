pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    MountableToken
Line:        438
Source: 
>         TokenTimelock lockedTeamTokens = new TokenTimelock();
>         lockedTeamTokens.tokenTimelock(this, owner, dateTeamTokensLockedTill);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         timelockContractAddress = address(lockedTeamTokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    MountableToken
Line:        295
Source: 
>     /// token caps for each round
>     uint256[5] private roundCaps = [
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         100000000000000000000000, // HOT sale   100000000 * 10**15

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    MountableToken
Line:        302
Source: 
>     ];
>     uint8[5] private roundDiscountPercentages = [50, 33, 25, 12, 6];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        63
Source: 
>     */
>     function transfer(address _to, uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_to != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        78
Source: 
>     */
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        127
Source: 
> 
>     function tokenTimelock(ERC20Basic _token, address _beneficiary, uint64 _releaseTime) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_releaseTime > uint64(block.timestamp));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        137
Source: 
>      */
>     function release() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(uint64(block.timestamp) >= releaseTime);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        63
Source: 
>     */
>     function transfer(address _to, uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_to != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        78
Source: 
>     */
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        164
Source: 
>      */
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_to != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        182
Source: 
>      */
>     function approve(address _spender, uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        194
Source: 
>      */
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        204
Source: 
>      */
>     function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        210
Source: 
> 
>     function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint oldValue = allowed[msg.sender][_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        228
Source: 
> 
>     function owned() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = msg.sender;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        236
Source: 
>     */
>     function transferOwnership(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        63
Source: 
>     */
>     function transfer(address _to, uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_to != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        78
Source: 
>     */
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BurnableToken
Line:        252
Source: 
> 
>   function burn(uint256 _value) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_value > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        78
Source: 
>     */
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        182
Source: 
>      */
>     function approve(address _spender, uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        194
Source: 
>      */
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        204
Source: 
>      */
>     function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        210
Source: 
> 
>     function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint oldValue = allowed[msg.sender][_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        228
Source: 
> 
>     function owned() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = msg.sender;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        236
Source: 
>     */
>     function transferOwnership(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BurnableToken
Line:        252
Source: 
> 
>   function burn(uint256 _value) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_value > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MountableToken
Line:        354
Source: 
>     /// @param _tokens the amount of tokens, with decimals expanded (full).
>     function issueTokens(address _beneficiary, uint256 _tokens) public onlyOwner beforeEnd {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         doIssueTokens(_beneficiary, _tokens);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MountableToken
Line:        371
Source: 
>     /// @dev Returns the current price.
>     function price() public view returns (uint256 tokens) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return computeTokenAmount(1 ether);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MountableToken
Line:        411
Source: 
>     /// @dev Closes the sale, issues the team tokens and burns the unsold
>     function close() public onlyOwner beforeEnd {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         /// team tokens are equal to 12% of the allocated tokens

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MountableToken
Line:        456
Source: 
>     /// Transfer limited by the tradingOpen modifier
>     function transferFrom(address _from, address _to, uint256 _value) public tradingOpen returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return super.transferFrom(_from, _to, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MountableToken
Line:        461
Source: 
>     /// Transfer limited by the tradingOpen modifier
>     function transfer(address _to, uint256 _value) public tradingOpen returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return super.transfer(_to, _value);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MountableToken
Line:        347
Source: 
>         doIssueTokens(_beneficiary, tokens);
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MountableToken
Line:        426
Source: 
> 
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StandardToken
Line:        204
Source: 
>      */
>     function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MountableToken
Line:        339
Source: 
>     /// @param _beneficiary Address that newly issued token will be sent to.
>     function purchaseTokens(address _beneficiary) public payable inProgress {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value >= 0.05 ether);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MountableToken
Line:        354
Source: 
>     /// @param _tokens the amount of tokens, with decimals expanded (full).
>     function issueTokens(address _beneficiary, uint256 _tokens) public onlyOwner beforeEnd {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         doIssueTokens(_beneficiary, _tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MountableToken
Line:        456
Source: 
>     /// Transfer limited by the tradingOpen modifier
>     function transferFrom(address _from, address _to, uint256 _value) public tradingOpen returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return super.transferFrom(_from, _to, _value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MountableToken
Line:        461
Source: 
>     /// Transfer limited by the tradingOpen modifier
>     function transfer(address _to, uint256 _value) public tradingOpen returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return super.transfer(_to, _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicToken
Line:        78
Source: 
>     */
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenTimelock
Line:        127
Source: 
> 
>     function tokenTimelock(ERC20Basic _token, address _beneficiary, uint64 _releaseTime) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_releaseTime > uint64(block.timestamp));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicToken
Line:        78
Source: 
>     */
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        182
Source: 
>      */
>     function approve(address _spender, uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        194
Source: 
>      */
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicToken
Line:        78
Source: 
>     */
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        182
Source: 
>      */
>     function approve(address _spender, uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        194
Source: 
>      */
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    MountableToken
Line:        379
Source: 
>     function computeTokenAmount(uint256 ethAmount) internal view returns (uint256 tokens) {
>         uint256 tokenBase = (ethAmount.mul(BASE_RATE)/10000000000000)*10000000000;
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint8 roundNum = currentRoundIndex();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        20
Source: 
>     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>         uint256 c = a * b;
>                     ^^^^^
>         require(a == 0 || c / a == b);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    MountableToken
Line:        426
Source: 
> 
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MountableToken
Line:        264
Source: 
> contract MountableToken is StandardToken, Owned, BurnableToken {
>     string public constant name = "Mountable Token";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "MNT";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MountableToken
Line:        265
Source: 
>     string public constant name = "Mountable Token";
>     string public constant symbol = "MNT";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 15;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MountableToken
Line:        266
Source: 
>     string public constant symbol = "MNT";
>     uint8 public constant decimals = 15;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MountableToken
Line:        277
Source: 
>     /// HOT sale start time
>     uint64 private constant dateHOTSale = 1562407200 - 7 hours;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MountableToken
Line:        280
Source: 
>     /// preSale start time 13.07.2019 (10:00:00 o'clock UTC+7 / WIB)
>     uint64 private constant preSale = 1563012000 - 7 hours;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MountableToken
Line:        283
Source: 
>     /// Token Sale 1 start time; Sale 1 20.07.2019 (10:00:00 o'clock UTC+7 / WIB)
>     uint64 private constant tokenSale1 = 1563616800 - 7 hours;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MountableToken
Line:        286
Source: 
>     /// Token Sale 2 start time; Sale 2 03.08.2019 (10:00:00 o'clock UTC+7 / WIB)
>     uint64 private constant tokenSale2 = 1564826400 - 7 hours;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MountableToken
Line:        289
Source: 
>     /// Token Sale 3 start time; Sale 3 17.08.2019 (10:00:00 o'clock UTC+7 / WIB)
>     uint64 private constant tokenSale3 = 1566036000 - 7 hours;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MountableToken
Line:        292
Source: 
>     /// Token Sale start time; 31.08.2019 (10:00:00 o'clock UTC+7 / WIB)
>     uint64 private constant endDate = 1567245600 - 7 hours;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MountableToken
Line:        305
Source: 
>     /// team tokens are locked until this date 31.08.2020 (10:00:00 o'clock UTC+7 / WIB)
>     uint64 private constant dateTeamTokensLockedTill = 1598868000 - 7 hours;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        12
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MountableToken
Line:        269
Source: 
>     /// Maximum tokens to be allocated on the sale (75% of the hard cap)
>     uint256 public constant TOKENS_SALE_HARD_CAP = 750000000000000000000000; // 750000000000 * 10**15
>                                                    ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MountableToken
Line:        296
Source: 
>     uint256[5] private roundCaps = [
>         100000000000000000000000, // HOT sale   100000000 * 10**15
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         200000000000000000000000, // Pre Sale   100000000 * 10**15

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MountableToken
Line:        297
Source: 
>         100000000000000000000000, // HOT sale   100000000 * 10**15
>         200000000000000000000000, // Pre Sale   100000000 * 10**15
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         350000000000000000000000, // Token Sale 1   150000000 * 10**15

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MountableToken
Line:        298
Source: 
>         200000000000000000000000, // Pre Sale   100000000 * 10**15
>         350000000000000000000000, // Token Sale 1   150000000 * 10**15
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         550000000000000000000000, // Token Sale 2   200000000 * 10**15

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MountableToken
Line:        299
Source: 
>         350000000000000000000000, // Token Sale 1   150000000 * 10**15
>         550000000000000000000000, // Token Sale 2   200000000 * 10**15
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         750000000000000000000000 // Token Sale 3   200000000 * 10**15

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MountableToken
Line:        300
Source: 
>         550000000000000000000000, // Token Sale 2   200000000 * 10**15
>         750000000000000000000000 // Token Sale 3   200000000 * 10**15
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     ];

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MountableToken
Line:        379
Source: 
>     function computeTokenAmount(uint256 ethAmount) internal view returns (uint256 tokens) {
>         uint256 tokenBase = (ethAmount.mul(BASE_RATE)/10000000000000)*10000000000;
>                                                       ^^^^^^^^^^^^^^
>         uint8 roundNum = currentRoundIndex();

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MountableToken
Line:        379
Source: 
>     function computeTokenAmount(uint256 ethAmount) internal view returns (uint256 tokens) {
>         uint256 tokenBase = (ethAmount.mul(BASE_RATE)/10000000000000)*10000000000;
>                                                                       ^^^^^^^^^^^
>         uint8 roundNum = currentRoundIndex();

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MountableToken
Line:        414
Source: 
>         /// 13% group tokens are added to the locked tokens
>         uint256 lockedTokens = 120000000000000000000000;
>                                ^^^^^^^^^^^^^^^^^^^^^^^^
>         //partner tokens are available from the beginning

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MountableToken
Line:        416
Source: 
>         //partner tokens are available from the beginning
>         uint256 partnerTokens = 130000000000000000000000;
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    MountableToken
Line:        347
Source: 
>         doIssueTokens(_beneficiary, tokens);
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    MountableToken
Line:        426
Source: 
> 
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    MountableToken
Line:        426
Source: 
> 
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MountableToken
Line:        347
Source: 
>         doIssueTokens(_beneficiary, tokens);
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MountableToken
Line:        347
Source: 
>         doIssueTokens(_beneficiary, tokens);
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MountableToken
Line:        426
Source: 
> 
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenTimelock
Line:        140
Source: 
> 
>         uint256 amount = token.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount > 0);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SafeERC20
Line:        103
Source: 
>     function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
>         assert(token.transfer(to, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MountableToken
Line:        438
Source: 
>         TokenTimelock lockedTeamTokens = new TokenTimelock();
>         lockedTeamTokens.tokenTimelock(this, owner, dateTeamTokensLockedTill);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         timelockContractAddress = address(lockedTeamTokens);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenTimelock
Line:        123
Source: 
> 
>     ERC20Basic public token;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     address public beneficiary;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenTimelock
Line:        124
Source: 
>     ERC20Basic public token;
>     address public beneficiary;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint64 public releaseTime;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenTimelock
Line:        125
Source: 
>     address public beneficiary;
>     uint64 public releaseTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        224
Source: 
> contract Owned {
>     address payable public owner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ERC20Basic
Line:        43
Source: 
> contract ERC20Basic {
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function balanceOf(address who) public view returns (uint256);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        224
Source: 
> contract Owned {
>     address payable public owner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MountableToken
Line:        311
Source: 
>     /// contract to be called to release the Mountable team tokens
>     address public timelockContractAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20Basic
Line:        43
Source: 
> contract ERC20Basic {
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function balanceOf(address who) public view returns (uint256);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    MountableToken
Line:        347
Source: 
>         doIssueTokens(_beneficiary, tokens);
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MountableToken
Line:        364
Source: 
> 
>         totalSupply = totalSupply.add(_tokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[_beneficiary] = balances[_beneficiary].add(_tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MountableToken
Line:        365
Source: 
>         totalSupply = totalSupply.add(_tokens);
>         balances[_beneficiary] = balances[_beneficiary].add(_tokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenTimelock
Line:        129
Source: 
>         require(_releaseTime > uint64(block.timestamp));
>         token = _token;
>         ^^^^^^^^^^^^^^
>         beneficiary = _beneficiary;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenTimelock
Line:        130
Source: 
>         token = _token;
>         beneficiary = _beneficiary;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         releaseTime = _releaseTime;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenTimelock
Line:        131
Source: 
>         beneficiary = _beneficiary;
>         releaseTime = _releaseTime;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        183
Source: 
>     function approve(address _spender, uint256 _value) public returns (bool) {
>         allowed[msg.sender][_spender] = _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        205
Source: 
>     function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {
>         allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Owned
Line:        229
Source: 
>     function owned() public {
>         owner = msg.sender;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        183
Source: 
>     function approve(address _spender, uint256 _value) public returns (bool) {
>         allowed[msg.sender][_spender] = _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        205
Source: 
>     function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {
>         allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Owned
Line:        229
Source: 
>     function owned() public {
>         owner = msg.sender;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        103
Source: 
>     function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
>         assert(token.transfer(to, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        107
Source: 
>     function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {
>         assert(token.transferFrom(from, to, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        111
Source: 
>     function safeApprove(ERC20 token, address spender, uint256 value) internal {
>         assert(token.approve(spender, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        107
Source: 
>     function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {
>         assert(token.transferFrom(from, to, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        111
Source: 
>     function safeApprove(ERC20 token, address spender, uint256 value) internal {
>         assert(token.approve(spender, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        103
Source: 
>     function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
>         assert(token.transfer(to, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        107
Source: 
>     function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {
>         assert(token.transferFrom(from, to, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        111
Source: 
>     function safeApprove(ERC20 token, address spender, uint256 value) internal {
>         assert(token.approve(spender, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        103
Source: 
>     function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
>         assert(token.transfer(to, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        107
Source: 
>     function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {
>         assert(token.transferFrom(from, to, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        111
Source: 
>     function safeApprove(ERC20 token, address spender, uint256 value) internal {
>         assert(token.approve(spender, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        103
Source: 
>     function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
>         assert(token.transfer(to, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        107
Source: 
>     function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {
>         assert(token.transferFrom(from, to, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        111
Source: 
>     function safeApprove(ERC20 token, address spender, uint256 value) internal {
>         assert(token.approve(spender, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        103
Source: 
>     function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
>         assert(token.transfer(to, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        107
Source: 
>     function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {
>         assert(token.transferFrom(from, to, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        111
Source: 
>     function safeApprove(ERC20 token, address spender, uint256 value) internal {
>         assert(token.approve(spender, value));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC20Basic
Line:        43
Source: 
> contract ERC20Basic {
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function balanceOf(address who) public view returns (uint256);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MountableToken
Line:        264
Source: 
> contract MountableToken is StandardToken, Owned, BurnableToken {
>     string public constant name = "Mountable Token";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "MNT";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MountableToken
Line:        265
Source: 
>     string public constant name = "Mountable Token";
>     string public constant symbol = "MNT";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 15;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MountableToken
Line:        266
Source: 
>     string public constant symbol = "MNT";
>     uint8 public constant decimals = 15;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TokenTimelock
Line:        128
Source: 
>     function tokenTimelock(ERC20Basic _token, address _beneficiary, uint64 _releaseTime) public {
>         require(_releaseTime > uint64(block.timestamp));
>                                       ^^^^^^^^^^^^^^^
>         token = _token;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TokenTimelock
Line:        138
Source: 
>     function release() public {
>         require(uint64(block.timestamp) >= releaseTime);
>                        ^^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol
Tool Runtime = 14.089440399000068 seconds
#############################################