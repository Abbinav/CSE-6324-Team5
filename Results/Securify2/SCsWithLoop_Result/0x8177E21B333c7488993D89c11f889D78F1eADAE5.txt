pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        291
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != 0x0 && codehash != accountHash);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PriceProvider
Line:        443
Source: 
> 
>     function setup(
>     ^^^^^^^^^^^^^^^
>         address _gov,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PriceProvider
Line:        472
Source: 
> 
>     function getReward() public returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 acc = rewards[msg.sender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PriceProvider
Line:        483
Source: 
> 
>     function poke() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32[] memory ilks = registry.list();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PriceProvider
Line:        458
Source: 
> 
>         rewardToDistribute = IERC20(_gov).balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(rewardToDistribute > 0, "no reward to distribute");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SafeERC20
Line:        395
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PriceProvider
Line:        484
Source: 
>     function poke() public {
>         bytes32[] memory ilks = registry.list();
>                                 ^^^^^^^^^^^^^^^
>         for (uint256 i = 0; i < ilks.length; i++) {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    PriceProvider
Line:        486
Source: 
>         for (uint256 i = 0; i < ilks.length; i++) {
>             spot.poke(ilks[i]);
>             ^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        395
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        327
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PriceProvider
Line:        484
Source: 
>     function poke() public {
>         bytes32[] memory ilks = registry.list();
>                                 ^^^^^^^^^^^^^^^
>         for (uint256 i = 0; i < ilks.length; i++) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PriceProvider
Line:        486
Source: 
>         for (uint256 i = 0; i < ilks.length; i++) {
>             spot.poke(ilks[i]);
>             ^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        327
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>          ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> //pragma solidity >0.4.13 >=0.4.23 >=0.5.12 >=0.5.0 <0.6.0 >=0.5.10 <0.6.0 >=0.5.12 <0.6.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PriceProvider
Line:        458
Source: 
> 
>         rewardToDistribute = IERC20(_gov).balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(rewardToDistribute > 0, "no reward to distribute");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PriceProvider
Line:        484
Source: 
>     function poke() public {
>         bytes32[] memory ilks = registry.list();
>                                 ^^^^^^^^^^^^^^^
>         for (uint256 i = 0; i < ilks.length; i++) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PriceProvider
Line:        486
Source: 
>         for (uint256 i = 0; i < ilks.length; i++) {
>             spot.poke(ilks[i]);
>             ^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        292
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != 0x0 && codehash != accountHash);
>                 ^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PriceProvider
Line:        426
Source: 
>     mapping(address => uint256) public rewards;
>     RegistryLike public registry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     SpotLike public spot;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PriceProvider
Line:        427
Source: 
>     RegistryLike public registry;
>     SpotLike public spot;
>     ^^^^^^^^^^^^^^^^^^^^
>     address public gov;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PriceProvider
Line:        428
Source: 
>     SpotLike public spot;
>     address public gov;
>     ^^^^^^^^^^^^^^^^^^
>     address public owner;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PriceProvider
Line:        430
Source: 
>     address public owner;
>     uint256 public nextUpdate;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public updatePeriod;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PriceProvider
Line:        431
Source: 
>     uint256 public nextUpdate;
>     uint256 public updatePeriod;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rewardPerPeriod;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PriceProvider
Line:        432
Source: 
>     uint256 public updatePeriod;
>     uint256 public rewardPerPeriod;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public distributedReward;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PriceProvider
Line:        433
Source: 
>     uint256 public rewardPerPeriod;
>     uint256 public distributedReward;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rewardToDistribute;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PriceProvider
Line:        434
Source: 
>     uint256 public distributedReward;
>     uint256 public rewardToDistribute;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rewardTime;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PriceProvider
Line:        435
Source: 
>     uint256 public rewardToDistribute;
>     uint256 public rewardTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PriceProvider
Line:        493
Source: 
> 
>         nextUpdate = updatePeriod.add(block.timestamp);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        327
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        361
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        368
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        373
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PriceProvider
Line:        435
Source: 
>     uint256 public rewardToDistribute;
>     uint256 public rewardTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    PriceProvider
Line:        489
Source: 
> 
>         if (block.timestamp >= nextUpdate) {
>             ^^^^^^^^^^^^^^^
>             rewards[msg.sender] = rewards[msg.sender].add(rewardPerPeriod);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    PriceProvider
Line:        493
Source: 
> 
>         nextUpdate = updatePeriod.add(block.timestamp);
>                                       ^^^^^^^^^^^^^^^
>     }

[0m

---------------------------------------------
For contract 0x8177E21B333c7488993D89c11f889D78F1eADAE5.sol
Tool Runtime = 5.301505377000467 seconds
#############################################