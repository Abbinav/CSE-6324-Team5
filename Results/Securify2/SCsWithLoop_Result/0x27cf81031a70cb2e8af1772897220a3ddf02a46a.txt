pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EthMadness
Line:        189
Source: 
>     // Keeps the current top 3 best scores and who submitted them. When the contest ends, they'll be paid out
>     TopScore[3] public topThree;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        52
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        78
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        87
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        52
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        78
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        87
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EthMadness
Line:        234
Source: 
>     // Gets the total number of entries we've received
>     function getEntryCount() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return entryCount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EthMadness
Line:        239
Source: 
>     // Gets the number of Oracles we have registered
>     function getOracleCount() public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oracles.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EthMadness
Line:        244
Source: 
>     // Returns the transition times for our contest
>     function getTransitionTimes() public view returns (uint256, uint256, uint256, uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EthMadness
Line:        275
Source: 
>     // Submits a new entry to the tournament
>     function submitEntry(bytes16 picks, uint64 scoreA, uint64 scoreB, string memory bracketName) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(currentState == ContestState.OPEN_FOR_ENTRIES, "Must be in the open for entries state");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EthMadness
Line:        296
Source: 
>     // and it can only be done while the tournament is still open for entries
>     function addOracle(address oracle) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(currentState == ContestState.OPEN_FOR_ENTRIES, "Must be accepting entries");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EthMadness
Line:        304
Source: 
>     // but only while picks are still being made or after the contest completes
>     function refundRemaining(uint256 amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(currentState == ContestState.OPEN_FOR_ENTRIES || currentState == ContestState.COMPLETED, "Must be accepting entries");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EthMadness
Line:        312
Source: 
>     // Submits a new oracle's vote describing the results of the tournament
>     function submitOracleVote(uint oracleIndex, bytes16 winners, uint8 scoreA, uint8 scoreB) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(currentState == ContestState.WAITING_FOR_ORACLES, "Must be in waiting for oracles state");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EthMadness
Line:        321
Source: 
>     // 70% of the oracles
>     function closeOracleVoting(bytes16 winners, uint8 scoreA, uint8 scoreB) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(currentState == ContestState.WAITING_FOR_ORACLES);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EthMadness
Line:        347
Source: 
>     // Closes the entry period and marks that the actual tournament is in progress
>     function markTournamentInProgress() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         advanceState(ContestState.TOURNAMENT_IN_PROGRESS);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EthMadness
Line:        358
Source: 
>     // Mark that the tournament has completed and oracles can start submitting results
>     function markTournamentFinished() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         advanceState(ContestState.WAITING_FOR_ORACLES);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EthMadness
Line:        364
Source: 
>     // pays out the winnings to the 3 winners
>     function closeContestAndPayWinners() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         advanceState(ContestState.COMPLETED);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EthMadness
Line:        411
Source: 
>     
>     function claimTopEntry(uint256 entryCompressed) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(currentState == ContestState.WAITING_FOR_WINNING_CLAIMS, "Must be in the waiting for winners state");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EthMadness
Line:        308
Source: 
>         IERC20 erc20 = IERC20(prizeERC20TokenAddress);
>         erc20.transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EthMadness
Line:        354
Source: 
>         IERC20 erc20 = IERC20(prizeERC20TokenAddress);
>         require(erc20.balanceOf(address(this)) >= prizeAmount, "Must have a balance in this contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EthMadness
Line:        374
Source: 
>         IERC20 erc20 = IERC20(prizeERC20TokenAddress);
>         erc20.transfer(topThree[0].submitter, firstPrize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20.transfer(topThree[1].submitter, secondPrize);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EthMadness
Line:        375
Source: 
>         erc20.transfer(topThree[0].submitter, firstPrize);
>         erc20.transfer(topThree[1].submitter, secondPrize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20.transfer(topThree[2].submitter, thirdPrize);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EthMadness
Line:        376
Source: 
>         erc20.transfer(topThree[1].submitter, secondPrize);
>         erc20.transfer(topThree[2].submitter, thirdPrize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        87
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EthMadness
Line:        304
Source: 
>     // but only while picks are still being made or after the contest completes
>     function refundRemaining(uint256 amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(currentState == ContestState.OPEN_FOR_ENTRIES || currentState == ContestState.COMPLETED, "Must be accepting entries");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EthMadness
Line:        321
Source: 
>     // 70% of the oracles
>     function closeOracleVoting(bytes16 winners, uint8 scoreA, uint8 scoreB) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(currentState == ContestState.WAITING_FOR_ORACLES);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EthMadness
Line:        411
Source: 
>     
>     function claimTopEntry(uint256 entryCompressed) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(currentState == ContestState.WAITING_FOR_WINNING_CLAIMS, "Must be in the waiting for winners state");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EthMadness
Line:        262
Source: 
>     // Helper to make sure the picks submitted are legal
>     function arePicksOrResultsValid(bytes16 picksOrResults) public pure returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Go through and make sure that this entry has 1 pick for each game

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EthMadness
Line:        275
Source: 
>     // Submits a new entry to the tournament
>     function submitEntry(bytes16 picks, uint64 scoreA, uint64 scoreB, string memory bracketName) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(currentState == ContestState.OPEN_FOR_ENTRIES, "Must be in the open for entries state");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EthMadness
Line:        296
Source: 
>     // and it can only be done while the tournament is still open for entries
>     function addOracle(address oracle) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(currentState == ContestState.OPEN_FOR_ENTRIES, "Must be accepting entries");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EthMadness
Line:        312
Source: 
>     // Submits a new oracle's vote describing the results of the tournament
>     function submitOracleVote(uint oracleIndex, bytes16 winners, uint8 scoreA, uint8 scoreB) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(currentState == ContestState.WAITING_FOR_ORACLES, "Must be in waiting for oracles state");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EthMadness
Line:        280
Source: 
>         // Do some work to encode the picks and scores into a single uint256 which becomes a key
>         uint256 scoreAShifted = uint256(scoreA) * (2 ** (24 * 8));
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 scoreBShifted = uint256(scoreB) * (2 ** (16 * 8));

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    EthMadness
Line:        374
Source: 
>         IERC20 erc20 = IERC20(prizeERC20TokenAddress);
>         erc20.transfer(topThree[0].submitter, firstPrize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20.transfer(topThree[1].submitter, secondPrize);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    EthMadness
Line:        375
Source: 
>         erc20.transfer(topThree[0].submitter, firstPrize);
>         erc20.transfer(topThree[1].submitter, secondPrize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20.transfer(topThree[2].submitter, thirdPrize);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    EthMadness
Line:        376
Source: 
>         erc20.transfer(topThree[1].submitter, secondPrize);
>         erc20.transfer(topThree[2].submitter, thirdPrize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EthMadness
Line:        162
Source: 
>     // Maximum number of entries that will be allowed
>     uint constant MAX_ENTRIES = 2**48;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EthMadness
Line:        165
Source: 
>     // The number of entries which have been received.
>     uint48 entryCount = 0;
>     ^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EthMadness
Line:        183
Source: 
>     // The maximum number of oracles we'll allow vote in our contest
>     uint constant MAX_ORACLES = 10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EthMadness
Line:        354
Source: 
>         IERC20 erc20 = IERC20(prizeERC20TokenAddress);
>         require(erc20.balanceOf(address(this)) >= prizeAmount, "Must have a balance in this contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EthMadness
Line:        308
Source: 
>         IERC20 erc20 = IERC20(prizeERC20TokenAddress);
>         erc20.transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EthMadness
Line:        374
Source: 
>         IERC20 erc20 = IERC20(prizeERC20TokenAddress);
>         erc20.transfer(topThree[0].submitter, firstPrize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20.transfer(topThree[1].submitter, secondPrize);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EthMadness
Line:        375
Source: 
>         erc20.transfer(topThree[0].submitter, firstPrize);
>         erc20.transfer(topThree[1].submitter, secondPrize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20.transfer(topThree[2].submitter, thirdPrize);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EthMadness
Line:        376
Source: 
>         erc20.transfer(topThree[1].submitter, secondPrize);
>         erc20.transfer(topThree[2].submitter, thirdPrize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    EthMadness
Line:        186
Source: 
>     // The final result of the tournament that the oracles agreed on
>     Result public finalResult;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    EthMadness
Line:        189
Source: 
>     // Keeps the current top 3 best scores and who submitted them. When the contest ends, they'll be paid out
>     TopScore[3] public topThree;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthMadness
Line:        258
Source: 
>         
>         currentState = nextState;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthMadness
Line:        290
Source: 
>         Entrant memory entrant = Entrant(msg.sender, entryCount);
>         entries[entryCompressed] = entrant;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         entryCount++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthMadness
Line:        291
Source: 
>         entries[entryCompressed] = entrant;
>         entryCount++;
>         ^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthMadness
Line:        343
Source: 
>         advanceState(ContestState.WAITING_FOR_WINNING_CLAIMS);
>         finalResult = Result(winners, scoreA, scoreB, true);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthMadness
Line:        398
Source: 
>         if (isScoreBetter(scoreResult, topThree[0])) {
>             topThree[2] = topThree[1];
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             topThree[1] = topThree[0];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthMadness
Line:        399
Source: 
>             topThree[2] = topThree[1];
>             topThree[1] = topThree[0];
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             topThree[0] = scoreResult;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthMadness
Line:        400
Source: 
>             topThree[1] = topThree[0];
>             topThree[0] = scoreResult;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if (isScoreBetter(scoreResult, topThree[1])) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthMadness
Line:        402
Source: 
>         } else if (isScoreBetter(scoreResult, topThree[1])) {
>             topThree[2] = topThree[1];
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             topThree[1] = scoreResult;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthMadness
Line:        403
Source: 
>             topThree[2] = topThree[1];
>             topThree[1] = scoreResult;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if (isScoreBetter(scoreResult, topThree[2])) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EthMadness
Line:        405
Source: 
>         } else if (isScoreBetter(scoreResult, topThree[2])) {
>             topThree[2] = scoreResult;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    EthMadness
Line:        308
Source: 
>         IERC20 erc20 = IERC20(prizeERC20TokenAddress);
>         erc20.transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    EthMadness
Line:        374
Source: 
>         IERC20 erc20 = IERC20(prizeERC20TokenAddress);
>         erc20.transfer(topThree[0].submitter, firstPrize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20.transfer(topThree[1].submitter, secondPrize);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    EthMadness
Line:        375
Source: 
>         erc20.transfer(topThree[0].submitter, firstPrize);
>         erc20.transfer(topThree[1].submitter, secondPrize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20.transfer(topThree[2].submitter, thirdPrize);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    EthMadness
Line:        376
Source: 
>         erc20.transfer(topThree[1].submitter, secondPrize);
>         erc20.transfer(topThree[2].submitter, thirdPrize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EthMadness
Line:        162
Source: 
>     // Maximum number of entries that will be allowed
>     uint constant MAX_ENTRIES = 2**48;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m

---------------------------------------------
For contract 0x27cf81031a70cb2e8af1772897220a3ddf02a46a.sol
Tool Runtime = 13.778043106000041 seconds
#############################################