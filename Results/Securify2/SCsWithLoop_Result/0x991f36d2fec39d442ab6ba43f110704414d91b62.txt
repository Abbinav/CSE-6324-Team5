[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Token
Line:        139
Source: 
>         uint32 _size;
>         assembly {
>         ^^^^^^^^^^
>             _size := extcodesize(_to)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Token
Line:        25
Source: 
>     uint8 public constant decimals = 18;
>     address owner = 0x929B1F2328d03c05b0Fb36053222fB4B15bb29dd;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Token
Line:        41
Source: 
>     }
>     Info private info;
>     ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Token
Line:        184
Source: 
> 
>     function allowance(address _user, address _spender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Token
Line:        192
Source: 
> 
>     function allInfoFor(address _user)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Token
Line:        144
Source: 
>             require(
>                 Callable(_to).tokenCallback(msg.sender, _transferred, _data)
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Token
Line:        62
Source: 
> 
>     function stake(uint256 _tokens) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _stake(_tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Token
Line:        66
Source: 
> 
>     function unstake(uint256 _tokens) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _unstake(_tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        107
Source: 
> 
>     function transfer(address _to, uint256 _tokens) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, _to, _tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        112
Source: 
> 
>     function approve(address _spender, uint256 _tokens)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        121
Source: 
> 
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        132
Source: 
> 
>     function transferAndCall(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        168
Source: 
> 
>     function balanceOf(address _user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return info.users[_user].balance - stakedOf(_user);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        172
Source: 
> 
>     function stakedOf(address _user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return info.users[_user].staked;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        176
Source: 
> 
>     function dividendsOf(address _user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        184
Source: 
> 
>     function allowance(address _user, address _spender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Token
Line:        192
Source: 
> 
>     function allInfoFor(address _user)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Token
Line:        253
Source: 
>         info.scaledPayoutPerToken +=
>             (_feeAmount * FLOAT_SCALAR) /
>              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             info.totalStaked;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Token
Line:        74
Source: 
>         info.users[msg.sender].scaledPayout += int256(
>             _dividends * FLOAT_SCALAR
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Token
Line:        219
Source: 
>         info.users[_from].balance -= _tokens;
>         uint256 _feeAmount = (_tokens * STAKE_FEE) / 100;
>                               ^^^^^^^^^^^^^^^^^^^
>         uint256 _transferred = _tokens - _feeAmount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Token
Line:        225
Source: 
>             info.scaledPayoutPerToken +=
>                 (_feeAmount * FLOAT_SCALAR) /
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^
>                 info.totalStaked;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Token
Line:        22
Source: 
> 
>     string public constant name = "FurToken";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "FUR";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Token
Line:        23
Source: 
>     string public constant name = "FurToken";
>     string public constant symbol = "FUR";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Token
Line:        24
Source: 
>     string public constant symbol = "FUR";
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address owner = 0x929B1F2328d03c05b0Fb36053222fB4B15bb29dd;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Token
Line:        71
Source: 
>     function collect() external returns (uint256) {
>         uint256 _dividends = dividendsOf(msg.sender);
>         ^^^^^^^^^^^^^^^^^^
>         require(_dividends >= 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Token
Line:        84
Source: 
>         require(balanceOf(msg.sender) >= _tokens);
>         uint256 _droppedAmount = _tokens;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         info.users[msg.sender].balance -= _tokens;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Token
Line:        137
Source: 
>     ) external returns (bool) {
>         uint256 _transferred = _transfer(msg.sender, _to, _tokens);
>         ^^^^^^^^^^^^^^^^^^^^
>         uint32 _size;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Token
Line:        138
Source: 
>         uint256 _transferred = _transfer(msg.sender, _to, _tokens);
>         uint32 _size;
>         ^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Token
Line:        219
Source: 
>         info.users[_from].balance -= _tokens;
>         uint256 _feeAmount = (_tokens * STAKE_FEE) / 100;
>         ^^^^^^^^^^^^^^^^^^
>         uint256 _transferred = _tokens - _feeAmount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Token
Line:        220
Source: 
>         uint256 _feeAmount = (_tokens * STAKE_FEE) / 100;
>         uint256 _transferred = _tokens - _feeAmount;
>         ^^^^^^^^^^^^^^^^^^^^
>         if (info.totalStaked > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Token
Line:        251
Source: 
>         require(stakedOf(msg.sender) >= _amount);
>         uint256 _feeAmount = (_amount * 10) / 100;
>         ^^^^^^^^^^^^^^^^^^
>         info.scaledPayoutPerToken +=

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity ^0.5.13;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Token
Line:        25
Source: 
>     uint8 public constant decimals = 18;
>     address owner = 0x929B1F2328d03c05b0Fb36053222fB4B15bb29dd;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Token
Line:        144
Source: 
>             require(
>                 Callable(_to).tokenCallback(msg.sender, _transferred, _data)
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Token
Line:        142
Source: 
>         }
>         if (_size > 0) {
>             ^^^^^
>             require(

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Token
Line:        41
Source: 
>     }
>     Info private info;
>     ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        240
Source: 
>         require(stakedOf(msg.sender) + _amount >= MIN_STAKE_AMOUNT);
>         info.totalStaked += _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         info.users[msg.sender].staked += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        241
Source: 
>         info.totalStaked += _amount;
>         info.users[msg.sender].staked += _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         info.users[msg.sender].scaledPayout += int256(

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        242
Source: 
>         info.users[msg.sender].staked += _amount;
>         info.users[msg.sender].scaledPayout += int256(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _amount * info.scaledPayoutPerToken

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        252
Source: 
>         uint256 _feeAmount = (_amount * 10) / 100;
>         info.scaledPayoutPerToken +=
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             (_feeAmount * FLOAT_SCALAR) /

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        255
Source: 
>             info.totalStaked;
>         info.totalStaked -= _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         info.users[msg.sender].balance -= _feeAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        256
Source: 
>         info.totalStaked -= _amount;
>         info.users[msg.sender].balance -= _feeAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         info.users[msg.sender].staked -= _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        257
Source: 
>         info.users[msg.sender].balance -= _feeAmount;
>         info.users[msg.sender].staked -= _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         info.users[msg.sender].scaledPayout -= int256(

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        258
Source: 
>         info.users[msg.sender].staked -= _amount;
>         info.users[msg.sender].scaledPayout -= int256(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _amount * info.scaledPayoutPerToken

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        73
Source: 
>         require(_dividends >= 0);
>         info.users[msg.sender].scaledPayout += int256(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _dividends * FLOAT_SCALAR

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        76
Source: 
>         );
>         info.users[msg.sender].balance += _dividends;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(this), msg.sender, _dividends);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        85
Source: 
>         uint256 _droppedAmount = _tokens;
>         info.users[msg.sender].balance -= _tokens;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (info.totalStaked > 0) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        87
Source: 
>         if (info.totalStaked > 0) {
>             info.scaledPayoutPerToken +=
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 (_droppedAmount * FLOAT_SCALAR) /

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        100
Source: 
>         require(balanceOf(msg.sender) >= _tokens);
>         info.users[msg.sender].balance -= _tokens;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         info.scaledPayoutPerToken +=

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        101
Source: 
>         info.users[msg.sender].balance -= _tokens;
>         info.scaledPayoutPerToken +=
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             (_tokens * FLOAT_SCALAR) /

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        218
Source: 
>         require(balanceOf(_from) >= _tokens);
>         info.users[_from].balance -= _tokens;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _feeAmount = (_tokens * STAKE_FEE) / 100;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        222
Source: 
>         if (info.totalStaked > 0) {
>             info.users[_to].balance += _transferred;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Transfer(_from, _to, _transferred);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        224
Source: 
>             emit Transfer(_from, _to, _transferred);
>             info.scaledPayoutPerToken +=
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 (_feeAmount * FLOAT_SCALAR) /

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Token
Line:        231
Source: 
>         } else {
>             info.users[_to].balance += _tokens;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Transfer(_from, _to, _tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Token
Line:        116
Source: 
>     {
>         info.users[msg.sender].allowance[_spender] = _tokens;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, _tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Token
Line:        22
Source: 
> 
>     string public constant name = "FurToken";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "FUR";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Token
Line:        23
Source: 
>     string public constant name = "FurToken";
>     string public constant symbol = "FUR";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Token
Line:        24
Source: 
>     string public constant symbol = "FUR";
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address owner = 0x929B1F2328d03c05b0Fb36053222fB4B15bb29dd;

[0m

---------------------------------------------
For contract 0x991f36d2fec39d442ab6ba43f110704414d91b62.sol
Tool Runtime = 5.515693622999606 seconds
#############################################