pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IDCOREVote
Line:        101
Source: 
> 
>     function averageVotingValue(address poolAddress, uint256 votingItem) public view returns (uint16) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (numVoters[poolAddress][votingItem] == 0) return 0; // no votes

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IDCOREVote
Line:        114
Source: 
> 
>     function vote(address poolAddress, uint256 votingItem, uint16 votingValue) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(votingValue >= MIN_VOTING_VALUE, "votingValue is smaller than MIN_VOTING_VALUE");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    IDCOREVote
Line:        90
Source: 
>         // hasn't any staking power
>         if (rewards.stakingPower(account) == 0) return false;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    IDCOREVote
Line:        124
Source: 
>                 DCORERewards rewards = DCORERewards(poolAddress);
>                 uint256 minStakingPower = rewards.stakingPower(msg.sender);
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    IDCOREVote
Line:        95
Source: 
>         for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {
>             if (rewards.stakingPower(voters[poolAddress][votingItem][i]) < rewards.stakingPower(account)) return true; // there is some voters has lower staking power
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    IDCOREVote
Line:        95
Source: 
>         for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {
>             if (rewards.stakingPower(voters[poolAddress][votingItem][i]) < rewards.stakingPower(account)) return true; // there is some voters has lower staking power
>                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    IDCOREVote
Line:        108
Source: 
>             address voter = voters[poolAddress][votingItem][i];
>             totalStakingPower = totalStakingPower.add(rewards.stakingPower(voter));
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalWeightVotingValue = totalWeightVotingValue.add(rewards.stakingPower(voter).mul(voter2VotingValue[poolAddress][votingItem][voter]));

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    IDCOREVote
Line:        109
Source: 
>             totalStakingPower = totalStakingPower.add(rewards.stakingPower(voter));
>             totalWeightVotingValue = totalWeightVotingValue.add(rewards.stakingPower(voter).mul(voter2VotingValue[poolAddress][votingItem][voter]));
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    IDCOREVote
Line:        126
Source: 
>                 for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {
>                     if (rewards.stakingPower(voters[poolAddress][votingItem][i]) < minStakingPower) {
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         voterIndex = i;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    IDCOREVote
Line:        128
Source: 
>                         voterIndex = i;
>                         minStakingPower = rewards.stakingPower(voters[poolAddress][votingItem][i]);
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    IDCOREVote
Line:        90
Source: 
>         // hasn't any staking power
>         if (rewards.stakingPower(account) == 0) return false;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    IDCOREVote
Line:        95
Source: 
>         for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {
>             if (rewards.stakingPower(voters[poolAddress][votingItem][i]) < rewards.stakingPower(account)) return true; // there is some voters has lower staking power
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    IDCOREVote
Line:        95
Source: 
>         for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {
>             if (rewards.stakingPower(voters[poolAddress][votingItem][i]) < rewards.stakingPower(account)) return true; // there is some voters has lower staking power
>                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    IDCOREVote
Line:        124
Source: 
>                 DCORERewards rewards = DCORERewards(poolAddress);
>                 uint256 minStakingPower = rewards.stakingPower(msg.sender);
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    IDCOREVote
Line:        126
Source: 
>                 for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {
>                     if (rewards.stakingPower(voters[poolAddress][votingItem][i]) < minStakingPower) {
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         voterIndex = i;

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    IDCOREVote
Line:        128
Source: 
>                         voterIndex = i;
>                         minStakingPower = rewards.stakingPower(voters[poolAddress][votingItem][i]);
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    IDCOREVote
Line:        90
Source: 
>         // hasn't any staking power
>         if (rewards.stakingPower(account) == 0) return false;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    IDCOREVote
Line:        95
Source: 
>         for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {
>             if (rewards.stakingPower(voters[poolAddress][votingItem][i]) < rewards.stakingPower(account)) return true; // there is some voters has lower staking power
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    IDCOREVote
Line:        95
Source: 
>         for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {
>             if (rewards.stakingPower(voters[poolAddress][votingItem][i]) < rewards.stakingPower(account)) return true; // there is some voters has lower staking power
>                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    IDCOREVote
Line:        108
Source: 
>             address voter = voters[poolAddress][votingItem][i];
>             totalStakingPower = totalStakingPower.add(rewards.stakingPower(voter));
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalWeightVotingValue = totalWeightVotingValue.add(rewards.stakingPower(voter).mul(voter2VotingValue[poolAddress][votingItem][voter]));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    IDCOREVote
Line:        109
Source: 
>             totalStakingPower = totalStakingPower.add(rewards.stakingPower(voter));
>             totalWeightVotingValue = totalWeightVotingValue.add(rewards.stakingPower(voter).mul(voter2VotingValue[poolAddress][votingItem][voter]));
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    IDCOREVote
Line:        124
Source: 
>                 DCORERewards rewards = DCORERewards(poolAddress);
>                 uint256 minStakingPower = rewards.stakingPower(msg.sender);
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    IDCOREVote
Line:        126
Source: 
>                 for (uint8 i = 0; i < numVoters[poolAddress][votingItem]; i++) {
>                     if (rewards.stakingPower(voters[poolAddress][votingItem][i]) < minStakingPower) {
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         voterIndex = i;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    IDCOREVote
Line:        128
Source: 
>                         voterIndex = i;
>                         minStakingPower = rewards.stakingPower(voters[poolAddress][votingItem][i]);
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m

---------------------------------------------
For contract 0x2f650f9f64a535850e799fcc9bbef773d7145701.sol
Tool Runtime = 5.443594407999626 seconds
#############################################