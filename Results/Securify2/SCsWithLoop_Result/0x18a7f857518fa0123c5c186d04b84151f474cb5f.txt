pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CtPublicSale
Line:        258
Source: 
>     // Ct
>     ICt public CT = ICt(0x3Fa7807FF5a1C70699C912b66413f358AaDeaA75);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CtPublicSale
Line:        268
Source: 
> 	
>     uint16[2] private WHITELIST_REF_REWARDS_PCT = [
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         15,  // 15% for Level.1

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CtPublicSale
Line:        276
Source: 
>     // Wei & Gas
>     uint72 private WEI_MIN = 0.1 ether;     
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint72 private WEI_MAX = 100 ether;     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CtPublicSale
Line:        277
Source: 
>     uint72 private WEI_MIN = 0.1 ether;     
>     uint72 private WEI_MAX = 100 ether;     
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint72 private WEI_BONUS = 10 ether;    

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CtPublicSale
Line:        278
Source: 
>     uint72 private WEI_MAX = 100 ether;     
>     uint72 private WEI_BONUS = 10 ether;    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint24 private GAS_MIN = 3000000;       

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CtPublicSale
Line:        279
Source: 
>     uint72 private WEI_BONUS = 10 ether;    
>     uint24 private GAS_MIN = 3000000;       
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint24 private GAS_EX  = 1500000;        

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CtPublicSale
Line:        280
Source: 
>     uint24 private GAS_MIN = 3000000;       
>     uint24 private GAS_EX  = 1500000;        
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CtPublicSale
Line:        283
Source: 
>     // Price
>     uint256 private CT_USD_PRICE_START = 100000;       
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private CT_USD_PRICE_STEP = 10000;         

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CtPublicSale
Line:        284
Source: 
>     uint256 private CT_USD_PRICE_START = 100000;       
>     uint256 private CT_USD_PRICE_STEP = 10000;         
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CtPublicSale
Line:        286
Source: 
>    
>     uint256 private STAGE_USD_CAP_START = 10000000000000;    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_STEP = 1000000000000;       

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CtPublicSale
Line:        287
Source: 
>     uint256 private STAGE_USD_CAP_START = 10000000000000;    
>     uint256 private STAGE_USD_CAP_STEP = 1000000000000;       
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_MAX = 100000000000000;   

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CtPublicSale
Line:        288
Source: 
>     uint256 private STAGE_USD_CAP_STEP = 1000000000000;       
>     uint256 private STAGE_USD_CAP_MAX = 100000000000000;   
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CtPublicSale
Line:        290
Source: 
>     
>     uint256 private STAGE_CT_CAP_START = 1000000000000;    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_CT_CAP_STEP  = 1000000000000;       

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CtPublicSale
Line:        291
Source: 
>     uint256 private STAGE_CT_CAP_START = 1000000000000;    
>     uint256 private STAGE_CT_CAP_STEP  = 1000000000000;       
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_CT_CAP_MAX   = 100000000000000;    

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CtPublicSale
Line:        292
Source: 
>     uint256 private STAGE_CT_CAP_STEP  = 1000000000000;       
>     uint256 private STAGE_CT_CAP_MAX   = 100000000000000;    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CtPublicSale
Line:        296
Source: 
>     
>     uint16 private STAGE_MAX = 100;  
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CtPublicSale
Line:        312
Source: 
>     uint256 private _weiSold;  
>     uint256 private _weiRefRewarded;  
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        156
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        200
Source: 
>      */
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        156
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CtPublicSale
Line:        363
Source: 
>      */
>     function startTimestamp() public view returns (uint32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _startTimestamp;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CtPublicSale
Line:        430
Source: 
>      */
>     function usd2CTByStage(uint256 usdAmount, uint16 stageIndex) public view returns (uint256) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CtPublicSale
Line:        442
Source: 
>      */
>     function status() public view returns (uint256 auditEtherPrice,
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                                            uint16  stage,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CtPublicSale
Line:        538
Source: 
>      */
>     function stageStatus(uint16 stageIndex) public view returns (uint256 CTUsdPrice,
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                                                                  uint256 CTCap,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CtPublicSale
Line:        577
Source: 
>      */
>     function accountQuery(address account) public view returns (uint256 CTIssued,
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                                                                 uint256 CTWhitelisted,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CtPublicSale
Line:        686
Source: 
>     
>     function _mint(address account, uint256 value) public onlyOwner returns (bool) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(CT.balanceOf(address(this)) > value);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CtPublicSale
Line:        632
Source: 
>         {
>             assert(CT.transfer(msg.sender, __CTIssued));
>                                    ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CtPublicSale
Line:        656
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>                             ^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CtPublicSale
Line:        680
Source: 
>          
>         _receiver.transfer(__weiTeam);
>                         ^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CtPublicSale
Line:        687
Source: 
>     function _mint(address account, uint256 value) public onlyOwner returns (bool) {
>         require(CT.balanceOf(address(this)) > value);
>                                 ^^^^^^^^^^^^^^^^^^^^^
>         require(account != address(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CtPublicSale
Line:        690
Source: 
> 
>         assert(CT.transfer(account, value));
>                                ^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    CtPublicSale
Line:        867
Source: 
>             
>             assert(CT.transfer(_referrers_[i], __ctReward));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    CtPublicSale
Line:        710
Source: 
> 			
>             address __refAccount = CT.referrer(__cursor);
>                                                    ^^^^^^
>             

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CtPublicSale
Line:        370
Source: 
>      */
>     function setStartTimestamp(uint32 timestamp) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _startTimestamp = timestamp;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CtPublicSale
Line:        379
Source: 
>      */
>     function setEtherPrice(uint256 value) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _etherPrice = value;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CtPublicSale
Line:        430
Source: 
>      */
>     function usd2CTByStage(uint256 usdAmount, uint16 stageIndex) public view returns (uint256) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CtPublicSale
Line:        577
Source: 
>      */
>     function accountQuery(address account) public view returns (uint256 CTIssued,
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                                                                 uint256 CTWhitelisted,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath256
Line:        51
Source: 
>         }
>         c = a * b;
>             ^^^^^
>         assert(c / a == b);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath256
Line:        63
Source: 
>         uint256 c = a / b;
>         assert(a == b * c + a % b);
>                     ^^^^^
>         return a / b;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CtPublicSale
Line:        632
Source: 
>         {
>             assert(CT.transfer(msg.sender, __CTIssued));
>                                    ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CtPublicSale
Line:        867
Source: 
>             
>             assert(CT.transfer(_referrers_[i], __ctReward));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CtPublicSale
Line:        710
Source: 
> 			
>             address __refAccount = CT.referrer(__cursor);
>                                                    ^^^^^^
>             

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    CtPublicSale
Line:        656
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>                             ^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    CtPublicSale
Line:        680
Source: 
>          
>         _receiver.transfer(__weiTeam);
>                         ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        174
Source: 
>         require(newOwner != _owner);
>         address __previousOwner = _owner;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = newOwner;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        258
Source: 
>     // Ct
>     ICt public CT = ICt(0x3Fa7807FF5a1C70699C912b66413f358AaDeaA75);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        268
Source: 
> 	
>     uint16[2] private WHITELIST_REF_REWARDS_PCT = [
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         15,  // 15% for Level.1

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        276
Source: 
>     // Wei & Gas
>     uint72 private WEI_MIN = 0.1 ether;     
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint72 private WEI_MAX = 100 ether;     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        277
Source: 
>     uint72 private WEI_MIN = 0.1 ether;     
>     uint72 private WEI_MAX = 100 ether;     
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint72 private WEI_BONUS = 10 ether;    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        278
Source: 
>     uint72 private WEI_MAX = 100 ether;     
>     uint72 private WEI_BONUS = 10 ether;    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint24 private GAS_MIN = 3000000;       

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        279
Source: 
>     uint72 private WEI_BONUS = 10 ether;    
>     uint24 private GAS_MIN = 3000000;       
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint24 private GAS_EX  = 1500000;        

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        280
Source: 
>     uint24 private GAS_MIN = 3000000;       
>     uint24 private GAS_EX  = 1500000;        
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        283
Source: 
>     // Price
>     uint256 private CT_USD_PRICE_START = 100000;       
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private CT_USD_PRICE_STEP = 10000;         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        284
Source: 
>     uint256 private CT_USD_PRICE_START = 100000;       
>     uint256 private CT_USD_PRICE_STEP = 10000;         
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        286
Source: 
>    
>     uint256 private STAGE_USD_CAP_START = 10000000000000;    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_STEP = 1000000000000;       

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        287
Source: 
>     uint256 private STAGE_USD_CAP_START = 10000000000000;    
>     uint256 private STAGE_USD_CAP_STEP = 1000000000000;       
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_MAX = 100000000000000;   

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        288
Source: 
>     uint256 private STAGE_USD_CAP_STEP = 1000000000000;       
>     uint256 private STAGE_USD_CAP_MAX = 100000000000000;   
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        290
Source: 
>     
>     uint256 private STAGE_CT_CAP_START = 1000000000000;    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_CT_CAP_STEP  = 1000000000000;       

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        291
Source: 
>     uint256 private STAGE_CT_CAP_START = 1000000000000;    
>     uint256 private STAGE_CT_CAP_STEP  = 1000000000000;       
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_CT_CAP_MAX   = 100000000000000;    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        292
Source: 
>     uint256 private STAGE_CT_CAP_STEP  = 1000000000000;       
>     uint256 private STAGE_CT_CAP_MAX   = 100000000000000;    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        294
Source: 
>     
>     uint256 private _CTUsdPrice = CT_USD_PRICE_START; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        296
Source: 
>     
>     uint16 private STAGE_MAX = 100;  
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        304
Source: 
>     uint256 private _txs; 
>     uint256 private _CTTxs;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _CTBonusTxs;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        305
Source: 
>     uint256 private _CTTxs;
>     uint256 private _CTBonusTxs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _CTWhitelistTxs;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        306
Source: 
>     uint256 private _CTBonusTxs;
>     uint256 private _CTWhitelistTxs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _CTIssued;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        307
Source: 
>     uint256 private _CTWhitelistTxs;
>     uint256 private _CTIssued;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _CTBonus;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        308
Source: 
>     uint256 private _CTIssued;
>     uint256 private _CTBonus;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _CTWhitelist;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        309
Source: 
>     uint256 private _CTBonus;
>     uint256 private _CTWhitelist;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _usdSold;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        422
Source: 
>      */
>     function CT2usd(uint256 usdAmount) private view returns (uint256) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        506
Source: 
>     function stageUsdCap(uint16 stageIndex) private view returns (uint256) {
>         uint256 __usdCap = STAGE_USD_CAP_START.add(STAGE_USD_CAP_STEP.mul(stageIndex));
>                         ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        517
Source: 
>     function stageCTCapGet(uint16 stageIndex) private view returns (uint256) {
>         uint256 __ctCap = STAGE_CT_CAP_START.add(STAGE_CT_CAP_STEP.mul(stageIndex));
>                         ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        610
Source: 
> 		
>         uint256 __usdAmount = wei2usd(msg.value);
>                         ^^^^^^^^^^^^^^^^^^^
>         uint256 __usdRemain = __usdAmount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        611
Source: 
>         uint256 __usdAmount = wei2usd(msg.value);
>         uint256 __usdRemain = __usdAmount;
>                         ^^^^^^^^^^^^^^^^^^
>         uint256 __ctRemain = usd2CT(__usdAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        612
Source: 
>         uint256 __usdRemain = __usdAmount;
>         uint256 __ctRemain = usd2CT(__usdAmount);
>                         ^^^^^^^^^^^^^^^^^^
>         uint256 __CTIssued; 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        613
Source: 
>         uint256 __ctRemain = usd2CT(__usdAmount);
>         uint256 __CTIssued; 
>                         ^^^^
>         uint256 __usdUsed;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        614
Source: 
>         uint256 __CTIssued; 
>         uint256 __usdUsed;
>                         ^^
>         uint256 __weiUsed;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        615
Source: 
>         uint256 __usdUsed;
>         uint256 __weiUsed;
>                         ^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        624
Source: 
> 			
>             uint256 __txCTIssued;
>                             ^^^^^
> 			

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        651
Source: 
>         if (__usdRemain > 0) {
>             uint256 __weiRemain = usd2wei(__usdRemain);
>                             ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        674
Source: 
>         // Wei team
>         uint256 __weiTeam;
>                         ^^
>        

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        686
Source: 
>     
>     function _mint(address account, uint256 value) public onlyOwner returns (bool) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(CT.balanceOf(address(this)) > value);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        706
Source: 
> 		
>         address __cursor = msg.sender;
>                         ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        710
Source: 
> 			
>             address __refAccount = CT.referrer(__cursor);
>                             ^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        735
Source: 
> 		
> 		uint256 __stageCtCap = STAGE_CT_CAP_STEP;
>                   ^^^^^^^^^^^^^^^^^^^^
> 		uint256 __CTsued;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        736
Source: 
> 		uint256 __stageCtCap = STAGE_CT_CAP_STEP;
> 		uint256 __CTsued;
>                   ^
>         uint256 __CTIssued;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        737
Source: 
> 		uint256 __CTsued;
>         uint256 __CTIssued;
>                         ^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        760
Source: 
>         
>         uint256 __usdUsed = CT2usd(__CTIssued);
>                         ^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        765
Source: 
>         
>         uint256 __ctRemain = __CTsued.sub(__CTIssued);
>                         ^^^^^^^^^^^^^^^^^^
>         uint256 __usdRemain = usdAmount.sub(__usdUsed);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        766
Source: 
>         uint256 __ctRemain = __CTsued.sub(__CTIssued);
>         uint256 __usdRemain = usdAmount.sub(__usdUsed);
>                         ^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        811
Source: 
> 		
> 		uint256 __stageCtCap = STAGE_CT_CAP_STEP;//stageCTCapGet(_stage);
>                   ^^^^^^^^^^^^^^^^^^^^
> 	    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        813
Source: 
> 	    
> 	    uint256 __remainCT = amount; 
>                      ^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        817
Source: 
>             
>             uint256 __transferCT = __stageCtCap.sub(_stageCTIssued[_stage]);
>                             ^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        861
Source: 
>     function sendWhitelistReferralRewards(uint256 ctIssued) private {
>         uint256 __ctIssued = ctIssued;
>                         ^^^^^^^^^^^^^^
>          

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CtPublicSale
Line:        865
Source: 
> 			
>             uint256 __ctReward = __ctIssued.mul(_rewards_[i]).div(100);
>                             ^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        18
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CtPublicSale
Line:        261
Source: 
>     // Start timestamp
>     uint32 _startTimestamp;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CtPublicSale
Line:        279
Source: 
>     uint72 private WEI_BONUS = 10 ether;    
>     uint24 private GAS_MIN = 3000000;       
>                              ^^^^^^^
>     uint24 private GAS_EX  = 1500000;        

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CtPublicSale
Line:        280
Source: 
>     uint24 private GAS_MIN = 3000000;       
>     uint24 private GAS_EX  = 1500000;        
>                              ^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CtPublicSale
Line:        283
Source: 
>     // Price
>     uint256 private CT_USD_PRICE_START = 100000;       
>                                          ^^^^^^
>     uint256 private CT_USD_PRICE_STEP = 10000;         

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CtPublicSale
Line:        286
Source: 
>    
>     uint256 private STAGE_USD_CAP_START = 10000000000000;    
>                                           ^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_STEP = 1000000000000;       

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CtPublicSale
Line:        287
Source: 
>     uint256 private STAGE_USD_CAP_START = 10000000000000;    
>     uint256 private STAGE_USD_CAP_STEP = 1000000000000;       
>                                          ^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_MAX = 100000000000000;   

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CtPublicSale
Line:        288
Source: 
>     uint256 private STAGE_USD_CAP_STEP = 1000000000000;       
>     uint256 private STAGE_USD_CAP_MAX = 100000000000000;   
>                                         ^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CtPublicSale
Line:        290
Source: 
>     
>     uint256 private STAGE_CT_CAP_START = 1000000000000;    
>                                          ^^^^^^^^^^^^^
>     uint256 private STAGE_CT_CAP_STEP  = 1000000000000;       

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CtPublicSale
Line:        291
Source: 
>     uint256 private STAGE_CT_CAP_START = 1000000000000;    
>     uint256 private STAGE_CT_CAP_STEP  = 1000000000000;       
>                                          ^^^^^^^^^^^^^
>     uint256 private STAGE_CT_CAP_MAX   = 100000000000000;    

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CtPublicSale
Line:        292
Source: 
>     uint256 private STAGE_CT_CAP_STEP  = 1000000000000;       
>     uint256 private STAGE_CT_CAP_MAX   = 100000000000000;    
>                                          ^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CtPublicSale
Line:        416
Source: 
>       
> 		return usdAmount.mul(1000000).div(_CTUsdPrice);
>                                        ^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CtPublicSale
Line:        426
Source: 
>     }
> 
> 
>     /**

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CtPublicSale
Line:        435
Source: 
>         }
>         return usdAmount.mul(1000000).div(stageCTUsdPrice(stageIndex));
>                                              ^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CtPublicSale
Line:        656
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>                             ^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CtPublicSale
Line:        680
Source: 
>          
>         _receiver.transfer(__weiTeam);
>                         ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CtPublicSale
Line:        656
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>                             ^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CtPublicSale
Line:        680
Source: 
>          
>         _receiver.transfer(__weiTeam);
>                         ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CtPublicSale
Line:        656
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>                             ^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CtPublicSale
Line:        680
Source: 
>          
>         _receiver.transfer(__weiTeam);
>                         ^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CtPublicSale
Line:        632
Source: 
>         {
>             assert(CT.transfer(msg.sender, __CTIssued));
>                                    ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CtPublicSale
Line:        867
Source: 
>             
>             assert(CT.transfer(_referrers_[i], __ctReward));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CtPublicSale
Line:        710
Source: 
> 			
>             address __refAccount = CT.referrer(__cursor);
>                                                    ^^^^^^
>             

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CtPublicSale
Line:        687
Source: 
>     function _mint(address account, uint256 value) public onlyOwner returns (bool) {
>         require(CT.balanceOf(address(this)) > value);
>                                 ^^^^^^^^^^^^^^^^^^^^^
>         require(account != address(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CtPublicSale
Line:        690
Source: 
> 
>         assert(CT.transfer(account, value));
>                                ^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CtPublicSale
Line:        261
Source: 
>     // Start timestamp
>     uint32 _startTimestamp;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CtPublicSale
Line:        264
Source: 
>     // Audit ether price
>     uint256 private _etherPrice;    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CtPublicSale
Line:        303
Source: 
>     // Sum
>     uint256 private _txs; 
>     ^^^^^^^^^^^^^^^^^^^^
>     uint256 private _CTTxs;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CtPublicSale
Line:        304
Source: 
>     uint256 private _txs; 
>     uint256 private _CTTxs;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _CTBonusTxs;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CtPublicSale
Line:        305
Source: 
>     uint256 private _CTTxs;
>     uint256 private _CTBonusTxs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _CTWhitelistTxs;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CtPublicSale
Line:        306
Source: 
>     uint256 private _CTBonusTxs;
>     uint256 private _CTWhitelistTxs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _CTIssued;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CtPublicSale
Line:        307
Source: 
>     uint256 private _CTWhitelistTxs;
>     uint256 private _CTIssued;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _CTBonus;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CtPublicSale
Line:        308
Source: 
>     uint256 private _CTIssued;
>     uint256 private _CTBonus;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _CTWhitelist;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CtPublicSale
Line:        309
Source: 
>     uint256 private _CTBonus;
>     uint256 private _CTWhitelist;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _usdSold;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CtPublicSale
Line:        310
Source: 
>     uint256 private _CTWhitelist;
>     uint256 private _usdSold;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _weiSold;  

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CtPublicSale
Line:        311
Source: 
>     uint256 private _usdSold;
>     uint256 private _weiSold;  
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _weiRefRewarded;  

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CtPublicSale
Line:        314
Source: 
>     
>     uint256 private _ctRefRewarded;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _weiTeam=0; 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CtPublicSale
Line:        320
Source: 
>     // During tx
>     bool private _inWhitelist_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CtPublicSale
Line:        312
Source: 
>     uint256 private _weiSold;  
>     uint256 private _weiRefRewarded;  
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CtPublicSale
Line:        656
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>                             ^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CtPublicSale
Line:        680
Source: 
>          
>         _receiver.transfer(__weiTeam);
>                         ^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        662
Source: 
> 		
>             _txs = _txs.add(1);
>                             ^^^
> 		

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        664
Source: 
> 		
>             _weiSold = _weiSold.add(__weiUsed);
>                             ^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        678
Source: 
> 
>         _weiTeam = _weiTeam.add(__weiTeam);
>                         ^^^^^^^^^^^^^^^^^^^
>          

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        870
Source: 
>             transferCTWhitelisted(__ctReward);
>             _ctRefRewarded = _ctRefRewarded.add(__ctReward);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _CTWhitelistTxs = _CTWhitelistTxs.add(1);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        871
Source: 
>             _ctRefRewarded = _ctRefRewarded.add(__ctReward);
>             _CTWhitelistTxs = _CTWhitelistTxs.add(1);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             _stageCTRewarded[_stage] = _stageCTRewarded[_stage].add(__ctReward);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        872
Source: 
>             _CTWhitelistTxs = _CTWhitelistTxs.add(1);
>             _stageCTRewarded[_stage] = _stageCTRewarded[_stage].add(__ctReward);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        874
Source: 
>             
>             _stageCTRewardedTx[_stage] = _stageCTRewardedTx[_stage].add(1);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        809
Source: 
>       
> 		_CTBonusTxs = _CTBonusTxs.add(1) ;
>                   ^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        820
Source: 
>                 
>             _stageCTIssued[_stage] = _stageCTIssued[_stage].add(__transferCT);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             __remainCT = __remainCT.sub(__transferCT);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        845
Source: 
>         emit StageClosed(_stage, msg.sender);
>         _stage = _stage.add(1);
>                         ^^^^^^^
>         _CTUsdPrice = stageCTUsdPrice(_stage);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        846
Source: 
>         _stage = _stage.add(1);
>         _CTUsdPrice = stageCTUsdPrice(_stage);
>                         ^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        850
Source: 
>         {
>             _stage = STAGE_MAX.sub(1);
>                             ^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        827
Source: 
>         
>         _stageCTIssued[_stage] = _stageCTIssued[_stage].add(__remainCT);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        829
Source: 
>         
>         _CTWhitelist = _CTWhitelist.add(amount);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        833
Source: 
>         
> 		_CTIssued = _CTIssued.add(amount);
>                   ^^^^^^^^^^^^^^^^^^
> 		_CTBonus =  _CTBonus.add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        834
Source: 
> 		_CTIssued = _CTIssued.add(amount);
> 		_CTBonus =  _CTBonus.add(amount);
>                   ^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        790
Source: 
>         
> 		_CTTxs = _CTTxs.add(1);
>                   ^^^^^^^
> 	

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        792
Source: 
> 	
>         _CTIssued = _CTIssued.add(amount);
>                         ^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        794
Source: 
> 		
>         _stageCTIssued[_stage] = _stageCTIssued[_stage].add(amount);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        781
Source: 
>        
>         _stageUsdSold[_stage] = _stageUsdSold[_stage].add(usdAmount);                   // stage sold, in USD
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _usdSold = _usdSold.add(usdAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        782
Source: 
>         _stageUsdSold[_stage] = _stageUsdSold[_stage].add(usdAmount);                   // stage sold, in USD
>         _usdSold = _usdSold.add(usdAmount);
>                         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        701
Source: 
>     function setTemporaryVariables() private {
>         delete _referrers_;
>                         ^^^
>         delete _rewards_;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        702
Source: 
>         delete _referrers_;
>         delete _rewards_;
>                         ^
> 		

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CtPublicSale
Line:        704
Source: 
> 		
>         _inWhitelist_ = true;
>                         ^^^^^
> 		

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Ownable
Line:        138
Source: 
>     address private _owner;
>     address payable internal _receiver;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CtPublicSale
Line:        278
Source: 
>     uint72 private WEI_MAX = 100 ether;     
>     uint72 private WEI_BONUS = 10 ether;    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint24 private GAS_MIN = 3000000;       

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CtPublicSale
Line:        286
Source: 
>    
>     uint256 private STAGE_USD_CAP_START = 10000000000000;    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_STEP = 1000000000000;       

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CtPublicSale
Line:        287
Source: 
>     uint256 private STAGE_USD_CAP_START = 10000000000000;    
>     uint256 private STAGE_USD_CAP_STEP = 1000000000000;       
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_MAX = 100000000000000;   

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CtPublicSale
Line:        288
Source: 
>     uint256 private STAGE_USD_CAP_STEP = 1000000000000;       
>     uint256 private STAGE_USD_CAP_MAX = 100000000000000;   
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CtPublicSale
Line:        290
Source: 
>     
>     uint256 private STAGE_CT_CAP_START = 1000000000000;    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_CT_CAP_STEP  = 1000000000000;       

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CtPublicSale
Line:        292
Source: 
>     uint256 private STAGE_CT_CAP_STEP  = 1000000000000;       
>     uint256 private STAGE_CT_CAP_MAX   = 100000000000000;    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CtPublicSale
Line:        338
Source: 
>     mapping (address => uint256) private _accountCTIssued;
>     mapping (address => uint256) private _accountCTBonus;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint256) private _accountCTWhitelisted;

[0m

---------------------------------------------
For contract 0x18a7f857518fa0123c5c186d04b84151f474cb5f.sol
Tool Runtime = 495.1124824839935 seconds
#############################################