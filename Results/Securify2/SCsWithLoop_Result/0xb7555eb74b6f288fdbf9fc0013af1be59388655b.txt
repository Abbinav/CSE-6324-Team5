[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ESDRouterV1
Line:        336
Source: 
> 
>     function addLiquidityUSDCOnly(uint256 usdcAmountToAdd) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender != address(0), "Invalid sender address.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ESDRouterV1
Line:        389
Source: 
>     
>     function changeOwner(address newOwner) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ESDRouterV1
Line:        379
Source: 
>     
>     function setMinimumUSDCDeposit(uint256 newMinimumUSDCDeposit) external isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minUsdcDeposit = newMinimumUSDCDeposit;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ESDRouterV1
Line:        389
Source: 
>     
>     function changeOwner(address newOwner) public isOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = newOwner;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        90
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        192
Source: 
> 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function PERMIT_TYPEHASH() external pure returns (bytes32);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        193
Source: 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     function PERMIT_TYPEHASH() external pure returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nonces(address owner) external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        210
Source: 
> 
>     function MINIMUM_LIQUIDITY() external pure returns (uint);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function factory() external view returns (address);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniswapV2Library
Line:        251
Source: 
>     function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {
>         (address token0,) = sortTokens(tokenA, tokenB);
>          ^^^^^^^^^^^^^^
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniswapV2Library
Line:        252
Source: 
>         (address token0,) = sortTokens(tokenA, tokenB);
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
>          ^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ESDRouterV1
Line:        343
Source: 
>         uint256 esdBuyAmount = usdcAmountToAdd.div(2);
>         (uint256 esdReserves, uint256 usdcReserves,) = esdUsdcUniswapPair.getReserves();
>          ^^^^^^^^^^^^^^^^^^^
>         uint256 outEsd = UniswapV2Library.getAmountOut(esdBuyAmount, usdcReserves, esdReserves);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        8
Source: 
> //pragma solidity ^0.6.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ESDRouterV1
Line:        318
Source: 
>     
>     IUniswapV2Pair esdUsdcUniswapPair;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20 usdcToken;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ESDRouterV1
Line:        319
Source: 
>     IUniswapV2Pair esdUsdcUniswapPair;
>     IERC20 usdcToken;
>     ^^^^^^^^^^^^^^^^
>     IERC20 esdToken;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ESDRouterV1
Line:        320
Source: 
>     IERC20 usdcToken;
>     IERC20 esdToken;
>     ^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ESDRouterV1
Line:        343
Source: 
>         uint256 esdBuyAmount = usdcAmountToAdd.div(2);
>         (uint256 esdReserves, uint256 usdcReserves,) = esdUsdcUniswapPair.getReserves();
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 outEsd = UniswapV2Library.getAmountOut(esdBuyAmount, usdcReserves, esdReserves);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ESDRouterV1
Line:        353
Source: 
>         
>         (esdReserves, usdcReserves,) = esdUsdcUniswapPair.getReserves();
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 optimalEsdAmount = UniswapV2Library.quote(usdcAmount, usdcReserves, esdReserves);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ESDRouterV1
Line:        365
Source: 
>         
>         assert(usdcToken.transfer(esdUsdcUniswapPairAddr, optimalUsdcAmount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assert(esdToken.transfer(esdUsdcUniswapPairAddr, optimalEsdAmount));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ESDRouterV1
Line:        366
Source: 
>         assert(usdcToken.transfer(esdUsdcUniswapPairAddr, optimalUsdcAmount));
>         assert(esdToken.transfer(esdUsdcUniswapPairAddr, optimalEsdAmount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ESDRouterV1
Line:        340
Source: 
>         
>         usdcToken.transferFrom(address(msg.sender), address(this), usdcAmountToAdd);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ESDRouterV1
Line:        346
Source: 
>         
>         esdUsdcUniswapPair.transfer(esdUsdcUniswapPairAddr, esdBuyAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (address token0, address token1) = UniswapV2Library.sortTokens(usdcTokenAddr, esdTokenAddr);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ESDRouterV1
Line:        348
Source: 
>         (address token0, address token1) = UniswapV2Library.sortTokens(usdcTokenAddr, esdTokenAddr);
>         esdUsdcUniswapPair.swap(esdTokenAddr == token0 ? outEsd : 0, esdTokenAddr == token1 ? outEsd : 0, address(this), "");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ESDRouterV1
Line:        368
Source: 
>         
>         esdUsdcUniswapPair.mint(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ESDRouterV1
Line:        371
Source: 
>         if (usdcAmount > optimalUsdcAmount) {
>             usdcToken.transfer(msg.sender, usdcAmount.sub(optimalUsdcAmount));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ESDRouterV1
Line:        375
Source: 
>         if (esdAmount > optimalEsdAmount) {
>             esdToken.transfer(msg.sender, esdAmount.sub(optimalEsdAmount));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    UniswapV2Library
Line:        287
Source: 
>         amounts[0] = amountIn;
>         for (uint i; i < path.length - 1; i++) {
>                                           ^
>             (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ESDRouterV1
Line:        340
Source: 
>         
>         usdcToken.transferFrom(address(msg.sender), address(this), usdcAmountToAdd);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ESDRouterV1
Line:        346
Source: 
>         
>         esdUsdcUniswapPair.transfer(esdUsdcUniswapPairAddr, esdBuyAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (address token0, address token1) = UniswapV2Library.sortTokens(usdcTokenAddr, esdTokenAddr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ESDRouterV1
Line:        368
Source: 
>         
>         esdUsdcUniswapPair.mint(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ESDRouterV1
Line:        371
Source: 
>         if (usdcAmount > optimalUsdcAmount) {
>             usdcToken.transfer(msg.sender, usdcAmount.sub(optimalUsdcAmount));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ESDRouterV1
Line:        375
Source: 
>         if (esdAmount > optimalEsdAmount) {
>             esdToken.transfer(msg.sender, esdAmount.sub(optimalEsdAmount));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2Library
Line:        252
Source: 
>         (address token0,) = sortTokens(tokenA, tokenB);
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ESDRouterV1
Line:        313
Source: 
>     address public esdTokenAddr;
>     address public esdLpPoolAddr;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public usdcTokenAddr;

[0m

---------------------------------------------
For contract 0xb7555eb74b6f288fdbf9fc0013af1be59388655b.sol
Tool Runtime = 8.301963588000035 seconds
#############################################