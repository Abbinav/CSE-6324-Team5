[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    GAMMA
Line:        11
Source: 
>     uint256 public totalSupply;
>     string public name = "GAMMA";
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol = "GAMMA";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    GAMMA
Line:        12
Source: 
>     string public name = "GAMMA";
>     string public symbol = "GAMMA";
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public balanceOf;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    GAMMA
Line:        99
Source: 
>         sale[tokenId].forSale = forSale;
>         (bool success, ) = dao.call.value(msg.value)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "!transfer");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    GAMMA
Line:        58
Source: 
>         address owner = ownerOf[tokenId];
>         (bool success, ) = owner.call.value(msg.value)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "!transfer");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    GAMMA
Line:        99
Source: 
>         sale[tokenId].forSale = forSale;
>         (bool success, ) = dao.call.value(msg.value)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "!transfer");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GAMMA
Line:        91
Source: 
>     }
>     function updateDao(address payable _dao) external {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == dao, "!dao");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GAMMA
Line:        35
Source: 
>     }
>     function approve(address spender, uint256 tokenId) external {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerOf[tokenId] || isApprovedForAll[ownerOf[tokenId]][msg.sender], "!owner/operator");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GAMMA
Line:        40
Source: 
>     }
>     function mint(uint256 ethPrice, string calldata _tokenURI, bool forSale) external { 
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalSupply++;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GAMMA
Line:        62
Source: 
>     }
>     function setApprovalForAll(address operator, bool approved) external {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isApprovedForAll[msg.sender][operator] = approved;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GAMMA
Line:        76
Source: 
>     }
>     function transfer(address to, uint256 tokenId) external {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerOf[tokenId], "!owner");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GAMMA
Line:        87
Source: 
>     }
>     function transferFrom(address from, address to, uint256 tokenId) external {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerOf[tokenId] || getApproved[tokenId] == msg.sender || isApprovedForAll[ownerOf[tokenId]][msg.sender], "!owner/spender/operator");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GAMMA
Line:        95
Source: 
>     }
>     function updateSale(uint256 ethPrice, uint256 tokenId, bool forSale) payable external {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerOf[tokenId], "!owner");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GAMMA
Line:        58
Source: 
>         address owner = ownerOf[tokenId];
>         (bool success, ) = owner.call.value(msg.value)("");
>            ^^^^^^^^^^^^
>         require(success, "!transfer");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GAMMA
Line:        99
Source: 
>         sale[tokenId].forSale = forSale;
>         (bool success, ) = dao.call.value(msg.value)("");
>            ^^^^^^^^^^^^
>         require(success, "!transfer");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity 0.5.17;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> contract GAMMA { // Î“ - mv - NFT - mkt - Î³

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    GAMMA
Line:        58
Source: 
>         address owner = ownerOf[tokenId];
>         (bool success, ) = owner.call.value(msg.value)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "!transfer");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    GAMMA
Line:        99
Source: 
>         sale[tokenId].forSale = forSale;
>         (bool success, ) = dao.call.value(msg.value)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "!transfer");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    GAMMA
Line:        58
Source: 
>         address owner = ownerOf[tokenId];
>         (bool success, ) = owner.call.value(msg.value)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "!transfer");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    GAMMA
Line:        99
Source: 
>         sale[tokenId].forSale = forSale;
>         (bool success, ) = dao.call.value(msg.value)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "!transfer");

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    GAMMA
Line:        10
Source: 
>     uint256 public constant GAMMA_MAX = 5772156649015328606065120900824024310421;
>     uint256 public totalSupply;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public name = "GAMMA";

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    GAMMA
Line:        58
Source: 
>         address owner = ownerOf[tokenId];
>         (bool success, ) = owner.call.value(msg.value)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "!transfer");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GAMMA
Line:        68
Source: 
>         balanceOf[from]--; 
>         balanceOf[to]++; 
>           ^^^^^^^^^^^^^^^
>         getApproved[tokenId] = address(0);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        41
Source: 
>     function mint(uint256 ethPrice, string calldata _tokenURI, bool forSale) external { 
>         totalSupply++;
>           ^^^^^^^^^^^^
>         require(totalSupply <= GAMMA_MAX, "maxed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        45
Source: 
>         balanceOf[msg.sender]++;
>         ownerOf[tokenId] = msg.sender;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenByIndex[tokenId - 1] = tokenId;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        46
Source: 
>         ownerOf[tokenId] = msg.sender;
>         tokenByIndex[tokenId - 1] = tokenId;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenURI[tokenId] = _tokenURI;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        47
Source: 
>         tokenByIndex[tokenId - 1] = tokenId;
>         tokenURI[tokenId] = _tokenURI;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sale[tokenId].ethPrice = ethPrice;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        48
Source: 
>         tokenURI[tokenId] = _tokenURI;
>         sale[tokenId].ethPrice = ethPrice;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sale[tokenId].forSale = forSale;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        49
Source: 
>         sale[tokenId].ethPrice = ethPrice;
>         sale[tokenId].forSale = forSale;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenOfOwnerByIndex[msg.sender][tokenId - 1] = tokenId;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        50
Source: 
>         sale[tokenId].forSale = forSale;
>         tokenOfOwnerByIndex[msg.sender][tokenId - 1] = tokenId;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), msg.sender, tokenId); 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        67
Source: 
>     function _transfer(address from, address to, uint256 tokenId) internal {
>         balanceOf[from]--; 
>           ^^^^^^^^^^^^^^^^^
>         balanceOf[to]++; 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        69
Source: 
>         balanceOf[to]++; 
>         getApproved[tokenId] = address(0);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ownerOf[tokenId] = to;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        70
Source: 
>         getApproved[tokenId] = address(0);
>         ownerOf[tokenId] = to;
>           ^^^^^^^^^^^^^^^^^^^^
>         sale[tokenId].forSale = false;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        71
Source: 
>         ownerOf[tokenId] = to;
>         sale[tokenId].forSale = false;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenOfOwnerByIndex[from][tokenId - 1] = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        72
Source: 
>         sale[tokenId].forSale = false;
>         tokenOfOwnerByIndex[from][tokenId - 1] = 0;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenOfOwnerByIndex[to][tokenId - 1] = tokenId;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        73
Source: 
>         tokenOfOwnerByIndex[from][tokenId - 1] = 0;
>         tokenOfOwnerByIndex[to][tokenId - 1] = tokenId;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(from, to, tokenId); 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        63
Source: 
>     function setApprovalForAll(address operator, bool approved) external {
>         isApprovedForAll[msg.sender][operator] = approved;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ApprovalForAll(msg.sender, operator, approved);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    GAMMA
Line:        11
Source: 
>     uint256 public totalSupply;
>     string public name = "GAMMA";
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol = "GAMMA";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    GAMMA
Line:        12
Source: 
>     string public name = "GAMMA";
>     string public symbol = "GAMMA";
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public balanceOf;

[0m

---------------------------------------------
For contract 0xef0ff94b152c00ed4620b149ee934f2f4a526387.sol
Tool Runtime = 4.0192255259999 seconds
#############################################