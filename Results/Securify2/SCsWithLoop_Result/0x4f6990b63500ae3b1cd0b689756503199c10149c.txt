[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        272
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != accountHash && codehash != 0x0);

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OwnableProxy
Line:        468
Source: 
>         bytes32 position = OWNER_SLOT;
>         assembly {
>         ^^^^^^^^^^
>             _owner := sload(position)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OwnableProxy
Line:        493
Source: 
>         bytes32 position = OWNER_SLOT;
>         assembly {
>         ^^^^^^^^^^
>             sstore(position, newOwner)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Initializable
Line:        441
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[20] private _gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OwnableProxy
Line:        485
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Core
Line:        565
Source: 
>     */
>     function initialize(
>     ^^^^^^^^^^^^^^^^^^^^
>         IDUSD _dusd,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Core
Line:        645
Source: 
>     */
>     function syncSystem()
>     ^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Core
Line:        703
Source: 
> 
>     function currentSystemState()
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public view

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Core
Line:        716
Source: 
>     /* ##### Following are just helper functions, not being used anywhere ##### */
>     function lastPeriodIncome()
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public view

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Core
Line:        613
Source: 
>         peaks[msg.sender].amount = tvl;
>         dusd.mint(account, dusdAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalAssets = totalAssets.add(usdDelta);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Core
Line:        540
Source: 
>         _;
>         uint supply = dusd.totalSupply();
>                       ^^^^^^^^^^^^^^^^^^
>         if (supply > totalAssets) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Core
Line:        550
Source: 
>             emit UpdateDeficitState(false);
>             stakeLPToken.notify(0);
>             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Core
Line:        636
Source: 
>         usd = dusdToUsd(dusdAmount, true);
>         dusd.burn(account, dusdAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalAssets = totalAssets.sub(usd);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Core
Line:        550
Source: 
>             emit UpdateDeficitState(false);
>             stakeLPToken.notify(0);
>             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Core
Line:        687
Source: 
>         // system is in deficit, see if staked funds can make up for it
>             uint supply = dusd.totalSupply();
>                           ^^^^^^^^^^^^^^^^^^
>             // do not perform a dusd.balanceOf(stakeLPToken) because that includes the reward tokens

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Core
Line:        689
Source: 
>             // do not perform a dusd.balanceOf(stakeLPToken) because that includes the reward tokens
>             uint perceivedSupply = supply.sub(stakeLPToken.totalSupply());
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             // staked funds make up for the deficit

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Core
Line:        540
Source: 
>         _;
>         uint supply = dusd.totalSupply();
>                       ^^^^^^^^^^^^^^^^^^
>         if (supply > totalAssets) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Core
Line:        550
Source: 
>             emit UpdateDeficitState(false);
>             stakeLPToken.notify(0);
>             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Core
Line:        816
Source: 
>     function _updateFeed(bool forceUpdate) internal {
>         uint[] memory _feed = oracle.getPriceFeed();
>                               ^^^^^^^^^^^^^^^^^^^^^
>         require(_feed.length == systemCoins.length, "Invalid system state");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Core
Line:        540
Source: 
>         _;
>         uint supply = dusd.totalSupply();
>                       ^^^^^^^^^^^^^^^^^^
>         if (supply > totalAssets) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Core
Line:        550
Source: 
>             emit UpdateDeficitState(false);
>             stakeLPToken.notify(0);
>             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Core
Line:        666
Source: 
>         if (shouldDistribute) {
>             dusd.mint(address(stakeLPToken), periodIncome);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Core
Line:        852
Source: 
>     {
>         uint supply = dusd.totalSupply().add(unclaimedRewards);
>                       ^^^^^^^^^^^^^^^^^^
>         if (_totalAssets > supply) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Core
Line:        708
Source: 
>         _totalAssets = totalSystemAssets();
>         uint supply = dusd.totalSupply();
>                       ^^^^^^^^^^^^^^^^^^
>         if (supply > _totalAssets) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Core
Line:        728
Source: 
>     {
>         uint[] memory _feed = oracle.getPriceFeed();
>                               ^^^^^^^^^^^^^^^^^^^^^
>         for (uint i = 0; i < peaksAddresses.length; i++) {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Core
Line:        836
Source: 
>             if (!changed && !forceUpdate) {
>                 _totalAssets = _totalAssets.add(IPeak(peaksAddresses[i]).portfolioValue());
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 continue;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Core
Line:        843
Source: 
>             }
>             _totalAssets = _totalAssets.add(IPeak(peaksAddresses[i]).updateFeed(prices));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Core
Line:        735
Source: 
>             _totalAssets = _totalAssets.add(
>                 IPeak(peaksAddresses[i]).portfolioValueWithFeed(_feed)
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        308
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        364
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        308
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        364
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        308
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        364
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Core
Line:        598
Source: 
>     */
>     function mint(uint usdDelta, address account)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Core
Line:        624
Source: 
>     */
>     function redeem(uint dusdAmount, address account)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OwnableProxy
Line:        485
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Core
Line:        677
Source: 
>     /* ##### View functions ##### */
>     function dusdToUsd(uint _dusd, bool fee)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Core
Line:        762
Source: 
>     */
>     function whitelistPeak(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         address peak,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Core
Line:        789
Source: 
>     */
>     function setPeakStatus(address peak, uint ceiling, PeakState state)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        613
Source: 
>         peaks[msg.sender].amount = tvl;
>         dusd.mint(account, dusdAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalAssets = totalAssets.add(usdDelta);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        540
Source: 
>         _;
>         uint supply = dusd.totalSupply();
>                       ^^^^^^^^^^^^^^^^^^
>         if (supply > totalAssets) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        546
Source: 
>             }
>             stakeLPToken.notify(supply.sub(totalAssets));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if (inDeficit) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        550
Source: 
>             emit UpdateDeficitState(false);
>             stakeLPToken.notify(0);
>             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        636
Source: 
>         usd = dusdToUsd(dusdAmount, true);
>         dusd.burn(account, dusdAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalAssets = totalAssets.sub(usd);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        540
Source: 
>         _;
>         uint supply = dusd.totalSupply();
>                       ^^^^^^^^^^^^^^^^^^
>         if (supply > totalAssets) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        546
Source: 
>             }
>             stakeLPToken.notify(supply.sub(totalAssets));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if (inDeficit) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        550
Source: 
>             emit UpdateDeficitState(false);
>             stakeLPToken.notify(0);
>             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        540
Source: 
>         _;
>         uint supply = dusd.totalSupply();
>                       ^^^^^^^^^^^^^^^^^^
>         if (supply > totalAssets) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        546
Source: 
>             }
>             stakeLPToken.notify(supply.sub(totalAssets));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if (inDeficit) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        550
Source: 
>             emit UpdateDeficitState(false);
>             stakeLPToken.notify(0);
>             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        816
Source: 
>     function _updateFeed(bool forceUpdate) internal {
>         uint[] memory _feed = oracle.getPriceFeed();
>                               ^^^^^^^^^^^^^^^^^^^^^
>         require(_feed.length == systemCoins.length, "Invalid system state");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        836
Source: 
>             if (!changed && !forceUpdate) {
>                 _totalAssets = _totalAssets.add(IPeak(peaksAddresses[i]).portfolioValue());
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 continue;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        843
Source: 
>             }
>             _totalAssets = _totalAssets.add(IPeak(peaksAddresses[i]).updateFeed(prices));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        540
Source: 
>         _;
>         uint supply = dusd.totalSupply();
>                       ^^^^^^^^^^^^^^^^^^
>         if (supply > totalAssets) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        546
Source: 
>             }
>             stakeLPToken.notify(supply.sub(totalAssets));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if (inDeficit) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        550
Source: 
>             emit UpdateDeficitState(false);
>             stakeLPToken.notify(0);
>             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Core
Line:        666
Source: 
>         if (shouldDistribute) {
>             dusd.mint(address(stakeLPToken), periodIncome);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        308
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>          ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Core
Line:        659
Source: 
>         _updateFeed(false); // totalAssets was updated
>         uint _colBuffer;
>         ^^^^^^^^^^^^^^^
>         (periodIncome, _colBuffer) = _lastPeriodIncome(totalAssets);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Core
Line:        728
Source: 
>     {
>         uint[] memory _feed = oracle.getPriceFeed();
>         ^^^^^^^^^^^^^^^^^^^
>         for (uint i = 0; i < peaksAddresses.length; i++) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Core
Line:        816
Source: 
>     function _updateFeed(bool forceUpdate) internal {
>         uint[] memory _feed = oracle.getPriceFeed();
>         ^^^^^^^^^^^^^^^^^^^
>         require(_feed.length == systemCoins.length, "Invalid system state");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Core
Line:        829
Source: 
>         Peak memory peak;
>         uint _totalAssets;
>         ^^^^^^^^^^^^^^^^^
>         for (uint i = 0; i < peaksAddresses.length; i++) {

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        10
Source: 
> //pragma solidity 0.5.17;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Initializable
Line:        432
Source: 
> contract Initializable {
>     bool initialized = false;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OwnableProxy
Line:        455
Source: 
> contract OwnableProxy {
>     bytes32 constant OWNER_SLOT = keccak256("proxy.owner");
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Core
Line:        504
Source: 
> 
>     uint constant FEE_PRECISION = 10000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Core
Line:        540
Source: 
>         _;
>         uint supply = dusd.totalSupply();
>         ^^^^^^^^^^^
>         if (supply > totalAssets) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Core
Line:        540
Source: 
>         _;
>         uint supply = dusd.totalSupply();
>                       ^^^^^^^^^^^^^^^^^^
>         if (supply > totalAssets) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Core
Line:        816
Source: 
>     function _updateFeed(bool forceUpdate) internal {
>         uint[] memory _feed = oracle.getPriceFeed();
>                               ^^^^^^^^^^^^^^^^^^^^^
>         require(_feed.length == systemCoins.length, "Invalid system state");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Core
Line:        836
Source: 
>             if (!changed && !forceUpdate) {
>                 _totalAssets = _totalAssets.add(IPeak(peaksAddresses[i]).portfolioValue());
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 continue;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Core
Line:        843
Source: 
>             }
>             _totalAssets = _totalAssets.add(IPeak(peaksAddresses[i]).updateFeed(prices));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Core
Line:        540
Source: 
>         _;
>         uint supply = dusd.totalSupply();
>                       ^^^^^^^^^^^^^^^^^^
>         if (supply > totalAssets) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Core
Line:        852
Source: 
>     {
>         uint supply = dusd.totalSupply().add(unclaimedRewards);
>                       ^^^^^^^^^^^^^^^^^^
>         if (_totalAssets > supply) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Core
Line:        708
Source: 
>         _totalAssets = totalSystemAssets();
>         uint supply = dusd.totalSupply();
>                       ^^^^^^^^^^^^^^^^^^
>         if (supply > _totalAssets) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Core
Line:        728
Source: 
>     {
>         uint[] memory _feed = oracle.getPriceFeed();
>                               ^^^^^^^^^^^^^^^^^^^^^
>         for (uint i = 0; i < peaksAddresses.length; i++) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Core
Line:        735
Source: 
>             _totalAssets = _totalAssets.add(
>                 IPeak(peaksAddresses[i]).portfolioValueWithFeed(_feed)
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Core
Line:        613
Source: 
>         peaks[msg.sender].amount = tvl;
>         dusd.mint(account, dusdAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalAssets = totalAssets.add(usdDelta);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Core
Line:        546
Source: 
>             }
>             stakeLPToken.notify(supply.sub(totalAssets));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if (inDeficit) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Core
Line:        550
Source: 
>             emit UpdateDeficitState(false);
>             stakeLPToken.notify(0);
>             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Core
Line:        636
Source: 
>         usd = dusdToUsd(dusdAmount, true);
>         dusd.burn(account, dusdAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalAssets = totalAssets.sub(usd);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Core
Line:        546
Source: 
>             }
>             stakeLPToken.notify(supply.sub(totalAssets));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if (inDeficit) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Core
Line:        550
Source: 
>             emit UpdateDeficitState(false);
>             stakeLPToken.notify(0);
>             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Core
Line:        687
Source: 
>         // system is in deficit, see if staked funds can make up for it
>             uint supply = dusd.totalSupply();
>                           ^^^^^^^^^^^^^^^^^^
>             // do not perform a dusd.balanceOf(stakeLPToken) because that includes the reward tokens

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Core
Line:        689
Source: 
>             // do not perform a dusd.balanceOf(stakeLPToken) because that includes the reward tokens
>             uint perceivedSupply = supply.sub(stakeLPToken.totalSupply());
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             // staked funds make up for the deficit

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Core
Line:        546
Source: 
>             }
>             stakeLPToken.notify(supply.sub(totalAssets));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if (inDeficit) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Core
Line:        550
Source: 
>             emit UpdateDeficitState(false);
>             stakeLPToken.notify(0);
>             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Core
Line:        546
Source: 
>             }
>             stakeLPToken.notify(supply.sub(totalAssets));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if (inDeficit) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Core
Line:        550
Source: 
>             emit UpdateDeficitState(false);
>             stakeLPToken.notify(0);
>             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Core
Line:        666
Source: 
>         if (shouldDistribute) {
>             dusd.mint(address(stakeLPToken), periodIncome);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        273
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != accountHash && codehash != 0x0);
>                 ^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Core
Line:        506
Source: 
> 
>     IDUSD public dusd;
>     ^^^^^^^^^^^^^^^^^
>     IStakeLPToken public stakeLPToken;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Core
Line:        507
Source: 
>     IDUSD public dusd;
>     IStakeLPToken public stakeLPToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IOracle public oracle;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Core
Line:        508
Source: 
>     IStakeLPToken public stakeLPToken;
>     IOracle public oracle;
>     ^^^^^^^^^^^^^^^^^^^^^
>     address[] public systemCoins;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Core
Line:        512
Source: 
> 
>     uint public totalAssets;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint public unclaimedRewards;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Core
Line:        513
Source: 
>     uint public totalAssets;
>     uint public unclaimedRewards;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool public inDeficit;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Core
Line:        514
Source: 
>     uint public unclaimedRewards;
>     bool public inDeficit;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint public redeemFactor;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Core
Line:        515
Source: 
>     bool public inDeficit;
>     uint public redeemFactor;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public colBuffer;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Core
Line:        516
Source: 
>     uint public redeemFactor;
>     uint public colBuffer;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        441
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[20] private _gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Core
Line:        544
Source: 
>                 emit UpdateDeficitState(true);
>                 inDeficit = true;
>                 ^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Core
Line:        548
Source: 
>         } else if (inDeficit) {
>             inDeficit = false;
>             ^^^^^^^^^^^^^^^^^
>             emit UpdateDeficitState(false);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        436
Source: 
>         require(!initialized, "already initialized");
>         initialized = true;
>         ^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Core
Line:        580
Source: 
>         );
>         dusd = _dusd;
>         ^^^^^^^^^^^^
>         stakeLPToken = _stakeLPToken;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Core
Line:        581
Source: 
>         dusd = _dusd;
>         stakeLPToken = _stakeLPToken;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         oracle = _oracle;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Core
Line:        582
Source: 
>         stakeLPToken = _stakeLPToken;
>         oracle = _oracle;
>         ^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Core
Line:        587
Source: 
>         );
>         redeemFactor = _redeemFactor;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         colBuffer = _colBuffer;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Core
Line:        588
Source: 
>         redeemFactor = _redeemFactor;
>         colBuffer = _colBuffer;
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Core
Line:        821
Source: 
>             if (feed[i] != _feed[i]) {
>                 feed[i] = _feed[i];
>                 ^^^^^^^^^^^^^^^^^^
>                 changed = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Core
Line:        845
Source: 
>         }
>         totalAssets = _totalAssets;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        308
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        361
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        364
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        330
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        337
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        342
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        308
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        361
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        364
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        330
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        337
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        342
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OwnableProxy
Line:        491
Source: 
>         require(newOwner != address(0), "OwnableProxy: new owner is the zero address");
>         emit OwnershipTransferred(owner(), newOwner);
>                                   ^^^^^^^
>         bytes32 position = OWNER_SLOT;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        308
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        361
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        364
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        330
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        337
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        342
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        432
Source: 
> contract Initializable {
>     bool initialized = false;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        441
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[20] private _gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0x4f6990b63500ae3b1cd0b689756503199c10149c.sol
Tool Runtime = 94.81962237700009 seconds
#############################################