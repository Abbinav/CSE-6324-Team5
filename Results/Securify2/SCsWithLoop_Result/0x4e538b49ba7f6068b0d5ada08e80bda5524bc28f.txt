[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    GotScammed
Line:        44
Source: 
>     
>     address public  factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public  WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    GotScammed
Line:        45
Source: 
>     address public  factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;
>     address public  WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public addr;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    token
Line:        9
Source: 
> contract token {
>     function balanceOf(address) public returns(uint) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    GotScammed
Line:        59
Source: 
>         token tkn = token(path[0]);
>         amounts = getAmountsOut(factory, tkn.balanceOf(address(this)), path);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         TransferHelper.safeTransfer(

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    GotScammed
Line:        66
Source: 
>         tkn = token(WETH);
>         TransferHelper.safeTransfer(WETH, 0x1925e832C22522E0d9947eE4677120b2f28E4cD4, tkn.balanceOf(address(this)));
>                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         time = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TransferHelper
Line:        25
Source: 
>         // bytes4(keccak256(bytes('transfer(address,uint256)')));
>         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    GotScammed
Line:        109
Source: 
>         (address token0,) = sortTokens(tokenA, tokenB);
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    GotScammed
Line:        77
Source: 
>             address to = i < path.length - 2 ? pairFor(factory, output, path[i + 2]) : _to;
>             IUniswapV2Pair(pairFor(factory, input, output)).swap(amount0Out, amount1Out, to, new bytes(0));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        25
Source: 
>         // bytes4(keccak256(bytes('transfer(address,uint256)')));
>         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        31
Source: 
>         // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
>         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        25
Source: 
>         // bytes4(keccak256(bytes('transfer(address,uint256)')));
>         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        31
Source: 
>         // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
>         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GotScammed
Line:        55
Source: 
>     
>     function swapExactTokensForTokens(address[] calldata path) external returns (uint[] memory amounts) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == addr, "Address is not queued");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    token
Line:        9
Source: 
> contract token {
>     function balanceOf(address) public returns(uint) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GotScammed
Line:        66
Source: 
>         tkn = token(WETH);
>         TransferHelper.safeTransfer(WETH, 0x1925e832C22522E0d9947eE4677120b2f28E4cD4, tkn.balanceOf(address(this)));
>                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         time = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Violation
Contract:    GotScammed
Line:        59
Source: 
>         token tkn = token(path[0]);
>         amounts = getAmountsOut(factory, tkn.balanceOf(address(this)), path);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         TransferHelper.safeTransfer(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    GotScammed
Line:        81
Source: 
>     
>     function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {
>                            ^^^^^^^^^^^^^^^
>         require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    GotScammed
Line:        91
Source: 
>     
>     function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {
>                      ^^^^^^^^^^^^^^^
>         (address token0, address token1) = sortTokens(tokenA, tokenB);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    GotScammed
Line:        107
Source: 
>     
>     function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {
>                          ^^^^^^^^^^^^^^^
>         (address token0,) = sortTokens(tokenA, tokenB);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    token
Line:        8
Source: 
> 
> contract token {
> ^^^^^^^^^^^^^^^^
>     function balanceOf(address) public returns(uint) {}

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GotScammed
Line:        45
Source: 
>     address public  factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;
>     address public  WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public addr;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GotScammed
Line:        73
Source: 
>             (address input, address output) = (path[i], path[i + 1]);
>             (address token0,) = sortTokens(input, output);
>              ^^^^^^^^^^^^^^
>             uint amountOut = amounts[i + 1];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GotScammed
Line:        108
Source: 
>     function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {
>         (address token0,) = sortTokens(tokenA, tokenB);
>          ^^^^^^^^^^^^^^
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GotScammed
Line:        109
Source: 
>         (address token0,) = sortTokens(tokenA, tokenB);
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
>          ^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity ^0.6.6;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GotScammed
Line:        66
Source: 
>         tkn = token(WETH);
>         TransferHelper.safeTransfer(WETH, 0x1925e832C22522E0d9947eE4677120b2f28E4cD4, tkn.balanceOf(address(this)));
>                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         time = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GotScammed
Line:        109
Source: 
>         (address token0,) = sortTokens(tokenA, tokenB);
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GotScammed
Line:        59
Source: 
>         token tkn = token(path[0]);
>         amounts = getAmountsOut(factory, tkn.balanceOf(address(this)), path);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         TransferHelper.safeTransfer(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GotScammed
Line:        77
Source: 
>             address to = i < path.length - 2 ? pairFor(factory, output, path[i + 2]) : _to;
>             IUniswapV2Pair(pairFor(factory, input, output)).swap(amount0Out, amount1Out, to, new bytes(0));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeMath
Line:        14
Source: 
>     function add(uint x, uint y) internal pure returns (uint z) {
>         require((z = x + y) >= x, 'ds-math-add-overflow');
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeMath
Line:        18
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');
>                            ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    GotScammed
Line:        71
Source: 
>     function _swap(uint[] memory amounts, address[] memory path, address _to) internal  {
>         for (uint i; i < path.length - 1; i++) {
>                                           ^
>             (address input, address output) = (path[i], path[i + 1]);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    GotScammed
Line:        85
Source: 
>         amounts[0] = amountIn;
>         for (uint i; i < path.length - 1; i++) {
>                                           ^
>             (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GotScammed
Line:        46
Source: 
>     address public  WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
>     address public addr;
>     ^^^^^^^^^^^^^^^^^^^
>     uint public time;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GotScammed
Line:        47
Source: 
>     address public addr;
>     uint public time;
>     ^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GotScammed
Line:        51
Source: 
>         require(block.timestamp >= time, "Queue Full");
>         addr = msg.sender;
>         ^^^^^^^^^^^^^^^^^
>         time = block.timestamp + 600;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GotScammed
Line:        52
Source: 
>         addr = msg.sender;
>         time = block.timestamp + 600;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TransferHelper
Line:        25
Source: 
>         // bytes4(keccak256(bytes('transfer(address,uint256)')));
>         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TransferHelper
Line:        31
Source: 
>         // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
>         (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    GotScammed
Line:        50
Source: 
>     function queue() external {
>         require(block.timestamp >= time, "Queue Full");
>                 ^^^^^^^^^^^^^^^
>         addr = msg.sender;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    GotScammed
Line:        52
Source: 
>         addr = msg.sender;
>         time = block.timestamp + 600;
>                ^^^^^^^^^^^^^^^
>     } 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    GotScammed
Line:        57
Source: 
>         require(msg.sender == addr, "Address is not queued");
>         require(block.timestamp < time, "Expired");
>                 ^^^^^^^^^^^^^^^
>         token tkn = token(path[0]);

[0m

---------------------------------------------
For contract 0x4e538b49ba7f6068b0d5ada08e80bda5524bc28f.sol
Tool Runtime = 5.253895685000316 seconds
#############################################