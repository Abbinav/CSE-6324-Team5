pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WheelOfShuffle
Line:        124
Source: 
> 
>     uint256 _seed;
>     ^^^^^^^^^^^^^
>     address admin;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WheelOfShuffle
Line:        131
Source: 
> 
>     uint8[10] brackets = [1,3,6,12,24,40,56,68,76,80];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WheelOfShuffle
Line:        144
Source: 
>     uint256 constant internal constantFactor = 10e21 * 10e21;
>     address public tokenAddress = 0x3A9FfF453d50D4Ac52A6890647b823379ba36B9E;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WheelOfShuffle
Line:        163
Source: 
>     //deposit needs approval from token contract
>     function deposit(address _customerAddress, uint256 amount)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WheelOfShuffle
Line:        181
Source: 
> 
>     function receiveApproval(address receiveFrom, uint256 amount, uint256 data)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WheelOfShuffle
Line:        189
Source: 
>     //withdraw from contract
>     function withdraw(uint256 amount)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WheelOfShuffle
Line:        203
Source: 
> 
>     function withdrawAll()
>     ^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WheelOfShuffle
Line:        229
Source: 
> 
>     function spinTokens(uint256 betAmount)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WheelOfShuffle
Line:        252
Source: 
> 
>     function spinAll()
>     ^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WheelOfShuffle
Line:        276
Source: 
>     //deposit needs approval from token contract
>     function depositAndSpin(address _customerAddress, uint256 betAmount)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WheelOfShuffle
Line:        320
Source: 
> 
>     function panicButton(bool newStatus)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WheelOfShuffle
Line:        328
Source: 
> 
>     function refundUser(address _customerAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WheelOfShuffle
Line:        341
Source: 
> 
>     function updateMinBet(uint256 newMin)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WheelOfShuffle
Line:        350
Source: 
> 
>     function updateMaxBet(uint256 newMax)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WheelOfShuffle
Line:        359
Source: 
> 
>     function getDevBalance()
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WheelOfShuffle
Line:        368
Source: 
> 
>     function withdrawDevFees()
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WheelOfShuffle
Line:        379
Source: 
> 
>     function finishSpin(address _customerAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WheelOfShuffle
Line:        158
Source: 
>     {
>         return ERC20Interface(tokenAddress).balanceOf(tokenAddress);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WheelOfShuffle
Line:        169
Source: 
>         require(amount >= (minBet * 2));
>         require(ERC20Interface(tokenAddress).transferFrom(_customerAddress, tokenAddress, amount), "token transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Add 4% fee of the buy to devFeeBalance

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WheelOfShuffle
Line:        195
Source: 
>         require(amount > 0);
>         if(!ERC20Interface(tokenAddress).transfer(_customerAddress, amount))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             revert();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WheelOfShuffle
Line:        211
Source: 
>         // Transfer balance and update user ledgers
>         if(!ERC20Interface(tokenAddress).transfer(_customerAddress, amount))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             revert();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WheelOfShuffle
Line:        282
Source: 
>         require(betAmount >= (minBet * 2));
>         require(ERC20Interface(tokenAddress).transferFrom(_customerAddress, tokenAddress, betAmount), "token transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Add 4% fee of the buy to devFeeBalance

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WheelOfShuffle
Line:        333
Source: 
>         uint256 withdrawAmount = tokenBalanceOf(_customerAddress);
>         if(!ERC20Interface(tokenAddress).transfer(_customerAddress, withdrawAmount))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             revert();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WheelOfShuffle
Line:        373
Source: 
>         uint256 initDevBal = devFeeBalance;
>         if(!ERC20Interface(tokenAddress).transfer(fund, devFeeBalance/2))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           revert();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WheelOfShuffle
Line:        219
Source: 
> 
>     function tokenBalanceOf(address _customerAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WheelOfShuffle
Line:        306
Source: 
> 
>     function betPool(address _customerAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WheelOfShuffle
Line:        320
Source: 
> 
>     function panicButton(bool newStatus)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WheelOfShuffle
Line:        328
Source: 
> 
>     function refundUser(address _customerAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WheelOfShuffle
Line:        379
Source: 
> 
>     function finishSpin(address _customerAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WheelOfShuffle
Line:        181
Source: 
> 
>     function receiveApproval(address receiveFrom, uint256 amount, uint256 data)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        542
Source: 
>         }
>         c = a * b;
>             ^^^^^
>         assert(c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WheelOfShuffle
Line:        169
Source: 
>         require(amount >= (minBet * 2));
>         require(ERC20Interface(tokenAddress).transferFrom(_customerAddress, tokenAddress, amount), "token transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Add 4% fee of the buy to devFeeBalance

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WheelOfShuffle
Line:        195
Source: 
>         require(amount > 0);
>         if(!ERC20Interface(tokenAddress).transfer(_customerAddress, amount))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             revert();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WheelOfShuffle
Line:        211
Source: 
>         // Transfer balance and update user ledgers
>         if(!ERC20Interface(tokenAddress).transfer(_customerAddress, amount))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             revert();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WheelOfShuffle
Line:        282
Source: 
>         require(betAmount >= (minBet * 2));
>         require(ERC20Interface(tokenAddress).transferFrom(_customerAddress, tokenAddress, betAmount), "token transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Add 4% fee of the buy to devFeeBalance

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WheelOfShuffle
Line:        333
Source: 
>         uint256 withdrawAmount = tokenBalanceOf(_customerAddress);
>         if(!ERC20Interface(tokenAddress).transfer(_customerAddress, withdrawAmount))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             revert();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WheelOfShuffle
Line:        373
Source: 
>         uint256 initDevBal = devFeeBalance;
>         if(!ERC20Interface(tokenAddress).transfer(fund, devFeeBalance/2))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           revert();

[0m
[0;31mSeverity:    HIGH
Pattern:     Possibly unsafe usage of tx-origin
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WheelOfShuffle
Line:        167
Source: 
>     {
>         require(tx.origin == _customerAddress);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount >= (minBet * 2));

[0m
[0;31mSeverity:    HIGH
Pattern:     Possibly unsafe usage of tx-origin
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WheelOfShuffle
Line:        280
Source: 
>     {
>         require(tx.origin == _customerAddress);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(betAmount >= (minBet * 2));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WheelOfShuffle
Line:        99
Source: 
> 
>     event onDeposit(
>     ^^^^^^^^^^^^^^^^
>         address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WheelOfShuffle
Line:        107
Source: 
> 
>     event onWithdraw(
>     ^^^^^^^^^^^^^^^^^
>         address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WheelOfShuffle
Line:        114
Source: 
> 
>     event spinResult(
>     ^^^^^^^^^^^^^^^^^
>         address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WheelOfShuffle
Line:        133
Source: 
> 
>     struct playerSpin {
>     ^^^^^^^^^^^^^^^^^^^
>         uint256 betAmount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WheelOfShuffle
Line:        143
Source: 
>     uint256 internal globalFactor = 10e21;
>     uint256 constant internal constantFactor = 10e21 * 10e21;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public tokenAddress = 0x3A9FfF453d50D4Ac52A6890647b823379ba36B9E;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WheelOfShuffle
Line:        192
Source: 
>     {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount <= tokenBalanceOf(_customerAddress));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WheelOfShuffle
Line:        206
Source: 
>     {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         // Set the sell amount to the user's full balance, don't sell if empty

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WheelOfShuffle
Line:        234
Source: 
>     {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         // User must have enough eth

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WheelOfShuffle
Line:        257
Source: 
>     {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         // set the bet amount to the user's full balance

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        10
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    WheelOfShuffle
Line:        124
Source: 
> 
>     uint256 _seed;
>     ^^^^^^^^^^^^^
>     address admin;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    WheelOfShuffle
Line:        125
Source: 
>     uint256 _seed;
>     address admin;
>     ^^^^^^^^^^^^^
>     bool public gamePaused = false;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    WheelOfShuffle
Line:        127
Source: 
>     bool public gamePaused = false;
>     uint256 minBet =1000000000000000000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 maxBet = 500000000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    WheelOfShuffle
Line:        128
Source: 
>     uint256 minBet =1000000000000000000;
>     uint256 maxBet = 500000000000000000000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 devFeeBalance = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    WheelOfShuffle
Line:        129
Source: 
>     uint256 maxBet = 500000000000000000000;
>     uint256 devFeeBalance = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    WheelOfShuffle
Line:        131
Source: 
> 
>     uint8[10] brackets = [1,3,6,12,24,40,56,68,76,80];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WheelOfShuffle
Line:        127
Source: 
>     bool public gamePaused = false;
>     uint256 minBet =1000000000000000000;
>                     ^^^^^^^^^^^^^^^^^^^
>     uint256 maxBet = 500000000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WheelOfShuffle
Line:        128
Source: 
>     uint256 minBet =1000000000000000000;
>     uint256 maxBet = 500000000000000000000;
>                      ^^^^^^^^^^^^^^^^^^^^^
>     uint256 devFeeBalance = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WheelOfShuffle
Line:        169
Source: 
>         require(amount >= (minBet * 2));
>         require(ERC20Interface(tokenAddress).transferFrom(_customerAddress, tokenAddress, amount), "token transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Add 4% fee of the buy to devFeeBalance

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WheelOfShuffle
Line:        195
Source: 
>         require(amount > 0);
>         if(!ERC20Interface(tokenAddress).transfer(_customerAddress, amount))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             revert();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WheelOfShuffle
Line:        211
Source: 
>         // Transfer balance and update user ledgers
>         if(!ERC20Interface(tokenAddress).transfer(_customerAddress, amount))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             revert();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WheelOfShuffle
Line:        282
Source: 
>         require(betAmount >= (minBet * 2));
>         require(ERC20Interface(tokenAddress).transferFrom(_customerAddress, tokenAddress, betAmount), "token transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Add 4% fee of the buy to devFeeBalance

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WheelOfShuffle
Line:        333
Source: 
>         uint256 withdrawAmount = tokenBalanceOf(_customerAddress);
>         if(!ERC20Interface(tokenAddress).transfer(_customerAddress, withdrawAmount))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             revert();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WheelOfShuffle
Line:        373
Source: 
>         uint256 initDevBal = devFeeBalance;
>         if(!ERC20Interface(tokenAddress).transfer(fund, devFeeBalance/2))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           revert();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WheelOfShuffle
Line:        158
Source: 
>     {
>         return ERC20Interface(tokenAddress).balanceOf(tokenAddress);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    WheelOfShuffle
Line:        124
Source: 
> 
>     uint256 _seed;
>     ^^^^^^^^^^^^^
>     address admin;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WheelOfShuffle
Line:        172
Source: 
>         uint256 devFee = amount / 10;
>         devFeeBalance = devFeeBalance.add(devFee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Adjust ledgers while taking the dev fee into account

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WheelOfShuffle
Line:        174
Source: 
>         // Adjust ledgers while taking the dev fee into account
>         balanceLedger_[_customerAddress] = tokenBalanceOf(_customerAddress).add(amount).sub(devFee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WheelOfShuffle
Line:        175
Source: 
>         balanceLedger_[_customerAddress] = tokenBalanceOf(_customerAddress).add(amount).sub(devFee);
>         personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WheelOfShuffle
Line:        400
Source: 
>         lose(_customerAddress, betAmount);
>         playerSpins[_customerAddress] = playerSpin(uint256(betAmount), uint48(block.number));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WheelOfShuffle
Line:        505
Source: 
>         uint256 globalIncrease = globalFactor.mul(lostAmount) / betPool(_customerAddress);
>         globalFactor = globalFactor.add(globalIncrease);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Update user ledgers

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WheelOfShuffle
Line:        507
Source: 
>         // Update user ledgers
>         personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // User can't lose more than they have

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WheelOfShuffle
Line:        512
Source: 
>         }
>         balanceLedger_[_customerAddress] = customerBal.sub(lostAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WheelOfShuffle
Line:        522
Source: 
>         uint256 globalDecrease = globalFactor.mul(wonAmount) / betPool(_customerAddress);
>         globalFactor = globalFactor.sub(globalDecrease);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Update user ledgers

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WheelOfShuffle
Line:        285
Source: 
>         uint256 devFee = betAmount / 10;
>         devFeeBalance = devFeeBalance.add(devFee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Adjust ledgers while taking the dev fee into account

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WheelOfShuffle
Line:        287
Source: 
>         // Adjust ledgers while taking the dev fee into account
>         balanceLedger_[_customerAddress] = tokenBalanceOf(_customerAddress).add(betAmount).sub(devFee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WheelOfShuffle
Line:        288
Source: 
>         balanceLedger_[_customerAddress] = tokenBalanceOf(_customerAddress).add(betAmount).sub(devFee);
>         personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WheelOfShuffle
Line:        375
Source: 
>           revert();
>         devFeeBalance = devFeeBalance.sub(initDevBal/2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    WheelOfShuffle
Line:        460
Source: 
> 
>         playerSpins[_customerAddress] = playerSpin(uint256(0), uint48(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    WheelOfShuffle
Line:        524
Source: 
>         // Update user ledgers
>         personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balanceLedger_[_customerAddress] = customerBal.add(wonAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    WheelOfShuffle
Line:        525
Source: 
>         personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;
>         balanceLedger_[_customerAddress] = customerBal.add(wonAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WheelOfShuffle
Line:        124
Source: 
> 
>     uint256 _seed;
>     ^^^^^^^^^^^^^
>     address admin;

[0m

---------------------------------------------
For contract 0x5b417ce858713528b127aed8eb412c9daabbd349.sol
Tool Runtime = 643.0608049239963 seconds
#############################################