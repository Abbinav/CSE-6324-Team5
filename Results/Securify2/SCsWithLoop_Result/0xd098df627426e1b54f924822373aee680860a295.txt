[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Helpers
Line:        81
Source: 
>      */
>     function getComptroller() public pure returns (ComptrollerLensInterface) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ComptrollerLensInterface(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Helpers
Line:        88
Source: 
>      */
>     function getOracleAddress() public pure returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 0x9B8Eb8b3d6e2e0Db36F41455185FEF7049a35CaE;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Helpers
Line:        95
Source: 
>      */
>     function getCompReadAddress() public pure returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 0xd513d22422a3062Bd342Ae374b4b9c20E0a9a074;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Helpers
Line:        102
Source: 
>      */
>     function getCETHAddress() public pure returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Helpers
Line:        109
Source: 
>      */
>     function getCompToken() public pure returns (TokenInterface) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return TokenInterface(0xc00e94Cb662C3520282E6f5717214004A7f26888);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Resolver
Line:        155
Source: 
> 
>     function getPosition(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address owner,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        130
Source: 
>         uint decimals = getCETHAddress() == cToken ? 18 : TokenInterface(token).decimals();
>         uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(cToken);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint ethPrice = OrcaleComp(getOracleAddress()).getUnderlyingPrice(getCETHAddress());

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        131
Source: 
>         uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(cToken);
>         uint ethPrice = OrcaleComp(getOracleAddress()).getUnderlyingPrice(getCETHAddress());
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         priceInUSD = price / 10 ** (18 - decimals);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        129
Source: 
>     function getPriceInEth(address cToken, address token) public view returns (uint priceInETH, uint priceInUSD) {
>         uint decimals = getCETHAddress() == cToken ? 18 : TokenInterface(token).decimals();
>                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(cToken);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        164
Source: 
>             getCompoundData(owner, cAddress),
>             CompReadInterface(getCompReadAddress()).getCompBalanceMetadataExt(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 getCompToken(),

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        130
Source: 
>         uint decimals = getCETHAddress() == cToken ? 18 : TokenInterface(token).decimals();
>         uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(cToken);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint ethPrice = OrcaleComp(getOracleAddress()).getUnderlyingPrice(getCETHAddress());

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        131
Source: 
>         uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(cToken);
>         uint ethPrice = OrcaleComp(getOracleAddress()).getUnderlyingPrice(getCETHAddress());
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         priceInUSD = price / 10 ** (18 - decimals);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        129
Source: 
>     function getPriceInEth(address cToken, address token) public view returns (uint priceInETH, uint priceInUSD) {
>         uint decimals = getCETHAddress() == cToken ? 18 : TokenInterface(token).decimals();
>                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(cToken);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        164
Source: 
>             getCompoundData(owner, cAddress),
>             CompReadInterface(getCompReadAddress()).getCompBalanceMetadataExt(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 getCompToken(),

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Resolver
Line:        140
Source: 
>             CTokenInterface cToken = CTokenInterface(cAddress[i]);
>             (uint priceInETH, uint priceInUSD) = getPriceInEth(cAddress[i], cToken.underlying());
>                                                                             ^^^^^^^^^^^^^^^^^^^
>             tokensData[i] = CompData(

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Resolver
Line:        144
Source: 
>                 priceInUSD,
>                 cToken.exchangeRateStored(),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.balanceOf(owner),

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Resolver
Line:        145
Source: 
>                 cToken.exchangeRateStored(),
>                 cToken.balanceOf(owner),
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.borrowBalanceStored(owner),

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Resolver
Line:        146
Source: 
>                 cToken.balanceOf(owner),
>                 cToken.borrowBalanceStored(owner),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.supplyRatePerBlock(),

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Resolver
Line:        147
Source: 
>                 cToken.borrowBalanceStored(owner),
>                 cToken.supplyRatePerBlock(),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.borrowRatePerBlock()

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Resolver
Line:        148
Source: 
>                 cToken.supplyRatePerBlock(),
>                 cToken.borrowRatePerBlock()
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Resolver
Line:        140
Source: 
>             CTokenInterface cToken = CTokenInterface(cAddress[i]);
>             (uint priceInETH, uint priceInUSD) = getPriceInEth(cAddress[i], cToken.underlying());
>                                                                             ^^^^^^^^^^^^^^^^^^^
>             tokensData[i] = CompData(

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Resolver
Line:        144
Source: 
>                 priceInUSD,
>                 cToken.exchangeRateStored(),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.balanceOf(owner),

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Resolver
Line:        145
Source: 
>                 cToken.exchangeRateStored(),
>                 cToken.balanceOf(owner),
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.borrowBalanceStored(owner),

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Resolver
Line:        146
Source: 
>                 cToken.balanceOf(owner),
>                 cToken.borrowBalanceStored(owner),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.supplyRatePerBlock(),

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Resolver
Line:        147
Source: 
>                 cToken.borrowBalanceStored(owner),
>                 cToken.supplyRatePerBlock(),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.borrowRatePerBlock()

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Resolver
Line:        148
Source: 
>                 cToken.supplyRatePerBlock(),
>                 cToken.borrowRatePerBlock()
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Resolver
Line:        136
Source: 
> 
>     function getCompoundData(address owner, address[] memory cAddress) public view returns (CompData[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         CompData[] memory tokensData = new CompData[](cAddress.length);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Resolver
Line:        155
Source: 
> 
>     function getPosition(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address owner,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Resolver
Line:        136
Source: 
> 
>     function getCompoundData(address owner, address[] memory cAddress) public view returns (CompData[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         CompData[] memory tokensData = new CompData[](cAddress.length);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Resolver
Line:        155
Source: 
> 
>     function getPosition(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Resolver
Line:        128
Source: 
> 
>     function getPriceInEth(address cToken, address token) public view returns (uint priceInETH, uint priceInUSD) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint decimals = getCETHAddress() == cToken ? 18 : TokenInterface(token).decimals();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DSMath
Line:        58
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "math-not-safe");
>                                ^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    InstaCompoundResolver
Line:        176
Source: 
> contract InstaCompoundResolver is Resolver {
>     string public constant name = "Compound-Resolver-v1.1";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity ^0.6.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> pragma experimental ABIEncoderV2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSMath
Line:        61
Source: 
> 
>     uint constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Resolver
Line:        130
Source: 
>         uint decimals = getCETHAddress() == cToken ? 18 : TokenInterface(token).decimals();
>         uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(cToken);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint ethPrice = OrcaleComp(getOracleAddress()).getUnderlyingPrice(getCETHAddress());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Resolver
Line:        131
Source: 
>         uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(cToken);
>         uint ethPrice = OrcaleComp(getOracleAddress()).getUnderlyingPrice(getCETHAddress());
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         priceInUSD = price / 10 ** (18 - decimals);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Resolver
Line:        129
Source: 
>     function getPriceInEth(address cToken, address token) public view returns (uint priceInETH, uint priceInUSD) {
>         uint decimals = getCETHAddress() == cToken ? 18 : TokenInterface(token).decimals();
>                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(cToken);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Resolver
Line:        130
Source: 
>         uint decimals = getCETHAddress() == cToken ? 18 : TokenInterface(token).decimals();
>         uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(cToken);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint ethPrice = OrcaleComp(getOracleAddress()).getUnderlyingPrice(getCETHAddress());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Resolver
Line:        131
Source: 
>         uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(cToken);
>         uint ethPrice = OrcaleComp(getOracleAddress()).getUnderlyingPrice(getCETHAddress());
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         priceInUSD = price / 10 ** (18 - decimals);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Resolver
Line:        129
Source: 
>     function getPriceInEth(address cToken, address token) public view returns (uint priceInETH, uint priceInUSD) {
>         uint decimals = getCETHAddress() == cToken ? 18 : TokenInterface(token).decimals();
>                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(cToken);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        140
Source: 
>             CTokenInterface cToken = CTokenInterface(cAddress[i]);
>             (uint priceInETH, uint priceInUSD) = getPriceInEth(cAddress[i], cToken.underlying());
>                                                                             ^^^^^^^^^^^^^^^^^^^
>             tokensData[i] = CompData(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        144
Source: 
>                 priceInUSD,
>                 cToken.exchangeRateStored(),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.balanceOf(owner),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        145
Source: 
>                 cToken.exchangeRateStored(),
>                 cToken.balanceOf(owner),
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.borrowBalanceStored(owner),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        146
Source: 
>                 cToken.balanceOf(owner),
>                 cToken.borrowBalanceStored(owner),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.supplyRatePerBlock(),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        147
Source: 
>                 cToken.borrowBalanceStored(owner),
>                 cToken.supplyRatePerBlock(),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.borrowRatePerBlock()

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        148
Source: 
>                 cToken.supplyRatePerBlock(),
>                 cToken.borrowRatePerBlock()
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        164
Source: 
>             getCompoundData(owner, cAddress),
>             CompReadInterface(getCompReadAddress()).getCompBalanceMetadataExt(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 getCompToken(),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        140
Source: 
>             CTokenInterface cToken = CTokenInterface(cAddress[i]);
>             (uint priceInETH, uint priceInUSD) = getPriceInEth(cAddress[i], cToken.underlying());
>                                                                             ^^^^^^^^^^^^^^^^^^^
>             tokensData[i] = CompData(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        144
Source: 
>                 priceInUSD,
>                 cToken.exchangeRateStored(),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.balanceOf(owner),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        145
Source: 
>                 cToken.exchangeRateStored(),
>                 cToken.balanceOf(owner),
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.borrowBalanceStored(owner),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        146
Source: 
>                 cToken.balanceOf(owner),
>                 cToken.borrowBalanceStored(owner),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.supplyRatePerBlock(),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        147
Source: 
>                 cToken.borrowBalanceStored(owner),
>                 cToken.supplyRatePerBlock(),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.borrowRatePerBlock()

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        148
Source: 
>                 cToken.supplyRatePerBlock(),
>                 cToken.borrowRatePerBlock()
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        164
Source: 
>             getCompoundData(owner, cAddress),
>             CompReadInterface(getCompReadAddress()).getCompBalanceMetadataExt(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 getCompToken(),

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DSMath
Line:        54
Source: 
>     function add(uint x, uint y) internal pure returns (uint z) {
>         require((z = x + y) >= x, "math-not-safe");
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DSMath
Line:        58
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "math-not-safe");
>                            ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DSMath
Line:        72
Source: 
>     function sub(uint x, uint y) internal pure returns (uint z) {
>         require((z = x - y) <= x, "ds-math-sub-underflow");
>                  ^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        130
Source: 
>         uint decimals = getCETHAddress() == cToken ? 18 : TokenInterface(token).decimals();
>         uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(cToken);
>                                 ^^^^^^^^^^^^^^^^^^
>         uint ethPrice = OrcaleComp(getOracleAddress()).getUnderlyingPrice(getCETHAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        131
Source: 
>         uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(cToken);
>         uint ethPrice = OrcaleComp(getOracleAddress()).getUnderlyingPrice(getCETHAddress());
>                                    ^^^^^^^^^^^^^^^^^^
>         priceInUSD = price / 10 ** (18 - decimals);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        144
Source: 
>                 priceInUSD,
>                 cToken.exchangeRateStored(),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.balanceOf(owner),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        145
Source: 
>                 cToken.exchangeRateStored(),
>                 cToken.balanceOf(owner),
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.borrowBalanceStored(owner),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        146
Source: 
>                 cToken.balanceOf(owner),
>                 cToken.borrowBalanceStored(owner),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.supplyRatePerBlock(),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        147
Source: 
>                 cToken.borrowBalanceStored(owner),
>                 cToken.supplyRatePerBlock(),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.borrowRatePerBlock()

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        148
Source: 
>                 cToken.supplyRatePerBlock(),
>                 cToken.borrowRatePerBlock()
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        164
Source: 
>             getCompoundData(owner, cAddress),
>             CompReadInterface(getCompReadAddress()).getCompBalanceMetadataExt(
>                               ^^^^^^^^^^^^^^^^^^^^
>                 getCompToken(),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        130
Source: 
>         uint decimals = getCETHAddress() == cToken ? 18 : TokenInterface(token).decimals();
>         uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(cToken);
>                                 ^^^^^^^^^^^^^^^^^^
>         uint ethPrice = OrcaleComp(getOracleAddress()).getUnderlyingPrice(getCETHAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        131
Source: 
>         uint price = OrcaleComp(getOracleAddress()).getUnderlyingPrice(cToken);
>         uint ethPrice = OrcaleComp(getOracleAddress()).getUnderlyingPrice(getCETHAddress());
>                                    ^^^^^^^^^^^^^^^^^^
>         priceInUSD = price / 10 ** (18 - decimals);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        144
Source: 
>                 priceInUSD,
>                 cToken.exchangeRateStored(),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.balanceOf(owner),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        145
Source: 
>                 cToken.exchangeRateStored(),
>                 cToken.balanceOf(owner),
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.borrowBalanceStored(owner),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        146
Source: 
>                 cToken.balanceOf(owner),
>                 cToken.borrowBalanceStored(owner),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.supplyRatePerBlock(),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        147
Source: 
>                 cToken.borrowBalanceStored(owner),
>                 cToken.supplyRatePerBlock(),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cToken.borrowRatePerBlock()

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        148
Source: 
>                 cToken.supplyRatePerBlock(),
>                 cToken.borrowRatePerBlock()
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        164
Source: 
>             getCompoundData(owner, cAddress),
>             CompReadInterface(getCompReadAddress()).getCompBalanceMetadataExt(
>                               ^^^^^^^^^^^^^^^^^^^^
>                 getCompToken(),

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        61
Source: 
> 
>     uint constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    InstaCompoundResolver
Line:        176
Source: 
> contract InstaCompoundResolver is Resolver {
>     string public constant name = "Compound-Resolver-v1.1";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m

---------------------------------------------
For contract 0xd098df627426e1b54f924822373aee680860a295.sol
Tool Runtime = 3.8655322709996653 seconds
#############################################