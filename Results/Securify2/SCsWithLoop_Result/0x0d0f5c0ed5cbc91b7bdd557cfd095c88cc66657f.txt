pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CZE
Line:        90
Source: 
>     
>   uint256 public totalBurn = 0;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CZE
Line:        98
Source: 
>   uint8  constant tokenDecimals = 18;
>   uint256 _totalSupply = 12000*10**uint(tokenDecimals); 
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CZE
Line:        111
Source: 
>   
>   address initialSupplySend = 0x14809eea06dd56c04228204BB43EFe720d9205B7;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        71
Source: 
> 
>   function name() public view returns(string memory) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _Tokenname;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        75
Source: 
> 
>   function symbol() public view returns(string memory) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _Tokensymbol;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        79
Source: 
> 
>   function decimals() public view returns(uint8) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _Tokendecimals;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CZE
Line:        120
Source: 
> 
>   function totalSupply() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CZE
Line:        124
Source: 
> 
>   function balanceOf(address owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _balances[owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CZE
Line:        128
Source: 
> 
>   function allowance(address owner, address spender) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _allowed[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CZE
Line:        132
Source: 
> 
>   function addAdmin(address account) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(msg.sender == _owner, "!owner");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CZE
Line:        137
Source: 
>   
>     function removeAdmin(address account) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(msg.sender == _owner, "!owner");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CZE
Line:        148
Source: 
>     
>     function multiTransfer(address[] memory receivers, uint256[] memory values) public
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CZE
Line:        155
Source: 
>     
>     function transferFrom(address from, address to, uint256 value) public returns (bool) 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CZE
Line:        176
Source: 
>   //no zeros for decimals necessary 
>   function multiTransferEqualAmount(address[] memory receivers, uint256 amount) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 amountWithDecimals = amount * 10**tokenDecimals;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CZE
Line:        184
Source: 
> 
>   function approve(address spender, uint256 value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CZE
Line:        191
Source: 
> 
>   function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CZE
Line:        198
Source: 
> 
>   function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CZE
Line:        218
Source: 
>   
>   function addWork(address account, uint256 amount) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(msg.sender == _owner, "!warning");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CZE
Line:        214
Source: 
>       currentToken = IERC20(contractUnclaimed);
>       uint256 amount = currentToken.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       currentToken.transfer(_owner, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CZE
Line:        215
Source: 
>       uint256 amount = currentToken.balanceOf(address(this));
>       currentToken.transfer(_owner, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    CZE
Line:        86
Source: 
> 
> contract CZE is ERC20Detailed {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CZE
Line:        142
Source: 
> 
>  function transfer(address to, uint256 value) public returns (bool) 
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CZE
Line:        155
Source: 
>     
>     function transferFrom(address from, address to, uint256 value) public returns (bool) 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CZE
Line:        176
Source: 
>   //no zeros for decimals necessary 
>   function multiTransferEqualAmount(address[] memory receivers, uint256 amount) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 amountWithDecimals = amount * 10**tokenDecimals;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CZE
Line:        191
Source: 
> 
>   function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CZE
Line:        198
Source: 
> 
>   function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CZE
Line:        218
Source: 
>   
>   function addWork(address account, uint256 amount) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(msg.sender == _owner, "!warning");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CZE
Line:        124
Source: 
> 
>   function balanceOf(address owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _balances[owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CZE
Line:        128
Source: 
> 
>   function allowance(address owner, address spender) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _allowed[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CZE
Line:        132
Source: 
> 
>   function addAdmin(address account) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(msg.sender == _owner, "!owner");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CZE
Line:        137
Source: 
>   
>     function removeAdmin(address account) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(msg.sender == _owner, "!owner");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CZE
Line:        184
Source: 
> 
>   function approve(address spender, uint256 value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CZE
Line:        212
Source: 
>  //take back unclaimed tokens of any type sent by mistake
>   function withdrawUnclaimedTokens(address contractUnclaimed) external onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       currentToken = IERC20(contractUnclaimed);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        63
Source: 
> 
>   constructor(string memory name, string memory symbol, uint8 decimals) public {
>               ^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        63
Source: 
> 
>   constructor(string memory name, string memory symbol, uint8 decimals) public {
>                                   ^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        63
Source: 
> 
>   constructor(string memory name, string memory symbol, uint8 decimals) public {
>                                                         ^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20Detailed
Line:        59
Source: 
> 
>   uint8 private _Tokendecimals;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string private _Tokenname;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20Detailed
Line:        60
Source: 
>   uint8 private _Tokendecimals;
>   string private _Tokenname;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   string private _Tokensymbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20Detailed
Line:        61
Source: 
>   string private _Tokenname;
>   string private _Tokensymbol;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CZE
Line:        95
Source: 
>   mapping (address => bool) public addadmin;
>   string constant tokenName = "Cezo.finance";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string constant tokenSymbol = "CZE";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CZE
Line:        96
Source: 
>   string constant tokenName = "Cezo.finance";
>   string constant tokenSymbol = "CZE";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint8  constant tokenDecimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CZE
Line:        97
Source: 
>   string constant tokenSymbol = "CZE";
>   uint8  constant tokenDecimals = 18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 _totalSupply = 12000*10**uint(tokenDecimals); 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CZE
Line:        103
Source: 
>   IERC20 currentToken ;
>   	address payable public _owner;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        10
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CZE
Line:        95
Source: 
>   mapping (address => bool) public addadmin;
>   string constant tokenName = "Cezo.finance";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string constant tokenSymbol = "CZE";

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CZE
Line:        96
Source: 
>   string constant tokenName = "Cezo.finance";
>   string constant tokenSymbol = "CZE";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint8  constant tokenDecimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CZE
Line:        97
Source: 
>   string constant tokenSymbol = "CZE";
>   uint8  constant tokenDecimals = 18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 _totalSupply = 12000*10**uint(tokenDecimals); 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CZE
Line:        98
Source: 
>   uint8  constant tokenDecimals = 18;
>   uint256 _totalSupply = 12000*10**uint(tokenDecimals); 
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CZE
Line:        102
Source: 
>   //any tokens sent here ? 
>   IERC20 currentToken ;
>   ^^^^^^^^^^^^^^^^^^^
>   	address payable public _owner;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CZE
Line:        111
Source: 
>   
>   address initialSupplySend = 0x14809eea06dd56c04228204BB43EFe720d9205B7;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CZE
Line:        214
Source: 
>       currentToken = IERC20(contractUnclaimed);
>       uint256 amount = currentToken.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       currentToken.transfer(_owner, amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CZE
Line:        215
Source: 
>       uint256 amount = currentToken.balanceOf(address(this));
>       currentToken.transfer(_owner, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CZE
Line:        102
Source: 
>   //any tokens sent here ? 
>   IERC20 currentToken ;
>   ^^^^^^^^^^^^^^^^^^^
>   	address payable public _owner;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CZE
Line:        170
Source: 
>         if (_balances[_to] + _value < _balances[_to]) revert(); // Check for overflows
>         _balances[_from] = SafeMath.sub(_balances[_from], _value);                     // Subtract from the sender
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[_to] = SafeMath.add(_balances[_to], _value);                            // Add the same to the recipient

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CZE
Line:        171
Source: 
>         _balances[_from] = SafeMath.sub(_balances[_from], _value);                     // Subtract from the sender
>         _balances[_to] = SafeMath.add(_balances[_to], _value);                            // Add the same to the recipient
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_from, _to, _value);                   // Notify anyone listening that this transfer took place

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CZE
Line:        186
Source: 
>     require(spender != address(0));
>     _allowed[msg.sender][spender] = value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, spender, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CZE
Line:        193
Source: 
>     require(spender != address(0));
>     _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CZE
Line:        200
Source: 
>     require(spender != address(0));
>     _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CZE
Line:        215
Source: 
>       uint256 amount = currentToken.balanceOf(address(this));
>       currentToken.transfer(_owner, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMath
Line:        53
Source: 
>     uint256 d = sub(c,1);
>     return mul(div(d,m),m);
>                ^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CZE
Line:        90
Source: 
>     
>   uint256 public totalBurn = 0;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m

---------------------------------------------
For contract 0x0d0f5c0ed5cbc91b7bdd557cfd095c88cc66657f.sol
Tool Runtime = 5.147383745999832 seconds
#############################################