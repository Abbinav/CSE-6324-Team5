[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    YSCARCE
Line:        118
Source: 
> 		uint32 _size;
> 		assembly {
>   ^^^^^^^^^^
> 			_size := extcodesize(_to)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    YSCARCE
Line:        38
Source: 
> 	}
> 	Info private info;
>  ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YSCARCE
Line:        161
Source: 
> 
> 	function allowance(address _user, address _spender) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].allowance[_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YSCARCE
Line:        165
Source: 
> 
> 	function isWhitelisted(address _user) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].whitelisted;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YSCARCE
Line:        169
Source: 
> 
> 	function allInfoFor(address _user) public view returns (uint256 totalTokenSupply, uint256 totalTokensStaked, uint256 userBalance, uint256 userStaked, uint256 userDividends) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return (totalSupply(), totalStaked(), balanceOf(_user), stakedOf(_user), dividendsOf(_user));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YSCARCE
Line:        122
Source: 
> 		if (_size > 0) {
> 			require(Callable(_to).tokenCallback(msg.sender, _transferred, _data));
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YSCARCE
Line:        58
Source: 
> 
> 	function stake(uint256 _tokens) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_stake(_tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YSCARCE
Line:        62
Source: 
> 
> 	function unstake(uint256 _tokens) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_unstake(_tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YSCARCE
Line:        97
Source: 
> 
> 	function transfer(address _to, uint256 _tokens) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(msg.sender, _to, _tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YSCARCE
Line:        102
Source: 
> 
> 	function approve(address _spender, uint256 _tokens) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].allowance[_spender] = _tokens;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YSCARCE
Line:        108
Source: 
> 
> 	function transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(info.users[_from].allowance[msg.sender] >= _tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YSCARCE
Line:        115
Source: 
> 
> 	function transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 _transferred = _transfer(msg.sender, _to, _tokens); 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YSCARCE
Line:        134
Source: 
> 
> 	function whitelist(address _user, bool _status) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == info.admin);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YSCARCE
Line:        149
Source: 
> 
> 	function balanceOf(address _user) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].balance - stakedOf(_user);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YSCARCE
Line:        153
Source: 
> 
> 	function stakedOf(address _user) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].staked;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YSCARCE
Line:        157
Source: 
> 
> 	function dividendsOf(address _user) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return uint256(int256(info.scaledPayoutPerToken * info.users[_user].staked) - info.users[_user].scaledPayout) / FLOAT_SCALAR;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YSCARCE
Line:        161
Source: 
> 
> 	function allowance(address _user, address _spender) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].allowance[_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YSCARCE
Line:        165
Source: 
> 
> 	function isWhitelisted(address _user) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].whitelisted;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YSCARCE
Line:        169
Source: 
> 
> 	function allInfoFor(address _user) public view returns (uint256 totalTokenSupply, uint256 totalTokensStaked, uint256 userBalance, uint256 userStaked, uint256 userDividends) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return (totalSupply(), totalStaked(), balanceOf(_user), stakedOf(_user), dividendsOf(_user));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    YSCARCE
Line:        205
Source: 
> 		uint256 _feeAmount = _amount * 9 / 100;
> 		info.scaledPayoutPerToken += _feeAmount * FLOAT_SCALAR / info.totalStaked;
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.totalStaked -= _amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    YSCARCE
Line:        69
Source: 
> 		require(_dividends >= 0);
> 		info.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].balance += _dividends;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    YSCARCE
Line:        176
Source: 
> 		info.users[_from].balance -= _tokens;
>         uint256 _feeAmount = _tokens * STAKE_FEE / 100;
>                              ^^^^^^^^^^^^^^^^^^^
>         uint256 _transferred = _tokens - _feeAmount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    YSCARCE
Line:        181
Source: 
>             emit Transfer(_from, _to, _transferred);
>             info.scaledPayoutPerToken += _feeAmount * FLOAT_SCALAR / info.totalStaked;
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Transfer(_from, address(this), _feeAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YSCARCE
Line:        19
Source: 
> 
> 	string constant public name = "YSCARCE";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	string constant public symbol = "YSCR";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YSCARCE
Line:        20
Source: 
> 	string constant public name = "YSCARCE";
> 	string constant public symbol = "YSCR";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint8 constant public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YSCARCE
Line:        21
Source: 
> 	string constant public symbol = "YSCR";
> 	uint8 constant public decimals = 18;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YSCARCE
Line:        67
Source: 
> 	function collect() external returns (uint256) {
> 		uint256 _dividends = dividendsOf(msg.sender);
>   ^^^^^^^^^^^^^^^^^^
> 		require(_dividends >= 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YSCARCE
Line:        78
Source: 
> 		require(balanceOf(msg.sender) >= _tokens);
> 		uint256 _droppedAmount = _tokens;
>   ^^^^^^^^^^^^^^^^^^^^^^
>         info.users[msg.sender].balance -= _tokens;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YSCARCE
Line:        116
Source: 
> 	function transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {
> 		uint256 _transferred = _transfer(msg.sender, _to, _tokens); 
>   ^^^^^^^^^^^^^^^^^^^^
> 		uint32 _size;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YSCARCE
Line:        117
Source: 
> 		uint256 _transferred = _transfer(msg.sender, _to, _tokens); 
> 		uint32 _size;
>   ^^^^^^^^^^^^
> 		assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YSCARCE
Line:        176
Source: 
> 		info.users[_from].balance -= _tokens;
>         uint256 _feeAmount = _tokens * STAKE_FEE / 100;
>         ^^^^^^^^^^^^^^^^^^
>         uint256 _transferred = _tokens - _feeAmount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YSCARCE
Line:        177
Source: 
>         uint256 _feeAmount = _tokens * STAKE_FEE / 100;
>         uint256 _transferred = _tokens - _feeAmount;
>         ^^^^^^^^^^^^^^^^^^^^
>         if (info.totalStaked > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YSCARCE
Line:        204
Source: 
> 		require(stakedOf(msg.sender) >= _amount);
> 		uint256 _feeAmount = _amount * 9 / 100;
>   ^^^^^^^^^^^^^^^^^^
> 		info.scaledPayoutPerToken += _feeAmount * FLOAT_SCALAR / info.totalStaked;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity ^0.5.13;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    YSCARCE
Line:        122
Source: 
> 		if (_size > 0) {
> 			require(Callable(_to).tokenCallback(msg.sender, _transferred, _data));
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    YSCARCE
Line:        121
Source: 
> 		}
> 		if (_size > 0) {
>       ^^^^^
> 			require(Callable(_to).tokenCallback(msg.sender, _transferred, _data));

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    YSCARCE
Line:        38
Source: 
> 	}
> 	Info private info;
>  ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        195
Source: 
> 		require(stakedOf(msg.sender) + _amount >= MIN_STAKE_AMOUNT);
> 		info.totalStaked += _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].staked += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        196
Source: 
> 		info.totalStaked += _amount;
> 		info.users[msg.sender].staked += _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].scaledPayout += int256(_amount * info.scaledPayoutPerToken);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        197
Source: 
> 		info.users[msg.sender].staked += _amount;
> 		info.users[msg.sender].scaledPayout += int256(_amount * info.scaledPayoutPerToken);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(msg.sender, address(this), _amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        205
Source: 
> 		uint256 _feeAmount = _amount * 9 / 100;
> 		info.scaledPayoutPerToken += _feeAmount * FLOAT_SCALAR / info.totalStaked;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.totalStaked -= _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        206
Source: 
> 		info.scaledPayoutPerToken += _feeAmount * FLOAT_SCALAR / info.totalStaked;
> 		info.totalStaked -= _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].balance -= _feeAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        207
Source: 
> 		info.totalStaked -= _amount;
> 		info.users[msg.sender].balance -= _feeAmount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].staked -= _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        208
Source: 
> 		info.users[msg.sender].balance -= _feeAmount;
> 		info.users[msg.sender].staked -= _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].scaledPayout -= int256(_amount * info.scaledPayoutPerToken);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        209
Source: 
> 		info.users[msg.sender].staked -= _amount;
> 		info.users[msg.sender].scaledPayout -= int256(_amount * info.scaledPayoutPerToken);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(address(this), msg.sender, _amount - _feeAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        69
Source: 
> 		require(_dividends >= 0);
> 		info.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].balance += _dividends;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        70
Source: 
> 		info.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);
> 		info.users[msg.sender].balance += _dividends;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(address(this), msg.sender, _dividends);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        79
Source: 
> 		uint256 _droppedAmount = _tokens;
>         info.users[msg.sender].balance -= _tokens;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (info.totalStaked > 0) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        81
Source: 
> 		if (info.totalStaked > 0) {
> 			info.scaledPayoutPerToken += _droppedAmount * FLOAT_SCALAR / info.totalStaked;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			emit Transfer(msg.sender, address(this), _droppedAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        92
Source: 
> 		require(balanceOf(msg.sender) >= _tokens);
> 		info.users[msg.sender].balance -= _tokens;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.scaledPayoutPerToken += _tokens * FLOAT_SCALAR / info.totalStaked;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        93
Source: 
> 		info.users[msg.sender].balance -= _tokens;
> 		info.scaledPayoutPerToken += _tokens * FLOAT_SCALAR / info.totalStaked;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(msg.sender, address(this), _tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        175
Source: 
> 		require(balanceOf(_from) >= _tokens);
> 		info.users[_from].balance -= _tokens;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _feeAmount = _tokens * STAKE_FEE / 100;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        179
Source: 
>         if (info.totalStaked > 0) {
>             info.users[_to].balance += _transferred;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Transfer(_from, _to, _transferred);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        181
Source: 
>             emit Transfer(_from, _to, _transferred);
>             info.scaledPayoutPerToken += _feeAmount * FLOAT_SCALAR / info.totalStaked;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Transfer(_from, address(this), _feeAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YSCARCE
Line:        186
Source: 
>         }else {
>             info.users[_to].balance += _tokens;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Transfer(_from, _to, _tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YSCARCE
Line:        103
Source: 
> 	function approve(address _spender, uint256 _tokens) external returns (bool) {
> 		info.users[msg.sender].allowance[_spender] = _tokens;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(msg.sender, _spender, _tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    YSCARCE
Line:        19
Source: 
> 
> 	string constant public name = "YSCARCE";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	string constant public symbol = "YSCR";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    YSCARCE
Line:        20
Source: 
> 	string constant public name = "YSCARCE";
> 	string constant public symbol = "YSCR";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint8 constant public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    YSCARCE
Line:        21
Source: 
> 	string constant public symbol = "YSCR";
> 	uint8 constant public decimals = 18;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0x5f203a1b7113c22d79e161455ef3810b020d8f9a.sol
Tool Runtime = 5.463567470999806 seconds
#############################################