[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TimeLock
Line:        102
Source: 
> 
>     function deposit(address beneficiary, uint totalAmount, uint trenchAmount, uint firstRelease, uint releaseStride) public returns(bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.transferFrom(msg.sender, address(this), totalAmount));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TimeLock
Line:        118
Source: 
> 
>     function withdraw(uint lockBoxNumber) public returns(bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         LockBoxStruct storage l = lockBoxStructs[lockBoxNumber];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TimeLock
Line:        102
Source: 
> 
>     function deposit(address beneficiary, uint totalAmount, uint trenchAmount, uint firstRelease, uint releaseStride) public returns(bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.transferFrom(msg.sender, address(this), totalAmount));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLock
Line:        104
Source: 
>         require(token.transferFrom(msg.sender, address(this), totalAmount));
>         LockBoxStruct memory l;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         l.beneficiary = beneficiary;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimeLock
Line:        119
Source: 
>     function withdraw(uint lockBoxNumber) public returns(bool success) {
>         LockBoxStruct storage l = lockBoxStructs[lockBoxNumber];
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         require(l.beneficiary == msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        8
Source: 
> //pragma solidity ^0.6.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TimeLock
Line:        85
Source: 
> contract TimeLock {
>     IERC20 token;
>     ^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLock
Line:        103
Source: 
>     function deposit(address beneficiary, uint totalAmount, uint trenchAmount, uint firstRelease, uint releaseStride) public returns(bool success) {
>         require(token.transferFrom(msg.sender, address(this), totalAmount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         LockBoxStruct memory l;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimeLock
Line:        125
Source: 
>         emit LogLockBoxWithdrawal(msg.sender, amount);
>         require(token.transfer(msg.sender, amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    TimeLock
Line:        105
Source: 
>         LockBoxStruct memory l;
>         l.beneficiary = beneficiary;
>         ^
>         l.balance = trenchAmount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimeLock
Line:        108
Source: 
>         l.releaseTime = firstRelease;
>         lockBoxStructs.push(l);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         for (uint i = 1; i < 20; ++i) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimeLock
Line:        112
Source: 
>             l.releaseTime = time;
>             lockBoxStructs.push(l);
>             ^^^^^^^^^^^^^^^^^^^^^^
>             emit LogLockBoxDeposit(msg.sender, trenchAmount, time);

[0m

---------------------------------------------
For contract 0xf7d71d20fa1aa53c07eb8b1b671ea3553c90ff98.sol
Tool Runtime = 2.7224743719998514 seconds
#############################################