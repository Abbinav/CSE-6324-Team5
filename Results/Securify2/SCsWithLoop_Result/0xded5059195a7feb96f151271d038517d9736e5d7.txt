pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DivideContract
Line:        128
Source: 
>   mapping(address => bool) operators;
>   uint256 public NUM_RECIPIENTS = 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public PRECISION = 10000;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DivideContract
Line:        129
Source: 
>   uint256 public NUM_RECIPIENTS = 2;
>   uint256 public PRECISION = 10000;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   RecipientList recipientList;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DivideContract
Line:        181
Source: 
> 
>   function getOwner() public view returns (address) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DivideContract
Line:        190
Source: 
> 
>   function assignOperator (address entity) public isOwner() {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(entity != address(0), 'Target is invalid addresses');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DivideContract
Line:        197
Source: 
> 
>   function removeOperator (address entity) public isOwner() {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(entity != address(0), 'Target is invalid addresses');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DivideContract
Line:        206
Source: 
>   // In: array of recipients, integer array of ratios
>   function registerRecipientsInfo (address payable[] memory recipients, uint256[] memory ratio) public isOperator() returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(arraySum(ratio) == PRECISION, 'Total sum of ratio must be 100%');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DivideContract
Line:        218
Source: 
>   // Out: nft platfor address, available recipients, ratios
>   function getRecipientsInfo() public view isOperator() returns (address, address payable[] memory, uint256[] memory) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return (nftAddress, recipientList.available_recipients, recipientList.ratios);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DivideContract
Line:        222
Source: 
> 
>   function deleteRecipientsInfo () public isOperator() {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(recipientList.available_recipients.length > 0, 'No recipients registered');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DivideContract
Line:        186
Source: 
>   // Check if operator is in mapping for js tests
>   function operatorExists (address entity) public view returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return operators[entity];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DivideContract
Line:        128
Source: 
>   mapping(address => bool) operators;
>   uint256 public NUM_RECIPIENTS = 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public PRECISION = 10000;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DivideContract
Line:        129
Source: 
>   uint256 public NUM_RECIPIENTS = 2;
>   uint256 public PRECISION = 10000;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   RecipientList recipientList;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        8
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        119
Source: 
> //pragma solidity >=0.5.10 <0.6.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DivideContract
Line:        126
Source: 
> 
>   address owner;
>   ^^^^^^^^^^^^^
>   mapping(address => bool) operators;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DivideContract
Line:        127
Source: 
>   address owner;
>   mapping(address => bool) operators;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public NUM_RECIPIENTS = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DivideContract
Line:        130
Source: 
>   uint256 public PRECISION = 10000;
>   RecipientList recipientList;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public nftAddress;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DivideContract
Line:        240
Source: 
>     address payable toWallet1 = recipientList.available_recipients[0];
>     toWallet1.transfer(amount1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Transfer(msg.sender, toWallet1, amount1, msg.value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    DivideContract
Line:        246
Source: 
>     address payable toWallet2 = recipientList.available_recipients[1];
>     toWallet2.transfer(amount2);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Transfer(msg.sender, toWallet2, amount2, msg.value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DivideContract
Line:        240
Source: 
>     address payable toWallet1 = recipientList.available_recipients[0];
>     toWallet1.transfer(amount1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Transfer(msg.sender, toWallet1, amount1, msg.value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DivideContract
Line:        246
Source: 
>     address payable toWallet2 = recipientList.available_recipients[1];
>     toWallet2.transfer(amount2);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Transfer(msg.sender, toWallet2, amount2, msg.value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DivideContract
Line:        240
Source: 
>     address payable toWallet1 = recipientList.available_recipients[0];
>     toWallet1.transfer(amount1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Transfer(msg.sender, toWallet1, amount1, msg.value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DivideContract
Line:        246
Source: 
>     address payable toWallet2 = recipientList.available_recipients[1];
>     toWallet2.transfer(amount2);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Transfer(msg.sender, toWallet2, amount2, msg.value);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DivideContract
Line:        175
Source: 
>     uint256 res;
>     for (uint256 i; i < data.length; i++) {
>                                      ^
>       res = res.add(data[i]);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    DivideContract
Line:        130
Source: 
>   uint256 public PRECISION = 10000;
>   RecipientList recipientList;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public nftAddress;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    DivideContract
Line:        240
Source: 
>     address payable toWallet1 = recipientList.available_recipients[0];
>     toWallet1.transfer(amount1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Transfer(msg.sender, toWallet1, amount1, msg.value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    DivideContract
Line:        246
Source: 
>     address payable toWallet2 = recipientList.available_recipients[1];
>     toWallet2.transfer(amount2);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Transfer(msg.sender, toWallet2, amount2, msg.value);

[0m

---------------------------------------------
For contract 0xded5059195a7feb96f151271d038517d9736e5d7.sol
Tool Runtime = 3.984043999000278 seconds
#############################################