[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    GaugeHelper
Line:        52
Source: 
>     // solium-disable-next-line security/no-inline-assembly
>     assembly {
>     ^^^^^^^^^^
>       result := mload(add(str, 32))

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Resolver
Line:        91
Source: 
> 
>     function getPositions(string[] memory gaugesName, address user) public view returns (PositionData[] memory positions) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         positions = new PositionData[](gaugesName.length);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        72
Source: 
>         ICurveGaugeMapping curveGaugeMapping = ICurveGaugeMapping(getCurveGaugeMappingAddr());
>         ICurveGaugeMapping.GaugeData memory curveGaugeData = curveGaugeMapping.gaugeMapping(
>                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             bytes32(stringToBytes32(gaugeName)

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        77
Source: 
>         IMintor mintor = IMintor(getCurveMintorAddr());
>         positionData.stakedBal = gauge.balanceOf(user);
>                                  ^^^^^^^^^^^^^^^^^^^^^
>         positionData.crvEarned = gauge.integrate_fraction(user);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        78
Source: 
>         positionData.stakedBal = gauge.balanceOf(user);
>         positionData.crvEarned = gauge.integrate_fraction(user);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         positionData.crvClaimed = mintor.minted(user, address(gauge));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        79
Source: 
>         positionData.crvEarned = gauge.integrate_fraction(user);
>         positionData.crvClaimed = mintor.minted(user, address(gauge));
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        82
Source: 
>         if (curveGaugeData.rewardToken) {
>             positionData.rewardsEarned = gauge.rewards_for(user);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        83
Source: 
>             positionData.rewardsEarned = gauge.rewards_for(user);
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        84
Source: 
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);
>                                                             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        84
Source: 
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        88
Source: 
> 
>         positionData.crvBal = TokenInterface(address(gauge.crv_token())).balanceOf(user);
>                                                      ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        88
Source: 
> 
>         positionData.crvBal = TokenInterface(address(gauge.crv_token())).balanceOf(user);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        72
Source: 
>         ICurveGaugeMapping curveGaugeMapping = ICurveGaugeMapping(getCurveGaugeMappingAddr());
>         ICurveGaugeMapping.GaugeData memory curveGaugeData = curveGaugeMapping.gaugeMapping(
>                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             bytes32(stringToBytes32(gaugeName)

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        77
Source: 
>         IMintor mintor = IMintor(getCurveMintorAddr());
>         positionData.stakedBal = gauge.balanceOf(user);
>                                  ^^^^^^^^^^^^^^^^^^^^^
>         positionData.crvEarned = gauge.integrate_fraction(user);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        78
Source: 
>         positionData.stakedBal = gauge.balanceOf(user);
>         positionData.crvEarned = gauge.integrate_fraction(user);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         positionData.crvClaimed = mintor.minted(user, address(gauge));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        79
Source: 
>         positionData.crvEarned = gauge.integrate_fraction(user);
>         positionData.crvClaimed = mintor.minted(user, address(gauge));
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        82
Source: 
>         if (curveGaugeData.rewardToken) {
>             positionData.rewardsEarned = gauge.rewards_for(user);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        83
Source: 
>             positionData.rewardsEarned = gauge.rewards_for(user);
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        84
Source: 
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);
>                                                             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        84
Source: 
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        88
Source: 
> 
>         positionData.crvBal = TokenInterface(address(gauge.crv_token())).balanceOf(user);
>                                                      ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Resolver
Line:        88
Source: 
> 
>         positionData.crvBal = TokenInterface(address(gauge.crv_token())).balanceOf(user);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Resolver
Line:        70
Source: 
>     }
>     function getPosition(string memory gaugeName, address user) public view returns (PositionData memory positionData) { 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ICurveGaugeMapping curveGaugeMapping = ICurveGaugeMapping(getCurveGaugeMappingAddr());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Resolver
Line:        91
Source: 
> 
>     function getPositions(string[] memory gaugesName, address user) public view returns (PositionData[] memory positions) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         positions = new PositionData[](gaugesName.length);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Resolver
Line:        70
Source: 
>     }
>     function getPosition(string memory gaugeName, address user) public view returns (PositionData memory positionData) { 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ICurveGaugeMapping curveGaugeMapping = ICurveGaugeMapping(getCurveGaugeMappingAddr());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Resolver
Line:        91
Source: 
> 
>     function getPositions(string[] memory gaugesName, address user) public view returns (PositionData[] memory positions) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         positions = new PositionData[](gaugesName.length);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IGauge
Line:        28
Source: 
> interface IGauge {
>   function integrate_fraction(address user) external view returns(uint256 amt);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function lp_token() external view returns(address token);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IGauge
Line:        29
Source: 
>   function integrate_fraction(address user) external view returns(uint256 amt);
>   function lp_token() external view returns(address token);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function rewarded_token() external view returns(address token);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IGauge
Line:        30
Source: 
>   function lp_token() external view returns(address token);
>   function rewarded_token() external view returns(address token);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function crv_token() external view returns(address token);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IGauge
Line:        31
Source: 
>   function rewarded_token() external view returns(address token);
>   function crv_token() external view returns(address token);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function balanceOf(address user) external view returns(uint256 amt);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IGauge
Line:        33
Source: 
>   function balanceOf(address user) external view returns(uint256 amt);
>   function rewards_for(address user) external view returns(uint256 amt);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function claimed_rewards_for(address user) external view returns(uint256 amt);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IGauge
Line:        34
Source: 
>   function rewards_for(address user) external view returns(uint256 amt);
>   function claimed_rewards_for(address user) external view returns(uint256 amt);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    InstaCurveGaugeResolver
Line:        101
Source: 
> contract InstaCurveGaugeResolver is Resolver {
>     string public constant name = "Curve-Gauge-Resolver-v1";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity ^0.6.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> pragma experimental ABIEncoderV2;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Resolver
Line:        72
Source: 
>         ICurveGaugeMapping curveGaugeMapping = ICurveGaugeMapping(getCurveGaugeMappingAddr());
>         ICurveGaugeMapping.GaugeData memory curveGaugeData = curveGaugeMapping.gaugeMapping(
>                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             bytes32(stringToBytes32(gaugeName)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        77
Source: 
>         IMintor mintor = IMintor(getCurveMintorAddr());
>         positionData.stakedBal = gauge.balanceOf(user);
>                                  ^^^^^^^^^^^^^^^^^^^^^
>         positionData.crvEarned = gauge.integrate_fraction(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        78
Source: 
>         positionData.stakedBal = gauge.balanceOf(user);
>         positionData.crvEarned = gauge.integrate_fraction(user);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         positionData.crvClaimed = mintor.minted(user, address(gauge));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        79
Source: 
>         positionData.crvEarned = gauge.integrate_fraction(user);
>         positionData.crvClaimed = mintor.minted(user, address(gauge));
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        82
Source: 
>         if (curveGaugeData.rewardToken) {
>             positionData.rewardsEarned = gauge.rewards_for(user);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        83
Source: 
>             positionData.rewardsEarned = gauge.rewards_for(user);
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        84
Source: 
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);
>                                                             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        84
Source: 
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        88
Source: 
> 
>         positionData.crvBal = TokenInterface(address(gauge.crv_token())).balanceOf(user);
>                                                      ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        88
Source: 
> 
>         positionData.crvBal = TokenInterface(address(gauge.crv_token())).balanceOf(user);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        77
Source: 
>         IMintor mintor = IMintor(getCurveMintorAddr());
>         positionData.stakedBal = gauge.balanceOf(user);
>                                  ^^^^^^^^^^^^^^^^^^^^^
>         positionData.crvEarned = gauge.integrate_fraction(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        78
Source: 
>         positionData.stakedBal = gauge.balanceOf(user);
>         positionData.crvEarned = gauge.integrate_fraction(user);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         positionData.crvClaimed = mintor.minted(user, address(gauge));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        79
Source: 
>         positionData.crvEarned = gauge.integrate_fraction(user);
>         positionData.crvClaimed = mintor.minted(user, address(gauge));
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        82
Source: 
>         if (curveGaugeData.rewardToken) {
>             positionData.rewardsEarned = gauge.rewards_for(user);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        83
Source: 
>             positionData.rewardsEarned = gauge.rewards_for(user);
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        84
Source: 
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);
>                                                             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        84
Source: 
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        88
Source: 
> 
>         positionData.crvBal = TokenInterface(address(gauge.crv_token())).balanceOf(user);
>                                                      ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Resolver
Line:        88
Source: 
> 
>         positionData.crvBal = TokenInterface(address(gauge.crv_token())).balanceOf(user);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Resolver
Line:        77
Source: 
>         IMintor mintor = IMintor(getCurveMintorAddr());
>         positionData.stakedBal = gauge.balanceOf(user);
>         ^^^^^^^^^^^^
>         positionData.crvEarned = gauge.integrate_fraction(user);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        77
Source: 
>         IMintor mintor = IMintor(getCurveMintorAddr());
>         positionData.stakedBal = gauge.balanceOf(user);
>                                  ^^^^^^^^^^^^^^^^^^^^^
>         positionData.crvEarned = gauge.integrate_fraction(user);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        78
Source: 
>         positionData.stakedBal = gauge.balanceOf(user);
>         positionData.crvEarned = gauge.integrate_fraction(user);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         positionData.crvClaimed = mintor.minted(user, address(gauge));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        79
Source: 
>         positionData.crvEarned = gauge.integrate_fraction(user);
>         positionData.crvClaimed = mintor.minted(user, address(gauge));
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        82
Source: 
>         if (curveGaugeData.rewardToken) {
>             positionData.rewardsEarned = gauge.rewards_for(user);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        83
Source: 
>             positionData.rewardsEarned = gauge.rewards_for(user);
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        84
Source: 
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);
>                                                             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        84
Source: 
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        88
Source: 
> 
>         positionData.crvBal = TokenInterface(address(gauge.crv_token())).balanceOf(user);
>                                                      ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        88
Source: 
> 
>         positionData.crvBal = TokenInterface(address(gauge.crv_token())).balanceOf(user);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        77
Source: 
>         IMintor mintor = IMintor(getCurveMintorAddr());
>         positionData.stakedBal = gauge.balanceOf(user);
>                                  ^^^^^^^^^^^^^^^^^^^^^
>         positionData.crvEarned = gauge.integrate_fraction(user);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        78
Source: 
>         positionData.stakedBal = gauge.balanceOf(user);
>         positionData.crvEarned = gauge.integrate_fraction(user);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         positionData.crvClaimed = mintor.minted(user, address(gauge));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        79
Source: 
>         positionData.crvEarned = gauge.integrate_fraction(user);
>         positionData.crvClaimed = mintor.minted(user, address(gauge));
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        82
Source: 
>         if (curveGaugeData.rewardToken) {
>             positionData.rewardsEarned = gauge.rewards_for(user);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        83
Source: 
>             positionData.rewardsEarned = gauge.rewards_for(user);
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        84
Source: 
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);
>                                                             ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        84
Source: 
>             positionData.rewardsClaimed = gauge.claimed_rewards_for(user);
>             positionData.rewardBal = TokenInterface(address(gauge.rewarded_token())).balanceOf(user);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        88
Source: 
> 
>         positionData.crvBal = TokenInterface(address(gauge.crv_token())).balanceOf(user);
>                                                      ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Resolver
Line:        88
Source: 
> 
>         positionData.crvBal = TokenInterface(address(gauge.crv_token())).balanceOf(user);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    InstaCurveGaugeResolver
Line:        101
Source: 
> contract InstaCurveGaugeResolver is Resolver {
>     string public constant name = "Curve-Gauge-Resolver-v1";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m

---------------------------------------------
For contract 0x3Dfb98C045d4f4Be168bBE60ba2eb0A3ccf8fBC3.sol
Tool Runtime = 2.8028076950004106 seconds
#############################################