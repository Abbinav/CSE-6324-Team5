[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    unichat
Line:        120
Source: 
> 		uint32 _size;
> 		assembly {
>   ^^^^^^^^^^
> 			_size := extcodesize(_to)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    unichat
Line:        39
Source: 
> 	}
> 	Info private info;
>  ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    unichat
Line:        163
Source: 
> 
> 	function allowance(address _user, address _spender) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].allowance[_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    unichat
Line:        171
Source: 
> 
> 	function allInfoFor(address _user) public view returns (uint256 totalTokenSupply, uint256 totalTokensFrozen, uint256 userBalance, uint256 userFrozen, uint256 userDividends) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return (totalSupply(), totalFrozen(), balanceOf(_user), frozenOf(_user), dividendsOf(_user));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    unichat
Line:        124
Source: 
> 		if (_size > 0) {
> 			require(Callable(_to).tokenCallback(msg.sender, _transferred, _data));
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    unichat
Line:        59
Source: 
> 
> 	function freeze(uint256 _tokens) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_freeze(_tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    unichat
Line:        63
Source: 
> 
> 	function unfreeze(uint256 _tokens) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_unfreeze(_tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    unichat
Line:        99
Source: 
> 
> 	function transfer(address _to, uint256 _tokens) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(msg.sender, _to, _tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    unichat
Line:        104
Source: 
> 
> 	function approve(address _spender, uint256 _tokens) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].allowance[_spender] = _tokens;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    unichat
Line:        110
Source: 
> 
> 	function transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(info.users[_from].allowance[msg.sender] >= _tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    unichat
Line:        117
Source: 
> 
> 	function transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 _transferred = _transfer(msg.sender, _to, _tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    unichat
Line:        136
Source: 
> 
> 	function whitelist(address _user, bool _status) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == info.admin);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    unichat
Line:        151
Source: 
> 
> 	function balanceOf(address _user) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].balance - frozenOf(_user);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    unichat
Line:        155
Source: 
> 
> 	function frozenOf(address _user) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].frozen;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    unichat
Line:        159
Source: 
> 
> 	function dividendsOf(address _user) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return uint256(int256(info.scaledPayoutPerToken * info.users[_user].frozen) - info.users[_user].scaledPayout) / FLOAT_SCALAR;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    unichat
Line:        163
Source: 
> 
> 	function allowance(address _user, address _spender) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].allowance[_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    unichat
Line:        167
Source: 
> 
> 	function isWhitelisted(address _user) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].whitelisted;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    unichat
Line:        171
Source: 
> 
> 	function allInfoFor(address _user) public view returns (uint256 totalTokenSupply, uint256 totalTokensFrozen, uint256 userBalance, uint256 userFrozen, uint256 userDividends) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return (totalSupply(), totalFrozen(), balanceOf(_user), frozenOf(_user), dividendsOf(_user));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    unichat
Line:        212
Source: 
> 		uint256 _burnedAmount = _amount * BURN_RATE / 100;
> 		info.scaledPayoutPerToken += _burnedAmount * FLOAT_SCALAR / info.totalFrozen;
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.totalFrozen -= _amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    unichat
Line:        70
Source: 
> 		require(_dividends >= 0);
> 		info.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].balance += _dividends;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    unichat
Line:        83
Source: 
> 			_burnedAmount /= 2;
> 			info.scaledPayoutPerToken += _burnedAmount * FLOAT_SCALAR / info.totalFrozen;
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			emit Transfer(msg.sender, address(this), _burnedAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    unichat
Line:        179
Source: 
> 		info.users[_from].balance -= _tokens;
> 		uint256 _burnedAmount = _tokens * BURN_RATE / 100;
>                           ^^^^^^^^^^^^^^^^^^^
> 		if (totalSupply() - _burnedAmount < INITIAL_SUPPLY * SUPPLY_FLOOR / 100 || isWhitelisted(_from)) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    unichat
Line:        189
Source: 
> 				_burnedAmount /= 2;
> 				info.scaledPayoutPerToken += _burnedAmount * FLOAT_SCALAR / info.totalFrozen;
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				emit Transfer(_from, address(this), _burnedAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    unichat
Line:        12
Source: 
> 
> contract unichat {
> ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    unichat
Line:        20
Source: 
> 
> 	string constant public name = "UNI CHAT";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	string constant public symbol = "UNI C";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    unichat
Line:        21
Source: 
> 	string constant public name = "UNI CHAT";
> 	string constant public symbol = "UNI C";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint8 constant public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    unichat
Line:        22
Source: 
> 	string constant public symbol = "UNI C";
> 	uint8 constant public decimals = 18;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    unichat
Line:        68
Source: 
> 	function collect() external returns (uint256) {
> 		uint256 _dividends = dividendsOf(msg.sender);
>   ^^^^^^^^^^^^^^^^^^
> 		require(_dividends >= 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    unichat
Line:        80
Source: 
> 		info.users[msg.sender].balance -= _tokens;
> 		uint256 _burnedAmount = _tokens;
>   ^^^^^^^^^^^^^^^^^^^^^
> 		if (info.totalFrozen > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    unichat
Line:        118
Source: 
> 	function transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {
> 		uint256 _transferred = _transfer(msg.sender, _to, _tokens);
>   ^^^^^^^^^^^^^^^^^^^^
> 		uint32 _size;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    unichat
Line:        119
Source: 
> 		uint256 _transferred = _transfer(msg.sender, _to, _tokens);
> 		uint32 _size;
>   ^^^^^^^^^^^^
> 		assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    unichat
Line:        179
Source: 
> 		info.users[_from].balance -= _tokens;
> 		uint256 _burnedAmount = _tokens * BURN_RATE / 100;
>   ^^^^^^^^^^^^^^^^^^^^^
> 		if (totalSupply() - _burnedAmount < INITIAL_SUPPLY * SUPPLY_FLOOR / 100 || isWhitelisted(_from)) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    unichat
Line:        183
Source: 
> 		}
> 		uint256 _transferred = _tokens - _burnedAmount;
>   ^^^^^^^^^^^^^^^^^^^^
> 		info.users[_to].balance += _transferred;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    unichat
Line:        211
Source: 
> 		require(frozenOf(msg.sender) >= _amount);
> 		uint256 _burnedAmount = _amount * BURN_RATE / 100;
>   ^^^^^^^^^^^^^^^^^^^^^
> 		info.scaledPayoutPerToken += _burnedAmount * FLOAT_SCALAR / info.totalFrozen;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity ^0.5.13;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    unichat
Line:        124
Source: 
> 		if (_size > 0) {
> 			require(Callable(_to).tokenCallback(msg.sender, _transferred, _data));
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    unichat
Line:        123
Source: 
> 		}
> 		if (_size > 0) {
>       ^^^^^
> 			require(Callable(_to).tokenCallback(msg.sender, _transferred, _data));

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    unichat
Line:        39
Source: 
> 	}
> 	Info private info;
>  ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        202
Source: 
> 		require(frozenOf(msg.sender) + _amount >= MIN_FREEZE_AMOUNT);
> 		info.totalFrozen += _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].frozen += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        203
Source: 
> 		info.totalFrozen += _amount;
> 		info.users[msg.sender].frozen += _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].scaledPayout += int256(_amount * info.scaledPayoutPerToken);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        204
Source: 
> 		info.users[msg.sender].frozen += _amount;
> 		info.users[msg.sender].scaledPayout += int256(_amount * info.scaledPayoutPerToken);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(msg.sender, address(this), _amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        212
Source: 
> 		uint256 _burnedAmount = _amount * BURN_RATE / 100;
> 		info.scaledPayoutPerToken += _burnedAmount * FLOAT_SCALAR / info.totalFrozen;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.totalFrozen -= _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        213
Source: 
> 		info.scaledPayoutPerToken += _burnedAmount * FLOAT_SCALAR / info.totalFrozen;
> 		info.totalFrozen -= _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].balance -= _burnedAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        214
Source: 
> 		info.totalFrozen -= _amount;
> 		info.users[msg.sender].balance -= _burnedAmount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].frozen -= _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        215
Source: 
> 		info.users[msg.sender].balance -= _burnedAmount;
> 		info.users[msg.sender].frozen -= _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].scaledPayout -= int256(_amount * info.scaledPayoutPerToken);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        216
Source: 
> 		info.users[msg.sender].frozen -= _amount;
> 		info.users[msg.sender].scaledPayout -= int256(_amount * info.scaledPayoutPerToken);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(address(this), msg.sender, _amount - _burnedAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        70
Source: 
> 		require(_dividends >= 0);
> 		info.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].balance += _dividends;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        71
Source: 
> 		info.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);
> 		info.users[msg.sender].balance += _dividends;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(address(this), msg.sender, _dividends);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        79
Source: 
> 		require(balanceOf(msg.sender) >= _tokens);
> 		info.users[msg.sender].balance -= _tokens;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 _burnedAmount = _tokens;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        83
Source: 
> 			_burnedAmount /= 2;
> 			info.scaledPayoutPerToken += _burnedAmount * FLOAT_SCALAR / info.totalFrozen;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			emit Transfer(msg.sender, address(this), _burnedAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        86
Source: 
> 		}
> 		info.totalSupply -= _burnedAmount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(msg.sender, address(0x0), _burnedAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        94
Source: 
> 		require(balanceOf(msg.sender) >= _tokens);
> 		info.users[msg.sender].balance -= _tokens;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.scaledPayoutPerToken += _tokens * FLOAT_SCALAR / info.totalFrozen;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        95
Source: 
> 		info.users[msg.sender].balance -= _tokens;
> 		info.scaledPayoutPerToken += _tokens * FLOAT_SCALAR / info.totalFrozen;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(msg.sender, address(this), _tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        178
Source: 
> 		require(balanceOf(_from) >= _tokens);
> 		info.users[_from].balance -= _tokens;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 _burnedAmount = _tokens * BURN_RATE / 100;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        184
Source: 
> 		uint256 _transferred = _tokens - _burnedAmount;
> 		info.users[_to].balance += _transferred;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(_from, _to, _transferred);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        189
Source: 
> 				_burnedAmount /= 2;
> 				info.scaledPayoutPerToken += _burnedAmount * FLOAT_SCALAR / info.totalFrozen;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				emit Transfer(_from, address(this), _burnedAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    unichat
Line:        192
Source: 
> 			}
> 			info.totalSupply -= _burnedAmount;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			emit Transfer(_from, address(0x0), _burnedAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    unichat
Line:        105
Source: 
> 	function approve(address _spender, uint256 _tokens) external returns (bool) {
> 		info.users[msg.sender].allowance[_spender] = _tokens;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(msg.sender, _spender, _tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    unichat
Line:        20
Source: 
> 
> 	string constant public name = "UNI CHAT";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	string constant public symbol = "UNI C";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    unichat
Line:        21
Source: 
> 	string constant public name = "UNI CHAT";
> 	string constant public symbol = "UNI C";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint8 constant public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    unichat
Line:        22
Source: 
> 	string constant public symbol = "UNI C";
> 	uint8 constant public decimals = 18;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0xFFC8A0D94D51a0477723bAeCCfC2026102bF3Ad1.sol
Tool Runtime = 6.156427613000233 seconds
#############################################