[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ECDSA
Line:        86
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly {
>         ^^^^^^^^^^
>             r := mload(add(signature, 0x20))

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        458
Source: 
>         if (purchaseType == PURCHASE_ETH_BACK || purchaseType == PURCHASE_ETH_BACK_UP20) {
>             if (getRandom(chanceDenom, nonce, msg.sender) == 0) {
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint256 ethBackValue = _ethBack(msg.sender, ethBackBasisPoint);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Withdrawable
Line:        207
Source: 
> 
>     function addWithdrawer(address account) public onlyWithdrawer() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         withdrawers.add(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Withdrawable
Line:        212
Source: 
> 
>     function removeWithdrawer(address account) public onlyWithdrawer() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         withdrawers.remove(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Withdrawable
Line:        217
Source: 
> 
>     function withdrawEther() public onlyWithdrawer() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.transfer(address(this).balance);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC173
Line:        253
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOwner() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operatable
Line:        296
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOperator() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operatable
Line:        304
Source: 
> 
>     function addOperator(address account) public onlyOperator() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         operators.add(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operatable
Line:        309
Source: 
> 
>     function removeOperator(address account) public onlyOperator() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         operators.remove(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operatable
Line:        314
Source: 
> 
>     function paused() public view returns (bool) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operatable
Line:        318
Source: 
> 
>     function pause() public onlyOperator() whenNotPaused() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operatable
Line:        323
Source: 
> 
>     function unpause() public onlyOperator() whenPaused() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Withdrawable
Line:        207
Source: 
> 
>     function addWithdrawer(address account) public onlyWithdrawer() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         withdrawers.add(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Withdrawable
Line:        212
Source: 
> 
>     function removeWithdrawer(address account) public onlyWithdrawer() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         withdrawers.remove(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Withdrawable
Line:        217
Source: 
> 
>     function withdrawEther() public onlyWithdrawer() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.transfer(address(this).balance);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC173
Line:        253
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOwner() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operatable
Line:        296
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOperator() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operatable
Line:        304
Source: 
> 
>     function addOperator(address account) public onlyOperator() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         operators.add(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operatable
Line:        309
Source: 
> 
>     function removeOperator(address account) public onlyOperator() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         operators.remove(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operatable
Line:        314
Source: 
> 
>     function paused() public view returns (bool) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operatable
Line:        318
Source: 
> 
>     function pause() public onlyOperator() whenNotPaused() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operatable
Line:        323
Source: 
> 
>     function unpause() public onlyOperator() whenPaused() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        408
Source: 
> 
>     function buy(
>        ^^^^^^^^^^
>         address payable _user,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        441
Source: 
>     
>     function buyZEL(
>        ^^^^^^^^^^^^^
>         address payable _referrer,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        536
Source: 
>     
>     function recover(bytes32 _message, bytes memory _signature) public pure returns (address) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address signer = ECDSA.recover(ECDSA.toEthSignedMessageHash(_message), _signature);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Withdrawable
Line:        207
Source: 
> 
>     function addWithdrawer(address account) public onlyWithdrawer() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         withdrawers.add(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Withdrawable
Line:        212
Source: 
> 
>     function removeWithdrawer(address account) public onlyWithdrawer() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         withdrawers.remove(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC173
Line:        253
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOwner() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Operatable
Line:        296
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOperator() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Operatable
Line:        304
Source: 
> 
>     function addOperator(address account) public onlyOperator() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         operators.add(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Operatable
Line:        309
Source: 
> 
>     function removeOperator(address account) public onlyOperator() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         operators.remove(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Withdrawable
Line:        207
Source: 
> 
>     function addWithdrawer(address account) public onlyWithdrawer() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         withdrawers.add(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Withdrawable
Line:        212
Source: 
> 
>     function removeWithdrawer(address account) public onlyWithdrawer() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         withdrawers.remove(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC173
Line:        253
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOwner() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Operatable
Line:        296
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOperator() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Operatable
Line:        304
Source: 
> 
>     function addOperator(address account) public onlyOperator() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         operators.add(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Operatable
Line:        309
Source: 
> 
>     function removeOperator(address account) public onlyOperator() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         operators.remove(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        384
Source: 
> 
>     function setValidater(address _varidater) public onlyOperator() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         validater = _varidater;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        400
Source: 
> 
>     function updateChance(uint16 _newchanceDenom) public onlyOperator() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         chanceDenom = _newchanceDenom;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        404
Source: 
> 
>     function updateEthBackPercentege(uint256 _ethBackBasisPoint) public onlyOperator() {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ethBackBasisPoint = _ethBackBasisPoint;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        441
Source: 
>     
>     function buyZEL(
>        ^^^^^^^^^^^^^
>         address payable _referrer,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC165
Line:        43
Source: 
> 
>     function supportsInterface(bytes4 interfaceId) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _supportedInterfaces[interfaceId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Withdrawable
Line:        203
Source: 
> 
>     function isWithdrawer(address account) public view returns (bool) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return withdrawers.has(account);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC165
Line:        43
Source: 
> 
>     function supportsInterface(bytes4 interfaceId) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _supportedInterfaces[interfaceId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Operatable
Line:        300
Source: 
> 
>     function isOperator(address account) public view returns (bool) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return operators.has(account);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC165
Line:        43
Source: 
> 
>     function supportsInterface(bytes4 interfaceId) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _supportedInterfaces[interfaceId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Withdrawable
Line:        203
Source: 
> 
>     function isWithdrawer(address account) public view returns (bool) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return withdrawers.has(account);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Operatable
Line:        300
Source: 
> 
>     function isOperator(address account) public view returns (bool) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return operators.has(account);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        388
Source: 
> 
>     function setCampaign(
>        ^^^^^^^^^^^^^^^^^^
>         uint8 _purchaseType,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        408
Source: 
> 
>     function buy(
>        ^^^^^^^^^^
>         address payable _user,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        488
Source: 
> 
>     function getRandom(uint16 max, uint256 _nonce, address _sender) public view returns (uint16) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return uint16(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        518
Source: 
> 
>     function encodeData(address _user, address _referrer, uint256 _referralBasisPoint, uint32 _usCent, uint256 _value) public pure returns (bytes32) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return keccak256(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        530
Source: 
> 
>     function validateSig(bytes32 _message, bytes memory _signature) public view returns (bool) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(validater != address(0), "validater must be set");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        536
Source: 
>     
>     function recover(bytes32 _message, bytes memory _signature) public pure returns (address) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address signer = ECDSA.recover(ECDSA.toEthSignedMessageHash(_message), _signature);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> //pragma solidity 0.5.16;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC165
Line:        36
Source: 
> contract ERC165 is IERC165 {
>     bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(bytes4 => bool) private _supportedInterfaces;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC165
Line:        37
Source: 
>     bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
>     mapping(bytes4 => bool) private _supportedInterfaces;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Withdrawable
Line:        192
Source: 
> 
>     Roles.Role private withdrawers;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC165
Line:        36
Source: 
> contract ERC165 is IERC165 {
>     bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(bytes4 => bool) private _supportedInterfaces;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC165
Line:        37
Source: 
>     bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
>     mapping(bytes4 => bool) private _supportedInterfaces;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC173
Line:        237
Source: 
> contract ERC173 is IERC173, ERC165  {
>     address private _owner;
>        ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC165
Line:        36
Source: 
> contract ERC165 is IERC165 {
>     bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(bytes4 => bool) private _supportedInterfaces;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC165
Line:        37
Source: 
>     bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
>     mapping(bytes4 => bool) private _supportedInterfaces;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC173
Line:        237
Source: 
> contract ERC173 is IERC173, ERC165  {
>     address private _owner;
>        ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Operatable
Line:        273
Source: 
> 
>     bool private _paused;
>        ^^^^^^^^^^^^^^^^^^
>     Roles.Role private operators;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Operatable
Line:        274
Source: 
>     bool private _paused;
>     Roles.Role private operators;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC165
Line:        36
Source: 
> contract ERC165 is IERC165 {
>     bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(bytes4 => bool) private _supportedInterfaces;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC165
Line:        37
Source: 
>     bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;
>     mapping(bytes4 => bool) private _supportedInterfaces;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Withdrawable
Line:        192
Source: 
> 
>     Roles.Role private withdrawers;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC173
Line:        237
Source: 
> contract ERC173 is IERC173, ERC165  {
>     address private _owner;
>        ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Operatable
Line:        273
Source: 
> 
>     bool private _paused;
>        ^^^^^^^^^^^^^^^^^^
>     Roles.Role private operators;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Operatable
Line:        274
Source: 
>     bool private _paused;
>     Roles.Role private operators;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        338
Source: 
> 
>     uint8 constant PURCHASE_NORMAL = 0;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant PURCHASE_ETH_BACK = 1;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        339
Source: 
>     uint8 constant PURCHASE_NORMAL = 0;
>     uint8 constant PURCHASE_ETH_BACK = 1;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant PURCHASE_UP20 = 2;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        340
Source: 
>     uint8 constant PURCHASE_ETH_BACK = 1;
>     uint8 constant PURCHASE_UP20 = 2;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant PURCHASE_REGULAR = 3;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        341
Source: 
>     uint8 constant PURCHASE_UP20 = 2;
>     uint8 constant PURCHASE_REGULAR = 3;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant PURCHASE_ETH_BACK_UP20 = 4;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        342
Source: 
>     uint8 constant PURCHASE_REGULAR = 3;
>     uint8 constant PURCHASE_ETH_BACK_UP20 = 4;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant PURCHASE_UP10 = 5;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        343
Source: 
>     uint8 constant PURCHASE_ETH_BACK_UP20 = 4;
>     uint8 constant PURCHASE_UP10 = 5;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        345
Source: 
> 
>     Campaign public campaign;
>        ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        347
Source: 
> 
>     address public validater;
>        ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        349
Source: 
> 
>     uint256 constant BASE = 10000;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private nonce;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        350
Source: 
>     uint256 constant BASE = 10000;
>     uint256 private nonce;
>        ^^^^^^^^^^^^^^^^^^^
>     uint16 public chanceDenom;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        351
Source: 
>     uint256 private nonce;
>     uint16 public chanceDenom;
>        ^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public ethBackBasisPoint;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        352
Source: 
>     uint16 public chanceDenom;
>     uint256 public ethBackBasisPoint;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes private salt;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        353
Source: 
>     uint256 public ethBackBasisPoint;
>     bytes private salt;
>        ^^^^^^^^^^^^^^^^
>     mapping(bytes32 => uint256) public hashTransactedAt;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        354
Source: 
>     bytes private salt;
>     mapping(bytes32 => uint256) public hashTransactedAt;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        338
Source: 
> 
>     uint8 constant PURCHASE_NORMAL = 0;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant PURCHASE_ETH_BACK = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        339
Source: 
>     uint8 constant PURCHASE_NORMAL = 0;
>     uint8 constant PURCHASE_ETH_BACK = 1;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant PURCHASE_UP20 = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        340
Source: 
>     uint8 constant PURCHASE_ETH_BACK = 1;
>     uint8 constant PURCHASE_UP20 = 2;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant PURCHASE_REGULAR = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        341
Source: 
>     uint8 constant PURCHASE_UP20 = 2;
>     uint8 constant PURCHASE_REGULAR = 3;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant PURCHASE_ETH_BACK_UP20 = 4;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        342
Source: 
>     uint8 constant PURCHASE_REGULAR = 3;
>     uint8 constant PURCHASE_ETH_BACK_UP20 = 4;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant PURCHASE_UP10 = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        343
Source: 
>     uint8 constant PURCHASE_ETH_BACK_UP20 = 4;
>     uint8 constant PURCHASE_UP10 = 5;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        349
Source: 
> 
>     uint256 constant BASE = 10000;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private nonce;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        514
Source: 
>         uint256 referralValue = msg.value.mul(_referralBasisPoint).div(BASE);
>         _referrer.transfer(referralValue);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return referralValue;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        505
Source: 
>         uint256 ethBackValue = msg.value.mul(_ethBackBasisPoint).div(BASE);
>         _buyer.transfer(ethBackValue);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ethBackValue;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Withdrawable
Line:        218
Source: 
>     function withdrawEther() public onlyWithdrawer() {
>         msg.sender.transfer(address(this).balance);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        514
Source: 
>         uint256 referralValue = msg.value.mul(_referralBasisPoint).div(BASE);
>         _referrer.transfer(referralValue);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return referralValue;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        505
Source: 
>         uint256 ethBackValue = msg.value.mul(_ethBackBasisPoint).div(BASE);
>         _buyer.transfer(ethBackValue);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ethBackValue;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Withdrawable
Line:        218
Source: 
>     function withdrawEther() public onlyWithdrawer() {
>         msg.sender.transfer(address(this).balance);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        514
Source: 
>         uint256 referralValue = msg.value.mul(_referralBasisPoint).div(BASE);
>         _referrer.transfer(referralValue);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return referralValue;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BFHZELGatewayV3
Line:        505
Source: 
>         uint256 ethBackValue = msg.value.mul(_ethBackBasisPoint).div(BASE);
>         _buyer.transfer(ethBackValue);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ethBackValue;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    ECDSA
Line:        101
Source: 
>         // these malleable signatures as well.
>         if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
>                        ^
>             return address(0);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Withdrawable
Line:        218
Source: 
>     function withdrawEther() public onlyWithdrawer() {
>         msg.sender.transfer(address(this).balance);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        505
Source: 
>         uint256 ethBackValue = msg.value.mul(_ethBackBasisPoint).div(BASE);
>         _buyer.transfer(ethBackValue);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ethBackValue;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        16
Source: 
>         require(!has(role, account), "role already has the account");
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        21
Source: 
>         require(has(role, account), "role dosen't have the account");
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC173
Line:        259
Source: 
>         address previousOwner = owner();
> 	_owner = _newOwner;
>     ^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(previousOwner, _newOwner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        16
Source: 
>         require(!has(role, account), "role already has the account");
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        21
Source: 
>         require(has(role, account), "role dosen't have the account");
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Operatable
Line:        319
Source: 
>     function pause() public onlyOperator() whenNotPaused() {
>         _paused = true;
>            ^^^^^^^^^^^^
>         emit Paused(msg.sender);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Operatable
Line:        324
Source: 
>     function unpause() public onlyOperator() whenPaused() {
>         _paused = false;
>            ^^^^^^^^^^^^^
>         emit Unpaused(msg.sender);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        16
Source: 
>         require(!has(role, account), "role already has the account");
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        21
Source: 
>         require(has(role, account), "role dosen't have the account");
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC173
Line:        259
Source: 
>         address previousOwner = owner();
> 	_owner = _newOwner;
>     ^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(previousOwner, _newOwner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Operatable
Line:        319
Source: 
>     function pause() public onlyOperator() whenNotPaused() {
>         _paused = true;
>            ^^^^^^^^^^^^
>         emit Paused(msg.sender);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Operatable
Line:        324
Source: 
>     function unpause() public onlyOperator() whenPaused() {
>         _paused = false;
>            ^^^^^^^^^^^^^
>         emit Unpaused(msg.sender);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        401
Source: 
>     function updateChance(uint16 _newchanceDenom) public onlyOperator() {
>         chanceDenom = _newchanceDenom;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        405
Source: 
>     function updateEthBackPercentege(uint256 _ethBackBasisPoint) public onlyOperator() {
>         ethBackBasisPoint = _ethBackBasisPoint;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        396
Source: 
>     {
>         campaign = Campaign(_purchaseType, _subPurchaseType, _proxyPurchaseType);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit CampaignUpdated(_purchaseType, _subPurchaseType, _proxyPurchaseType);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        385
Source: 
>     function setValidater(address _varidater) public onlyOperator() {
>         validater = _varidater;
>            ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        485
Source: 
>         require(hashTransactedAt[_hash] == 0, "The hash is already transacted");
>         hashTransactedAt[_hash] = block.number;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BFHZELGatewayV3
Line:        465
Source: 
>             }
>             nonce++;
>                ^^^^^
>         } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Roles
Line:        15
Source: 
>     function add(Role storage role, address account) internal {
>         require(!has(role, account), "role already has the account");
>                  ^^^^^^^^^^^^^^^^^^
>         role.bearer[account] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Roles
Line:        20
Source: 
>     function remove(Role storage role, address account) internal {
>         require(has(role, account), "role dosen't have the account");
>                 ^^^^^^^^^^^^^^^^^^
>         role.bearer[account] = false;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Roles
Line:        15
Source: 
>     function add(Role storage role, address account) internal {
>         require(!has(role, account), "role already has the account");
>                  ^^^^^^^^^^^^^^^^^^
>         role.bearer[account] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Roles
Line:        20
Source: 
>     function remove(Role storage role, address account) internal {
>         require(has(role, account), "role dosen't have the account");
>                 ^^^^^^^^^^^^^^^^^^
>         role.bearer[account] = false;

[0m

---------------------------------------------
For contract 0xe345adc968e16406462eee8427f72f5d74a88888.sol
Tool Runtime = 9.048532757999965 seconds
#############################################