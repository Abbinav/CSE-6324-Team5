[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Lottery
Line:        102
Source: 
>   IContribute public contributeContract;
>   uint public tokensToSend;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   Admin public administration; //other contracts allowed to access functions

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Lottery
Line:        110
Source: 
>   uint public startingLiquidityTokens=0;
>   uint public maxRewardable=15;//15%
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint public minTimeBetweenDrawings=24 hours;//10 minutes;//6 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Lottery
Line:        111
Source: 
>   uint public maxRewardable=15;//15%
>   uint public minTimeBetweenDrawings=24 hours;//10 minutes;//6 days;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Lottery
Line:        131
Source: 
>   function init(address liqToken) public isAdmin{
>     require(lastDrawing==0,"must be before any dispersal");
>             ^^^^^^^^^^^^^^
>     liquidityToken=ERC20(liqToken);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Lottery
Line:        138
Source: 
>     require(now>=lastDrawing.add(minTimeBetweenDrawings),"is not finalization time");
>     require(finalizationBlock==0||block.number>finalizationBlock+256,"finalization block is already set");
>             ^^^^^^^^^^^^^^^^^^^^
>     entropyHash=eh;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Lottery
Line:        158
Source: 
>     require(leftval!=0,"w3");//both checked indexes should be nonzero
>     require(leftval==rightval,"w4");//both checked values should be the same
>             ^^^^^^^^^^^^^^^^^
>     require(winner == entry_map[current_round][leftval],"w5");//check that the proposed winner actually submitted the given entry

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Lottery
Line:        159
Source: 
>     require(leftval==rightval,"w4");//both checked values should be the same
>     require(winner == entry_map[current_round][leftval],"w5");//check that the proposed winner actually submitted the given entry
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Lottery
Line:        176
Source: 
>   function getWinningOffsets() public view returns(uint,uint){
>     if(getWinningIndex()==0 || entry_cursor<1){
>        ^^^^^^^^^^^^^^^^^^^^
>       return(0,0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Lottery
Line:        179
Source: 
>     }
>     if(entry_cursor==1){
>        ^^^^^^^^^^^^^^^
>       return (getWinningIndex()-1,cursor-getWinningIndex());//then return the first entry (the only one)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Lottery
Line:        130
Source: 
>   */
>   function init(address liqToken) public isAdmin{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(lastDrawing==0,"must be before any dispersal");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Lottery
Line:        135
Source: 
>   }
>   function setWinningIndex1(bytes32 eh) public isAdmin{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(startingLiquidityTokens>0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Lottery
Line:        145
Source: 
>   //must call this before 256 blocks pass from setWinnngIndex1
>   function setWinningIndex2(uint a,uint b) public isAdmin{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(finalizationBlock!=0,"fblock is zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Lottery
Line:        152
Source: 
>   }
>   function withdrawFunds(uint left,uint right,address winner,uint reward) public isAdmin{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(getWinningIndex().sub(left)!=getWinningIndex().add(right),"w1");//checked indexes should be different positions

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Lottery
Line:        189
Source: 
>   }
>   function getWinningAddress() public view returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     (uint l,uint r) = getWinningOffsets();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Lottery
Line:        193
Source: 
>   }
>   function getHashCombo(uint a,uint b) public pure returns(bytes32){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return keccak256(abi.encodePacked(a,b));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        114
Source: 
>   modifier isAdmin(){
>     require(administration.admin(msg.sender),"is not admin");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        133
Source: 
>     liquidityToken=ERC20(liqToken);
>     startingLiquidityTokens=liquidityToken.balanceOf(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        114
Source: 
>   modifier isAdmin(){
>     require(administration.admin(msg.sender),"is not admin");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        163
Source: 
>     require(startingLiquidityTokens.mul(maxRewardable).div(100)>=reward,"cannot reward too large a portion");
>     liquidityToken.transfer(winner,reward);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        219
Source: 
>       require(
>           tributeToken.transferFrom(
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^
>               _from,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        233
Source: 
>     checkAndTransfer(tokens,from);
>     tributeToken.approve(address(contributeContract),tokens/2);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     contributeContract.donateTokens(tokens/2);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        234
Source: 
>     tributeToken.approve(address(contributeContract),tokens/2);
>     contributeContract.donateTokens(tokens/2);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tributeToken.burn(tokens/2);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Lottery
Line:        235
Source: 
>     contributeContract.donateTokens(tokens/2);
>     tributeToken.burn(tokens/2);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     enter(from,tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lottery
Line:        135
Source: 
>   }
>   function setWinningIndex1(bytes32 eh) public isAdmin{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(startingLiquidityTokens>0);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Lottery
Line:        152
Source: 
>   }
>   function withdrawFunds(uint left,uint right,address winner,uint reward) public isAdmin{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(getWinningIndex().sub(left)!=getWinningIndex().add(right),"w1");//checked indexes should be different positions

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Lottery
Line:        130
Source: 
>   */
>   function init(address liqToken) public isAdmin{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(lastDrawing==0,"must be before any dispersal");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Lottery
Line:        193
Source: 
>   }
>   function getHashCombo(uint a,uint b) public pure returns(bytes32){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return keccak256(abi.encodePacked(a,b));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Lottery
Line:        228
Source: 
> 
>   function receiveApproval(address from, uint256 tokens, address tokenAddr, bytes20 data) external{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender==address(tributeToken));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery
Line:        114
Source: 
>   modifier isAdmin(){
>     require(administration.admin(msg.sender),"is not admin");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery
Line:        133
Source: 
>     liquidityToken=ERC20(liqToken);
>     startingLiquidityTokens=liquidityToken.balanceOf(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery
Line:        114
Source: 
>   modifier isAdmin(){
>     require(administration.admin(msg.sender),"is not admin");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lottery
Line:        163
Source: 
>     require(startingLiquidityTokens.mul(maxRewardable).div(100)>=reward,"cannot reward too large a portion");
>     liquidityToken.transfer(winner,reward);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Lottery
Line:        88
Source: 
>   using SafeMath for uint;
>   mapping(uint => mapping (uint => uint)) public token_map;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping(uint => mapping (uint => address)) public entry_map;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Lottery
Line:        89
Source: 
>   mapping(uint => mapping (uint => uint)) public token_map;
>   mapping(uint => mapping (uint => address)) public entry_map;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping(uint => mapping (uint => uint)) public entry_position_map;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Lottery
Line:        90
Source: 
>   mapping(uint => mapping (uint => address)) public entry_map;
>   mapping(uint => mapping (uint => uint)) public entry_position_map;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Lottery
Line:        93
Source: 
>   //read only
>   mapping(uint => mapping (address => uint)) public token_count_by_address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping(uint => uint) public totalRoundTokens;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Lottery
Line:        96
Source: 
> 
>   uint public current_round;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint public entry_cursor;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Lottery
Line:        97
Source: 
>   uint public current_round;
>   uint public entry_cursor;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   uint public cursor;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Lottery
Line:        190
Source: 
>   function getWinningAddress() public view returns(address){
>     (uint l,uint r) = getWinningOffsets();
>      ^^^^^^
>     return entry_map[current_round][token_map[current_round][getWinningIndex()-l]];

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity 0.5.17;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        114
Source: 
>   modifier isAdmin(){
>     require(administration.admin(msg.sender),"is not admin");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        133
Source: 
>     liquidityToken=ERC20(liqToken);
>     startingLiquidityTokens=liquidityToken.balanceOf(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        114
Source: 
>   modifier isAdmin(){
>     require(administration.admin(msg.sender),"is not admin");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Lottery
Line:        219
Source: 
>       require(
>           tributeToken.transferFrom(
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^
>               _from,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery
Line:        163
Source: 
>     require(startingLiquidityTokens.mul(maxRewardable).div(100)>=reward,"cannot reward too large a portion");
>     liquidityToken.transfer(winner,reward);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery
Line:        233
Source: 
>     checkAndTransfer(tokens,from);
>     tributeToken.approve(address(contributeContract),tokens/2);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     contributeContract.donateTokens(tokens/2);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery
Line:        234
Source: 
>     tributeToken.approve(address(contributeContract),tokens/2);
>     contributeContract.donateTokens(tokens/2);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tributeToken.burn(tokens/2);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lottery
Line:        235
Source: 
>     contributeContract.donateTokens(tokens/2);
>     tributeToken.burn(tokens/2);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     enter(from,tokens);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lottery
Line:        96
Source: 
> 
>   uint public current_round;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint public entry_cursor;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lottery
Line:        97
Source: 
>   uint public current_round;
>   uint public entry_cursor;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   uint public cursor;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lottery
Line:        98
Source: 
>   uint public entry_cursor;
>   uint public cursor;
>   ^^^^^^^^^^^^^^^^^^
>   ERC20 public tributeToken;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lottery
Line:        100
Source: 
>   ERC20 public tributeToken;
>   ERC20 public liquidityToken;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   IContribute public contributeContract;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lottery
Line:        104
Source: 
>   Admin public administration; //other contracts allowed to access functions
>   bytes32 public entropyHash;//secret for preventing miner manipulation of random
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public finalizationBlock;//the block from which random winner will be derived

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lottery
Line:        105
Source: 
>   bytes32 public entropyHash;//secret for preventing miner manipulation of random
>   uint256 public finalizationBlock;//the block from which random winner will be derived
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public winningIndex;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lottery
Line:        106
Source: 
>   uint256 public finalizationBlock;//the block from which random winner will be derived
>   uint256 public winningIndex;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   bool public finalizingLock=false;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Lottery
Line:        102
Source: 
>   IContribute public contributeContract;
>   uint public tokensToSend;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   Admin public administration; //other contracts allowed to access functions

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lottery
Line:        132
Source: 
>     require(lastDrawing==0,"must be before any dispersal");
>     liquidityToken=ERC20(liqToken);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     startingLiquidityTokens=liquidityToken.balanceOf(address(this));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lottery
Line:        133
Source: 
>     liquidityToken=ERC20(liqToken);
>     startingLiquidityTokens=liquidityToken.balanceOf(address(this));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lottery
Line:        139
Source: 
>     require(finalizationBlock==0||block.number>finalizationBlock+256,"finalization block is already set");
>     entropyHash=eh;
>     ^^^^^^^^^^^^^^
>     finalizationBlock=block.number+1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lottery
Line:        140
Source: 
>     entropyHash=eh;
>     finalizationBlock=block.number+1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     finalizingLock=true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lottery
Line:        141
Source: 
>     finalizationBlock=block.number+1;
>     finalizingLock=true;
>     ^^^^^^^^^^^^^^^^^^^
>     lastDrawing=now;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lottery
Line:        142
Source: 
>     finalizingLock=true;
>     lastDrawing=now;
>     ^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lottery
Line:        150
Source: 
>     require(keccak256(abi.encodePacked(a,b))==entropyHash,"hash does not match");
>     winningIndex=random(cursor,finalizationBlock,a);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lottery
Line:        165
Source: 
> 
>     current_round+=1;
>     ^^^^^^^^^^^^^^^^
>     entry_cursor=0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lottery
Line:        166
Source: 
>     current_round+=1;
>     entry_cursor=0;
>     ^^^^^^^^^^^^^^
>     cursor=0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lottery
Line:        167
Source: 
>     entry_cursor=0;
>     cursor=0;
>     ^^^^^^^^
>     winningIndex=0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lottery
Line:        168
Source: 
>     cursor=0;
>     winningIndex=0;
>     ^^^^^^^^^^^^^^
>     finalizingLock=false;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lottery
Line:        169
Source: 
>     winningIndex=0;
>     finalizingLock=false;
>     ^^^^^^^^^^^^^^^^^^^^
>     finalizationBlock=0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lottery
Line:        170
Source: 
>     finalizingLock=false;
>     finalizationBlock=0;
>     ^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMath
Line:        57
Source: 
>     uint256 d = sub(c,1);
>     return mul(div(d,m),m);
>                ^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery
Line:        163
Source: 
>     require(startingLiquidityTokens.mul(maxRewardable).div(100)>=reward,"cannot reward too large a portion");
>     liquidityToken.transfer(winner,reward);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Lottery
Line:        233
Source: 
>     checkAndTransfer(tokens,from);
>     tributeToken.approve(address(contributeContract),tokens/2);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     contributeContract.donateTokens(tokens/2);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMath
Line:        57
Source: 
>     uint256 d = sub(c,1);
>     return mul(div(d,m),m);
>                ^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Admin
Line:        76
Source: 
> contract Admin{
>   mapping(address=>bool) public admin;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Lottery
Line:        102
Source: 
>   IContribute public contributeContract;
>   uint public tokensToSend;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   Admin public administration; //other contracts allowed to access functions

[0m

---------------------------------------------
For contract 0xc85306056a212863b6f6413bba6669d62a70f31a.sol
Tool Runtime = 22.182283266000013 seconds
#############################################