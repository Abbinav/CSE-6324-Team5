[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SmartChain
Line:        229
Source: 
> 
>      uint minimum_deposit = 0.0001 ether;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SmartChain
Line:        238
Source: 
>     // pools percentage
>     uint public general_pool = 69 ether; // 69%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public referrals_pool = 15 ether; // 15%

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SmartChain
Line:        239
Source: 
>     uint public general_pool = 69 ether; // 69%
>     uint public referrals_pool = 15 ether; // 15%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public investor_pool = 5 ether; // 5%

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SmartChain
Line:        240
Source: 
>     uint public referrals_pool = 15 ether; // 15%
>     uint public investor_pool = 5 ether; // 5%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public sponser_pool = 5 ether; // 5%

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SmartChain
Line:        241
Source: 
>     uint public investor_pool = 5 ether; // 5%
>     uint public sponser_pool = 5 ether; // 5%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        60
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        79
Source: 
>      */
>     function renounceOwnership() public  onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        88
Source: 
>      */
>     function transferOwnership(address newOwner) public  onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        128
Source: 
>      */
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        79
Source: 
>      */
>     function renounceOwnership() public  onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        88
Source: 
>      */
>     function transferOwnership(address newOwner) public  onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        128
Source: 
>      */
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartChain
Line:        324
Source: 
> 
>         address(uint160(owner())).transfer(_amount*(5 ether) / (100 ether)); // owner commission 5 %;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address(uint160(maintenance_address)).transfer(_amount / 100); // maintainence 1 %;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartChain
Line:        325
Source: 
>         address(uint160(owner())).transfer(_amount*(5 ether) / (100 ether)); // owner commission 5 %;
>         address(uint160(maintenance_address)).transfer(_amount / 100); // maintainence 1 %;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartChain
Line:        387
Source: 
>     function withdraw() external whenNotPaused {
>         (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartChain
Line:        442
Source: 
> 
>         address(uint160(msg.sender)).transfer(to_payout);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartChain
Line:        461
Source: 
>         
>         require(_toUser.send(_amount),"transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^
>         investor_pool_amount -= _amount;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartChain
Line:        469
Source: 
> 
>         (_toUser).transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartChain
Line:        486
Source: 
>     function payoutOf(address _addr) view external returns(uint256 payout, uint256 max_payout) { // 1.2 daily ROI
>         max_payout = this.maxPayoutOf(users[_addr].deposit_amount[users[_addr].currentCycle]);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    SmartChain
Line:        357
Source: 
>                 if(users[_user_address[i]].deposit_time[0] > 0){
>                    uint max_payout = this.maxPayoutOf(users[_user_address[i]].deposit_amount[users[_user_address[i]].currentCycle]);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                    if(_user_amount[i] > max_payout){

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    SmartChain
Line:        374
Source: 
>                 
>                 require(address(uint160(_user_address[i])).send(_user_amount[i]),"transfer failed");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 sponser_pool_amount -= _user_amount[i];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Destructible
Line:        191
Source: 
> 
>     function transferGrandOwnership(address payable _to) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == grand_owner, "Access denied (only grand owner)");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SmartChain
Line:        381
Source: 
> 
>     function deposit(address _upline) payable external whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _setUpline(msg.sender, _upline);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SmartChain
Line:        452
Source: 
>     
>     function drawPool(address[] calldata _user_address, uint[] calldata _user_amount) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _drawPool(_user_address, _user_amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SmartChain
Line:        481
Source: 
> 
>     function maxPayoutOf(uint256 _amount) pure external returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _amount * 35 / 10; // maximum payout is set to 350 %

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SmartChain
Line:        501
Source: 
>     */
>     function userInfo(address _addr,uint256 _cycle) view external returns(address upline, uint256 deposit_time, uint256 deposit_amount, uint256 payouts, uint256 direct_bonus) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[_addr].upline, users[_addr].deposit_time[_cycle], users[_addr].deposit_amount[_cycle], users[_addr].payouts[_cycle], users[_addr].direct_bonus);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SmartChain
Line:        505
Source: 
> 
>     function userInfoTotals(address _addr) view external returns(uint256 referrals, uint256 total_deposits, uint256 total_payouts, uint256 total_structure) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[_addr].referrals, users[_addr].total_deposits, users[_addr].total_payouts, users[_addr].total_structure);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SmartChain
Line:        337
Source: 
>             if(users[up].referrals >= i + 1) {
>                 uint256 bonus = _amount * ref_bonuses[i] / 100;
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>                 users[up].match_bonus += bonus;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SmartChain
Line:        489
Source: 
>         if(users[_addr].deposit_payouts[users[msg.sender].currentCycle] < max_payout) {
>             payout = ((users[_addr].deposit_amount[users[_addr].currentCycle]*(1.2 ether)/(100 ether)) * ((block.timestamp - users[_addr].deposit_time[users[msg.sender].currentCycle]) / 1 days)) - users[_addr].deposit_payouts[users[msg.sender].currentCycle];
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SmartChain
Line:        357
Source: 
>                 if(users[_user_address[i]].deposit_time[0] > 0){
>                    uint max_payout = this.maxPayoutOf(users[_user_address[i]].deposit_amount[users[_user_address[i]].currentCycle]);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                    if(_user_amount[i] > max_payout){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    SmartChain
Line:        324
Source: 
> 
>         address(uint160(owner())).transfer(_amount*(5 ether) / (100 ether)); // owner commission 5 %;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address(uint160(maintenance_address)).transfer(_amount / 100); // maintainence 1 %;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    SmartChain
Line:        325
Source: 
>         address(uint160(owner())).transfer(_amount*(5 ether) / (100 ether)); // owner commission 5 %;
>         address(uint160(maintenance_address)).transfer(_amount / 100); // maintainence 1 %;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    SmartChain
Line:        374
Source: 
>                 
>                 require(address(uint160(_user_address[i])).send(_user_amount[i]),"transfer failed");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 sponser_pool_amount -= _user_amount[i];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    SmartChain
Line:        442
Source: 
> 
>         address(uint160(msg.sender)).transfer(to_payout);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    SmartChain
Line:        461
Source: 
>         
>         require(_toUser.send(_amount),"transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^
>         investor_pool_amount -= _amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Destructible
Line:        183
Source: 
> contract Destructible {
>     address payable public grand_owner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        224
Source: 
>     
>     address maintenance_address; // maintainence address
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address investor_address; // investor address

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        225
Source: 
>     address maintenance_address; // maintainence address
>     address investor_address; // investor address
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        227
Source: 
> 
>     uint8[] public ref_bonuses;  // upline bonuses
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        229
Source: 
> 
>      uint minimum_deposit = 0.0001 ether;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        232
Source: 
>     // pools money
>     uint public general_pool_amount; // daily distribution pool
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public referrals_pool_amount; // matching bonus pool

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        233
Source: 
>     uint public general_pool_amount; // daily distribution pool
>     uint public referrals_pool_amount; // matching bonus pool
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public investor_pool_amount; // investor pool

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        234
Source: 
>     uint public referrals_pool_amount; // matching bonus pool
>     uint public investor_pool_amount; // investor pool
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public sponser_pool_amount; // top sponsers pool

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        235
Source: 
>     uint public investor_pool_amount; // investor pool
>     uint public sponser_pool_amount; // top sponsers pool
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        238
Source: 
>     // pools percentage
>     uint public general_pool = 69 ether; // 69%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public referrals_pool = 15 ether; // 15%

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        239
Source: 
>     uint public general_pool = 69 ether; // 69%
>     uint public referrals_pool = 15 ether; // 15%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public investor_pool = 5 ether; // 5%

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        240
Source: 
>     uint public referrals_pool = 15 ether; // 15%
>     uint public investor_pool = 5 ether; // 5%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public sponser_pool = 5 ether; // 5%

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        241
Source: 
>     uint public investor_pool = 5 ether; // 5%
>     uint public sponser_pool = 5 ether; // 5%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        244
Source: 
> 
>     uint40 public pool_last_draw = uint40(block.timestamp);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public pool_cycle; // pool cycles

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        245
Source: 
>     uint40 public pool_last_draw = uint40(block.timestamp);
>     uint256 public pool_cycle; // pool cycles
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        247
Source: 
> 
>     uint256 public total_withdraw; // total withdrawal amount
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        357
Source: 
>                 if(users[_user_address[i]].deposit_time[0] > 0){
>                    uint max_payout = this.maxPayoutOf(users[_user_address[i]].deposit_amount[users[_user_address[i]].currentCycle]);
>                    ^^^^^^^^^^^^^^^
>                    if(_user_amount[i] > max_payout){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        387
Source: 
>     function withdraw() external whenNotPaused {
>         (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);
>          ^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        387
Source: 
>     function withdraw() external whenNotPaused {
>         (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);
>                             ^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        409
Source: 
>         if(users[msg.sender].payouts[users[msg.sender].currentCycle] < max_payout && users[msg.sender].direct_bonus > 0) {
>             uint256 direct_bonus = users[msg.sender].direct_bonus;
>             ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartChain
Line:        422
Source: 
>         if(users[msg.sender].payouts[users[msg.sender].currentCycle] < max_payout && users[msg.sender].match_bonus > 0) {
>             uint256 match_bonus = users[msg.sender].match_bonus;
>             ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity 0.5.16;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SmartChain
Line:        224
Source: 
>     
>     address maintenance_address; // maintainence address
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address investor_address; // investor address

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SmartChain
Line:        225
Source: 
>     address maintenance_address; // maintainence address
>     address investor_address; // investor address
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SmartChain
Line:        229
Source: 
> 
>      uint minimum_deposit = 0.0001 ether;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    SmartChain
Line:        324
Source: 
> 
>         address(uint160(owner())).transfer(_amount*(5 ether) / (100 ether)); // owner commission 5 %;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address(uint160(maintenance_address)).transfer(_amount / 100); // maintainence 1 %;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    SmartChain
Line:        325
Source: 
>         address(uint160(owner())).transfer(_amount*(5 ether) / (100 ether)); // owner commission 5 %;
>         address(uint160(maintenance_address)).transfer(_amount / 100); // maintainence 1 %;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    SmartChain
Line:        374
Source: 
>                 
>                 require(address(uint160(_user_address[i])).send(_user_amount[i]),"transfer failed");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 sponser_pool_amount -= _user_amount[i];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    SmartChain
Line:        469
Source: 
> 
>         (_toUser).transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    SmartChain
Line:        442
Source: 
> 
>         address(uint160(msg.sender)).transfer(to_payout);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    SmartChain
Line:        374
Source: 
>                 
>                 require(address(uint160(_user_address[i])).send(_user_amount[i]),"transfer failed");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 sponser_pool_amount -= _user_amount[i];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    SmartChain
Line:        461
Source: 
>         
>         require(_toUser.send(_amount),"transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^
>         investor_pool_amount -= _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    SmartChain
Line:        469
Source: 
> 
>         (_toUser).transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SmartChain
Line:        324
Source: 
> 
>         address(uint160(owner())).transfer(_amount*(5 ether) / (100 ether)); // owner commission 5 %;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address(uint160(maintenance_address)).transfer(_amount / 100); // maintainence 1 %;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SmartChain
Line:        325
Source: 
>         address(uint160(owner())).transfer(_amount*(5 ether) / (100 ether)); // owner commission 5 %;
>         address(uint160(maintenance_address)).transfer(_amount / 100); // maintainence 1 %;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartChain
Line:        324
Source: 
> 
>         address(uint160(owner())).transfer(_amount*(5 ether) / (100 ether)); // owner commission 5 %;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address(uint160(maintenance_address)).transfer(_amount / 100); // maintainence 1 %;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartChain
Line:        325
Source: 
>         address(uint160(owner())).transfer(_amount*(5 ether) / (100 ether)); // owner commission 5 %;
>         address(uint160(maintenance_address)).transfer(_amount / 100); // maintainence 1 %;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartChain
Line:        374
Source: 
>                 
>                 require(address(uint160(_user_address[i])).send(_user_amount[i]),"transfer failed");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 sponser_pool_amount -= _user_amount[i];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartChain
Line:        442
Source: 
> 
>         address(uint160(msg.sender)).transfer(to_payout);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartChain
Line:        461
Source: 
>         
>         require(_toUser.send(_amount),"transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^
>         investor_pool_amount -= _amount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartChain
Line:        469
Source: 
> 
>         (_toUser).transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SmartChain
Line:        357
Source: 
>                 if(users[_user_address[i]].deposit_time[0] > 0){
>                    uint max_payout = this.maxPayoutOf(users[_user_address[i]].deposit_amount[users[_user_address[i]].currentCycle]);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                    if(_user_amount[i] > max_payout){

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SmartChain
Line:        387
Source: 
>     function withdraw() external whenNotPaused {
>         (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SmartChain
Line:        486
Source: 
>     function payoutOf(address _addr) view external returns(uint256 payout, uint256 max_payout) { // 1.2 daily ROI
>         max_payout = this.maxPayoutOf(users[_addr].deposit_amount[users[_addr].currentCycle]);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SmartChain
Line:        232
Source: 
>     // pools money
>     uint public general_pool_amount; // daily distribution pool
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public referrals_pool_amount; // matching bonus pool

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SmartChain
Line:        233
Source: 
>     uint public general_pool_amount; // daily distribution pool
>     uint public referrals_pool_amount; // matching bonus pool
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public investor_pool_amount; // investor pool

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SmartChain
Line:        234
Source: 
>     uint public referrals_pool_amount; // matching bonus pool
>     uint public investor_pool_amount; // investor pool
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public sponser_pool_amount; // top sponsers pool

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SmartChain
Line:        235
Source: 
>     uint public investor_pool_amount; // investor pool
>     uint public sponser_pool_amount; // top sponsers pool
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SmartChain
Line:        245
Source: 
>     uint40 public pool_last_draw = uint40(block.timestamp);
>     uint256 public pool_cycle; // pool cycles
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SmartChain
Line:        247
Source: 
> 
>     uint256 public total_withdraw; // total withdrawal amount
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    SmartChain
Line:        324
Source: 
> 
>         address(uint160(owner())).transfer(_amount*(5 ether) / (100 ether)); // owner commission 5 %;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address(uint160(maintenance_address)).transfer(_amount / 100); // maintainence 1 %;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    SmartChain
Line:        325
Source: 
>         address(uint160(owner())).transfer(_amount*(5 ether) / (100 ether)); // owner commission 5 %;
>         address(uint160(maintenance_address)).transfer(_amount / 100); // maintainence 1 %;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SmartChain
Line:        281
Source: 
>         if(users[_addr].upline == address(0) && _upline != _addr && (users[_upline].deposit_time[0] > 0 || _upline == owner())) { 
>             users[_addr].upline = _upline;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_upline].referrals++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SmartChain
Line:        282
Source: 
>             users[_addr].upline = _upline;
>             users[_upline].referrals++;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SmartChain
Line:        289
Source: 
> 
>                 users[_upline].total_structure++;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SmartChain
Line:        305
Source: 
>         
>         users[_addr].deposit_amount[users[_addr].cycle] = _amount; // deposit to current cycle.
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_addr].deposit_time[users[_addr].cycle] = uint40(block.timestamp);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SmartChain
Line:        306
Source: 
>         users[_addr].deposit_amount[users[_addr].cycle] = _amount; // deposit to current cycle.
>         users[_addr].deposit_time[users[_addr].cycle] = uint40(block.timestamp);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_addr].total_deposits += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SmartChain
Line:        307
Source: 
>         users[_addr].deposit_time[users[_addr].cycle] = uint40(block.timestamp);
>         users[_addr].total_deposits += _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SmartChain
Line:        309
Source: 
>         
>         users[_addr].cycle++;
>         ^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SmartChain
Line:        314
Source: 
>         if(users[_addr].upline != address(0)) {
>             users[users[_addr].upline].direct_bonus += _amount / 10; // upline 10 %
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SmartChain
Line:        319
Source: 
>         
>         general_pool_amount += _amount*general_pool/(100 ether); // 69% - general pool
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         referrals_pool_amount += _amount*referrals_pool/(100 ether); // 15% - referral pool

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SmartChain
Line:        320
Source: 
>         general_pool_amount += _amount*general_pool/(100 ether); // 69% - general pool
>         referrals_pool_amount += _amount*referrals_pool/(100 ether); // 15% - referral pool
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         investor_pool_amount += _amount*investor_pool/(100 ether); // 5% - invest pool

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SmartChain
Line:        321
Source: 
>         referrals_pool_amount += _amount*referrals_pool/(100 ether); // 15% - referral pool
>         investor_pool_amount += _amount*investor_pool/(100 ether); // 5% - invest pool
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sponser_pool_amount += _amount*sponser_pool/(100 ether); // 5% - sponser pool

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SmartChain
Line:        322
Source: 
>         investor_pool_amount += _amount*investor_pool/(100 ether); // 5% - invest pool
>         sponser_pool_amount += _amount*sponser_pool/(100 ether); // 5% - sponser pool
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        165
Source: 
>         _paused = true;
>         emit Paused(_msgSender());
>                     ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        177
Source: 
>         _paused = false;
>         emit Unpaused(_msgSender());
>                       ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        165
Source: 
>         _paused = true;
>         emit Paused(_msgSender());
>                     ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        177
Source: 
>         _paused = false;
>         emit Unpaused(_msgSender());
>                       ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SmartChain
Line:        324
Source: 
> 
>         address(uint160(owner())).transfer(_amount*(5 ether) / (100 ether)); // owner commission 5 %;
>                         ^^^^^^^
>         address(uint160(maintenance_address)).transfer(_amount / 100); // maintainence 1 %;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    SmartChain
Line:        351
Source: 
>         
>         pool_last_draw = uint40(block.timestamp);
>                                 ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    SmartChain
Line:        489
Source: 
>         if(users[_addr].deposit_payouts[users[msg.sender].currentCycle] < max_payout) {
>             payout = ((users[_addr].deposit_amount[users[_addr].currentCycle]*(1.2 ether)/(100 ether)) * ((block.timestamp - users[_addr].deposit_time[users[msg.sender].currentCycle]) / 1 days)) - users[_addr].deposit_payouts[users[msg.sender].currentCycle];
>                                                                                                            ^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    SmartChain
Line:        244
Source: 
> 
>     uint40 public pool_last_draw = uint40(block.timestamp);
>                                           ^^^^^^^^^^^^^^^
>     uint256 public pool_cycle; // pool cycles

[0m

---------------------------------------------
For contract 0x0fe5fb1e6bc1c5103bf411abee17dc88e1781688.sol
Tool Runtime = 25.82642210599988 seconds
#############################################