[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        150
Source: 
> 
>     function setGenesisDao(address dao) public onlyDeployer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DAO = iDAO(dao);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        156
Source: 
> 
>     function getTokenDetails(address token) public view returns (TokenDetails memory tokenDetails){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return getTokenDetailsWithMember(token, msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        178
Source: 
> 
>     function getGlobalDetails() public view returns (GlobalDetails memory globalDetails){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalDetails.totalStaked = iROUTER(DAO.ROUTER()).totalStaked();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        194
Source: 
>     }
>     function allTokens() public view returns (address[] memory _allTokens){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokensInRange(0, iROUTER(DAO.ROUTER()).tokenCount()) ;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        207
Source: 
>     }
>     function allPools() public view returns (address[] memory _allPools){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return poolsInRange(0, tokenCount());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        221
Source: 
> 
>     function getPoolData(address token) public view returns(PoolDataStruct memory poolData){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        237
Source: 
> 
>     function getMemberShare(address token, address member) public view returns(uint baseAmt, uint tokenAmt){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address pool = getPool(token);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        250
Source: 
> 
>     function getShareOfBaseAmount(address token, address member) public view returns(uint baseAmt){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        255
Source: 
>     }
>     function getShareOfTokenAmount(address token, address member) public view returns(uint baseAmt){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        261
Source: 
> 
>     function getPoolShareAssym(address token, uint units, bool toBase) public view returns(uint baseAmt, uint tokenAmt, uint outputAmt){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        296
Source: 
> 
>    function getPoolAPY(address token) public view returns (uint apy){
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint avgROI = getPoolROI(token);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        302
Source: 
> 
>     function isMember(address token, address member) public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        313
Source: 
> 
>     function calcValueInBase(address token, uint amount) public view returns (uint value){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        address payable pool = getPool(token);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        318
Source: 
> 
>     function calcValueInToken(address token, uint amount) public view returns (uint value){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        323
Source: 
> 
>     function calcTokenPPinBase(address token, uint amount) public view returns (uint _output){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        328
Source: 
> 
>     function calcBasePPinToken(address token, uint amount) public view returns (uint _output){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        351
Source: 
> 
>     function calcBasePPinTokenWithPool(address payable pool, uint amount) public view returns (uint _output){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _baseAmt = iPOOL(pool).baseAmt();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        359
Source: 
> 
>     function calcPart(uint bp, uint total) public pure returns (uint part){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // 10,000 basis points = 100.00%

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        377
Source: 
> 
>     function  calcSwapFee(uint x, uint X, uint Y) public pure returns (uint output){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // y = (x * x * Y) / (x + X)^2

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils_Vether
Line:        384
Source: 
> 
>     function calcStakeUnits(uint b, uint B, uint t, uint T) public pure returns (uint units){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // units = ((T + B) * (t * B + T * b))/(4 * T * B)

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        168
Source: 
>         } else {
>             tokenDetails.name = iERC20(token).name();
>                                 ^^^^^^^^^^^^^^^^^^^^
>             tokenDetails.symbol = iERC20(token).symbol();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        169
Source: 
>             tokenDetails.name = iERC20(token).name();
>             tokenDetails.symbol = iERC20(token).symbol();
>                                   ^^^^^^^^^^^^^^^^^^^^^^
>             tokenDetails.decimals = iERC20(token).decimals();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        170
Source: 
>             tokenDetails.symbol = iERC20(token).symbol();
>             tokenDetails.decimals = iERC20(token).decimals();
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^
>             tokenDetails.totalSupply = iERC20(token).totalSupply();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        171
Source: 
>             tokenDetails.decimals = iERC20(token).decimals();
>             tokenDetails.totalSupply = iERC20(token).totalSupply();
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokenDetails.balance = iERC20(token).balanceOf(member);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        172
Source: 
>             tokenDetails.totalSupply = iERC20(token).totalSupply();
>             tokenDetails.balance = iERC20(token).balanceOf(member);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        179
Source: 
>     function getGlobalDetails() public view returns (GlobalDetails memory globalDetails){
>         globalDetails.totalStaked = iROUTER(DAO.ROUTER()).totalStaked();
>                                             ^^^^^^^^^^^^
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        179
Source: 
>     function getGlobalDetails() public view returns (GlobalDetails memory globalDetails){
>         globalDetails.totalStaked = iROUTER(DAO.ROUTER()).totalStaked();
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        180
Source: 
>         globalDetails.totalStaked = iROUTER(DAO.ROUTER()).totalStaked();
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();
>                                             ^^^^^^^^^^^^
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        180
Source: 
>         globalDetails.totalStaked = iROUTER(DAO.ROUTER()).totalStaked();
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        181
Source: 
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();
>                                           ^^^^^^^^^^^^
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        181
Source: 
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        182
Source: 
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();
>                                           ^^^^^^^^^^^^
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        182
Source: 
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        183
Source: 
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();
>                                         ^^^^^^^^^^^^
>         globalDetails.swapTx = iROUTER(DAO.ROUTER()).swapTx();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        183
Source: 
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalDetails.swapTx = iROUTER(DAO.ROUTER()).swapTx();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        184
Source: 
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();
>         globalDetails.swapTx = iROUTER(DAO.ROUTER()).swapTx();
>                                        ^^^^^^^^^^^^
>         return globalDetails;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        184
Source: 
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();
>         globalDetails.swapTx = iROUTER(DAO.ROUTER()).swapTx();
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return globalDetails;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        189
Source: 
>     function getPool(address token) public view returns(address payable pool){
>         return iROUTER(DAO.ROUTER()).getPool(token);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        192
Source: 
>     function tokenCount() public view returns (uint256 count){
>         return iROUTER(DAO.ROUTER()).tokenCount();
>                        ^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        192
Source: 
>     function tokenCount() public view returns (uint256 count){
>         return iROUTER(DAO.ROUTER()).tokenCount();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        195
Source: 
>     function allTokens() public view returns (address[] memory _allTokens){
>         return tokensInRange(0, iROUTER(DAO.ROUTER()).tokenCount()) ;
>                                         ^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        195
Source: 
>     function allTokens() public view returns (address[] memory _allTokens){
>         return tokensInRange(0, iROUTER(DAO.ROUTER()).tokenCount()) ;
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        225
Source: 
>         poolData.tokenAddress = token;
>         poolData.genesis = iPOOL(pool).genesis();
>                            ^^^^^^^^^^^^^^^^^^^^^
>         poolData.baseAmt = iPOOL(pool).baseAmt();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        226
Source: 
>         poolData.genesis = iPOOL(pool).genesis();
>         poolData.baseAmt = iPOOL(pool).baseAmt();
>                            ^^^^^^^^^^^^^^^^^^^^^
>         poolData.tokenAmt = iPOOL(pool).tokenAmt();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        227
Source: 
>         poolData.baseAmt = iPOOL(pool).baseAmt();
>         poolData.tokenAmt = iPOOL(pool).tokenAmt();
>                             ^^^^^^^^^^^^^^^^^^^^^^
>         poolData.baseAmtStaked = iPOOL(pool).baseAmtStaked();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        228
Source: 
>         poolData.tokenAmt = iPOOL(pool).tokenAmt();
>         poolData.baseAmtStaked = iPOOL(pool).baseAmtStaked();
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         poolData.tokenAmtStaked = iPOOL(pool).tokenAmtStaked();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        229
Source: 
>         poolData.baseAmtStaked = iPOOL(pool).baseAmtStaked();
>         poolData.tokenAmtStaked = iPOOL(pool).tokenAmtStaked();
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         poolData.fees = iPOOL(pool).fees();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        230
Source: 
>         poolData.tokenAmtStaked = iPOOL(pool).tokenAmtStaked();
>         poolData.fees = iPOOL(pool).fees();
>                         ^^^^^^^^^^^^^^^^^^
>         poolData.volume = iPOOL(pool).volume();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        231
Source: 
>         poolData.fees = iPOOL(pool).fees();
>         poolData.volume = iPOOL(pool).volume();
>                           ^^^^^^^^^^^^^^^^^^^^
>         poolData.txCount = iPOOL(pool).txCount();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        232
Source: 
>         poolData.volume = iPOOL(pool).volume();
>         poolData.txCount = iPOOL(pool).txCount();
>                            ^^^^^^^^^^^^^^^^^^^^^
>         poolData.poolUnits = iERC20(pool).totalSupply();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        233
Source: 
>         poolData.txCount = iPOOL(pool).txCount();
>         poolData.poolUnits = iERC20(pool).totalSupply();
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return poolData;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        239
Source: 
>         address pool = getPool(token);
>         uint units = iERC20(pool).balanceOf(member);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return getPoolShare(token, units);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        245
Source: 
>         address payable pool = getPool(token);
>         baseAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        245
Source: 
>         address payable pool = getPool(token);
>         baseAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
>                                                                ^^^^^^^^^^^^^^^^^^^^^
>         tokenAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        246
Source: 
>         baseAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
>         tokenAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^
>         return (baseAmt, tokenAmt);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        252
Source: 
>         address payable pool = getPool(token);
>         uint units = iERC20(pool).balanceOf(member);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        253
Source: 
>         uint units = iERC20(pool).balanceOf(member);
>         return calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        253
Source: 
>         uint units = iERC20(pool).balanceOf(member);
>         return calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
>                                                             ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        257
Source: 
>         address payable pool = getPool(token);
>         uint units = iERC20(pool).balanceOf(member);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        258
Source: 
>         uint units = iERC20(pool).balanceOf(member);
>         return calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        258
Source: 
>         uint units = iERC20(pool).balanceOf(member);
>         return calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
>                                                             ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        264
Source: 
>         if(toBase){
>             baseAmt = calcAsymmetricShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokenAmt = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        264
Source: 
>         if(toBase){
>             baseAmt = calcAsymmetricShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
>                                                                              ^^^^^^^^^^^^^^^^^^^^^
>             tokenAmt = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        269
Source: 
>             baseAmt = 0;
>             tokenAmt = calcAsymmetricShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             outputAmt = tokenAmt;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        269
Source: 
>             baseAmt = 0;
>             tokenAmt = calcAsymmetricShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
>                                                                               ^^^^^^^^^^^^^^^^^^^^^^
>             outputAmt = tokenAmt;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        277
Source: 
>         address payable pool = getPool(token);
>         uint genesis = iPOOL(pool).genesis();
>                        ^^^^^^^^^^^^^^^^^^^^^
>         if(now < genesis.add(86400)){

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        287
Source: 
>         address payable pool = getPool(token);
>         uint _baseStart = iPOOL(pool).baseAmtStaked().mul(2);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _baseEnd = iPOOL(pool).baseAmt().mul(2);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        288
Source: 
>         uint _baseStart = iPOOL(pool).baseAmtStaked().mul(2);
>         uint _baseEnd = iPOOL(pool).baseAmt().mul(2);
>                         ^^^^^^^^^^^^^^^^^^^^^
>         uint _ROIS = (_baseEnd.mul(10000)).div(_baseStart);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        291
Source: 
>         uint _tokenStart = iPOOL(pool).tokenAmtStaked().mul(2);
>         uint _tokenEnd = iPOOL(pool).tokenAmt().mul(2);
>                          ^^^^^^^^^^^^^^^^^^^^^^
>         uint _ROIA = (_tokenEnd.mul(10000)).div(_tokenStart);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        304
Source: 
>         address payable pool = getPool(token);
>         if (iERC20(pool).balanceOf(member) > 0){
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        334
Source: 
>     function calcValueInBaseWithPool(address payable pool, uint amount) public view returns (uint value){
>        uint _baseAmt = iPOOL(pool).baseAmt();
>                        ^^^^^^^^^^^^^^^^^^^^^
>        uint _tokenAmt = iPOOL(pool).tokenAmt();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        335
Source: 
>        uint _baseAmt = iPOOL(pool).baseAmt();
>        uint _tokenAmt = iPOOL(pool).tokenAmt();
>                         ^^^^^^^^^^^^^^^^^^^^^^
>        return (amount.mul(_baseAmt)).div(_tokenAmt);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        340
Source: 
>     function calcValueInTokenWithPool(address payable pool, uint amount) public view returns (uint value){
>         uint _baseAmt = iPOOL(pool).baseAmt();
>                         ^^^^^^^^^^^^^^^^^^^^^
>         uint _tokenAmt = iPOOL(pool).tokenAmt();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        341
Source: 
>         uint _baseAmt = iPOOL(pool).baseAmt();
>         uint _tokenAmt = iPOOL(pool).tokenAmt();
>                          ^^^^^^^^^^^^^^^^^^^^^^
>         return (amount.mul(_tokenAmt)).div(_baseAmt);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        346
Source: 
>     function calcTokenPPinBaseWithPool(address payable pool, uint amount) public view returns (uint _output){
>         uint _baseAmt = iPOOL(pool).baseAmt();
>                         ^^^^^^^^^^^^^^^^^^^^^
>         uint _tokenAmt = iPOOL(pool).tokenAmt();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        347
Source: 
>         uint _baseAmt = iPOOL(pool).baseAmt();
>         uint _tokenAmt = iPOOL(pool).tokenAmt();
>                          ^^^^^^^^^^^^^^^^^^^^^^
>         return  calcSwapOutput(amount, _tokenAmt, _baseAmt);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        352
Source: 
>     function calcBasePPinTokenWithPool(address payable pool, uint amount) public view returns (uint _output){
>         uint _baseAmt = iPOOL(pool).baseAmt();
>                         ^^^^^^^^^^^^^^^^^^^^^
>         uint _tokenAmt = iPOOL(pool).tokenAmt();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils_Vether
Line:        353
Source: 
>         uint _baseAmt = iPOOL(pool).baseAmt();
>         uint _tokenAmt = iPOOL(pool).tokenAmt();
>                          ^^^^^^^^^^^^^^^^^^^^^^
>         return  calcSwapOutput(amount, _baseAmt, _tokenAmt);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Utils_Vether
Line:        189
Source: 
>     function getPool(address token) public view returns(address payable pool){
>         return iROUTER(DAO.ROUTER()).getPool(token);
>                        ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Utils_Vether
Line:        203
Source: 
>         for (uint i = 0; i < count; i++){
>             result[i] = iROUTER(DAO.ROUTER()).getToken(i);
>                                 ^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Utils_Vether
Line:        203
Source: 
>         for (uint i = 0; i < count; i++){
>             result[i] = iROUTER(DAO.ROUTER()).getToken(i);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Utils_Vether
Line:        216
Source: 
>         for (uint i = 0; i<count; i++){
>             result[i] = getPool(iROUTER(DAO.ROUTER()).getToken(i));
>                                         ^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Utils_Vether
Line:        216
Source: 
>         for (uint i = 0; i<count; i++){
>             result[i] = getPool(iROUTER(DAO.ROUTER()).getToken(i));
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    Utils_Vether
Line:        89
Source: 
> 
> contract Utils_Vether {
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Utils_Vether
Line:        156
Source: 
> 
>     function getTokenDetails(address token) public view returns (TokenDetails memory tokenDetails){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return getTokenDetailsWithMember(token, msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Utils_Vether
Line:        160
Source: 
> 
>     function getTokenDetailsWithMember(address token, address member) public view returns (TokenDetails memory tokenDetails){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(token == address(0)){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Utils_Vether
Line:        188
Source: 
> 
>     function getPool(address token) public view returns(address payable pool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return iROUTER(DAO.ROUTER()).getPool(token);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Utils_Vether
Line:        197
Source: 
>     }
>     function tokensInRange(uint start, uint count) public view returns (address[] memory someTokens){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(start.add(count) > tokenCount()){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Utils_Vether
Line:        210
Source: 
>     }
>     function poolsInRange(uint start, uint count) public view returns (address[] memory somePools){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(start.add(count) > tokenCount()){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Utils_Vether
Line:        221
Source: 
> 
>     function getPoolData(address token) public view returns(PoolDataStruct memory poolData){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Utils_Vether
Line:        237
Source: 
> 
>     function getMemberShare(address token, address member) public view returns(uint baseAmt, uint tokenAmt){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address pool = getPool(token);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Utils_Vether
Line:        250
Source: 
> 
>     function getShareOfBaseAmount(address token, address member) public view returns(uint baseAmt){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Utils_Vether
Line:        255
Source: 
>     }
>     function getShareOfTokenAmount(address token, address member) public view returns(uint baseAmt){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Utils_Vether
Line:        275
Source: 
> 
>     function getPoolAge(address token) public view returns (uint daysSinceGenesis){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Utils_Vether
Line:        285
Source: 
> 
>     function getPoolROI(address token) public view returns (uint roi){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Utils_Vether
Line:        296
Source: 
> 
>    function getPoolAPY(address token) public view returns (uint apy){
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint avgROI = getPoolROI(token);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Utils_Vether
Line:        302
Source: 
> 
>     function isMember(address token, address member) public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils_Vether
Line:        150
Source: 
> 
>     function setGenesisDao(address dao) public onlyDeployer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DAO = iDAO(dao);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils_Vether
Line:        243
Source: 
> 
>     function getPoolShare(address token, uint units) public view returns(uint baseAmt, uint tokenAmt){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils_Vether
Line:        261
Source: 
> 
>     function getPoolShareAssym(address token, uint units, bool toBase) public view returns(uint baseAmt, uint tokenAmt, uint outputAmt){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils_Vether
Line:        313
Source: 
> 
>     function calcValueInBase(address token, uint amount) public view returns (uint value){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        address payable pool = getPool(token);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils_Vether
Line:        318
Source: 
> 
>     function calcValueInToken(address token, uint amount) public view returns (uint value){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils_Vether
Line:        323
Source: 
> 
>     function calcTokenPPinBase(address token, uint amount) public view returns (uint _output){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils_Vether
Line:        328
Source: 
> 
>     function calcBasePPinToken(address token, uint amount) public view returns (uint _output){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable pool = getPool(token);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils_Vether
Line:        333
Source: 
> 
>     function calcValueInBaseWithPool(address payable pool, uint amount) public view returns (uint value){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        uint _baseAmt = iPOOL(pool).baseAmt();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils_Vether
Line:        339
Source: 
> 
>     function calcValueInTokenWithPool(address payable pool, uint amount) public view returns (uint value){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _baseAmt = iPOOL(pool).baseAmt();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils_Vether
Line:        345
Source: 
> 
>     function calcTokenPPinBaseWithPool(address payable pool, uint amount) public view returns (uint _output){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _baseAmt = iPOOL(pool).baseAmt();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils_Vether
Line:        351
Source: 
> 
>     function calcBasePPinTokenWithPool(address payable pool, uint amount) public view returns (uint _output){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _baseAmt = iPOOL(pool).baseAmt();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils_Vether
Line:        359
Source: 
> 
>     function calcPart(uint bp, uint total) public pure returns (uint part){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // 10,000 basis points = 100.00%

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils_Vether
Line:        365
Source: 
> 
>     function calcShare(uint part, uint total, uint amount) public pure returns (uint share){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // share = amount * part/total

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils_Vether
Line:        370
Source: 
> 
>     function  calcSwapOutput(uint x, uint X, uint Y) public pure returns (uint output){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // y = (x * X * Y )/(x + X)^2

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils_Vether
Line:        377
Source: 
> 
>     function  calcSwapFee(uint x, uint X, uint Y) public pure returns (uint output){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // y = (x * x * Y) / (x + X)^2

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils_Vether
Line:        384
Source: 
> 
>     function calcStakeUnits(uint b, uint B, uint t, uint T) public pure returns (uint units){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // units = ((T + B) * (t * B + T * b))/(4 * T * B)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils_Vether
Line:        395
Source: 
> 
>     function calcAsymmetricShare(uint u, uint U, uint A) public pure returns (uint share){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // share = (u * U * (2 * A^2 - 2 * U * u + U^2))/U^3

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Utils_Vether
Line:        245
Source: 
>         address payable pool = getPool(token);
>         baseAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Utils_Vether
Line:        264
Source: 
>         if(toBase){
>             baseAmt = calcAsymmetricShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokenAmt = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Utils_Vether
Line:        269
Source: 
>             baseAmt = 0;
>             tokenAmt = calcAsymmetricShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             outputAmt = tokenAmt;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    iERC20
Line:        10
Source: 
> 
> interface iERC20 {
> ^^^^^^^^^^^^^^^^^^
>     function name() external view returns (string memory);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    iROUTER
Line:        18
Source: 
> 
> interface iROUTER {
> ^^^^^^^^^^^^^^^^^^^
>     function totalStaked() external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    iPOOL
Line:        31
Source: 
> 
> interface iPOOL {
> ^^^^^^^^^^^^^^^^^
>     function genesis() external view returns(uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    iDAO
Line:        48
Source: 
> 
> interface iDAO {
> ^^^^^^^^^^^^^^^^
>     function ROUTER() external view returns(address);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    iDAO
Line:        49
Source: 
> interface iDAO {
>     function ROUTER() external view returns(address);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        89
Source: 
> 
> contract Utils_Vether {
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        93
Source: 
> 
>     address public BASE;
>     ^^^^^^^^^^^^^^^^^^^
>     address public DEPLOYER;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        94
Source: 
>     address public BASE;
>     address public DEPLOYER;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     iDAO public DAO;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        95
Source: 
>     address public DEPLOYER;
>     iDAO public DAO;
>     ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        287
Source: 
>         address payable pool = getPool(token);
>         uint _baseStart = iPOOL(pool).baseAmtStaked().mul(2);
>         ^^^^^^^^^^^^^^^
>         uint _baseEnd = iPOOL(pool).baseAmt().mul(2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        288
Source: 
>         uint _baseStart = iPOOL(pool).baseAmtStaked().mul(2);
>         uint _baseEnd = iPOOL(pool).baseAmt().mul(2);
>         ^^^^^^^^^^^^^
>         uint _ROIS = (_baseEnd.mul(10000)).div(_baseStart);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        289
Source: 
>         uint _baseEnd = iPOOL(pool).baseAmt().mul(2);
>         uint _ROIS = (_baseEnd.mul(10000)).div(_baseStart);
>         ^^^^^^^^^^
>         uint _tokenStart = iPOOL(pool).tokenAmtStaked().mul(2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        290
Source: 
>         uint _ROIS = (_baseEnd.mul(10000)).div(_baseStart);
>         uint _tokenStart = iPOOL(pool).tokenAmtStaked().mul(2);
>         ^^^^^^^^^^^^^^^^
>         uint _tokenEnd = iPOOL(pool).tokenAmt().mul(2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        291
Source: 
>         uint _tokenStart = iPOOL(pool).tokenAmtStaked().mul(2);
>         uint _tokenEnd = iPOOL(pool).tokenAmt().mul(2);
>         ^^^^^^^^^^^^^^
>         uint _ROIA = (_tokenEnd.mul(10000)).div(_tokenStart);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        292
Source: 
>         uint _tokenEnd = iPOOL(pool).tokenAmt().mul(2);
>         uint _ROIA = (_tokenEnd.mul(10000)).div(_tokenStart);
>         ^^^^^^^^^^
>         return (_ROIS + _ROIA).div(2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        334
Source: 
>     function calcValueInBaseWithPool(address payable pool, uint amount) public view returns (uint value){
>        uint _baseAmt = iPOOL(pool).baseAmt();
>        ^^^^^^^^^^^^^
>        uint _tokenAmt = iPOOL(pool).tokenAmt();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        335
Source: 
>        uint _baseAmt = iPOOL(pool).baseAmt();
>        uint _tokenAmt = iPOOL(pool).tokenAmt();
>        ^^^^^^^^^^^^^^
>        return (amount.mul(_baseAmt)).div(_tokenAmt);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        340
Source: 
>     function calcValueInTokenWithPool(address payable pool, uint amount) public view returns (uint value){
>         uint _baseAmt = iPOOL(pool).baseAmt();
>         ^^^^^^^^^^^^^
>         uint _tokenAmt = iPOOL(pool).tokenAmt();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        341
Source: 
>         uint _baseAmt = iPOOL(pool).baseAmt();
>         uint _tokenAmt = iPOOL(pool).tokenAmt();
>         ^^^^^^^^^^^^^^
>         return (amount.mul(_tokenAmt)).div(_baseAmt);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        346
Source: 
>     function calcTokenPPinBaseWithPool(address payable pool, uint amount) public view returns (uint _output){
>         uint _baseAmt = iPOOL(pool).baseAmt();
>         ^^^^^^^^^^^^^
>         uint _tokenAmt = iPOOL(pool).tokenAmt();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        347
Source: 
>         uint _baseAmt = iPOOL(pool).baseAmt();
>         uint _tokenAmt = iPOOL(pool).tokenAmt();
>         ^^^^^^^^^^^^^^
>         return  calcSwapOutput(amount, _tokenAmt, _baseAmt);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        352
Source: 
>     function calcBasePPinTokenWithPool(address payable pool, uint amount) public view returns (uint _output){
>         uint _baseAmt = iPOOL(pool).baseAmt();
>         ^^^^^^^^^^^^^
>         uint _tokenAmt = iPOOL(pool).tokenAmt();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils_Vether
Line:        353
Source: 
>         uint _baseAmt = iPOOL(pool).baseAmt();
>         uint _tokenAmt = iPOOL(pool).tokenAmt();
>         ^^^^^^^^^^^^^^
>         return  calcSwapOutput(amount, _baseAmt, _tokenAmt);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> //pragma solidity 0.6.8;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> pragma experimental ABIEncoderV2;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Utils_Vether
Line:        165
Source: 
>             tokenDetails.decimals = 18;
>             tokenDetails.totalSupply = 100000000 * 10**18;
>                                        ^^^^^^^^^
>             tokenDetails.balance = msg.sender.balance;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        195
Source: 
>     function allTokens() public view returns (address[] memory _allTokens){
>         return tokensInRange(0, iROUTER(DAO.ROUTER()).tokenCount()) ;
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        216
Source: 
>         for (uint i = 0; i<count; i++){
>             result[i] = getPool(iROUTER(DAO.ROUTER()).getToken(i));
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        239
Source: 
>         address pool = getPool(token);
>         uint units = iERC20(pool).balanceOf(member);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return getPoolShare(token, units);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        245
Source: 
>         address payable pool = getPool(token);
>         baseAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
>                                                                ^^^^^^^^^^^^^^^^^^^^^
>         tokenAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        246
Source: 
>         baseAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
>         tokenAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^
>         return (baseAmt, tokenAmt);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        252
Source: 
>         address payable pool = getPool(token);
>         uint units = iERC20(pool).balanceOf(member);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        253
Source: 
>         uint units = iERC20(pool).balanceOf(member);
>         return calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
>                                                             ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        257
Source: 
>         address payable pool = getPool(token);
>         uint units = iERC20(pool).balanceOf(member);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        258
Source: 
>         uint units = iERC20(pool).balanceOf(member);
>         return calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
>                                                             ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        264
Source: 
>         if(toBase){
>             baseAmt = calcAsymmetricShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokenAmt = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        264
Source: 
>         if(toBase){
>             baseAmt = calcAsymmetricShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
>                                                                              ^^^^^^^^^^^^^^^^^^^^^
>             tokenAmt = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        269
Source: 
>             baseAmt = 0;
>             tokenAmt = calcAsymmetricShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             outputAmt = tokenAmt;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        269
Source: 
>             baseAmt = 0;
>             tokenAmt = calcAsymmetricShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
>                                                                               ^^^^^^^^^^^^^^^^^^^^^^
>             outputAmt = tokenAmt;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        277
Source: 
>         address payable pool = getPool(token);
>         uint genesis = iPOOL(pool).genesis();
>                        ^^^^^^^^^^^^^^^^^^^^^
>         if(now < genesis.add(86400)){

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        287
Source: 
>         address payable pool = getPool(token);
>         uint _baseStart = iPOOL(pool).baseAmtStaked().mul(2);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _baseEnd = iPOOL(pool).baseAmt().mul(2);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        288
Source: 
>         uint _baseStart = iPOOL(pool).baseAmtStaked().mul(2);
>         uint _baseEnd = iPOOL(pool).baseAmt().mul(2);
>                         ^^^^^^^^^^^^^^^^^^^^^
>         uint _ROIS = (_baseEnd.mul(10000)).div(_baseStart);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        290
Source: 
>         uint _ROIS = (_baseEnd.mul(10000)).div(_baseStart);
>         uint _tokenStart = iPOOL(pool).tokenAmtStaked().mul(2);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _tokenEnd = iPOOL(pool).tokenAmt().mul(2);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        291
Source: 
>         uint _tokenStart = iPOOL(pool).tokenAmtStaked().mul(2);
>         uint _tokenEnd = iPOOL(pool).tokenAmt().mul(2);
>                          ^^^^^^^^^^^^^^^^^^^^^^
>         uint _ROIA = (_tokenEnd.mul(10000)).div(_tokenStart);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        304
Source: 
>         address payable pool = getPool(token);
>         if (iERC20(pool).balanceOf(member) > 0){
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        334
Source: 
>     function calcValueInBaseWithPool(address payable pool, uint amount) public view returns (uint value){
>        uint _baseAmt = iPOOL(pool).baseAmt();
>                        ^^^^^^^^^^^^^^^^^^^^^
>        uint _tokenAmt = iPOOL(pool).tokenAmt();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        341
Source: 
>         uint _baseAmt = iPOOL(pool).baseAmt();
>         uint _tokenAmt = iPOOL(pool).tokenAmt();
>                          ^^^^^^^^^^^^^^^^^^^^^^
>         return (amount.mul(_tokenAmt)).div(_baseAmt);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        346
Source: 
>     function calcTokenPPinBaseWithPool(address payable pool, uint amount) public view returns (uint _output){
>         uint _baseAmt = iPOOL(pool).baseAmt();
>                         ^^^^^^^^^^^^^^^^^^^^^
>         uint _tokenAmt = iPOOL(pool).tokenAmt();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        347
Source: 
>         uint _baseAmt = iPOOL(pool).baseAmt();
>         uint _tokenAmt = iPOOL(pool).tokenAmt();
>                          ^^^^^^^^^^^^^^^^^^^^^^
>         return  calcSwapOutput(amount, _tokenAmt, _baseAmt);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        352
Source: 
>     function calcBasePPinTokenWithPool(address payable pool, uint amount) public view returns (uint _output){
>         uint _baseAmt = iPOOL(pool).baseAmt();
>                         ^^^^^^^^^^^^^^^^^^^^^
>         uint _tokenAmt = iPOOL(pool).tokenAmt();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils_Vether
Line:        353
Source: 
>         uint _baseAmt = iPOOL(pool).baseAmt();
>         uint _tokenAmt = iPOOL(pool).tokenAmt();
>                          ^^^^^^^^^^^^^^^^^^^^^^
>         return  calcSwapOutput(amount, _baseAmt, _tokenAmt);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        168
Source: 
>         } else {
>             tokenDetails.name = iERC20(token).name();
>                                 ^^^^^^^^^^^^^^^^^^^^
>             tokenDetails.symbol = iERC20(token).symbol();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        169
Source: 
>             tokenDetails.name = iERC20(token).name();
>             tokenDetails.symbol = iERC20(token).symbol();
>                                   ^^^^^^^^^^^^^^^^^^^^^^
>             tokenDetails.decimals = iERC20(token).decimals();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        170
Source: 
>             tokenDetails.symbol = iERC20(token).symbol();
>             tokenDetails.decimals = iERC20(token).decimals();
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^
>             tokenDetails.totalSupply = iERC20(token).totalSupply();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        171
Source: 
>             tokenDetails.decimals = iERC20(token).decimals();
>             tokenDetails.totalSupply = iERC20(token).totalSupply();
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokenDetails.balance = iERC20(token).balanceOf(member);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        172
Source: 
>             tokenDetails.totalSupply = iERC20(token).totalSupply();
>             tokenDetails.balance = iERC20(token).balanceOf(member);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        179
Source: 
>     function getGlobalDetails() public view returns (GlobalDetails memory globalDetails){
>         globalDetails.totalStaked = iROUTER(DAO.ROUTER()).totalStaked();
>                                             ^^^^^^^^^^^^
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        179
Source: 
>     function getGlobalDetails() public view returns (GlobalDetails memory globalDetails){
>         globalDetails.totalStaked = iROUTER(DAO.ROUTER()).totalStaked();
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        180
Source: 
>         globalDetails.totalStaked = iROUTER(DAO.ROUTER()).totalStaked();
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();
>                                             ^^^^^^^^^^^^
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        180
Source: 
>         globalDetails.totalStaked = iROUTER(DAO.ROUTER()).totalStaked();
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        181
Source: 
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();
>                                           ^^^^^^^^^^^^
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        181
Source: 
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        182
Source: 
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();
>                                           ^^^^^^^^^^^^
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        182
Source: 
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        183
Source: 
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();
>                                         ^^^^^^^^^^^^
>         globalDetails.swapTx = iROUTER(DAO.ROUTER()).swapTx();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        183
Source: 
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalDetails.swapTx = iROUTER(DAO.ROUTER()).swapTx();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        184
Source: 
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();
>         globalDetails.swapTx = iROUTER(DAO.ROUTER()).swapTx();
>                                        ^^^^^^^^^^^^
>         return globalDetails;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        184
Source: 
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();
>         globalDetails.swapTx = iROUTER(DAO.ROUTER()).swapTx();
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return globalDetails;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        189
Source: 
>     function getPool(address token) public view returns(address payable pool){
>         return iROUTER(DAO.ROUTER()).getPool(token);
>                        ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        189
Source: 
>     function getPool(address token) public view returns(address payable pool){
>         return iROUTER(DAO.ROUTER()).getPool(token);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        192
Source: 
>     function tokenCount() public view returns (uint256 count){
>         return iROUTER(DAO.ROUTER()).tokenCount();
>                        ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        192
Source: 
>     function tokenCount() public view returns (uint256 count){
>         return iROUTER(DAO.ROUTER()).tokenCount();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        195
Source: 
>     function allTokens() public view returns (address[] memory _allTokens){
>         return tokensInRange(0, iROUTER(DAO.ROUTER()).tokenCount()) ;
>                                         ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        203
Source: 
>         for (uint i = 0; i < count; i++){
>             result[i] = iROUTER(DAO.ROUTER()).getToken(i);
>                                 ^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        203
Source: 
>         for (uint i = 0; i < count; i++){
>             result[i] = iROUTER(DAO.ROUTER()).getToken(i);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        216
Source: 
>         for (uint i = 0; i<count; i++){
>             result[i] = getPool(iROUTER(DAO.ROUTER()).getToken(i));
>                                         ^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        225
Source: 
>         poolData.tokenAddress = token;
>         poolData.genesis = iPOOL(pool).genesis();
>                            ^^^^^^^^^^^^^^^^^^^^^
>         poolData.baseAmt = iPOOL(pool).baseAmt();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        226
Source: 
>         poolData.genesis = iPOOL(pool).genesis();
>         poolData.baseAmt = iPOOL(pool).baseAmt();
>                            ^^^^^^^^^^^^^^^^^^^^^
>         poolData.tokenAmt = iPOOL(pool).tokenAmt();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        227
Source: 
>         poolData.baseAmt = iPOOL(pool).baseAmt();
>         poolData.tokenAmt = iPOOL(pool).tokenAmt();
>                             ^^^^^^^^^^^^^^^^^^^^^^
>         poolData.baseAmtStaked = iPOOL(pool).baseAmtStaked();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        228
Source: 
>         poolData.tokenAmt = iPOOL(pool).tokenAmt();
>         poolData.baseAmtStaked = iPOOL(pool).baseAmtStaked();
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         poolData.tokenAmtStaked = iPOOL(pool).tokenAmtStaked();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        229
Source: 
>         poolData.baseAmtStaked = iPOOL(pool).baseAmtStaked();
>         poolData.tokenAmtStaked = iPOOL(pool).tokenAmtStaked();
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         poolData.fees = iPOOL(pool).fees();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        230
Source: 
>         poolData.tokenAmtStaked = iPOOL(pool).tokenAmtStaked();
>         poolData.fees = iPOOL(pool).fees();
>                         ^^^^^^^^^^^^^^^^^^
>         poolData.volume = iPOOL(pool).volume();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        231
Source: 
>         poolData.fees = iPOOL(pool).fees();
>         poolData.volume = iPOOL(pool).volume();
>                           ^^^^^^^^^^^^^^^^^^^^
>         poolData.txCount = iPOOL(pool).txCount();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        232
Source: 
>         poolData.volume = iPOOL(pool).volume();
>         poolData.txCount = iPOOL(pool).txCount();
>                            ^^^^^^^^^^^^^^^^^^^^^
>         poolData.poolUnits = iERC20(pool).totalSupply();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        233
Source: 
>         poolData.txCount = iPOOL(pool).txCount();
>         poolData.poolUnits = iERC20(pool).totalSupply();
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return poolData;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        245
Source: 
>         address payable pool = getPool(token);
>         baseAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        246
Source: 
>         baseAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
>         tokenAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (baseAmt, tokenAmt);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        253
Source: 
>         uint units = iERC20(pool).balanceOf(member);
>         return calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        258
Source: 
>         uint units = iERC20(pool).balanceOf(member);
>         return calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        335
Source: 
>        uint _baseAmt = iPOOL(pool).baseAmt();
>        uint _tokenAmt = iPOOL(pool).tokenAmt();
>                         ^^^^^^^^^^^^^^^^^^^^^^
>        return (amount.mul(_baseAmt)).div(_tokenAmt);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils_Vether
Line:        340
Source: 
>     function calcValueInTokenWithPool(address payable pool, uint amount) public view returns (uint value){
>         uint _baseAmt = iPOOL(pool).baseAmt();
>                         ^^^^^^^^^^^^^^^^^^^^^
>         uint _tokenAmt = iPOOL(pool).tokenAmt();

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Utils_Vether
Line:        162
Source: 
>         if(token == address(0)){
>             tokenDetails.name = 'Ethereum';
>             ^^^^^^^^^^^^
>             tokenDetails.symbol = 'ETH';

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Utils_Vether
Line:        179
Source: 
>     function getGlobalDetails() public view returns (GlobalDetails memory globalDetails){
>         globalDetails.totalStaked = iROUTER(DAO.ROUTER()).totalStaked();
>         ^^^^^^^^^^^^^
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Utils_Vether
Line:        223
Source: 
>         address payable pool = getPool(token);
>         poolData.poolAddress = pool;
>         ^^^^^^^^
>         poolData.tokenAddress = token;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Utils_Vether
Line:        95
Source: 
>     address public DEPLOYER;
>     iDAO public DAO;
>     ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        168
Source: 
>         } else {
>             tokenDetails.name = iERC20(token).name();
>                                 ^^^^^^^^^^^^^^^^^^^^
>             tokenDetails.symbol = iERC20(token).symbol();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        169
Source: 
>             tokenDetails.name = iERC20(token).name();
>             tokenDetails.symbol = iERC20(token).symbol();
>                                   ^^^^^^^^^^^^^^^^^^^^^^
>             tokenDetails.decimals = iERC20(token).decimals();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        170
Source: 
>             tokenDetails.symbol = iERC20(token).symbol();
>             tokenDetails.decimals = iERC20(token).decimals();
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^
>             tokenDetails.totalSupply = iERC20(token).totalSupply();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        171
Source: 
>             tokenDetails.decimals = iERC20(token).decimals();
>             tokenDetails.totalSupply = iERC20(token).totalSupply();
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokenDetails.balance = iERC20(token).balanceOf(member);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        172
Source: 
>             tokenDetails.totalSupply = iERC20(token).totalSupply();
>             tokenDetails.balance = iERC20(token).balanceOf(member);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        179
Source: 
>     function getGlobalDetails() public view returns (GlobalDetails memory globalDetails){
>         globalDetails.totalStaked = iROUTER(DAO.ROUTER()).totalStaked();
>                                             ^^^^^^^^^^^^
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        179
Source: 
>     function getGlobalDetails() public view returns (GlobalDetails memory globalDetails){
>         globalDetails.totalStaked = iROUTER(DAO.ROUTER()).totalStaked();
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        180
Source: 
>         globalDetails.totalStaked = iROUTER(DAO.ROUTER()).totalStaked();
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();
>                                             ^^^^^^^^^^^^
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        180
Source: 
>         globalDetails.totalStaked = iROUTER(DAO.ROUTER()).totalStaked();
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        181
Source: 
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();
>                                           ^^^^^^^^^^^^
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        181
Source: 
>         globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        182
Source: 
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();
>                                           ^^^^^^^^^^^^
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        182
Source: 
>         globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        183
Source: 
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();
>                                         ^^^^^^^^^^^^
>         globalDetails.swapTx = iROUTER(DAO.ROUTER()).swapTx();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        183
Source: 
>         globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalDetails.swapTx = iROUTER(DAO.ROUTER()).swapTx();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        184
Source: 
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();
>         globalDetails.swapTx = iROUTER(DAO.ROUTER()).swapTx();
>                                        ^^^^^^^^^^^^
>         return globalDetails;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        184
Source: 
>         globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();
>         globalDetails.swapTx = iROUTER(DAO.ROUTER()).swapTx();
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return globalDetails;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        189
Source: 
>     function getPool(address token) public view returns(address payable pool){
>         return iROUTER(DAO.ROUTER()).getPool(token);
>                        ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        192
Source: 
>     function tokenCount() public view returns (uint256 count){
>         return iROUTER(DAO.ROUTER()).tokenCount();
>                        ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        195
Source: 
>     function allTokens() public view returns (address[] memory _allTokens){
>         return tokensInRange(0, iROUTER(DAO.ROUTER()).tokenCount()) ;
>                                         ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        203
Source: 
>         for (uint i = 0; i < count; i++){
>             result[i] = iROUTER(DAO.ROUTER()).getToken(i);
>                                 ^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        203
Source: 
>         for (uint i = 0; i < count; i++){
>             result[i] = iROUTER(DAO.ROUTER()).getToken(i);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        216
Source: 
>         for (uint i = 0; i<count; i++){
>             result[i] = getPool(iROUTER(DAO.ROUTER()).getToken(i));
>                                         ^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        225
Source: 
>         poolData.tokenAddress = token;
>         poolData.genesis = iPOOL(pool).genesis();
>                            ^^^^^^^^^^^^^^^^^^^^^
>         poolData.baseAmt = iPOOL(pool).baseAmt();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        226
Source: 
>         poolData.genesis = iPOOL(pool).genesis();
>         poolData.baseAmt = iPOOL(pool).baseAmt();
>                            ^^^^^^^^^^^^^^^^^^^^^
>         poolData.tokenAmt = iPOOL(pool).tokenAmt();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        227
Source: 
>         poolData.baseAmt = iPOOL(pool).baseAmt();
>         poolData.tokenAmt = iPOOL(pool).tokenAmt();
>                             ^^^^^^^^^^^^^^^^^^^^^^
>         poolData.baseAmtStaked = iPOOL(pool).baseAmtStaked();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        228
Source: 
>         poolData.tokenAmt = iPOOL(pool).tokenAmt();
>         poolData.baseAmtStaked = iPOOL(pool).baseAmtStaked();
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         poolData.tokenAmtStaked = iPOOL(pool).tokenAmtStaked();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        229
Source: 
>         poolData.baseAmtStaked = iPOOL(pool).baseAmtStaked();
>         poolData.tokenAmtStaked = iPOOL(pool).tokenAmtStaked();
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         poolData.fees = iPOOL(pool).fees();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        230
Source: 
>         poolData.tokenAmtStaked = iPOOL(pool).tokenAmtStaked();
>         poolData.fees = iPOOL(pool).fees();
>                         ^^^^^^^^^^^^^^^^^^
>         poolData.volume = iPOOL(pool).volume();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        231
Source: 
>         poolData.fees = iPOOL(pool).fees();
>         poolData.volume = iPOOL(pool).volume();
>                           ^^^^^^^^^^^^^^^^^^^^
>         poolData.txCount = iPOOL(pool).txCount();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        232
Source: 
>         poolData.volume = iPOOL(pool).volume();
>         poolData.txCount = iPOOL(pool).txCount();
>                            ^^^^^^^^^^^^^^^^^^^^^
>         poolData.poolUnits = iERC20(pool).totalSupply();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Utils_Vether
Line:        233
Source: 
>         poolData.txCount = iPOOL(pool).txCount();
>         poolData.poolUnits = iERC20(pool).totalSupply();
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return poolData;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Utils_Vether
Line:        93
Source: 
> 
>     address public BASE;
>     ^^^^^^^^^^^^^^^^^^^
>     address public DEPLOYER;

[0m

---------------------------------------------
For contract 0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol
Tool Runtime = 21.37667516700003 seconds
#############################################