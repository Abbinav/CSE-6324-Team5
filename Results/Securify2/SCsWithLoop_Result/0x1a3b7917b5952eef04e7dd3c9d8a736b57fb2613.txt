[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    SmartWay
Line:        276
Source: 
>     function bytesToAddress(bytes memory bys) private pure returns (address addr) {
>         assembly {
>         ^^^^^^^^^^
>             addr := mload(add(bys, 20))

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SmartWay
Line:        226
Source: 
>     
>     function syncWithOldSC(uint limit) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(oldSC) != address(0), 'Initialize closed');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SmartWay
Line:        267
Source: 
> 
>     function viewUserReferral(address user) public view returns(address payable[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[user].referrals;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SmartWay
Line:        271
Source: 
> 
>     function viewUserLevelExpired(address user, uint8 level) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[user].levelExpired[level];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartWay
Line:        148
Source: 
>         if(users[referrer].levelExpired[level] >= now) {
>             if (referrer.send(levelPrice[level])) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit GetMoneyForLevel(referrer, msg.sender, level);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    SmartWay
Line:        231
Source: 
>         for(uint i = 0; i < limit; i++) {
>             address payable user = oldSC.userList(oldSCUserId);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             (uint64 id, uint64 referrerId) = oldSC.users(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    SmartWay
Line:        232
Source: 
>             address payable user = oldSC.userList(oldSCUserId);
>             (uint64 id, uint64 referrerId) = oldSC.users(user);
>                                              ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    SmartWay
Line:        237
Source: 
>                 
>                 address ref = oldSC.userList(referrerId);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    SmartWay
Line:        247
Source: 
>                     for(uint8 j = 1; j <= 12; j++) {
>                         uint levelExpired = oldSC.viewUserLevelExpired(user, j);
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         if (levelExpired > now) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SmartWay
Line:        267
Source: 
> 
>     function viewUserReferral(address user) public view returns(address payable[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[user].referrals;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SmartWay
Line:        271
Source: 
> 
>     function viewUserLevelExpired(address user, uint8 level) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[user].levelExpired[level];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SmartWay
Line:        231
Source: 
>         for(uint i = 0; i < limit; i++) {
>             address payable user = oldSC.userList(oldSCUserId);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             (uint64 id, uint64 referrerId) = oldSC.users(user);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SmartWay
Line:        232
Source: 
>             address payable user = oldSC.userList(oldSCUserId);
>             (uint64 id, uint64 referrerId) = oldSC.users(user);
>                                              ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SmartWay
Line:        237
Source: 
>                 
>                 address ref = oldSC.userList(referrerId);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SmartWay
Line:        247
Source: 
>                     for(uint8 j = 1; j <= 12; j++) {
>                         uint levelExpired = oldSC.viewUserLevelExpired(user, j);
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         if (levelExpired > now) {

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        19
Source: 
> //pragma solidity 0.5.13;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    SmartWay
Line:        148
Source: 
>         if(users[referrer].levelExpired[level] >= now) {
>             if (referrer.send(levelPrice[level])) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit GetMoneyForLevel(referrer, msg.sender, level);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SmartWay
Line:        148
Source: 
>         if(users[referrer].levelExpired[level] >= now) {
>             if (referrer.send(levelPrice[level])) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit GetMoneyForLevel(referrer, msg.sender, level);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartWay
Line:        148
Source: 
>         if(users[referrer].levelExpired[level] >= now) {
>             if (referrer.send(levelPrice[level])) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit GetMoneyForLevel(referrer, msg.sender, level);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SmartWay
Line:        231
Source: 
>         for(uint i = 0; i < limit; i++) {
>             address payable user = oldSC.userList(oldSCUserId);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             (uint64 id, uint64 referrerId) = oldSC.users(user);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SmartWay
Line:        232
Source: 
>             address payable user = oldSC.userList(oldSCUserId);
>             (uint64 id, uint64 referrerId) = oldSC.users(user);
>                                              ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SmartWay
Line:        237
Source: 
>                 
>                 address ref = oldSC.userList(referrerId);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SmartWay
Line:        247
Source: 
>                     for(uint8 j = 1; j <= 12; j++) {
>                         uint levelExpired = oldSC.viewUserLevelExpired(user, j);
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         if (levelExpired > now) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    SmartWay
Line:        148
Source: 
>         if(users[referrer].levelExpired[level] >= now) {
>             if (referrer.send(levelPrice[level])) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit GetMoneyForLevel(referrer, msg.sender, level);

[0m

---------------------------------------------
For contract 0x1a3b7917b5952eef04e7dd3c9d8a736b57fb2613.sol
Tool Runtime = 12.964686182999685 seconds
#############################################