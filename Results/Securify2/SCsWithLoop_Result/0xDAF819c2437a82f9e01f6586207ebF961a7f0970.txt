[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FeeTo
Line:        30
Source: 
> 
>     function setOwner(address owner_) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner, 'FeeTo::setOwner: not allowed');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FeeTo
Line:        35
Source: 
> 
>     function setFeeRecipient(address feeRecipient_) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner, 'FeeTo::setFeeRecipient: not allowed');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FeeTo
Line:        57
Source: 
> 
>     function updateTokenAllowStates(address[] memory tokens, bool allowed) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint i; i < tokens.length; i++) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FeeTo
Line:        63
Source: 
> 
>     function renounce(address pair) public returns (uint value) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         PairAllowState storage pairAllowState = pairAllowStates[pair];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FeeTo
Line:        98
Source: 
> 
>     function claim(address pair) public returns (uint value) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         PairAllowState storage pairAllowState = pairAllowStates[pair];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeTo
Line:        65
Source: 
>         PairAllowState storage pairAllowState = pairAllowStates[pair];
>         TokenAllowState storage token0AllowState = tokenAllowStates[IUniswapV2Pair(pair).token0()];
>                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         TokenAllowState storage token1AllowState = tokenAllowStates[IUniswapV2Pair(pair).token1()];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeTo
Line:        66
Source: 
>         TokenAllowState storage token0AllowState = tokenAllowStates[IUniswapV2Pair(pair).token0()];
>         TokenAllowState storage token1AllowState = tokenAllowStates[IUniswapV2Pair(pair).token1()];
>                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeTo
Line:        79
Source: 
>         ) {
>             value = IUniswapV2Pair(pair).balanceOf(address(this));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (value > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeTo
Line:        83
Source: 
>                 // (assert because transfer cannot fail with value as balanceOf)
>                 assert(IUniswapV2Pair(pair).transfer(pair, value));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 IUniswapV2Pair(pair).burn(pair);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeTo
Line:        84
Source: 
>                 assert(IUniswapV2Pair(pair).transfer(pair, value));
>                 IUniswapV2Pair(pair).burn(pair);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeTo
Line:        100
Source: 
>         PairAllowState storage pairAllowState = pairAllowStates[pair];
>         TokenAllowState storage token0AllowState = tokenAllowStates[IUniswapV2Pair(pair).token0()];
>                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         TokenAllowState storage token1AllowState = tokenAllowStates[IUniswapV2Pair(pair).token1()];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeTo
Line:        101
Source: 
>         TokenAllowState storage token0AllowState = tokenAllowStates[IUniswapV2Pair(pair).token0()];
>         TokenAllowState storage token1AllowState = tokenAllowStates[IUniswapV2Pair(pair).token1()];
>                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeTo
Line:        116
Source: 
>         ) {
>             value = IUniswapV2Pair(pair).balanceOf(address(this));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (value > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FeeTo
Line:        119
Source: 
>                 // transfer tokens to the handler (assert because transfer cannot fail with value as balanceOf)
>                 assert(IUniswapV2Pair(pair).transfer(feeRecipient, value));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FeeTo
Line:        30
Source: 
> 
>     function setOwner(address owner_) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner, 'FeeTo::setOwner: not allowed');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FeeTo
Line:        35
Source: 
> 
>     function setFeeRecipient(address feeRecipient_) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner, 'FeeTo::setFeeRecipient: not allowed');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FeeTo
Line:        57
Source: 
> 
>     function updateTokenAllowStates(address[] memory tokens, bool allowed) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint i; i < tokens.length; i++) {

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity ^0.5.16;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FeeTo
Line:        65
Source: 
>         PairAllowState storage pairAllowState = pairAllowStates[pair];
>         TokenAllowState storage token0AllowState = tokenAllowStates[IUniswapV2Pair(pair).token0()];
>                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         TokenAllowState storage token1AllowState = tokenAllowStates[IUniswapV2Pair(pair).token1()];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FeeTo
Line:        66
Source: 
>         TokenAllowState storage token0AllowState = tokenAllowStates[IUniswapV2Pair(pair).token0()];
>         TokenAllowState storage token1AllowState = tokenAllowStates[IUniswapV2Pair(pair).token1()];
>                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FeeTo
Line:        79
Source: 
>         ) {
>             value = IUniswapV2Pair(pair).balanceOf(address(this));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (value > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FeeTo
Line:        83
Source: 
>                 // (assert because transfer cannot fail with value as balanceOf)
>                 assert(IUniswapV2Pair(pair).transfer(pair, value));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 IUniswapV2Pair(pair).burn(pair);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FeeTo
Line:        100
Source: 
>         PairAllowState storage pairAllowState = pairAllowStates[pair];
>         TokenAllowState storage token0AllowState = tokenAllowStates[IUniswapV2Pair(pair).token0()];
>                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         TokenAllowState storage token1AllowState = tokenAllowStates[IUniswapV2Pair(pair).token1()];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FeeTo
Line:        101
Source: 
>         TokenAllowState storage token0AllowState = tokenAllowStates[IUniswapV2Pair(pair).token0()];
>         TokenAllowState storage token1AllowState = tokenAllowStates[IUniswapV2Pair(pair).token1()];
>                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FeeTo
Line:        116
Source: 
>         ) {
>             value = IUniswapV2Pair(pair).balanceOf(address(this));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (value > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FeeTo
Line:        119
Source: 
>                 // transfer tokens to the handler (assert because transfer cannot fail with value as balanceOf)
>                 assert(IUniswapV2Pair(pair).transfer(feeRecipient, value));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FeeTo
Line:        84
Source: 
>                 assert(IUniswapV2Pair(pair).transfer(pair, value));
>                 IUniswapV2Pair(pair).burn(pair);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    FeeTo
Line:        58
Source: 
>     function updateTokenAllowStates(address[] memory tokens, bool allowed) public {
>         for (uint i; i < tokens.length; i++) {
>                                         ^
>             updateTokenAllowState(tokens[i], allowed);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    FeeTo
Line:        12
Source: 
>     address public owner;
>     address public feeRecipient;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FeeTo
Line:        89
Source: 
>             if (token0AllowState.allowed) {
>                 pairAllowState.token0DisallowCount = token0AllowState.disallowCount;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FeeTo
Line:        93
Source: 
>             if (token1AllowState.allowed) {
>                 pairAllowState.token1DisallowCount = token1AllowState.disallowCount;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FeeTo
Line:        84
Source: 
>                 assert(IUniswapV2Pair(pair).transfer(pair, value));
>                 IUniswapV2Pair(pair).burn(pair);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m

---------------------------------------------
For contract 0xDAF819c2437a82f9e01f6586207ebF961a7f0970.sol
Tool Runtime = 3.374223927999992 seconds
#############################################