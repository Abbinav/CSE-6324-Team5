[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    GAMMA
Line:        11
Source: 
>     uint256 public totalSupply;
>     string public name = "âœ¨";
>      ^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol = "GAMMA";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    GAMMA
Line:        12
Source: 
>     string public name = "âœ¨";
>     string public symbol = "GAMMA";
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    GAMMA
Line:        66
Source: 
>         address owner = ownerOf[tokenId];
>         (bool success, ) = owner.call.value(msg.value)("");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "!transfer");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GAMMA
Line:        42
Source: 
>     
>     function approve(address spender, uint256 tokenId) external {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf[tokenId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GAMMA
Line:        49
Source: 
>     
>     function mint(uint256 ethPrice, string calldata _tokenURI, bool forSale) external { 
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balanceOf[msg.sender]++;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GAMMA
Line:        71
Source: 
>     
>     function setApprovalForAll(address operator, bool approved) external {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isApprovedForAll[msg.sender][operator] = approved;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GAMMA
Line:        85
Source: 
>     
>     function transfer(address to, uint256 tokenId) external {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerOf[tokenId], "!owner");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GAMMA
Line:        98
Source: 
>     
>     function transferFrom(address from, address to, uint256 tokenId) external {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf[tokenId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GAMMA
Line:        104
Source: 
>     
>     function updateSale(uint256 ethPrice, uint256 tokenId, bool forSale) external {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerOf[tokenId], "!owner");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GAMMA
Line:        66
Source: 
>         address owner = ownerOf[tokenId];
>         (bool success, ) = owner.call.value(msg.value)("");
>             ^^^^^^^^^^^^
>         require(success, "!transfer");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity 0.5.17;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    GAMMA
Line:        66
Source: 
>         address owner = ownerOf[tokenId];
>         (bool success, ) = owner.call.value(msg.value)("");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "!transfer");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    GAMMA
Line:        66
Source: 
>         address owner = ownerOf[tokenId];
>         (bool success, ) = owner.call.value(msg.value)("");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "!transfer");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    GAMMA
Line:        66
Source: 
>         address owner = ownerOf[tokenId];
>         (bool success, ) = owner.call.value(msg.value)("");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "!transfer");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GAMMA
Line:        78
Source: 
>         balanceOf[from]--; 
>         balanceOf[to]++; 
>            ^^^^^^^^^^^^^^
>         getApproved[tokenId] = address(0);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        51
Source: 
>         balanceOf[msg.sender]++;
>         totalSupply++;
>            ^^^^^^^^^^^
>         require(totalSupply <= GAMMA_MAX, "maxed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        54
Source: 
>         uint256 tokenId = totalSupply;
>         ownerOf[tokenId] = msg.sender;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sale[tokenId].ethPrice = ethPrice;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        55
Source: 
>         ownerOf[tokenId] = msg.sender;
>         sale[tokenId].ethPrice = ethPrice;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sale[tokenId].forSale = forSale;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        56
Source: 
>         sale[tokenId].ethPrice = ethPrice;
>         sale[tokenId].forSale = forSale;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenURI[tokenId] = _tokenURI;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        57
Source: 
>         sale[tokenId].forSale = forSale;
>         tokenURI[tokenId] = _tokenURI;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), msg.sender, tokenId); 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        77
Source: 
>     function _transfer(address from, address to, uint256 tokenId) internal {
>         balanceOf[from]--; 
>            ^^^^^^^^^^^^^^^^
>         balanceOf[to]++; 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        79
Source: 
>         balanceOf[to]++; 
>         getApproved[tokenId] = address(0);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ownerOf[tokenId] = to;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        80
Source: 
>         getApproved[tokenId] = address(0);
>         ownerOf[tokenId] = to;
>            ^^^^^^^^^^^^^^^^^^^
>         sale[tokenId].forSale = false;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        81
Source: 
>         ownerOf[tokenId] = to;
>         sale[tokenId].forSale = false;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(from, to, tokenId); 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GAMMA
Line:        72
Source: 
>     function setApprovalForAll(address operator, bool approved) external {
>         isApprovedForAll[msg.sender][operator] = approved;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ApprovalForAll(msg.sender, operator, approved);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    GAMMA
Line:        11
Source: 
>     uint256 public totalSupply;
>     string public name = "âœ¨";
>      ^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol = "GAMMA";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    GAMMA
Line:        12
Source: 
>     string public name = "âœ¨";
>     string public symbol = "GAMMA";
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m

---------------------------------------------
For contract 0xecb5054213ead4c5e2d3f2033b8e8afb41715ba12.sol
Tool Runtime = 3.557730721999633 seconds
#############################################