[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        79
Source: 
> 
>         if (returndata.length > 0) { // return data is optional
>                                              ^^^^^^^^^^^^^^^^^^
>             require(abi.decode(returndata, (bool)), "SafeERC20: erc20 operation did not succeed");

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    LexGuildLocker
Line:        159
Source: 
>     event Release(uint256 indexed index, uint256[] indexed milestone); 
>     event Withdraw(uint256 indexed index, uint256 indexed remainder);
>                                                       ^^^^^^^^^^^^^^^
>     event Lock(address indexed sender, uint256 indexed index, bytes32 indexed details);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    LexGuildLocker
Line:        220
Source: 
>         if (locker.token == wETH && msg.value > 0) {
>             require(msg.value == sum, "!ETH");
>                                           ^^^^
>             IWETH(wETH).deposit();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        136
Source: 
>     address public lexDAO;
>     address public wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // canonical ether token wrapper contract reference
>                                          ^^^^^^
>     uint256 public lockerCount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        137
Source: 
>     address public wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // canonical ether token wrapper contract reference
>     uint256 public lockerCount;
>      ^^^^^^^^^^
>     uint256 public MAX_DURATION; // time limit on token lockup - default 63113904 (2-year)

[0m
Traceback (most recent call last):
  File "securify/__main__.py", line 286, in <module>
    main()
  File "securify/__main__.py", line 282, in main
    exclude_contracts=args.exclude_contracts)
  File "/sec/securify/analyses/analysis.py", line 148, in print_pattern_matches
    msg = format_match(analysis_context, pattern, match, include_contracts=include_contracts, exclude_contracts=exclude_contracts)
  File "/sec/securify/analyses/analysis.py", line 211, in format_match
    "^" * min(location.length, len(src_lines[line]) - indicator_offset - 2)
IndexError: list index out of range

---------------------------------------------
For contract 0xd1400d2c740d061434fa46c9e0f818bd14147e61.sol
Tool Runtime = 10.339247892999992 seconds
#############################################