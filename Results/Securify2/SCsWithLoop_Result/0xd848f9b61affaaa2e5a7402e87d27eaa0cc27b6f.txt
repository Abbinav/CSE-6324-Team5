pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    ERC20
Line:        89
Source: 
> 
>   event Transfer(address indexed from, address indexed to, uint256 value);
>                                                                   ^^^^^^^^
>   event Approval(address indexed owner, address indexed spender, uint256 value);

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    ERC20
Line:        90
Source: 
>   event Transfer(address indexed from, address indexed to, uint256 value);
>   event Approval(address indexed owner, address indexed spender, uint256 value);
>                                                                   ^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VAPE
Line:        116
Source: 
>     function totalSupply() public view returns (uint256) {
>         return totalVape;
>          ^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VAPE
Line:        119
Source: 
> 
>     function balanceOf(address player) public view returns (uint256) {
>                                                                     ^^
>         return balances[player];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VAPE
Line:        123
Source: 
> 
>     function allowance(address player, address spender) public view returns (uint256) {
>                                                                     ^^^^^^^^^^^^^^^^^^^
>         return allowed[player][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VAPE
Line:        138
Source: 
> 
>     function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
>                                                                     ^^^^^^^^^^^^^^^^^^^^^
>         for (uint256 i = 0; i < receivers.length; i++) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VAPE
Line:        144
Source: 
>     
>     function approve(address spender, uint256 value) public returns (bool) {
>                                                                     ^^^^^^^^
>         require(spender != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VAPE
Line:        158
Source: 
> 
>     function transferFrom(address from, address to, uint256 value) public returns (bool) {
>                                                                     ^^^^^^^^^^^^^^^^^^^^^^
>         require(value <= balances[from]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VAPE
Line:        138
Source: 
> 
>     function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
>                                                                     ^^^^^^^^^^^^^^^^^^^^^
>         for (uint256 i = 0; i < receivers.length; i++) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VAPE
Line:        173
Source: 
>     function updateGovernance(address newGovernance) external {
>         require(msg.sender == currentGovernance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         currentGovernance = newGovernance;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VAPE
Line:        178
Source: 
>     function mint(uint256 amount, address recipient) external {
>         require(msg.sender == currentGovernance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[recipient] = balances[recipient].add(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VAPE
Line:        119
Source: 
> 
>     function balanceOf(address player) public view returns (uint256) {
>                                                                     ^^
>         return balances[player];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VAPE
Line:        123
Source: 
> 
>     function allowance(address player, address spender) public view returns (uint256) {
>                                                                     ^^^^^^^^^^^^^^^^^^^
>         return allowed[player][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VAPE
Line:        144
Source: 
>     
>     function approve(address spender, uint256 value) public returns (bool) {
>                                                                     ^^^^^^^^
>         require(spender != address(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VAPE
Line:        151
Source: 
> 
>     function approveAndCall(address spender, uint256 tokens, bytes calldata data) external returns (bool) {
>                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][spender] = tokens;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VAPE
Line:        103
Source: 
>     string public constant name  = "aesthetics.finance";
>     string public constant symbol = "VAPE";
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VAPE
Line:        104
Source: 
>     string public constant symbol = "VAPE";
>     uint8 public constant decimals = 18;
>                         ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VAPE
Line:        106
Source: 
> 
>     uint256 totalVape = 4200000 * (10 ** 18);
>                           ^^^^^^^^^^^^^^^^^^^
>     address public currentGovernance;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    VAPE
Line:        104
Source: 
>     string public constant symbol = "VAPE";
>     uint8 public constant decimals = 18;
>                         ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    VAPE
Line:        106
Source: 
> 
>     uint256 totalVape = 4200000 * (10 ** 18);
>                           ^^^^^^^^^^^^^^^^^^^
>     address public currentGovernance;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    VAPE
Line:        107
Source: 
>     uint256 totalVape = 4200000 * (10 ** 18);
>     address public currentGovernance;
>                       ^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    VAPE
Line:        109
Source: 
>     
>     constructor() public {
>                          ^
>         balances[msg.sender] = totalVape;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    VAPE
Line:        108
Source: 
>     address public currentGovernance;
>     
>     
>     constructor() public {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VAPE
Line:        154
Source: 
>         emit Approval(msg.sender, spender, tokens);
>         ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
>                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    VAPE
Line:        147
Source: 
>         allowed[msg.sender][spender] = value;
>         emit Approval(msg.sender, spender, value);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    VAPE
Line:        153
Source: 
>         allowed[msg.sender][spender] = tokens;
>         emit Approval(msg.sender, spender, tokens);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);

[0m
Traceback (most recent call last):
  File "securify/__main__.py", line 286, in <module>
    main()
  File "securify/__main__.py", line 282, in main
    exclude_contracts=args.exclude_contracts)
  File "/sec/securify/analyses/analysis.py", line 148, in print_pattern_matches
    msg = format_match(analysis_context, pattern, match, include_contracts=include_contracts, exclude_contracts=exclude_contracts)
  File "/sec/securify/analyses/analysis.py", line 211, in format_match
    "^" * min(location.length, len(src_lines[line]) - indicator_offset - 2)
IndexError: list index out of range

---------------------------------------------
For contract 0xd848f9b61affaaa2e5a7402e87d27eaa0cc27b6f.sol
Tool Runtime = 4.4779623260001244 seconds
#############################################