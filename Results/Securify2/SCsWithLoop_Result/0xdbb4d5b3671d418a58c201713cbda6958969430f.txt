[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    InfiniteEthereum
Line:        24
Source: 
>     
>     uint public DOWNLINE_LIMIT = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool public lockStatus;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InfiniteEthereum
Line:        64
Source: 
>     
>     function poolRegistration(uint _referrerID) public payable returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(lockStatus == false, "Contract Locked");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InfiniteEthereum
Line:        106
Source: 
>     
>     function buyPool(uint _pool, uint _referrerID) public payable returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(lockStatus == false, "Contract Locked");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InfiniteEthereum
Line:        152
Source: 
>     
>     function findFreeReferrer(uint _userID, uint8 _pool, uint _reInvestCount) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         while (true) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InfiniteEthereum
Line:        163
Source: 
>     
>     function failSafe(address payable _toUser, uint _amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerWallet, "only Owner Wallet");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InfiniteEthereum
Line:        172
Source: 
>     
>     function updatePrice(uint _pool, uint _price) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerWallet, "only OwnerWallet");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InfiniteEthereum
Line:        179
Source: 
>     
>     function contractLock(bool _lockStatus) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerWallet, "Invalid User");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InfiniteEthereum
Line:        186
Source: 
>     
>     function userPool(uint _userID, uint8 _pool) public view returns(uint, uint, uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (poolusers[_userID].pool[_pool].currentID,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InfiniteEthereum
Line:        193
Source: 
>     
>     function viewUserReferral(uint _pool, uint _userID) public view returns(uint[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return poolusers[_userID].pool[_pool].referrals;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    InfiniteEthereum
Line:        179
Source: 
>     
>     function contractLock(bool _lockStatus) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerWallet, "Invalid User");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InfiniteEthereum
Line:        172
Source: 
>     
>     function updatePrice(uint _pool, uint _price) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerWallet, "only OwnerWallet");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InfiniteEthereum
Line:        186
Source: 
>     
>     function userPool(uint _userID, uint8 _pool) public view returns(uint, uint, uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (poolusers[_userID].pool[_pool].currentID,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InfiniteEthereum
Line:        193
Source: 
>     
>     function viewUserReferral(uint _pool, uint _userID) public view returns(uint[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return poolusers[_userID].pool[_pool].referrals;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    InfiniteEthereum
Line:        24
Source: 
>     
>     uint public DOWNLINE_LIMIT = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool public lockStatus;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    InfiniteEthereum
Line:        29
Source: 
>     mapping (uint => mapping(uint => address)) public poolList;
>     mapping (uint => uint) public PoolcurrentID;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity 0.5.16;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    InfiniteEthereum
Line:        93
Source: 
>             
>             require(address(uint160(ownerWallet)).send(amount) && address(uint160(poolList[1][_referrerID])).send(amount), "Owner wallet and referer transfer failed");  
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    InfiniteEthereum
Line:        93
Source: 
>             
>             require(address(uint160(ownerWallet)).send(amount) && address(uint160(poolList[1][_referrerID])).send(amount), "Owner wallet and referer transfer failed");  
>                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    InfiniteEthereum
Line:        147
Source: 
>         
>         require(address(uint160(referrer)).send(poolPrice[_pool]), "Transfer Failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    InfiniteEthereum
Line:        93
Source: 
>             
>             require(address(uint160(ownerWallet)).send(amount) && address(uint160(poolList[1][_referrerID])).send(amount), "Owner wallet and referer transfer failed");  
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    InfiniteEthereum
Line:        93
Source: 
>             
>             require(address(uint160(ownerWallet)).send(amount) && address(uint160(poolList[1][_referrerID])).send(amount), "Owner wallet and referer transfer failed");  
>                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    InfiniteEthereum
Line:        147
Source: 
>         
>         require(address(uint160(referrer)).send(poolPrice[_pool]), "Transfer Failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    InfiniteEthereum
Line:        93
Source: 
>             
>             require(address(uint160(ownerWallet)).send(amount) && address(uint160(poolList[1][_referrerID])).send(amount), "Owner wallet and referer transfer failed");  
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    InfiniteEthereum
Line:        93
Source: 
>             
>             require(address(uint160(ownerWallet)).send(amount) && address(uint160(poolList[1][_referrerID])).send(amount), "Owner wallet and referer transfer failed");  
>                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    InfiniteEthereum
Line:        147
Source: 
>         
>         require(address(uint160(referrer)).send(poolPrice[_pool]), "Transfer Failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    InfiniteEthereum
Line:        168
Source: 
> 
>         (_toUser).transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    InfiniteEthereum
Line:        25
Source: 
>     uint public DOWNLINE_LIMIT = 5;
>     bool public lockStatus;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     

[0m

---------------------------------------------
For contract 0xdbb4d5b3671d418a58c201713cbda6958969430f.sol
Tool Runtime = 5.551869780000288 seconds
#############################################