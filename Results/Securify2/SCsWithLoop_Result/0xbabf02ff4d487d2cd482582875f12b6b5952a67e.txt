[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        22
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, 'SafeMath: multiplication overflow');
>                 ^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        22
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, 'SafeMath: multiplication overflow');
>                           ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        56
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        82
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        91
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        56
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        82
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        91
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Managerable
Line:        125
Source: 
>      */
>     function setManager(address managerAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Managerable
Line:        135
Source: 
>      */
>     function getManager()public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _managerAddress;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        56
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        82
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        91
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Halt
Line:        162
Source: 
>     /// @notice contribution period to stop or not.
>     function setHalt(bool halt)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        56
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        82
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        91
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Halt
Line:        162
Source: 
>     /// @notice contribution period to stop or not.
>     function setHalt(bool halt)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressWhiteList
Line:        340
Source: 
>      */
>     function addWhiteList(address addAddress)public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         whiteList.addWhiteListAddress(addAddress);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressWhiteList
Line:        344
Source: 
>     }
>     function modifyPermission(address addAddress,uint256 permission)public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         addressPermission[addAddress] = permission;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressWhiteList
Line:        351
Source: 
>      */
>     function removeWhiteList(address removeAddress)public onlyOwner returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         addressPermission[removeAddress] = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressWhiteList
Line:        358
Source: 
>      */
>     function getWhiteList()public view returns (address[] memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return whiteList;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressWhiteList
Line:        368
Source: 
>     }
>     function checkAddressPermission(address tmpAddress,uint256 state) public view returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return  (addressPermission[tmpAddress]&state) == state;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        56
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        82
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        91
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Managerable
Line:        125
Source: 
>      */
>     function setManager(address managerAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Managerable
Line:        135
Source: 
>      */
>     function getManager()public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _managerAddress;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Halt
Line:        162
Source: 
>     /// @notice contribution period to stop or not.
>     function setHalt(bool halt)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressWhiteList
Line:        340
Source: 
>      */
>     function addWhiteList(address addAddress)public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         whiteList.addWhiteListAddress(addAddress);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressWhiteList
Line:        344
Source: 
>     }
>     function modifyPermission(address addAddress,uint256 permission)public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         addressPermission[addAddress] = permission;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressWhiteList
Line:        351
Source: 
>      */
>     function removeWhiteList(address removeAddress)public onlyOwner returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         addressPermission[removeAddress] = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressWhiteList
Line:        358
Source: 
>      */
>     function getWhiteList()public view returns (address[] memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return whiteList;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressWhiteList
Line:        368
Source: 
>     }
>     function checkAddressPermission(address tmpAddress,uint256 state) public view returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return  (addressPermission[tmpAddress]&state) == state;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        56
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        82
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        91
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Managerable
Line:        125
Source: 
>      */
>     function setManager(address managerAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Halt
Line:        162
Source: 
>     /// @notice contribution period to stop or not.
>     function setHalt(bool halt)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressWhiteList
Line:        344
Source: 
>     }
>     function modifyPermission(address addAddress,uint256 permission)public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         addressPermission[addAddress] = permission;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressWhiteList
Line:        351
Source: 
>      */
>     function removeWhiteList(address removeAddress)public onlyOwner returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         addressPermission[removeAddress] = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressWhiteList
Line:        358
Source: 
>      */
>     function getWhiteList()public view returns (address[] memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return whiteList;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressWhiteList
Line:        368
Source: 
>     }
>     function checkAddressPermission(address tmpAddress,uint256 state) public view returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return  (addressPermission[tmpAddress]&state) == state;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FNXMinePool
Line:        558
Source: 
>     }
>     function update() onlyOwner public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FNXMinePool
Line:        571
Source: 
>      */
>     function redeemOut(address mineCoin,uint256 amount)public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (mineCoin == address(0)){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FNXMinePool
Line:        586
Source: 
>      */
>     function getTotalMined(address mineCoin)public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _totalSupply = totalSupply();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FNXMinePool
Line:        601
Source: 
>      */
>     function getMineInfo(address mineCoin)public view returns(uint256,uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (mineAmount[mineCoin],mineInterval[mineCoin]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FNXMinePool
Line:        609
Source: 
>      */
>     function getMinerBalance(address account,address mineCoin)public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 totalBalance = minerBalances[mineCoin][account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FNXMinePool
Line:        625
Source: 
>      */
>     function setMineCoinInfo(address mineCoin,uint256 _mineAmount,uint256 _mineInterval)public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_mineAmount<1e30,"input mine amount is too large");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FNXMinePool
Line:        638
Source: 
>      */
>     function setBuyingMineInfo(address mineCoin,uint256 _mineAmount)public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_mineAmount<1e30,"input mine amount is too large");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FNXMinePool
Line:        647
Source: 
>      */
>     function getBuyingMineInfo(address mineCoin)public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return buyingMineMap[mineCoin];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FNXMinePool
Line:        653
Source: 
>      */
>     function getBuyingMineInfoAll()public view returns(address[] memory,uint256[] memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 len = whiteList.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FNXMinePool
Line:        669
Source: 
>      */
>     function transferMinerCoin(address account,address recieptor,uint256 amount) public onlyManager {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mineSettlementAll();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FNXMinePool
Line:        678
Source: 
>      */
>     function mintMinerCoin(address account,uint256 amount) public onlyManager {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mineSettlementAll();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FNXMinePool
Line:        688
Source: 
>      */
>     function burnMinerCoin(address account,uint256 amount) public onlyManager {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mineSettlementAll();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FNXMinePool
Line:        698
Source: 
>      */
>     function addMinerBalance(address account,uint256 amount) public onlyManager {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 len = whiteList.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FNXMinePool
Line:        716
Source: 
>      */
>     function setMineAmount(address mineCoin,uint256 _mineAmount)public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_mineAmount<1e30,"input mine amount is too large");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FNXMinePool
Line:        726
Source: 
>      */
>     function setMineInterval(address mineCoin,uint256 _mineInterval)public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_mineInterval>0,"input mine Interval must larger than zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FNXMinePool
Line:        736
Source: 
>      */
>     function redeemMinerCoin(address mineCoin,uint256 amount)public nonReentrant notHalted {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mineSettlement(mineCoin);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FNXMinePool
Line:        573
Source: 
>         if (mineCoin == address(0)){
>             msg.sender.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FNXMinePool
Line:        576
Source: 
>             IERC20 token = IERC20(mineCoin);
>             uint256 preBalance = token.balanceOf(address(this));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             token.transfer(msg.sender,amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FNXMinePool
Line:        577
Source: 
>             uint256 preBalance = token.balanceOf(address(this));
>             token.transfer(msg.sender,amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 afterBalance = token.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FNXMinePool
Line:        578
Source: 
>             token.transfer(msg.sender,amount);
>             uint256 afterBalance = token.balanceOf(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(preBalance - afterBalance == amount,"settlement token transfer error!");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FNXMinePool
Line:        914
Source: 
>         IERC20 _FPTCoin = IERC20(getManager());
>         return _FPTCoin.totalSupply();
>                ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FNXMinePool
Line:        921
Source: 
>         IERC20 _FPTCoin = IERC20(getManager());
>         return _FPTCoin.balanceOf(account);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FNXMinePool
Line:        756
Source: 
>         if (mineCoin == address(0)){
>             recieptor.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FNXMinePool
Line:        759
Source: 
>             IERC20 minerToken = IERC20(mineCoin);
>             uint256 preBalance = minerToken.balanceOf(address(this));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             minerToken.transfer(recieptor,amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FNXMinePool
Line:        760
Source: 
>             uint256 preBalance = minerToken.balanceOf(address(this));
>             minerToken.transfer(recieptor,amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 afterBalance = minerToken.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FNXMinePool
Line:        761
Source: 
>             minerToken.transfer(recieptor,amount);
>             uint256 afterBalance = minerToken.balanceOf(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(preBalance - afterBalance == amount,"settlement token transfer error!");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        91
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AddressWhiteList
Line:        351
Source: 
>      */
>     function removeWhiteList(address removeAddress)public onlyOwner returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         addressPermission[removeAddress] = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AddressWhiteList
Line:        365
Source: 
>      */
>     function isEligibleAddress(address tmpAddress) public view returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return whiteList.isEligibleAddress(tmpAddress);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        91
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AddressWhiteList
Line:        351
Source: 
>      */
>     function removeWhiteList(address removeAddress)public onlyOwner returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         addressPermission[removeAddress] = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AddressWhiteList
Line:        365
Source: 
>      */
>     function isEligibleAddress(address tmpAddress) public view returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return whiteList.isEligibleAddress(tmpAddress);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        91
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Managerable
Line:        125
Source: 
>      */
>     function setManager(address managerAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Halt
Line:        162
Source: 
>     /// @notice contribution period to stop or not.
>     function setHalt(bool halt)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AddressWhiteList
Line:        351
Source: 
>      */
>     function removeWhiteList(address removeAddress)public onlyOwner returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         addressPermission[removeAddress] = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AddressWhiteList
Line:        365
Source: 
>      */
>     function isEligibleAddress(address tmpAddress) public view returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return whiteList.isEligibleAddress(tmpAddress);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FNXMinePool
Line:        571
Source: 
>      */
>     function redeemOut(address mineCoin,uint256 amount)public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (mineCoin == address(0)){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FNXMinePool
Line:        609
Source: 
>      */
>     function getMinerBalance(address account,address mineCoin)public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 totalBalance = minerBalances[mineCoin][account];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FNXMinePool
Line:        625
Source: 
>      */
>     function setMineCoinInfo(address mineCoin,uint256 _mineAmount,uint256 _mineInterval)public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_mineAmount<1e30,"input mine amount is too large");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FNXMinePool
Line:        716
Source: 
>      */
>     function setMineAmount(address mineCoin,uint256 _mineAmount)public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_mineAmount<1e30,"input mine amount is too large");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FNXMinePool
Line:        726
Source: 
>      */
>     function setMineInterval(address mineCoin,uint256 _mineInterval)public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_mineInterval>0,"input mine Interval must larger than zero");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Managerable
Line:        125
Source: 
>      */
>     function setManager(address managerAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Halt
Line:        162
Source: 
>     /// @notice contribution period to stop or not.
>     function setHalt(bool halt)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressWhiteList
Line:        340
Source: 
>      */
>     function addWhiteList(address addAddress)public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         whiteList.addWhiteListAddress(addAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressWhiteList
Line:        344
Source: 
>     }
>     function modifyPermission(address addAddress,uint256 permission)public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         addressPermission[addAddress] = permission;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressWhiteList
Line:        368
Source: 
>     }
>     function checkAddressPermission(address tmpAddress,uint256 state) public view returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return  (addressPermission[tmpAddress]&state) == state;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Managerable
Line:        125
Source: 
>      */
>     function setManager(address managerAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Halt
Line:        162
Source: 
>     /// @notice contribution period to stop or not.
>     function setHalt(bool halt)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressWhiteList
Line:        340
Source: 
>      */
>     function addWhiteList(address addAddress)public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         whiteList.addWhiteListAddress(addAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressWhiteList
Line:        344
Source: 
>     }
>     function modifyPermission(address addAddress,uint256 permission)public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         addressPermission[addAddress] = permission;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressWhiteList
Line:        368
Source: 
>     }
>     function checkAddressPermission(address tmpAddress,uint256 state) public view returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return  (addressPermission[tmpAddress]&state) == state;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressWhiteList
Line:        340
Source: 
>      */
>     function addWhiteList(address addAddress)public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         whiteList.addWhiteListAddress(addAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressWhiteList
Line:        344
Source: 
>     }
>     function modifyPermission(address addAddress,uint256 permission)public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         addressPermission[addAddress] = permission;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressWhiteList
Line:        368
Source: 
>     }
>     function checkAddressPermission(address tmpAddress,uint256 state) public view returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return  (addressPermission[tmpAddress]&state) == state;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FNXMinePool
Line:        601
Source: 
>      */
>     function getMineInfo(address mineCoin)public view returns(uint256,uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (mineAmount[mineCoin],mineInterval[mineCoin]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FNXMinePool
Line:        638
Source: 
>      */
>     function setBuyingMineInfo(address mineCoin,uint256 _mineAmount)public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_mineAmount<1e30,"input mine amount is too large");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FNXMinePool
Line:        647
Source: 
>      */
>     function getBuyingMineInfo(address mineCoin)public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return buyingMineMap[mineCoin];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FNXMinePool
Line:        669
Source: 
>      */
>     function transferMinerCoin(address account,address recieptor,uint256 amount) public onlyManager {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mineSettlementAll();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FNXMinePool
Line:        678
Source: 
>      */
>     function mintMinerCoin(address account,uint256 amount) public onlyManager {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mineSettlementAll();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FNXMinePool
Line:        688
Source: 
>      */
>     function burnMinerCoin(address account,uint256 amount) public onlyManager {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mineSettlementAll();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FNXMinePool
Line:        698
Source: 
>      */
>     function addMinerBalance(address account,uint256 amount) public onlyManager {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 len = whiteList.length;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        22
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, 'SafeMath: multiplication overflow');
>                                ^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FNXMinePool
Line:        894
Source: 
>         if (_totalSupply > 0){
>             return (totalMinedWorth[mineCoin].add(latestMined*calDecimals))/_totalSupply;
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FNXMinePool
Line:        800
Source: 
>             uint256 mintTime = (now-latestSettleTime[mineCoin])/_mineInterval;
>             uint256 latestMined = _mineAmount*mintTime;
>                                   ^^^^^^^^^^^^^^^^^^^^
>             return latestMined;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FNXMinePool
Line:        786
Source: 
>         if (_mineInterval>0){
>             latestSettleTime[mineCoin] = now/_mineInterval*_mineInterval;
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FNXMinePool
Line:        576
Source: 
>             IERC20 token = IERC20(mineCoin);
>             uint256 preBalance = token.balanceOf(address(this));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             token.transfer(msg.sender,amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FNXMinePool
Line:        578
Source: 
>             token.transfer(msg.sender,amount);
>             uint256 afterBalance = token.balanceOf(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(preBalance - afterBalance == amount,"settlement token transfer error!");

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FNXMinePool
Line:        759
Source: 
>             IERC20 minerToken = IERC20(mineCoin);
>             uint256 preBalance = minerToken.balanceOf(address(this));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             minerToken.transfer(recieptor,amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FNXMinePool
Line:        761
Source: 
>             minerToken.transfer(recieptor,amount);
>             uint256 afterBalance = minerToken.balanceOf(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(preBalance - afterBalance == amount,"settlement token transfer error!");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    whiteListUint32
Line:        177
Source: 
>      */
> library whiteListUint32 {
> ^^^^^^^^^^^^^^^^^^^^^^^^^
>     /**

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    whiteListUint256
Line:        229
Source: 
>      */
> library whiteListUint256 {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // add whiteList

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    whiteListAddress
Line:        273
Source: 
>      */
> library whiteListAddress {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // add whiteList

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressWhiteList
Line:        327
Source: 
>     using whiteListAddress for address[];
>     uint256 constant internal allPermission = 0xffffffff;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal allowBuyOptions = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressWhiteList
Line:        328
Source: 
>     uint256 constant internal allPermission = 0xffffffff;
>     uint256 constant internal allowBuyOptions = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal allowSellOptions = 1<<1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressWhiteList
Line:        329
Source: 
>     uint256 constant internal allowBuyOptions = 1;
>     uint256 constant internal allowSellOptions = 1<<1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal allowExerciseOptions = 1<<2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressWhiteList
Line:        330
Source: 
>     uint256 constant internal allowSellOptions = 1<<1;
>     uint256 constant internal allowExerciseOptions = 1<<2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal allowAddCollateral = 1<<3;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressWhiteList
Line:        331
Source: 
>     uint256 constant internal allowExerciseOptions = 1<<2;
>     uint256 constant internal allowAddCollateral = 1<<3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal allowRedeemCollateral = 1<<4;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressWhiteList
Line:        332
Source: 
>     uint256 constant internal allowAddCollateral = 1<<3;
>     uint256 constant internal allowRedeemCollateral = 1<<4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // The eligible adress list

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinePoolData
Line:        414
Source: 
>     //Special decimals for calculation
>     uint256 constant calDecimals = 1e18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // miner's balance

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinePoolData
Line:        435
Source: 
>     // user's Opterator indicator
>     uint256 constant internal opBurnCoin = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal opMintCoin = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinePoolData
Line:        436
Source: 
>     uint256 constant internal opBurnCoin = 1;
>     uint256 constant internal opMintCoin = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal opTransferCoin = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinePoolData
Line:        437
Source: 
>     uint256 constant internal opMintCoin = 2;
>     uint256 constant internal opTransferCoin = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     /**

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FNXMinePool
Line:        587
Source: 
>     function getTotalMined(address mineCoin)public view returns(uint256){
>         uint256 _totalSupply = totalSupply();
>         ^^^^^^^^^^^^^^^^^^^^
>         uint256 _mineInterval = mineInterval[mineCoin];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FNXMinePool
Line:        588
Source: 
>         uint256 _totalSupply = totalSupply();
>         uint256 _mineInterval = mineInterval[mineCoin];
>         ^^^^^^^^^^^^^^^^^^^^^
>         if (_totalSupply > 0 && _mineInterval>0){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FNXMinePool
Line:        590
Source: 
>         if (_totalSupply > 0 && _mineInterval>0){
>             uint256 _mineAmount = mineAmount[mineCoin];
>             ^^^^^^^^^^^^^^^^^^^
>             uint256 latestMined = _mineAmount.mul(now-latestSettleTime[mineCoin])/_mineInterval;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FNXMinePool
Line:        611
Source: 
>         uint256 totalBalance = minerBalances[mineCoin][account];
>         uint256 _totalSupply = totalSupply();
>         ^^^^^^^^^^^^^^^^^^^^
>         uint256 balance = balanceOf(account);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FNXMinePool
Line:        704
Source: 
>             if (mineNum > 0){
>                 uint256 _mineAmount = mineNum*amount/calDecimals;
>                 ^^^^^^^^^^^^^^^^^^^
>                 minerBalances[addr][account] = minerBalances[addr][account].add(_mineAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FNXMinePool
Line:        780
Source: 
>         uint256 latestMined = _getLatestMined(mineCoin);
>         uint256 _mineInterval = mineInterval[mineCoin];
>         ^^^^^^^^^^^^^^^^^^^^^
>         if (latestMined>0){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FNXMinePool
Line:        795
Source: 
>     function _getLatestMined(address mineCoin)internal view returns(uint256){
>         uint256 _mineInterval = mineInterval[mineCoin];
>         ^^^^^^^^^^^^^^^^^^^^^
>         uint256 _totalSupply = totalSupply();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FNXMinePool
Line:        796
Source: 
>         uint256 _mineInterval = mineInterval[mineCoin];
>         uint256 _totalSupply = totalSupply();
>         ^^^^^^^^^^^^^^^^^^^^
>         if (_totalSupply > 0 && _mineInterval>0){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FNXMinePool
Line:        798
Source: 
>         if (_totalSupply > 0 && _mineInterval>0){
>             uint256 _mineAmount = mineAmount[mineCoin];
>             ^^^^^^^^^^^^^^^^^^^
>             uint256 mintTime = (now-latestSettleTime[mineCoin])/_mineInterval;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FNXMinePool
Line:        857
Source: 
>     function settleMinerBalance(address mineCoin,address account,address recipient,uint256 amount,uint256 operators)internal{
>         uint256 _totalSupply = totalSupply();
>         ^^^^^^^^^^^^^^^^^^^^
>         uint256 tokenNetWorth = _getTokenNetWorth(mineCoin);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FNXMinePool
Line:        892
Source: 
>         uint256 latestMined = _getLatestMined(mineCoin);
>         uint256 _totalSupply = totalSupply();
>         ^^^^^^^^^^^^^^^^^^^^
>         if (_totalSupply > 0){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FNXMinePool
Line:        903
Source: 
>     function _getTokenNetWorth(address mineCoin)internal view returns (uint256) {
>         uint256 _totalSupply = totalSupply();
>         ^^^^^^^^^^^^^^^^^^^^
>         if (_totalSupply > 0){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FNXMinePool
Line:        913
Source: 
>     function totalSupply()internal view returns(uint256){
>         IERC20 _FPTCoin = IERC20(getManager());
>         ^^^^^^^^^^^^^^^
>         return _FPTCoin.totalSupply();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FNXMinePool
Line:        920
Source: 
>     function balanceOf(address account)internal view returns(uint256){
>         IERC20 _FPTCoin = IERC20(getManager());
>         ^^^^^^^^^^^^^^^
>         return _FPTCoin.balanceOf(account);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        8
Source: 
> //pragma solidity =0.5.16;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        29
Source: 
> //pragma solidity =0.5.16;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        108
Source: 
> //pragma solidity =0.5.16;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        143
Source: 
> //pragma solidity =0.5.16;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        173
Source: 
> //pragma solidity =0.5.16;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     /**

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        318
Source: 
> //pragma solidity =0.5.16;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        376
Source: 
> //pragma solidity =0.5.16;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> contract ReentrancyGuard {

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        403
Source: 
> //pragma solidity =0.5.16;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        463
Source: 
> //pragma solidity =0.5.16;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> /**

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        542
Source: 
> //pragma solidity =0.5.16;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MinePoolData
Line:        414
Source: 
>     //Special decimals for calculation
>     uint256 constant calDecimals = 1e18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // miner's balance

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    FNXMinePool
Line:        573
Source: 
>         if (mineCoin == address(0)){
>             msg.sender.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    FNXMinePool
Line:        756
Source: 
>         if (mineCoin == address(0)){
>             recieptor.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    FNXMinePool
Line:        573
Source: 
>         if (mineCoin == address(0)){
>             msg.sender.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    FNXMinePool
Line:        756
Source: 
>         if (mineCoin == address(0)){
>             recieptor.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FNXMinePool
Line:        573
Source: 
>         if (mineCoin == address(0)){
>             msg.sender.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FNXMinePool
Line:        756
Source: 
>         if (mineCoin == address(0)){
>             recieptor.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FNXMinePool
Line:        576
Source: 
>             IERC20 token = IERC20(mineCoin);
>             uint256 preBalance = token.balanceOf(address(this));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             token.transfer(msg.sender,amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FNXMinePool
Line:        578
Source: 
>             token.transfer(msg.sender,amount);
>             uint256 afterBalance = token.balanceOf(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(preBalance - afterBalance == amount,"settlement token transfer error!");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FNXMinePool
Line:        914
Source: 
>         IERC20 _FPTCoin = IERC20(getManager());
>         return _FPTCoin.totalSupply();
>                ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FNXMinePool
Line:        921
Source: 
>         IERC20 _FPTCoin = IERC20(getManager());
>         return _FPTCoin.balanceOf(account);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FNXMinePool
Line:        759
Source: 
>             IERC20 minerToken = IERC20(mineCoin);
>             uint256 preBalance = minerToken.balanceOf(address(this));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             minerToken.transfer(recieptor,amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FNXMinePool
Line:        761
Source: 
>             minerToken.transfer(recieptor,amount);
>             uint256 afterBalance = minerToken.balanceOf(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(preBalance - afterBalance == amount,"settlement token transfer error!");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FNXMinePool
Line:        577
Source: 
>             uint256 preBalance = token.balanceOf(address(this));
>             token.transfer(msg.sender,amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 afterBalance = token.balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FNXMinePool
Line:        760
Source: 
>             uint256 preBalance = minerToken.balanceOf(address(this));
>             minerToken.transfer(recieptor,amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 afterBalance = minerToken.balanceOf(address(this));

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeMath
Line:        14
Source: 
>     function add(uint x, uint y) internal pure returns (uint z) {
>         require((z = x + y) >= x, 'SafeMath: addition overflow');
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeMath
Line:        18
Source: 
>     function sub(uint x, uint y) internal pure returns (uint z) {
>         require((z = x - y) <= x, 'SafeMath: substraction underflow');
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeMath
Line:        22
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, 'SafeMath: multiplication overflow');
>                            ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Managerable
Line:        112
Source: 
> 
>     address private _managerAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     /**

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FNXMinePool
Line:        782
Source: 
>         if (latestMined>0){
>             totalMinedWorth[mineCoin] = totalMinedWorth[mineCoin].add(latestMined.mul(calDecimals));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalMinedCoin[mineCoin] = totalMinedCoin[mineCoin]+latestMined;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FNXMinePool
Line:        783
Source: 
>             totalMinedWorth[mineCoin] = totalMinedWorth[mineCoin].add(latestMined.mul(calDecimals));
>             totalMinedCoin[mineCoin] = totalMinedCoin[mineCoin]+latestMined;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FNXMinePool
Line:        786
Source: 
>         if (_mineInterval>0){
>             latestSettleTime[mineCoin] = now/_mineInterval*_mineInterval;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FNXMinePool
Line:        788
Source: 
>         }else{
>             latestSettleTime[mineCoin] = now;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FNXMinePool
Line:        860
Source: 
>         if (_totalSupply > 0){
>             minerBalances[mineCoin][account] = minerBalances[mineCoin][account].add(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     _settlement(mineCoin,account,balanceOf(account),tokenNetWorth));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FNXMinePool
Line:        863
Source: 
>             if (operators == opBurnCoin){
>                 totalMinedWorth[mineCoin] = totalMinedWorth[mineCoin].sub(tokenNetWorth.mul(amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else if (operators==opMintCoin){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FNXMinePool
Line:        872
Source: 
>         }
>         minerOrigins[mineCoin][account] = tokenNetWorth;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FNXMinePool
Line:        865
Source: 
>             }else if (operators==opMintCoin){
>                 totalMinedWorth[mineCoin] = totalMinedWorth[mineCoin].add(tokenNetWorth.mul(amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else if (operators==opTransferCoin){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FNXMinePool
Line:        867
Source: 
>             }else if (operators==opTransferCoin){
>                 minerBalances[mineCoin][recipient] = minerBalances[mineCoin][recipient].add(
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     _settlement(mineCoin,recipient,balanceOf(recipient),tokenNetWorth));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FNXMinePool
Line:        869
Source: 
>                     _settlement(mineCoin,recipient,balanceOf(recipient),tokenNetWorth));
>                 minerOrigins[mineCoin][recipient] = tokenNetWorth;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        393
Source: 
>     require(!reentrancyLock);
>     reentrancyLock = true;
>     ^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FNXMinePool
Line:        577
Source: 
>             uint256 preBalance = token.balanceOf(address(this));
>             token.transfer(msg.sender,amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 afterBalance = token.balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FNXMinePool
Line:        760
Source: 
>             uint256 preBalance = minerToken.balanceOf(address(this));
>             minerToken.transfer(recieptor,amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 afterBalance = minerToken.balanceOf(address(this));

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Halt
Line:        148
Source: 
> 
>     bool private halted = false;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressWhiteList
Line:        328
Source: 
>     uint256 constant internal allPermission = 0xffffffff;
>     uint256 constant internal allowBuyOptions = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal allowSellOptions = 1<<1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressWhiteList
Line:        329
Source: 
>     uint256 constant internal allowBuyOptions = 1;
>     uint256 constant internal allowSellOptions = 1<<1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal allowExerciseOptions = 1<<2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressWhiteList
Line:        330
Source: 
>     uint256 constant internal allowSellOptions = 1<<1;
>     uint256 constant internal allowExerciseOptions = 1<<2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal allowAddCollateral = 1<<3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressWhiteList
Line:        331
Source: 
>     uint256 constant internal allowExerciseOptions = 1<<2;
>     uint256 constant internal allowAddCollateral = 1<<3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal allowRedeemCollateral = 1<<4;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressWhiteList
Line:        332
Source: 
>     uint256 constant internal allowAddCollateral = 1<<3;
>     uint256 constant internal allowRedeemCollateral = 1<<4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // The eligible adress list

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        382
Source: 
>    */
>   bool private reentrancyLock = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   /**

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Halt
Line:        148
Source: 
> 
>     bool private halted = false;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressWhiteList
Line:        328
Source: 
>     uint256 constant internal allPermission = 0xffffffff;
>     uint256 constant internal allowBuyOptions = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal allowSellOptions = 1<<1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressWhiteList
Line:        329
Source: 
>     uint256 constant internal allowBuyOptions = 1;
>     uint256 constant internal allowSellOptions = 1<<1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal allowExerciseOptions = 1<<2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressWhiteList
Line:        330
Source: 
>     uint256 constant internal allowSellOptions = 1<<1;
>     uint256 constant internal allowExerciseOptions = 1<<2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal allowAddCollateral = 1<<3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressWhiteList
Line:        331
Source: 
>     uint256 constant internal allowExerciseOptions = 1<<2;
>     uint256 constant internal allowAddCollateral = 1<<3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal allowRedeemCollateral = 1<<4;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressWhiteList
Line:        332
Source: 
>     uint256 constant internal allowAddCollateral = 1<<3;
>     uint256 constant internal allowRedeemCollateral = 1<<4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // The eligible adress list

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        382
Source: 
>    */
>   bool private reentrancyLock = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   /**

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinePoolData
Line:        414
Source: 
>     //Special decimals for calculation
>     uint256 constant calDecimals = 1e18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // miner's balance

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinePoolData
Line:        417
Source: 
>     // map mineCoin => user => balance
>     mapping(address=>mapping(address=>uint256)) internal minerBalances;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // miner's origins, specially used for mine distribution

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinePoolData
Line:        420
Source: 
>     // map mineCoin => user => balance
>     mapping(address=>mapping(address=>uint256)) internal minerOrigins;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinePoolData
Line:        423
Source: 
>     // mine coins total worth, specially used for mine distribution
>     mapping(address=>uint256) internal totalMinedWorth;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // total distributed mine coin amount

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinePoolData
Line:        425
Source: 
>     // total distributed mine coin amount
>     mapping(address=>uint256) internal totalMinedCoin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // latest time to settlement

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinePoolData
Line:        427
Source: 
>     // latest time to settlement
>     mapping(address=>uint256) internal latestSettleTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //distributed mine amount

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinePoolData
Line:        429
Source: 
>     //distributed mine amount
>     mapping(address=>uint256) internal mineAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //distributed time interval

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinePoolData
Line:        431
Source: 
>     //distributed time interval
>     mapping(address=>uint256) internal mineInterval;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //distributed mine coin amount for buy options user.

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinePoolData
Line:        433
Source: 
>     //distributed mine coin amount for buy options user.
>     mapping(address=>uint256) internal buyingMineMap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // user's Opterator indicator

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinePoolData
Line:        435
Source: 
>     // user's Opterator indicator
>     uint256 constant internal opBurnCoin = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal opMintCoin = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinePoolData
Line:        436
Source: 
>     uint256 constant internal opBurnCoin = 1;
>     uint256 constant internal opMintCoin = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal opTransferCoin = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MinePoolData
Line:        437
Source: 
>     uint256 constant internal opMintCoin = 2;
>     uint256 constant internal opTransferCoin = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     /**

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressWhiteList
Line:        328
Source: 
>     uint256 constant internal allPermission = 0xffffffff;
>     uint256 constant internal allowBuyOptions = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal allowSellOptions = 1<<1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressWhiteList
Line:        329
Source: 
>     uint256 constant internal allowBuyOptions = 1;
>     uint256 constant internal allowSellOptions = 1<<1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal allowExerciseOptions = 1<<2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressWhiteList
Line:        330
Source: 
>     uint256 constant internal allowSellOptions = 1<<1;
>     uint256 constant internal allowExerciseOptions = 1<<2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal allowAddCollateral = 1<<3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressWhiteList
Line:        331
Source: 
>     uint256 constant internal allowExerciseOptions = 1<<2;
>     uint256 constant internal allowAddCollateral = 1<<3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal allowRedeemCollateral = 1<<4;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressWhiteList
Line:        332
Source: 
>     uint256 constant internal allowAddCollateral = 1<<3;
>     uint256 constant internal allowRedeemCollateral = 1<<4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // The eligible adress list

[0m

---------------------------------------------
For contract 0xbabf02ff4d487d2cd482582875f12b6b5952a67e.sol
Tool Runtime = 34.11873703499987 seconds
#############################################