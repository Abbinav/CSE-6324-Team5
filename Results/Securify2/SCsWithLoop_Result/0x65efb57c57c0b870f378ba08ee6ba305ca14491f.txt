[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Fast3Matrix
Line:        90
Source: 
>         uint32 size;
>         assembly {
>         ^^^^^^^^^^
>             size := extcodesize(userAddress)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Fast3Matrix
Line:        187
Source: 
>     function bytesToAddress(bytes memory bys) private pure returns (address addr) {
>         assembly {
>         ^^^^^^^^^^
>             addr := mload(add(bys, 20))

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Fast3Matrix
Line:        22
Source: 
>     
>     uint8[6] private referrallevel = [
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        10,2,2,2,2,2

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fast3Matrix
Line:        169
Source: 
>     
>     function usersD5Matrix(address userAddress) public view returns(uint, uint[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (L5Matrix.length,users[userAddress].D5No[0]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fast3Matrix
Line:        173
Source: 
>     
>     function userspartner(address userAddress) public view returns(address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[userAddress].partners[0]);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fast3Matrix
Line:        181
Source: 
>         if (!address(uint160(receiver)).send(dividend)) {
>             return address(uint160(receiver)).transfer(address(this).balance);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Fast3Matrix
Line:        180
Source: 
>         
>         if (!address(uint160(receiver)).send(dividend)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return address(uint160(receiver)).transfer(address(this).balance);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Fast3Matrix
Line:        71
Source: 
> 
>     function registrationExt(address referrerAddress) external payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        registration(msg.sender, referrerAddress,msg.value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fast3Matrix
Line:        165
Source: 
>     
>     function isUserExists(address user) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[user].id != 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fast3Matrix
Line:        169
Source: 
>     
>     function usersD5Matrix(address userAddress) public view returns(uint, uint[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (L5Matrix.length,users[userAddress].D5No[0]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fast3Matrix
Line:        173
Source: 
>     
>     function userspartner(address userAddress) public view returns(address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[userAddress].partners[0]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Fast3Matrix
Line:        12
Source: 
>         address referrer;
>         bool block;
>         ^^^^^^^^^^
>         uint8 partnercount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fast3Matrix
Line:        26
Source: 
>     
>     uint[] private L5Matrix;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fast3Matrix
Line:        37
Source: 
>     
>     event payout(address indexed sender,address indexed receiver,uint indexed dividend,uint8 matrix,uint8 level,uint8 position);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Reentry(address indexed sender,uint senderid,uint8 level,uint8 status);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity >=0.4.23 <0.6.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Fast3Matrix
Line:        180
Source: 
>         
>         if (!address(uint160(receiver)).send(dividend)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return address(uint160(receiver)).transfer(address(this).balance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fast3Matrix
Line:        181
Source: 
>         if (!address(uint160(receiver)).send(dividend)) {
>             return address(uint160(receiver)).transfer(address(this).balance);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Fast3Matrix
Line:        180
Source: 
>         
>         if (!address(uint160(receiver)).send(dividend)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return address(uint160(receiver)).transfer(address(this).balance);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Fast3Matrix
Line:        181
Source: 
>         if (!address(uint160(receiver)).send(dividend)) {
>             return address(uint160(receiver)).transfer(address(this).balance);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fast3Matrix
Line:        180
Source: 
>         
>         if (!address(uint160(receiver)).send(dividend)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return address(uint160(receiver)).transfer(address(this).balance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fast3Matrix
Line:        181
Source: 
>         if (!address(uint160(receiver)).send(dividend)) {
>             return address(uint160(receiver)).transfer(address(this).balance);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Fast3Matrix
Line:        93
Source: 
>         }
>         require(size == 0, "cannot be a contract");
>                 ^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Fast3Matrix
Line:        180
Source: 
>         
>         if (!address(uint160(receiver)).send(dividend)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return address(uint160(receiver)).transfer(address(this).balance);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Fast3Matrix
Line:        181
Source: 
>         if (!address(uint160(receiver)).send(dividend)) {
>             return address(uint160(receiver)).transfer(address(this).balance);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fast3Matrix
Line:        104
Source: 
>         
>         users[userAddress] = user;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[userAddress].referrer = referrerAddress;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fast3Matrix
Line:        105
Source: 
>         users[userAddress] = user;
>         users[userAddress].referrer = referrerAddress;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         userIds[lastUserId] = userAddress;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fast3Matrix
Line:        106
Source: 
>         users[userAddress].referrer = referrerAddress;
>         userIds[lastUserId] = userAddress;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fast3Matrix
Line:        108
Source: 
>         
>         users[referrerAddress].partners[0].push(userAddress);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[referrerAddress].partnercount++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fast3Matrix
Line:        109
Source: 
>         users[referrerAddress].partners[0].push(userAddress);
>         users[referrerAddress].partnercount++;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[referrerAddress].levelallw = users[referrerAddress].levelallw + 2;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fast3Matrix
Line:        110
Source: 
>         users[referrerAddress].partnercount++;
>         users[referrerAddress].levelallw = users[referrerAddress].levelallw + 2;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         addtoMatrix(lastUserId,1);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fast3Matrix
Line:        112
Source: 
>         addtoMatrix(lastUserId,1);
>         lastUserId++;
>         ^^^^^^^^^^^^
>         levelreward(userAddress,referrerAddress,buyvalue);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fast3Matrix
Line:        143
Source: 
>             reinvest = userIds[L5Matrix[benid]];
>             benid = findqualifier(benid,userAddress);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             seqid = 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fast3Matrix
Line:        144
Source: 
>             benid = findqualifier(benid,userAddress);
>             seqid = 1;
>             ^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fast3Matrix
Line:        148
Source: 
>         sendreward(userIds[L5Matrix[benid]],dividend);
>         seqid++;
>         ^^^^^^^
>      }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fast3Matrix
Line:        158
Source: 
>             }else{
>                 users[userIds[L5Matrix[newseqid]]].block = true;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit Reentry(userAddress,newseqid,users[userIds[L5Matrix[newseqid]]].level,3);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fast3Matrix
Line:        78
Source: 
>         newid = newid + 1;
>         users[userIds[newseqid]].level++;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[userIds[newseqid]].D5No[0].push(newid);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fast3Matrix
Line:        79
Source: 
>         users[userIds[newseqid]].level++;
>         users[userIds[newseqid]].D5No[0].push(newid);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         L5Matrix.push(newseqid);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fast3Matrix
Line:        80
Source: 
>         users[userIds[newseqid]].D5No[0].push(newid);
>         L5Matrix.push(newseqid);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         emit Reentry(userIds[newseqid],newid,users[userIds[newseqid]].level,status);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Fast3Matrix
Line:        30
Source: 
>     mapping(uint => address) public userIds;
>     mapping(address => uint) public balances; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m

---------------------------------------------
For contract 0x65efb57c57c0b870f378ba08ee6ba305ca14491f.sol
Tool Runtime = 5.286655732999861 seconds
#############################################