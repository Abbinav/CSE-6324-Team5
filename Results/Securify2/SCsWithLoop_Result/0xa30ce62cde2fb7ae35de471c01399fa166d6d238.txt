[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    WDXStacking
Line:        72
Source: 
>     function safeMultiply(uint256 a, uint256 b) internal pure returns (uint256) {
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    WDXStacking
Line:        76
Source: 
>             uint256 c = a * b;
>             assert(c / a == b);
>                    ^^^^^^^^^^
>             return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    WDXStacking
Line:        84
Source: 
>         uint256 c = a / b;
>         assert(a == b * c + a % b);
>                ^^^^^^^^^^^^^^^^^^
>         return c;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WDXStacking
Line:        149
Source: 
> 
>     function buyStatus(uint8 status, address[] memory referrals) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status > stakes[address(msg.sender)].status, "Status already bought. Or attemption to buy lower status");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WDXStacking
Line:        167
Source: 
> 
>     function sendToStaking(uint256 numberOfTokens) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(numberOfTokens > 0, "You need to sell at least some tokens");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WDXStacking
Line:        214
Source: 
> 
>     function getFromStaking(uint256 numberOfTokens) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(numberOfTokens > 0, "You need to get at least some tokens");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WDXStacking
Line:        230
Source: 
> 
>     function getUSDT() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WDXStacking
Line:        237
Source: 
> 
>     function updateWDXPrice(uint price) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WDXStacking
Line:        242
Source: 
> 
>     function setStatusByAdmin(uint8 status, address user) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WDXStacking
Line:        161
Source: 
>         if (residue > 0) {
>             usdtTokenContract.transferFrom(msg.sender, address(this), residue);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WDXStacking
Line:        170
Source: 
> 
>         uint256 allowance = tokenContract.allowance(msg.sender, address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(allowance >= numberOfTokens, "Check the token allowance");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WDXStacking
Line:        174
Source: 
> 
>         tokenContract.transferFrom(msg.sender, address(this), numberOfTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (stakes[address(msg.sender)].amount > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WDXStacking
Line:        222
Source: 
> 
>         tokenContract.transfer(address(msg.sender), numberOfTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WDXStacking
Line:        234
Source: 
>         // Send unsold tokens to the owner.
>         usdtTokenContract.transfer(owner, usdtTokenContract.balanceOf(address(this)));
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WDXStacking
Line:        234
Source: 
>         // Send unsold tokens to the owner.
>         usdtTokenContract.transfer(owner, usdtTokenContract.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    WDXStacking
Line:        157
Source: 
>             uint256 amount_to_send = safeDivision(safeMultiply(delta_amount, ref_parts[i]), 1000);
>             usdtTokenContract.transferFrom(msg.sender, address(referrals[i]), amount_to_send);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             residue -= amount_to_send;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WDXStacking
Line:        237
Source: 
> 
>     function updateWDXPrice(uint price) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WDXStacking
Line:        242
Source: 
> 
>     function setStatusByAdmin(uint8 status, address user) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    WDXStacking
Line:        75
Source: 
>         } else {
>             uint256 c = a * b;
>                         ^^^^^
>             assert(c / a == b);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    WDXStacking
Line:        84
Source: 
>         uint256 c = a / b;
>         assert(a == b * c + a % b);
>                     ^^^^^
>         return c;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WDXStacking
Line:        170
Source: 
> 
>         uint256 allowance = tokenContract.allowance(msg.sender, address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(allowance >= numberOfTokens, "Check the token allowance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    WDXStacking
Line:        174
Source: 
> 
>         tokenContract.transferFrom(msg.sender, address(this), numberOfTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (stakes[address(msg.sender)].amount > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WDXStacking
Line:        26
Source: 
>     IUSDTToken public usdtTokenContract;
>     uint public wdx_price;
>     ^^^^^^^^^^^^^^^^^^^^^
>     address owner;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WDXStacking
Line:        89
Source: 
>     function computeAmount() internal returns(bool) {
>         uint256 stake_amount = stakes[address(msg.sender)].amount;
>         ^^^^^^^^^^^^^^^^^^^^
>         uint256 stake_start_time = stakes[address(msg.sender)].start_time;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WDXStacking
Line:        90
Source: 
>         uint256 stake_amount = stakes[address(msg.sender)].amount;
>         uint256 stake_start_time = stakes[address(msg.sender)].start_time;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 stake_last_compute_time = stakes[address(msg.sender)].last_compute_time;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WDXStacking
Line:        91
Source: 
>         uint256 stake_start_time = stakes[address(msg.sender)].start_time;
>         uint256 stake_last_compute_time = stakes[address(msg.sender)].last_compute_time;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 profit_percent = 6; //0.6%

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WDXStacking
Line:        92
Source: 
>         uint256 stake_last_compute_time = stakes[address(msg.sender)].last_compute_time;
>         uint256 profit_percent = 6; //0.6%
>         ^^^^^^^^^^^^^^^^^^^^^^
>         uint256 duration_from_last_compute= safeDivision(now - stake_last_compute_time, 86400); // in days

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WDXStacking
Line:        93
Source: 
>         uint256 profit_percent = 6; //0.6%
>         uint256 duration_from_last_compute= safeDivision(now - stake_last_compute_time, 86400); // in days
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (duration_from_last_compute < 1) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WDXStacking
Line:        99
Source: 
>         // Duration additional profit percent
>         uint256 stake_duration = safeDivision(now - stake_start_time, 2592000); // devide 30 days
>         ^^^^^^^^^^^^^^^^^^^^^^
>         if (stake_duration >= 1) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WDXStacking
Line:        152
Source: 
> 
>         uint delta_amount = statuses[status].price - statuses[stakes[address(msg.sender)].status].price;
>         ^^^^^^^^^^^^^^^^^
>         uint256 residue = delta_amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WDXStacking
Line:        154
Source: 
>         uint256 residue = delta_amount;
>         uint[10] memory ref_parts = [uint(200), 100, 50, 30, 20, 20, 20, 20, 20, 20];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint i=0; i<referrals.length; i++) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WDXStacking
Line:        156
Source: 
>         for (uint i=0; i<referrals.length; i++) {
>             uint256 amount_to_send = safeDivision(safeMultiply(delta_amount, ref_parts[i]), 1000);
>             ^^^^^^^^^^^^^^^^^^^^^^
>             usdtTokenContract.transferFrom(msg.sender, address(referrals[i]), amount_to_send);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WDXStacking
Line:        196
Source: 
> 
>     function set_valid_amount_by_status(uint256 numberOfTokens) internal returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint8 status = stakes[address(msg.sender)].status;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WDXStacking
Line:        198
Source: 
>         uint8 status = stakes[address(msg.sender)].status;
>         uint usd_amount = safeDivision(safeMultiply(numberOfTokens, wdx_price), 10**18);
>         ^^^^^^^^^^^^^^^
>         uint week = 604800;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WDXStacking
Line:        203
Source: 
>             stakes[address(msg.sender)].week_withdrawal_amount = 0;
>             uint weeks_count_from_last = safeDivision(now - stakes[address(msg.sender)].week_starts_at, week);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             stakes[address(msg.sender)].week_starts_at += safeMultiply(week, weeks_count_from_last);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WDXStacking
Line:        219
Source: 
> 
>         uint usd_amount = set_valid_amount_by_status(numberOfTokens);
>         ^^^^^^^^^^^^^^^
>         numberOfTokens = safeDivision(safeMultiply(usd_amount, 10**18), wdx_price);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity ^0.5.17;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    WDXStacking
Line:        27
Source: 
>     uint public wdx_price;
>     address owner;
>     ^^^^^^^^^^^^^
>     struct Status {

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WDXStacking
Line:        60
Source: 
>         // status price, status limit in $, referral line limit
>         statuses[0] = Status(0, 10000000, 1);
>                                 ^^^^^^^^
>         statuses[1] = Status(100000000, 50000000, 2);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WDXStacking
Line:        61
Source: 
>         statuses[0] = Status(0, 10000000, 1);
>         statuses[1] = Status(100000000, 50000000, 2);
>                              ^^^^^^^^^
>         statuses[2] = Status(300000000, 150000000, 3);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WDXStacking
Line:        61
Source: 
>         statuses[0] = Status(0, 10000000, 1);
>         statuses[1] = Status(100000000, 50000000, 2);
>                                         ^^^^^^^^
>         statuses[2] = Status(300000000, 150000000, 3);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WDXStacking
Line:        62
Source: 
>         statuses[1] = Status(100000000, 50000000, 2);
>         statuses[2] = Status(300000000, 150000000, 3);
>                              ^^^^^^^^^
>         statuses[3] = Status(1000000000, 500000000, 5);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WDXStacking
Line:        62
Source: 
>         statuses[1] = Status(100000000, 50000000, 2);
>         statuses[2] = Status(300000000, 150000000, 3);
>                                         ^^^^^^^^^
>         statuses[3] = Status(1000000000, 500000000, 5);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WDXStacking
Line:        63
Source: 
>         statuses[2] = Status(300000000, 150000000, 3);
>         statuses[3] = Status(1000000000, 500000000, 5);
>                              ^^^^^^^^^^
>         statuses[4] = Status(3000000000, 1500000000, 7);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WDXStacking
Line:        63
Source: 
>         statuses[2] = Status(300000000, 150000000, 3);
>         statuses[3] = Status(1000000000, 500000000, 5);
>                                          ^^^^^^^^^
>         statuses[4] = Status(3000000000, 1500000000, 7);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WDXStacking
Line:        64
Source: 
>         statuses[3] = Status(1000000000, 500000000, 5);
>         statuses[4] = Status(3000000000, 1500000000, 7);
>                              ^^^^^^^^^^
>         statuses[5] = Status(10000000000, 5000000000, 10);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WDXStacking
Line:        64
Source: 
>         statuses[3] = Status(1000000000, 500000000, 5);
>         statuses[4] = Status(3000000000, 1500000000, 7);
>                                          ^^^^^^^^^^
>         statuses[5] = Status(10000000000, 5000000000, 10);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WDXStacking
Line:        65
Source: 
>         statuses[4] = Status(3000000000, 1500000000, 7);
>         statuses[5] = Status(10000000000, 5000000000, 10);
>                              ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WDXStacking
Line:        65
Source: 
>         statuses[4] = Status(3000000000, 1500000000, 7);
>         statuses[5] = Status(10000000000, 5000000000, 10);
>                                           ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WDXStacking
Line:        67
Source: 
> 
>         wdx_price = 1000000; // 1$
>                     ^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WDXStacking
Line:        116
Source: 
>         // Amount additional profit percent
>         if (stake_amount >= 100000000000000000000000) {
>                             ^^^^^^^^^^^^^^^^^^^^^^^^
>             profit_percent += 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WDXStacking
Line:        119
Source: 
>         }
>         if (stake_duration >= 200000000000000000000000) {
>                               ^^^^^^^^^^^^^^^^^^^^^^^^
>             profit_percent += 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WDXStacking
Line:        122
Source: 
>         }
>         if (stake_duration >= 1000000000000000000000000) {
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^
>             profit_percent += 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    WDXStacking
Line:        125
Source: 
>         }
>         if (stake_duration >= 2000000000000000000000000) {
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^
>             profit_percent += 1;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WDXStacking
Line:        170
Source: 
> 
>         uint256 allowance = tokenContract.allowance(msg.sender, address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(allowance >= numberOfTokens, "Check the token allowance");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WDXStacking
Line:        234
Source: 
>         // Send unsold tokens to the owner.
>         usdtTokenContract.transfer(owner, usdtTokenContract.balanceOf(address(this)));
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WDXStacking
Line:        157
Source: 
>             uint256 amount_to_send = safeDivision(safeMultiply(delta_amount, ref_parts[i]), 1000);
>             usdtTokenContract.transferFrom(msg.sender, address(referrals[i]), amount_to_send);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             residue -= amount_to_send;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WDXStacking
Line:        161
Source: 
>         if (residue > 0) {
>             usdtTokenContract.transferFrom(msg.sender, address(this), residue);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WDXStacking
Line:        174
Source: 
> 
>         tokenContract.transferFrom(msg.sender, address(this), numberOfTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (stakes[address(msg.sender)].amount > 0) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WDXStacking
Line:        222
Source: 
> 
>         tokenContract.transfer(address(msg.sender), numberOfTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WDXStacking
Line:        234
Source: 
>         // Send unsold tokens to the owner.
>         usdtTokenContract.transfer(owner, usdtTokenContract.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WDXStacking
Line:        136
Source: 
>         //stakes[address(msg.sender)].amount = profit_from_last_compute + stake_amount;
>         stakes[address(msg.sender)].last_compute_time = now;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakes[address(msg.sender)].last_percent = profit_percent;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WDXStacking
Line:        137
Source: 
>         stakes[address(msg.sender)].last_compute_time = now;
>         stakes[address(msg.sender)].last_percent = profit_percent;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    WDXStacking
Line:        224
Source: 
> 
>         stakes[address(msg.sender)].last_withdrawal_time = now;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakes[address(msg.sender)].amount = stakes[address(msg.sender)].amount - numberOfTokens;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    WDXStacking
Line:        225
Source: 
>         stakes[address(msg.sender)].last_withdrawal_time = now;
>         stakes[address(msg.sender)].amount = stakes[address(msg.sender)].amount - numberOfTokens;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakes[address(msg.sender)].week_withdrawal_amount += usd_amount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    WDXStacking
Line:        226
Source: 
>         stakes[address(msg.sender)].amount = stakes[address(msg.sender)].amount - numberOfTokens;
>         stakes[address(msg.sender)].week_withdrawal_amount += usd_amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WDXStacking
Line:        174
Source: 
> 
>         tokenContract.transferFrom(msg.sender, address(this), numberOfTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (stakes[address(msg.sender)].amount > 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WDXStacking
Line:        222
Source: 
> 
>         tokenContract.transfer(address(msg.sender), numberOfTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0xa30ce62cde2fb7ae35de471c01399fa166d6d238.sol
Tool Runtime = 11.163421219999691 seconds
#############################################