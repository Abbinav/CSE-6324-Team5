pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        197
Source: 
> 
>     IToken public TOKEN = IToken(0x9D70ADFE35A0A9A8CdFF1f5367D3682Fceaa136B);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        206
Source: 
>     // Referral rewards, 35% for 15 levels
>     uint16 private WHITELIST_REF_REWARDS_PCT_SUM = 35;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint16[15] private WHITELIST_REF_REWARDS_PCT = [

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        207
Source: 
>     uint16 private WHITELIST_REF_REWARDS_PCT_SUM = 35;
>     uint16[15] private WHITELIST_REF_REWARDS_PCT = [
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     6,  // 6% for Level.1

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        226
Source: 
>     // Wei & Gas
>     uint72 private WEI_MIN   = 0.1 ether;      // 0.1 Ether Minimum
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint72 private WEI_MAX   = 10 ether;       // 10 Ether Maximum

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        227
Source: 
>     uint72 private WEI_MIN   = 0.1 ether;      // 0.1 Ether Minimum
>     uint72 private WEI_MAX   = 10 ether;       // 10 Ether Maximum
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint72 private WEI_BONUS = 10 ether;       // >10 Ether for Bonus

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        228
Source: 
>     uint72 private WEI_MAX   = 10 ether;       // 10 Ether Maximum
>     uint72 private WEI_BONUS = 10 ether;       // >10 Ether for Bonus
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint24 private GAS_MIN   = 3000000;        // 3.0 Mwei gas Mininum

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        229
Source: 
>     uint72 private WEI_BONUS = 10 ether;       // >10 Ether for Bonus
>     uint24 private GAS_MIN   = 3000000;        // 3.0 Mwei gas Mininum
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint24 private GAS_EX    = 1500000;        // 1.5 Mwei gas for ex

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        230
Source: 
>     uint24 private GAS_MIN   = 3000000;        // 3.0 Mwei gas Mininum
>     uint24 private GAS_EX    = 1500000;        // 1.5 Mwei gas for ex
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        233
Source: 
>     // Price
>     uint256 private TOKEN_USD_PRICE_START = 1000;           // $      0.00100 USD
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private TOKEN_USD_PRICE_STEP  = 10;             // $    + 0.00001 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        234
Source: 
>     uint256 private TOKEN_USD_PRICE_START = 1000;           // $      0.00100 USD
>     uint256 private TOKEN_USD_PRICE_STEP  = 10;             // $    + 0.00001 USD
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_START   = 100000000;      // $    100 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        235
Source: 
>     uint256 private TOKEN_USD_PRICE_STEP  = 10;             // $    + 0.00001 USD
>     uint256 private STAGE_USD_CAP_START   = 100000000;      // $    100 USD
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_STEP    = 1000000;        // $     +1 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        236
Source: 
>     uint256 private STAGE_USD_CAP_START   = 100000000;      // $    100 USD
>     uint256 private STAGE_USD_CAP_STEP    = 1000000;        // $     +1 USD
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_MAX     = 15100000000;    // $    15,100 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        237
Source: 
>     uint256 private STAGE_USD_CAP_STEP    = 1000000;        // $     +1 USD
>     uint256 private STAGE_USD_CAP_MAX     = 15100000000;    // $    15,100 USD
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        242
Source: 
>     // Progress
>     uint16 private STAGE_MAX = 60000;   // 60,000 stages total
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint16 private SEASON_MAX = 100;    // 100 seasons total

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        243
Source: 
>     uint16 private STAGE_MAX = 60000;   // 60,000 stages total
>     uint16 private SEASON_MAX = 100;    // 100 seasons total
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint16 private SEASON_STAGES = 600; // each 600 stages is a season

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        244
Source: 
>     uint16 private SEASON_MAX = 100;    // 100 seasons total
>     uint16 private SEASON_STAGES = 600; // each 600 stages is a season
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        265
Source: 
>     // Top-Sales
>     uint256 private TOP_SALES_RATIO_START = 15000000;         // 15%, with 8 decimals
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private TOP_SALES_RATIO_DISTANCE = 50000000;      // 50%, with 8 decimals

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenPublicSale
Line:        266
Source: 
>     uint256 private TOP_SALES_RATIO_START = 15000000;         // 15%, with 8 decimals
>     uint256 private TOP_SALES_RATIO_DISTANCE = 50000000;      // 50%, with 8 decimals
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        101
Source: 
> 
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        157
Source: 
> 
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        101
Source: 
> 
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenPublicSale
Line:        317
Source: 
> 
>     function startTimestamp() public view returns (uint32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _startTimestamp;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenPublicSale
Line:        335
Source: 
> 
>     function etherPriceAuditor(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _etherPriceAuditors[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenPublicSale
Line:        412
Source: 
> 
>     function status() public view returns (uint256 auditEtherPrice,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint16 stage,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenPublicSale
Line:        446
Source: 
> 
>     function sum() public view returns(uint256 weiSold,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 weiReferralRewarded,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenPublicSale
Line:        501
Source: 
> 
>     function stageStatus(uint16 stageIndex) public view returns (uint256 tokenUsdPrice,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 tokenCap,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenPublicSale
Line:        530
Source: 
> 
>     function seasonTopSalesRewards(uint16 seasonNumber) public view returns (uint256 weiSold,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 weiTopSales,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenPublicSale
Line:        540
Source: 
> 
>     function accountQuery(address account) public view returns (uint256 tokenIssued,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 tokenBonus,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenPublicSale
Line:        552
Source: 
> 
>     function seasonRefAccounts(uint16 seasonNumber) public view returns (address[] memory accounts) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         accounts = _seasonRefAccounts[seasonNumber];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenPublicSale
Line:        556
Source: 
> 
>     function usdSeasonAccountPurchased(uint16 seasonNumber, address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _usdSeasonAccountPurchased[seasonNumber][account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenPublicSale
Line:        560
Source: 
> 
>     function usdSeasonAccountRef(uint16 seasonNumber, address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _usdSeasonAccountRef[seasonNumber][account];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Ownable
Line:        129
Source: 
>         require(receiver != address(0));
>         uint256 balance = _token.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balance >= amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Ownable
Line:        132
Source: 
> 
>         assert(_token.transfer(receiver, amount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Ownable
Line:        141
Source: 
> 
>         to.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenPublicSale
Line:        385
Source: 
>         emit SeasonTopSalesWeiTransfered(seasonNumber, to, __weiRemain);
>         to.transfer(__weiRemain);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenPublicSale
Line:        399
Source: 
>         emit PendingWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenPublicSale
Line:        408
Source: 
>         emit TeamWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenPublicSale
Line:        731
Source: 
> 
>         assert(TOKEN.transfer(msg.sender, amount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenIssuedTransfered(_stage, msg.sender, amount, _etherPrice, usdAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenPublicSale
Line:        617
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenPublicSale
Line:        635
Source: 
>         _weiTeam = _weiTeam.add(__weiTeam);
>         _receiver.transfer(__weiTeam);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenPublicSale
Line:        753
Source: 
> 
>         assert(TOKEN.transfer(msg.sender, amount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenWhitelistTransfered(msg.sender, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenPublicSale
Line:        742
Source: 
> 
>         assert(TOKEN.transfer(msg.sender, amount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenBonusTransfered(msg.sender, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenPublicSale
Line:        645
Source: 
> 
>         _inWhitelist_ = TOKEN.inWhitelist(msg.sender);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    TokenPublicSale
Line:        784
Source: 
> 
>             __receiver.transfer(__weiReward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    TokenPublicSale
Line:        650
Source: 
>         for(uint16 i = 0; i < WHITELIST_REF_REWARDS_PCT.length; i++) {
>             address __refAccount = TOKEN.referrer(__cursor);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    TokenPublicSale
Line:        655
Source: 
> 
>             if (TOKEN.refCount(__refAccount) > i) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (!_seasonHasRefAccount[_season][__refAccount]) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenPublicSale
Line:        321
Source: 
> 
>     function setStartTimestamp(uint32 timestamp) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _startTimestamp = timestamp;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenPublicSale
Line:        330
Source: 
> 
>     function setEtherPrice(uint256 value) external onlyEtherPriceAuditor {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _etherPrice = value;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenPublicSale
Line:        360
Source: 
> 
>     function usd2tokenByStage(uint256 usdAmount, uint16 stageIndex) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return usdAmount.mul(1000000).div(stageTokenUsdPrice(stageIndex));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenPublicSale
Line:        379
Source: 
> 
>     function transferTopSales(uint16 seasonNumber, address payable to) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 __weiRemain = seasonTopSalesRemain(seasonNumber);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenPublicSale
Line:        501
Source: 
> 
>     function stageStatus(uint16 stageIndex) public view returns (uint256 tokenUsdPrice,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 tokenCap,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenPublicSale
Line:        530
Source: 
> 
>     function seasonTopSalesRewards(uint16 seasonNumber) public view returns (uint256 weiSold,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 weiTopSales,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ownable
Line:        126
Source: 
> 
>     function rescueTokens(address tokenAddress, address receiver, uint256 amount) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20 _token = IERC20(tokenAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenPublicSale
Line:        335
Source: 
> 
>     function etherPriceAuditor(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _etherPriceAuditors[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenPublicSale
Line:        339
Source: 
> 
>     function setEtherPriceAuditor(address account, bool state) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _etherPriceAuditors[account] = state;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenPublicSale
Line:        540
Source: 
> 
>     function accountQuery(address account) public view returns (uint256 tokenIssued,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 tokenBonus,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenPublicSale
Line:        552
Source: 
> 
>     function seasonRefAccounts(uint16 seasonNumber) public view returns (address[] memory accounts) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         accounts = _seasonRefAccounts[seasonNumber];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenPublicSale
Line:        556
Source: 
> 
>     function usdSeasonAccountPurchased(uint16 seasonNumber, address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _usdSeasonAccountPurchased[seasonNumber][account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenPublicSale
Line:        560
Source: 
> 
>     function usdSeasonAccountRef(uint16 seasonNumber, address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _usdSeasonAccountRef[seasonNumber][account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath256
Line:        30
Source: 
>         }
>         c = a * b;
>             ^^^^^
>         assert(c / a == b);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath256
Line:        39
Source: 
>         uint256 c = a / b;
>         assert(a == b * c + a % b);
>                     ^^^^^
>         return a / b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath16
Line:        77
Source: 
>         uint256 c = a / b;
>         assert(a == b * c + a % b);
>                     ^^^^^
>         return a / b;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenPublicSale
Line:        731
Source: 
> 
>         assert(TOKEN.transfer(msg.sender, amount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenIssuedTransfered(_stage, msg.sender, amount, _etherPrice, usdAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenPublicSale
Line:        753
Source: 
> 
>         assert(TOKEN.transfer(msg.sender, amount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenWhitelistTransfered(msg.sender, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenPublicSale
Line:        742
Source: 
> 
>         assert(TOKEN.transfer(msg.sender, amount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenBonusTransfered(msg.sender, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenPublicSale
Line:        645
Source: 
> 
>         _inWhitelist_ = TOKEN.inWhitelist(msg.sender);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenPublicSale
Line:        650
Source: 
>         for(uint16 i = 0; i < WHITELIST_REF_REWARDS_PCT.length; i++) {
>             address __refAccount = TOKEN.referrer(__cursor);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenPublicSale
Line:        655
Source: 
> 
>             if (TOKEN.refCount(__refAccount) > i) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (!_seasonHasRefAccount[_season][__refAccount]) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    TokenPublicSale
Line:        385
Source: 
>         emit SeasonTopSalesWeiTransfered(seasonNumber, to, __weiRemain);
>         to.transfer(__weiRemain);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    TokenPublicSale
Line:        399
Source: 
>         emit PendingWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    TokenPublicSale
Line:        408
Source: 
>         emit TeamWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    TokenPublicSale
Line:        617
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    TokenPublicSale
Line:        635
Source: 
>         _weiTeam = _weiTeam.add(__weiTeam);
>         _receiver.transfer(__weiTeam);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    TokenPublicSale
Line:        784
Source: 
> 
>             __receiver.transfer(__weiReward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        114
Source: 
>         require(newOwner != address(0));
>         address __previousOwner = _owner;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = newOwner;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        121
Source: 
>         require(newReceiver != address(0));
>         address __previousReceiver = _receiver;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _receiver = newReceiver;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        127
Source: 
>     function rescueTokens(address tokenAddress, address receiver, uint256 amount) external onlyOwner {
>         IERC20 _token = IERC20(tokenAddress);
>         ^^^^^^^^^^^^^
>         require(receiver != address(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        197
Source: 
> 
>     IToken public TOKEN = IToken(0x9D70ADFE35A0A9A8CdFF1f5367D3682Fceaa136B);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        206
Source: 
>     // Referral rewards, 35% for 15 levels
>     uint16 private WHITELIST_REF_REWARDS_PCT_SUM = 35;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint16[15] private WHITELIST_REF_REWARDS_PCT = [

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        207
Source: 
>     uint16 private WHITELIST_REF_REWARDS_PCT_SUM = 35;
>     uint16[15] private WHITELIST_REF_REWARDS_PCT = [
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     6,  // 6% for Level.1

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        226
Source: 
>     // Wei & Gas
>     uint72 private WEI_MIN   = 0.1 ether;      // 0.1 Ether Minimum
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint72 private WEI_MAX   = 10 ether;       // 10 Ether Maximum

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        227
Source: 
>     uint72 private WEI_MIN   = 0.1 ether;      // 0.1 Ether Minimum
>     uint72 private WEI_MAX   = 10 ether;       // 10 Ether Maximum
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint72 private WEI_BONUS = 10 ether;       // >10 Ether for Bonus

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        228
Source: 
>     uint72 private WEI_MAX   = 10 ether;       // 10 Ether Maximum
>     uint72 private WEI_BONUS = 10 ether;       // >10 Ether for Bonus
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint24 private GAS_MIN   = 3000000;        // 3.0 Mwei gas Mininum

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        229
Source: 
>     uint72 private WEI_BONUS = 10 ether;       // >10 Ether for Bonus
>     uint24 private GAS_MIN   = 3000000;        // 3.0 Mwei gas Mininum
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint24 private GAS_EX    = 1500000;        // 1.5 Mwei gas for ex

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        230
Source: 
>     uint24 private GAS_MIN   = 3000000;        // 3.0 Mwei gas Mininum
>     uint24 private GAS_EX    = 1500000;        // 1.5 Mwei gas for ex
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        233
Source: 
>     // Price
>     uint256 private TOKEN_USD_PRICE_START = 1000;           // $      0.00100 USD
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private TOKEN_USD_PRICE_STEP  = 10;             // $    + 0.00001 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        234
Source: 
>     uint256 private TOKEN_USD_PRICE_START = 1000;           // $      0.00100 USD
>     uint256 private TOKEN_USD_PRICE_STEP  = 10;             // $    + 0.00001 USD
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_START   = 100000000;      // $    100 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        235
Source: 
>     uint256 private TOKEN_USD_PRICE_STEP  = 10;             // $    + 0.00001 USD
>     uint256 private STAGE_USD_CAP_START   = 100000000;      // $    100 USD
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_STEP    = 1000000;        // $     +1 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        236
Source: 
>     uint256 private STAGE_USD_CAP_START   = 100000000;      // $    100 USD
>     uint256 private STAGE_USD_CAP_STEP    = 1000000;        // $     +1 USD
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private STAGE_USD_CAP_MAX     = 15100000000;    // $    15,100 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        237
Source: 
>     uint256 private STAGE_USD_CAP_STEP    = 1000000;        // $     +1 USD
>     uint256 private STAGE_USD_CAP_MAX     = 15100000000;    // $    15,100 USD
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        242
Source: 
>     // Progress
>     uint16 private STAGE_MAX = 60000;   // 60,000 stages total
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint16 private SEASON_MAX = 100;    // 100 seasons total

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        243
Source: 
>     uint16 private STAGE_MAX = 60000;   // 60,000 stages total
>     uint16 private SEASON_MAX = 100;    // 100 seasons total
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint16 private SEASON_STAGES = 600; // each 600 stages is a season

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        244
Source: 
>     uint16 private SEASON_MAX = 100;    // 100 seasons total
>     uint16 private SEASON_STAGES = 600; // each 600 stages is a season
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        265
Source: 
>     // Top-Sales
>     uint256 private TOP_SALES_RATIO_START = 15000000;         // 15%, with 8 decimals
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private TOP_SALES_RATIO_DISTANCE = 50000000;      // 50%, with 8 decimals

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        266
Source: 
>     uint256 private TOP_SALES_RATIO_START = 15000000;         // 15%, with 8 decimals
>     uint256 private TOP_SALES_RATIO_DISTANCE = 50000000;      // 50%, with 8 decimals
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        366
Source: 
>         if (stageIndex > 0) {
>             uint16 __seasonNumber = stageIndex.div(SEASON_STAGES);
>             ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        380
Source: 
>     function transferTopSales(uint16 seasonNumber, address payable to) external onlyOwner {
>         uint256 __weiRemain = seasonTopSalesRemain(seasonNumber);
>         ^^^^^^^^^^^^^^^^^^^
>         require(to != address(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        394
Source: 
>     function transferPending(address payable to) external onlyOwner {
>         uint256 __weiRemain = pendingRemain();
>         ^^^^^^^^^^^^^^^^^^^
>         require(to != address(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        403
Source: 
>     function transferTeam(address payable to) external onlyOwner {
>         uint256 __weiRemain = _weiSold.sub(_weiRefRewarded).sub(_weiTopSales).sub(_weiPending).sub(_weiTeam);
>         ^^^^^^^^^^^^^^^^^^^
>         require(to != address(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        486
Source: 
>     function stageUsdCap(uint16 stageIndex) private view returns (uint256) {
>         uint256 __usdCap = STAGE_USD_CAP_START.add(STAGE_USD_CAP_STEP.mul(stageIndex));
>         ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        576
Source: 
>         setTemporaryVariables();
>         uint256 __usdAmount = wei2usd(msg.value);
>         ^^^^^^^^^^^^^^^^^^^
>         uint256 __usdRemain = __usdAmount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        577
Source: 
>         uint256 __usdAmount = wei2usd(msg.value);
>         uint256 __usdRemain = __usdAmount;
>         ^^^^^^^^^^^^^^^^^^^
>         uint256 __tokenIssued;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        578
Source: 
>         uint256 __usdRemain = __usdAmount;
>         uint256 __tokenIssued;
>         ^^^^^^^^^^^^^^^^^^^^^
>         uint256 __tokenBonus;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        579
Source: 
>         uint256 __tokenIssued;
>         uint256 __tokenBonus;
>         ^^^^^^^^^^^^^^^^^^^^
>         uint256 __usdUsed;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        580
Source: 
>         uint256 __tokenBonus;
>         uint256 __usdUsed;
>         ^^^^^^^^^^^^^^^^^
>         uint256 __weiUsed;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        581
Source: 
>         uint256 __usdUsed;
>         uint256 __weiUsed;
>         ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        585
Source: 
>         while (gasleft() > GAS_EX && __usdRemain > 0 && _stage <= STAGE_MAX) {
>             uint256 __txTokenIssued;
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             (__txTokenIssued, __usdRemain) = ex(__usdRemain);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        612
Source: 
>         if (__usdRemain > 0) {
>             uint256 __weiRemain = usd2wei(__usdRemain);
>             ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        628
Source: 
>         // Wei team
>         uint256 __weiTeam;
>         ^^^^^^^^^^^^^^^^^
>         if (_season > SEASON_MAX)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        648
Source: 
> 
>         address __cursor = msg.sender;
>         ^^^^^^^^^^^^^^^^
>         for(uint16 i = 0; i < WHITELIST_REF_REWARDS_PCT.length; i++) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        650
Source: 
>         for(uint16 i = 0; i < WHITELIST_REF_REWARDS_PCT.length; i++) {
>             address __refAccount = TOKEN.referrer(__cursor);
>             ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        674
Source: 
>     function ex(uint256 usdAmount) private returns (uint256, uint256) {
>         uint256 __stageUsdCap = stageUsdCap(_stage);
>         ^^^^^^^^^^^^^^^^^^^^^
>         uint256 __tokenIssued;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        675
Source: 
>         uint256 __stageUsdCap = stageUsdCap(_stage);
>         uint256 __tokenIssued;
>         ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        693
Source: 
>         // close stage
>         uint256 __usdUsed = __stageUsdCap.sub(_stageUsdSold[_stage]);
>         ^^^^^^^^^^^^^^^^^
>         uint256 __usdRemain = usdAmount.sub(__usdUsed);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        694
Source: 
>         uint256 __usdUsed = __stageUsdCap.sub(_stageUsdSold[_stage]);
>         uint256 __usdRemain = usdAmount.sub(__usdUsed);
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        706
Source: 
>     function exCount(uint256 usdAmount) private {
>         uint256 __weiSold = usd2wei(usdAmount);
>         ^^^^^^^^^^^^^^^^^
>         uint256 __weiTopSales = usd2weiTopSales(usdAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        707
Source: 
>         uint256 __weiSold = usd2wei(usdAmount);
>         uint256 __weiTopSales = usd2weiTopSales(usdAmount);
>         ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        765
Source: 
>         // Close current season
>         uint16 __seasonNumber = calcSeason(_stage);
>         ^^^^^^^^^^^^^^^^^^^^^
>         if (_season < __seasonNumber) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        775
Source: 
>     function sendWhitelistReferralRewards(uint256 weiAmount) private {
>         uint256 __weiRemain = weiAmount;
>         ^^^^^^^^^^^^^^^^^^^
>         for (uint16 i = 0; i < _rewards_.length; i++) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        777
Source: 
>         for (uint16 i = 0; i < _rewards_.length; i++) {
>             uint256 __weiReward = weiAmount.mul(_rewards_[i]).div(100);
>             ^^^^^^^^^^^^^^^^^^^
>             address payable __receiver = address(uint160(_referrers_[i]));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenPublicSale
Line:        778
Source: 
>             uint256 __weiReward = weiAmount.mul(_rewards_[i]).div(100);
>             address payable __receiver = address(uint160(_referrers_[i]));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenPublicSale
Line:        200
Source: 
>     // Start timestamp
>     uint32 _startTimestamp;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenPublicSale
Line:        229
Source: 
>     uint72 private WEI_BONUS = 10 ether;       // >10 Ether for Bonus
>     uint24 private GAS_MIN   = 3000000;        // 3.0 Mwei gas Mininum
>                                ^^^^^^^
>     uint24 private GAS_EX    = 1500000;        // 1.5 Mwei gas for ex

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenPublicSale
Line:        230
Source: 
>     uint24 private GAS_MIN   = 3000000;        // 3.0 Mwei gas Mininum
>     uint24 private GAS_EX    = 1500000;        // 1.5 Mwei gas for ex
>                                ^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenPublicSale
Line:        235
Source: 
>     uint256 private TOKEN_USD_PRICE_STEP  = 10;             // $    + 0.00001 USD
>     uint256 private STAGE_USD_CAP_START   = 100000000;      // $    100 USD
>                                             ^^^^^^^^^
>     uint256 private STAGE_USD_CAP_STEP    = 1000000;        // $     +1 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenPublicSale
Line:        236
Source: 
>     uint256 private STAGE_USD_CAP_START   = 100000000;      // $    100 USD
>     uint256 private STAGE_USD_CAP_STEP    = 1000000;        // $     +1 USD
>                                             ^^^^^^^
>     uint256 private STAGE_USD_CAP_MAX     = 15100000000;    // $    15,100 USD

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenPublicSale
Line:        237
Source: 
>     uint256 private STAGE_USD_CAP_STEP    = 1000000;        // $     +1 USD
>     uint256 private STAGE_USD_CAP_MAX     = 15100000000;    // $    15,100 USD
>                                             ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenPublicSale
Line:        265
Source: 
>     // Top-Sales
>     uint256 private TOP_SALES_RATIO_START = 15000000;         // 15%, with 8 decimals
>                                             ^^^^^^^^
>     uint256 private TOP_SALES_RATIO_DISTANCE = 50000000;      // 50%, with 8 decimals

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenPublicSale
Line:        266
Source: 
>     uint256 private TOP_SALES_RATIO_START = 15000000;         // 15%, with 8 decimals
>     uint256 private TOP_SALES_RATIO_DISTANCE = 50000000;      // 50%, with 8 decimals
>                                                ^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenPublicSale
Line:        357
Source: 
>     function usd2token(uint256 usdAmount) private view returns (uint256) {
>         return usdAmount.mul(1000000).div(_tokenUsdPrice);
>                              ^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenPublicSale
Line:        361
Source: 
>     function usd2tokenByStage(uint256 usdAmount, uint16 stageIndex) public view returns (uint256) {
>         return usdAmount.mul(1000000).div(stageTokenUsdPrice(stageIndex));
>                              ^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenPublicSale
Line:        481
Source: 
>     function usd2weiTopSales(uint256 usdAmount) private view returns (uint256) {
>         return usd2wei(usdAmount.mul(_topSalesRatio).div(100000000));
>                                                          ^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Ownable
Line:        141
Source: 
> 
>         to.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    TokenPublicSale
Line:        385
Source: 
>         emit SeasonTopSalesWeiTransfered(seasonNumber, to, __weiRemain);
>         to.transfer(__weiRemain);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    TokenPublicSale
Line:        399
Source: 
>         emit PendingWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    TokenPublicSale
Line:        408
Source: 
>         emit TeamWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    TokenPublicSale
Line:        617
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    TokenPublicSale
Line:        635
Source: 
>         _weiTeam = _weiTeam.add(__weiTeam);
>         _receiver.transfer(__weiTeam);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    TokenPublicSale
Line:        784
Source: 
> 
>             __receiver.transfer(__weiReward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Ownable
Line:        141
Source: 
> 
>         to.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    TokenPublicSale
Line:        385
Source: 
>         emit SeasonTopSalesWeiTransfered(seasonNumber, to, __weiRemain);
>         to.transfer(__weiRemain);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    TokenPublicSale
Line:        399
Source: 
>         emit PendingWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    TokenPublicSale
Line:        408
Source: 
>         emit TeamWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    TokenPublicSale
Line:        617
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    TokenPublicSale
Line:        635
Source: 
>         _weiTeam = _weiTeam.add(__weiTeam);
>         _receiver.transfer(__weiTeam);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TokenPublicSale
Line:        784
Source: 
> 
>             __receiver.transfer(__weiReward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Ownable
Line:        141
Source: 
> 
>         to.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TokenPublicSale
Line:        385
Source: 
>         emit SeasonTopSalesWeiTransfered(seasonNumber, to, __weiRemain);
>         to.transfer(__weiRemain);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TokenPublicSale
Line:        399
Source: 
>         emit PendingWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TokenPublicSale
Line:        408
Source: 
>         emit TeamWeiTransfered(to, __weiRemain);
>         to.transfer(__weiRemain);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TokenPublicSale
Line:        617
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TokenPublicSale
Line:        635
Source: 
>         _weiTeam = _weiTeam.add(__weiTeam);
>         _receiver.transfer(__weiTeam);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TokenPublicSale
Line:        784
Source: 
> 
>             __receiver.transfer(__weiReward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        129
Source: 
>         require(receiver != address(0));
>         uint256 balance = _token.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balance >= amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        132
Source: 
> 
>         assert(_token.transfer(receiver, amount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        129
Source: 
>         require(receiver != address(0));
>         uint256 balance = _token.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balance >= amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        132
Source: 
> 
>         assert(_token.transfer(receiver, amount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        129
Source: 
>         require(receiver != address(0));
>         uint256 balance = _token.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balance >= amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        132
Source: 
> 
>         assert(_token.transfer(receiver, amount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenPublicSale
Line:        731
Source: 
> 
>         assert(TOKEN.transfer(msg.sender, amount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenIssuedTransfered(_stage, msg.sender, amount, _etherPrice, usdAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenPublicSale
Line:        753
Source: 
> 
>         assert(TOKEN.transfer(msg.sender, amount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenWhitelistTransfered(msg.sender, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenPublicSale
Line:        742
Source: 
> 
>         assert(TOKEN.transfer(msg.sender, amount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenBonusTransfered(msg.sender, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenPublicSale
Line:        645
Source: 
> 
>         _inWhitelist_ = TOKEN.inWhitelist(msg.sender);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenPublicSale
Line:        650
Source: 
>         for(uint16 i = 0; i < WHITELIST_REF_REWARDS_PCT.length; i++) {
>             address __refAccount = TOKEN.referrer(__cursor);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenPublicSale
Line:        655
Source: 
> 
>             if (TOKEN.refCount(__refAccount) > i) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (!_seasonHasRefAccount[_season][__refAccount]) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenPublicSale
Line:        200
Source: 
>     // Start timestamp
>     uint32 _startTimestamp;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenPublicSale
Line:        203
Source: 
>     // Audit ether price
>     uint256 private _etherPrice;    // 1 Ether = xx.xxxxxx USD, with 6 decimals
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenPublicSale
Line:        250
Source: 
>     // Sum
>     uint256 private _txs;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint256 private _tokenTxs;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenPublicSale
Line:        251
Source: 
>     uint256 private _txs;
>     uint256 private _tokenTxs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _tokenBonusTxs;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenPublicSale
Line:        252
Source: 
>     uint256 private _tokenTxs;
>     uint256 private _tokenBonusTxs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _tokenWhitelistTxs;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenPublicSale
Line:        253
Source: 
>     uint256 private _tokenBonusTxs;
>     uint256 private _tokenWhitelistTxs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _tokenIssued;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenPublicSale
Line:        254
Source: 
>     uint256 private _tokenWhitelistTxs;
>     uint256 private _tokenIssued;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _tokenBonus;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenPublicSale
Line:        255
Source: 
>     uint256 private _tokenIssued;
>     uint256 private _tokenBonus;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _tokenWhitelist;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenPublicSale
Line:        256
Source: 
>     uint256 private _tokenBonus;
>     uint256 private _tokenWhitelist;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _weiSold;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenPublicSale
Line:        257
Source: 
>     uint256 private _tokenWhitelist;
>     uint256 private _weiSold;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _weiRefRewarded;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenPublicSale
Line:        258
Source: 
>     uint256 private _weiSold;
>     uint256 private _weiRefRewarded;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _weiTopSales;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenPublicSale
Line:        259
Source: 
>     uint256 private _weiRefRewarded;
>     uint256 private _weiTopSales;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _weiTeam;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenPublicSale
Line:        260
Source: 
>     uint256 private _weiTopSales;
>     uint256 private _weiTeam;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _weiPending;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenPublicSale
Line:        261
Source: 
>     uint256 private _weiTeam;
>     uint256 private _weiPending;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _weiPendingTransfered;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenPublicSale
Line:        262
Source: 
>     uint256 private _weiPending;
>     uint256 private _weiPendingTransfered;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenPublicSale
Line:        271
Source: 
>     // During tx
>     bool private _inWhitelist_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    TokenPublicSale
Line:        617
Source: 
>             // Refund wei back
>             msg.sender.transfer(__weiRemain);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    TokenPublicSale
Line:        635
Source: 
>         _weiTeam = _weiTeam.add(__weiTeam);
>         _receiver.transfer(__weiTeam);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    TokenPublicSale
Line:        784
Source: 
> 
>             __receiver.transfer(__weiReward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        760
Source: 
>         emit StageClosed(_stage, msg.sender);
>         _stage = _stage.add(1);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         _tokenUsdPrice = stageTokenUsdPrice(_stage);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        761
Source: 
>         _stage = _stage.add(1);
>         _tokenUsdPrice = stageTokenUsdPrice(_stage);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _topSalesRatio = topSalesRatio(_stage);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        762
Source: 
>         _tokenUsdPrice = stageTokenUsdPrice(_stage);
>         _topSalesRatio = topSalesRatio(_stage);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        768
Source: 
>             emit SeasonClosed(_season, msg.sender);
>             _season = __seasonNumber;
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        725
Source: 
>     function transfertokenIssued(uint256 amount, uint256 usdAmount) private returns (bool) {
>         _tokenTxs = _tokenTxs.add(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        727
Source: 
> 
>         _tokenIssued = _tokenIssued.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _stageTokenIssued[_stage] = _stageTokenIssued[_stage].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        728
Source: 
>         _tokenIssued = _tokenIssued.add(amount);
>         _stageTokenIssued[_stage] = _stageTokenIssued[_stage].add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _accountTokenIssued[msg.sender] = _accountTokenIssued[msg.sender].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        711
Source: 
> 
>         _stageUsdSold[_stage] = _stageUsdSold[_stage].add(usdAmount);                   // stage sold, in USD
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _seasonWeiSold[_season] = _seasonWeiSold[_season].add(__weiSold);               // season sold, in wei

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        712
Source: 
>         _stageUsdSold[_stage] = _stageUsdSold[_stage].add(usdAmount);                   // stage sold, in USD
>         _seasonWeiSold[_season] = _seasonWeiSold[_season].add(__weiSold);               // season sold, in wei
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _seasonWeiTopSales[_season] = _seasonWeiTopSales[_season].add(__weiTopSales);   // season Top-Sales, in wei

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        713
Source: 
>         _seasonWeiSold[_season] = _seasonWeiSold[_season].add(__weiSold);               // season sold, in wei
>         _seasonWeiTopSales[_season] = _seasonWeiTopSales[_season].add(__weiTopSales);   // season Top-Sales, in wei
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _weiTopSales = _weiTopSales.add(__weiTopSales);                                 // sum Top-Sales, in wei

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        714
Source: 
>         _seasonWeiTopSales[_season] = _seasonWeiTopSales[_season].add(__weiTopSales);   // season Top-Sales, in wei
>         _weiTopSales = _weiTopSales.add(__weiTopSales);                                 // sum Top-Sales, in wei
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        719
Source: 
>             for (uint16 i = 0; i < _rewards_.length; i++) {
>                 _usdSeasonAccountRef[_season][_referrers_[i]] = _usdSeasonAccountRef[_season][_referrers_[i]].add(usdAmount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        622
Source: 
>         if (__weiUsed > 0) {
>             _txs = _txs.add(1);
>             ^^^^^^^^^^^^^^^^^^
>             _weiSold = _weiSold.add(__weiUsed);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        623
Source: 
>             _txs = _txs.add(1);
>             _weiSold = _weiSold.add(__weiUsed);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _accountWeiPurchased[msg.sender] = _accountWeiPurchased[msg.sender].add(__weiUsed);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        634
Source: 
> 
>         _weiTeam = _weiTeam.add(__weiTeam);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _receiver.transfer(__weiTeam);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        780
Source: 
> 
>             _weiRefRewarded = _weiRefRewarded.add(__weiReward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _accountWeiRefRewarded[__receiver] = _accountWeiRefRewarded[__receiver].add(__weiReward);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        781
Source: 
>             _weiRefRewarded = _weiRefRewarded.add(__weiReward);
>             _accountWeiRefRewarded[__receiver] = _accountWeiRefRewarded[__receiver].add(__weiReward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             __weiRemain = __weiRemain.sub(__weiReward);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        788
Source: 
>         if (_pending_ > 0)
>             _weiPending = _weiPending.add(weiAmount.mul(_pending_).div(100));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        748
Source: 
>     function transferTokenWhitelisted(uint256 amount) private returns (bool) {
>         _tokenWhitelistTxs = _tokenWhitelistTxs.add(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        750
Source: 
> 
>         _tokenWhitelist = _tokenWhitelist.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _accountTokenWhitelisted[msg.sender] = _accountTokenWhitelisted[msg.sender].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        737
Source: 
>     function transferTokenBonus(uint256 amount) private returns (bool) {
>         _tokenBonusTxs = _tokenBonusTxs.add(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        739
Source: 
> 
>         _tokenBonus = _tokenBonus.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _accountTokenBonus[msg.sender] = _accountTokenBonus[msg.sender].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        642
Source: 
>     function setTemporaryVariables() private {
>         delete _referrers_;
>         ^^^^^^^^^^^^^^^^^^
>         delete _rewards_;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        643
Source: 
>         delete _referrers_;
>         delete _rewards_;
>         ^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        645
Source: 
> 
>         _inWhitelist_ = TOKEN.inWhitelist(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenPublicSale
Line:        646
Source: 
>         _inWhitelist_ = TOKEN.inWhitelist(msg.sender);
>         _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0x0073a236ee3dbd8a133f8d9d4717c0d6a042e392.sol
Tool Runtime = 6716.871008582995 seconds
#############################################