[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DSNote
Line:        298
Source: 
> 
>         assembly {
>         ^^^^^^^^^^
>             foo := calldataload(4)

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    DSChiefApprovals
Line:        661
Source: 
>     {
>         GOV.pull(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         IOU.mint(msg.sender, wad);

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    DSChiefApprovals
Line:        662
Source: 
>         GOV.pull(msg.sender, wad);
>         IOU.mint(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         deposits[msg.sender] = add(deposits[msg.sender], wad);

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    DSChiefApprovals
Line:        673
Source: 
>         subWeight(wad, votes[msg.sender]);
>         IOU.burn(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         GOV.push(msg.sender, wad);

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    DSChiefApprovals
Line:        674
Source: 
>         IOU.burn(msg.sender, wad);
>         GOV.push(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    DSChiefApprovals
Line:        661
Source: 
>     {
>         GOV.pull(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         IOU.mint(msg.sender, wad);

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    DSChiefApprovals
Line:        662
Source: 
>         GOV.pull(msg.sender, wad);
>         IOU.mint(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         deposits[msg.sender] = add(deposits[msg.sender], wad);

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    DSChiefApprovals
Line:        673
Source: 
>         subWeight(wad, votes[msg.sender]);
>         IOU.burn(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         GOV.push(msg.sender, wad);

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    DSChiefApprovals
Line:        674
Source: 
>         IOU.burn(msg.sender, wad);
>         GOV.push(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    VoteProxy
Line:        833
Source: 
>         iou = chief.IOU();
>         gov.approve(address(chief), uint256(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         iou.approve(address(chief), uint256(-1));

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    VoteProxy
Line:        834
Source: 
>         gov.approve(address(chief), uint256(-1));
>         iou.approve(address(chief), uint256(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DSToken
Line:        370
Source: 
>     bytes32  public  symbol;
>     uint256  public  decimals = 18; // standard token precision. override to customize
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSTokenBase
Line:        156
Source: 
> 
>     function totalSupply() public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _supply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSTokenBase
Line:        159
Source: 
>     }
>     function balanceOf(address src) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[src];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSTokenBase
Line:        162
Source: 
>     }
>     function allowance(address src, address guy) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _approvals[src][guy];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSTokenBase
Line:        166
Source: 
> 
>     function transfer(address dst, uint wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferFrom(msg.sender, dst, wad);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSTokenBase
Line:        188
Source: 
> 
>     function approve(address guy, uint wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approvals[msg.sender][guy] = wad;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        232
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        240
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        232
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        240
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSStop
Line:        339
Source: 
>     }
>     function stop() public auth note {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stopped = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSStop
Line:        342
Source: 
>     }
>     function start() public auth note {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stopped = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSTokenBase
Line:        156
Source: 
> 
>     function totalSupply() public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _supply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSTokenBase
Line:        159
Source: 
>     }
>     function balanceOf(address src) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[src];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSTokenBase
Line:        162
Source: 
>     }
>     function allowance(address src, address guy) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _approvals[src][guy];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSTokenBase
Line:        166
Source: 
> 
>     function transfer(address dst, uint wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferFrom(msg.sender, dst, wad);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        232
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        240
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSStop
Line:        339
Source: 
>     }
>     function stop() public auth note {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stopped = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSStop
Line:        342
Source: 
>     }
>     function start() public auth note {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stopped = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSToken
Line:        379
Source: 
> 
>     function approve(address guy) public stoppable returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return super.approve(guy, uint(-1));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSToken
Line:        383
Source: 
> 
>     function approve(address guy, uint wad) public stoppable returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return super.approve(guy, wad);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSToken
Line:        387
Source: 
> 
>     function transferFrom(address src, address dst, uint wad)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSToken
Line:        406
Source: 
> 
>     function push(address dst, uint wad) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         transferFrom(msg.sender, dst, wad);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSToken
Line:        409
Source: 
>     }
>     function pull(address src, uint wad) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         transferFrom(src, msg.sender, wad);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSToken
Line:        412
Source: 
>     }
>     function move(address src, address dst, uint wad) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         transferFrom(src, dst, wad);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSToken
Line:        422
Source: 
>     }
>     function mint(address guy, uint wad) public auth stoppable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[guy] = add(_balances[guy], wad);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSToken
Line:        427
Source: 
>     }
>     function burn(address guy, uint wad) public auth stoppable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (guy != msg.sender && _approvals[guy][msg.sender] != uint(-1)) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSToken
Line:        442
Source: 
> 
>     function setName(bytes32 name_) public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         name = name_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        232
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        240
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        232
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        240
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSRoles
Line:        540
Source: 
> 
>     function hasUserRole(address who, uint8 role)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSRoles
Line:        550
Source: 
> 
>     function canCall(address caller, address code, bytes4 sig)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSRoles
Line:        568
Source: 
> 
>     function setRootUser(address who, bool enabled)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSRoles
Line:        575
Source: 
> 
>     function setUserRole(address who, uint8 role, bool enabled)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSRoles
Line:        588
Source: 
> 
>     function setPublicCapability(address code, bytes4 sig, bool enabled)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSRoles
Line:        595
Source: 
> 
>     function setRoleCapability(uint8 role, address code, bytes4 sig, bool enabled)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        232
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        240
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSChiefApprovals
Line:        657
Source: 
> 
>     function lock(uint wad)
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSChiefApprovals
Line:        667
Source: 
> 
>     function free(uint wad)
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSChiefApprovals
Line:        699
Source: 
> 
>     function vote(bytes32 slate)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSChiefApprovals
Line:        712
Source: 
>     // like `drop`/`swap` except simply "elect this address if it is higher than current hat"
>     function lift(address whom)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        232
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        240
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSRoles
Line:        540
Source: 
> 
>     function hasUserRole(address who, uint8 role)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSRoles
Line:        550
Source: 
> 
>     function canCall(address caller, address code, bytes4 sig)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSRoles
Line:        568
Source: 
> 
>     function setRootUser(address who, bool enabled)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSRoles
Line:        575
Source: 
> 
>     function setUserRole(address who, uint8 role, bool enabled)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSRoles
Line:        588
Source: 
> 
>     function setPublicCapability(address code, bytes4 sig, bool enabled)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSRoles
Line:        595
Source: 
> 
>     function setRoleCapability(uint8 role, address code, bytes4 sig, bool enabled)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSChiefApprovals
Line:        657
Source: 
> 
>     function lock(uint wad)
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSChiefApprovals
Line:        667
Source: 
> 
>     function free(uint wad)
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSChiefApprovals
Line:        699
Source: 
> 
>     function vote(bytes32 slate)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSChiefApprovals
Line:        712
Source: 
>     // like `drop`/`swap` except simply "elect this address if it is higher than current hat"
>     function lift(address whom)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSChief
Line:        766
Source: 
> 
>     function setOwner(address owner_) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSChief
Line:        771
Source: 
> 
>     function setAuthority(DSAuthority authority_) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authority_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSChief
Line:        776
Source: 
> 
>     function isUserRoot(address who)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public view

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSChief
Line:        782
Source: 
>     }
>     function setRootUser(address who, bool enabled) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         who; enabled;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSChiefFab
Line:        789
Source: 
> contract DSChiefFab {
>     function newChief(DSToken gov, uint MAX_YAYS) public returns (DSChief chief) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DSToken iou = new DSToken('IOU');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VoteProxy
Line:        842
Source: 
> 
>     function lock(uint256 wad) public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         gov.pull(cold, wad);   // mkr from cold

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VoteProxy
Line:        847
Source: 
> 
>     function free(uint256 wad) public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         chief.free(wad);       // ious out, mkr in

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VoteProxy
Line:        852
Source: 
> 
>     function freeAll() public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         chief.free(chief.deposits(address(this)));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VoteProxy
Line:        857
Source: 
> 
>     function vote(address[] memory yays) public auth returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return chief.vote(yays);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VoteProxy
Line:        861
Source: 
> 
>     function vote(bytes32 slate) public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         chief.vote(slate);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VoteProxyFactory
Line:        922
Source: 
> 
>     function breakLink() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(hasProxy(msg.sender), "No VoteProxy found for this sender");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VoteProxyFactory
Line:        935
Source: 
> 
>     function linkSelf() public returns (VoteProxy voteProxy) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         initiateLink(msg.sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DSAuth
Line:        261
Source: 
>         } else {
>             return authority.canCall(src, address(this), sig);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DSChiefApprovals
Line:        661
Source: 
>     {
>         GOV.pull(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         IOU.mint(msg.sender, wad);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DSChiefApprovals
Line:        662
Source: 
>         GOV.pull(msg.sender, wad);
>         IOU.mint(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         deposits[msg.sender] = add(deposits[msg.sender], wad);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DSChiefApprovals
Line:        673
Source: 
>         subWeight(wad, votes[msg.sender]);
>         IOU.burn(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         GOV.push(msg.sender, wad);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DSChiefApprovals
Line:        674
Source: 
>         IOU.burn(msg.sender, wad);
>         GOV.push(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DSAuth
Line:        261
Source: 
>         } else {
>             return authority.canCall(src, address(this), sig);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DSChiefApprovals
Line:        661
Source: 
>     {
>         GOV.pull(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         IOU.mint(msg.sender, wad);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DSChiefApprovals
Line:        662
Source: 
>         GOV.pull(msg.sender, wad);
>         IOU.mint(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         deposits[msg.sender] = add(deposits[msg.sender], wad);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DSChiefApprovals
Line:        673
Source: 
>         subWeight(wad, votes[msg.sender]);
>         IOU.burn(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         GOV.push(msg.sender, wad);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DSChiefApprovals
Line:        674
Source: 
>         IOU.burn(msg.sender, wad);
>         GOV.push(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        232
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        240
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        232
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        240
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        232
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        240
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSToken
Line:        409
Source: 
>     }
>     function pull(address src, uint wad) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         transferFrom(src, msg.sender, wad);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        232
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        240
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        232
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        240
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSRoles
Line:        550
Source: 
> 
>     function canCall(address caller, address code, bytes4 sig)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        232
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        240
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSChiefApprovals
Line:        667
Source: 
> 
>     function free(uint wad)
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSChiefApprovals
Line:        691
Source: 
> 
>     function vote(address[] memory yays) public returns (bytes32)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // note  both sub-calls note

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        232
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        240
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSRoles
Line:        550
Source: 
> 
>     function canCall(address caller, address code, bytes4 sig)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSChiefApprovals
Line:        657
Source: 
> 
>     function lock(uint wad)
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSChiefApprovals
Line:        667
Source: 
> 
>     function free(uint wad)
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSChiefApprovals
Line:        691
Source: 
> 
>     function vote(address[] memory yays) public returns (bytes32)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // note  both sub-calls note

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VoteProxyFactory
Line:        903
Source: 
> 
>     function initiateLink(address hot) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!hasProxy(msg.sender), "Cold wallet is already linked to another Vote Proxy");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSTokenBase
Line:        159
Source: 
>     }
>     function balanceOf(address src) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[src];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSTokenBase
Line:        162
Source: 
>     }
>     function allowance(address src, address guy) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _approvals[src][guy];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSTokenBase
Line:        166
Source: 
> 
>     function transfer(address dst, uint wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferFrom(msg.sender, dst, wad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSTokenBase
Line:        170
Source: 
> 
>     function transferFrom(address src, address dst, uint wad)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSTokenBase
Line:        188
Source: 
> 
>     function approve(address guy, uint wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approvals[msg.sender][guy] = wad;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSTokenBase
Line:        159
Source: 
>     }
>     function balanceOf(address src) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[src];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSTokenBase
Line:        162
Source: 
>     }
>     function allowance(address src, address guy) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _approvals[src][guy];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSTokenBase
Line:        166
Source: 
> 
>     function transfer(address dst, uint wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferFrom(msg.sender, dst, wad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSTokenBase
Line:        170
Source: 
> 
>     function transferFrom(address src, address dst, uint wad)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSTokenBase
Line:        188
Source: 
> 
>     function approve(address guy, uint wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approvals[msg.sender][guy] = wad;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSToken
Line:        379
Source: 
> 
>     function approve(address guy) public stoppable returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return super.approve(guy, uint(-1));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSToken
Line:        383
Source: 
> 
>     function approve(address guy, uint wad) public stoppable returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return super.approve(guy, wad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSToken
Line:        387
Source: 
> 
>     function transferFrom(address src, address dst, uint wad)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSToken
Line:        406
Source: 
> 
>     function push(address dst, uint wad) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         transferFrom(msg.sender, dst, wad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSToken
Line:        412
Source: 
>     }
>     function move(address src, address dst, uint wad) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         transferFrom(src, dst, wad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSToken
Line:        416
Source: 
> 
>     function mint(uint wad) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mint(msg.sender, wad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSToken
Line:        419
Source: 
>     }
>     function burn(uint wad) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         burn(msg.sender, wad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSToken
Line:        422
Source: 
>     }
>     function mint(address guy, uint wad) public auth stoppable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[guy] = add(_balances[guy], wad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSToken
Line:        442
Source: 
> 
>     function setName(bytes32 name_) public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         name = name_;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        508
Source: 
> 
>     function getUserRoles(address who)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        516
Source: 
> 
>     function getCapabilityRoles(address code, bytes4 sig)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        524
Source: 
> 
>     function isUserRoot(address who)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        532
Source: 
> 
>     function isCapabilityPublic(address code, bytes4 sig)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        540
Source: 
> 
>     function hasUserRole(address who, uint8 role)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        568
Source: 
> 
>     function setRootUser(address who, bool enabled)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        575
Source: 
> 
>     function setUserRole(address who, uint8 role, bool enabled)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        588
Source: 
> 
>     function setPublicCapability(address code, bytes4 sig, bool enabled)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        595
Source: 
> 
>     function setRoleCapability(uint8 role, address code, bytes4 sig, bool enabled)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSChiefApprovals
Line:        657
Source: 
> 
>     function lock(uint wad)
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        508
Source: 
> 
>     function getUserRoles(address who)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        516
Source: 
> 
>     function getCapabilityRoles(address code, bytes4 sig)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        524
Source: 
> 
>     function isUserRoot(address who)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        532
Source: 
> 
>     function isCapabilityPublic(address code, bytes4 sig)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        540
Source: 
> 
>     function hasUserRole(address who, uint8 role)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        568
Source: 
> 
>     function setRootUser(address who, bool enabled)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        575
Source: 
> 
>     function setUserRole(address who, uint8 role, bool enabled)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        588
Source: 
> 
>     function setPublicCapability(address code, bytes4 sig, bool enabled)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSRoles
Line:        595
Source: 
> 
>     function setRoleCapability(uint8 role, address code, bytes4 sig, bool enabled)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSChief
Line:        766
Source: 
> 
>     function setOwner(address owner_) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner_;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSChief
Line:        771
Source: 
> 
>     function setAuthority(DSAuthority authority_) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authority_;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSChief
Line:        776
Source: 
> 
>     function isUserRoot(address who)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public view

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSChief
Line:        782
Source: 
>     }
>     function setRootUser(address who, bool enabled) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         who; enabled;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSChiefFab
Line:        789
Source: 
> contract DSChiefFab {
>     function newChief(DSToken gov, uint MAX_YAYS) public returns (DSChief chief) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DSToken iou = new DSToken('IOU');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VoteProxy
Line:        842
Source: 
> 
>     function lock(uint256 wad) public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         gov.pull(cold, wad);   // mkr from cold

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VoteProxy
Line:        847
Source: 
> 
>     function free(uint256 wad) public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         chief.free(wad);       // ious out, mkr in

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VoteProxy
Line:        857
Source: 
> 
>     function vote(address[] memory yays) public auth returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return chief.vote(yays);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VoteProxy
Line:        861
Source: 
> 
>     function vote(bytes32 slate) public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         chief.vote(slate);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VoteProxyFactory
Line:        899
Source: 
> 
>     function hasProxy(address guy) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (address(coldMap[guy]) != address(0x0) || address(hotMap[guy]) != address(0x0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DSChief
Line:        758
Source: 
> 
>     constructor(DSToken GOV, DSToken IOU, uint MAX_YAYS)
>                 ^^^^^^^^^^^
>              DSChiefApprovals (GOV, IOU, MAX_YAYS)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DSChief
Line:        758
Source: 
> 
>     constructor(DSToken GOV, DSToken IOU, uint MAX_YAYS)
>                              ^^^^^^^^^^^
>              DSChiefApprovals (GOV, IOU, MAX_YAYS)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DSChief
Line:        758
Source: 
> 
>     constructor(DSToken GOV, DSToken IOU, uint MAX_YAYS)
>                                           ^^^^^^^^^^^^^
>              DSChiefApprovals (GOV, IOU, MAX_YAYS)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSThing
Line:        474
Source: 
> contract DSThing is DSAuth, DSNote, DSMath {
>     function S(string memory s) internal pure returns (bytes4) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return bytes4(keccak256(abi.encodePacked(s)));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSRoles
Line:        503
Source: 
> {
>     mapping(address=>bool) _root_users;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address=>bytes32) _user_roles;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSRoles
Line:        504
Source: 
>     mapping(address=>bool) _root_users;
>     mapping(address=>bytes32) _user_roles;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address=>mapping(bytes4=>bytes32)) _capability_roles;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSRoles
Line:        505
Source: 
>     mapping(address=>bytes32) _user_roles;
>     mapping(address=>mapping(bytes4=>bytes32)) _capability_roles;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address=>mapping(bytes4=>bool)) _public_capabilities;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSRoles
Line:        506
Source: 
>     mapping(address=>mapping(bytes4=>bytes32)) _capability_roles;
>     mapping(address=>mapping(bytes4=>bool)) _public_capabilities;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSRoles
Line:        558
Source: 
>         } else {
>             bytes32 has_roles = getUserRoles(caller);
>             ^^^^^^^^^^^^^^^^^
>             bytes32 needs_one_of = getCapabilityRoles(code, sig);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSRoles
Line:        559
Source: 
>             bytes32 has_roles = getUserRoles(caller);
>             bytes32 needs_one_of = getCapabilityRoles(code, sig);
>             ^^^^^^^^^^^^^^^^^^^^
>             return bytes32(0) != has_roles & needs_one_of;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSRoles
Line:        564
Source: 
> 
>     function BITNOT(bytes32 input) internal pure returns (bytes32 output) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (input ^ bytes32(uint(-1)));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSRoles
Line:        579
Source: 
>     {
>         bytes32 last_roles = _user_roles[who];
>         ^^^^^^^^^^^^^^^^^^
>         bytes32 shifted = bytes32(uint256(uint256(2) ** uint256(role)));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSRoles
Line:        599
Source: 
>     {
>         bytes32 last_roles = _capability_roles[code][sig];
>         ^^^^^^^^^^^^^^^^^^
>         bytes32 shifted = bytes32(uint256(uint256(2) ** uint256(role)));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSChiefApprovals
Line:        640
Source: 
>     mapping(address=>uint256) public deposits;
>     DSToken public GOV; // voting token that gets locked up
>     ^^^^^^^^^^^^^^^^^^
>     DSToken public IOU; // non-voting representation of a token, for e.g. secondary voting mechanisms

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSChiefApprovals
Line:        641
Source: 
>     DSToken public GOV; // voting token that gets locked up
>     DSToken public IOU; // non-voting representation of a token, for e.g. secondary voting mechanisms
>     ^^^^^^^^^^^^^^^^^^
>     address public hat; // the chieftain's hat

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSChiefApprovals
Line:        644
Source: 
> 
>     uint256 public MAX_YAYS;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        14
Source: 
> //pragma solidity >0.4.20;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSMath
Line:        75
Source: 
> 
>     uint constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant RAY = 10 ** 27;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSMath
Line:        76
Source: 
>     uint constant WAD = 10 ** 18;
>     uint constant RAY = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSTokenBase
Line:        147
Source: 
> contract DSTokenBase is ERC20, DSMath {
>     uint256                                            _supply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint256)                       _balances;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSTokenBase
Line:        148
Source: 
>     uint256                                            _supply;
>     mapping (address => uint256)                       _balances;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => mapping (address => uint256))  _approvals;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSTokenBase
Line:        149
Source: 
>     mapping (address => uint256)                       _balances;
>     mapping (address => mapping (address => uint256))  _approvals;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSNote
Line:        294
Source: 
>     modifier note {
>         bytes32 foo;
>         ^^^^^^^^^^^
>         bytes32 bar;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSNote
Line:        295
Source: 
>         bytes32 foo;
>         bytes32 bar;
>         ^^^^^^^^^^^
>         uint256 wad;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSNote
Line:        296
Source: 
>         bytes32 bar;
>         uint256 wad;
>         ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSRoles
Line:        503
Source: 
> {
>     mapping(address=>bool) _root_users;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address=>bytes32) _user_roles;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSRoles
Line:        504
Source: 
>     mapping(address=>bool) _root_users;
>     mapping(address=>bytes32) _user_roles;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address=>mapping(bytes4=>bytes32)) _capability_roles;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSRoles
Line:        505
Source: 
>     mapping(address=>bytes32) _user_roles;
>     mapping(address=>mapping(bytes4=>bytes32)) _capability_roles;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address=>mapping(bytes4=>bool)) _public_capabilities;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DSAuth
Line:        261
Source: 
>         } else {
>             return authority.canCall(src, address(this), sig);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VoteProxyFactory
Line:        929
Source: 
>         address hot = voteProxy.hot();
>         require(chief.deposits(address(voteProxy)) == 0, "VoteProxy still has funds attached to it");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DSChiefApprovals
Line:        661
Source: 
>     {
>         GOV.pull(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         IOU.mint(msg.sender, wad);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DSChiefApprovals
Line:        662
Source: 
>         GOV.pull(msg.sender, wad);
>         IOU.mint(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         deposits[msg.sender] = add(deposits[msg.sender], wad);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DSChiefApprovals
Line:        673
Source: 
>         subWeight(wad, votes[msg.sender]);
>         IOU.burn(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         GOV.push(msg.sender, wad);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DSChiefApprovals
Line:        674
Source: 
>         IOU.burn(msg.sender, wad);
>         GOV.push(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DSChiefApprovals
Line:        661
Source: 
>     {
>         GOV.pull(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         IOU.mint(msg.sender, wad);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DSChiefApprovals
Line:        662
Source: 
>         GOV.pull(msg.sender, wad);
>         IOU.mint(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         deposits[msg.sender] = add(deposits[msg.sender], wad);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DSChiefApprovals
Line:        673
Source: 
>         subWeight(wad, votes[msg.sender]);
>         IOU.burn(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         GOV.push(msg.sender, wad);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DSChiefApprovals
Line:        674
Source: 
>         IOU.burn(msg.sender, wad);
>         GOV.push(msg.sender, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DSChiefFab
Line:        792
Source: 
>         chief = new DSChief(gov, iou, MAX_YAYS);
>         iou.setOwner(address(chief));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteProxy
Line:        831
Source: 
> 
>         gov = chief.GOV();
>               ^^^^^^^^^^^
>         iou = chief.IOU();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteProxy
Line:        832
Source: 
>         gov = chief.GOV();
>         iou = chief.IOU();
>               ^^^^^^^^^^^
>         gov.approve(address(chief), uint256(-1));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteProxy
Line:        833
Source: 
>         iou = chief.IOU();
>         gov.approve(address(chief), uint256(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         iou.approve(address(chief), uint256(-1));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteProxy
Line:        834
Source: 
>         gov.approve(address(chief), uint256(-1));
>         iou.approve(address(chief), uint256(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteProxy
Line:        843
Source: 
>     function lock(uint256 wad) public auth {
>         gov.pull(cold, wad);   // mkr from cold
>         ^^^^^^^^^^^^^^^^^^^
>         chief.lock(wad);       // mkr out, ious in

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteProxy
Line:        844
Source: 
>         gov.pull(cold, wad);   // mkr from cold
>         chief.lock(wad);       // mkr out, ious in
>         ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteProxy
Line:        848
Source: 
>     function free(uint256 wad) public auth {
>         chief.free(wad);       // ious out, mkr in
>         ^^^^^^^^^^^^^^^
>         gov.push(cold, wad);   // mkr to cold

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteProxy
Line:        849
Source: 
>         chief.free(wad);       // ious out, mkr in
>         gov.push(cold, wad);   // mkr to cold
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteProxy
Line:        853
Source: 
>     function freeAll() public auth {
>         chief.free(chief.deposits(address(this)));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         gov.push(cold, gov.balanceOf(address(this)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteProxy
Line:        853
Source: 
>     function freeAll() public auth {
>         chief.free(chief.deposits(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         gov.push(cold, gov.balanceOf(address(this)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteProxy
Line:        854
Source: 
>         chief.free(chief.deposits(address(this)));
>         gov.push(cold, gov.balanceOf(address(this)));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteProxy
Line:        854
Source: 
>         chief.free(chief.deposits(address(this)));
>         gov.push(cold, gov.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteProxy
Line:        858
Source: 
>     function vote(address[] memory yays) public auth returns (bytes32) {
>         return chief.vote(yays);
>                ^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteProxy
Line:        862
Source: 
>     function vote(bytes32 slate) public auth {
>         chief.vote(slate);
>         ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteProxyFactory
Line:        927
Source: 
>             ? coldMap[msg.sender] : hotMap[msg.sender];
>         address cold = voteProxy.cold();
>                        ^^^^^^^^^^^^^^^^
>         address hot = voteProxy.hot();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteProxyFactory
Line:        928
Source: 
>         address cold = voteProxy.cold();
>         address hot = voteProxy.hot();
>                       ^^^^^^^^^^^^^^^
>         require(chief.deposits(address(voteProxy)) == 0, "VoteProxy still has funds attached to it");

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DSMath
Line:        53
Source: 
>     function add(uint x, uint y) internal pure returns (uint z) {
>         require((z = x + y) >= x, "ds-math-add-overflow");
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DSMath
Line:        56
Source: 
>     function sub(uint x, uint y) internal pure returns (uint z) {
>         require((z = x - y) <= x, "ds-math-sub-underflow");
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DSMath
Line:        59
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");
>                            ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSAuth
Line:        224
Source: 
> contract DSAuth is DSAuthEvents {
>     DSAuthority  public  authority;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address      public  owner;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSStop
Line:        333
Source: 
> contract DSStop is DSNote, DSAuth {
>     bool public stopped;
>     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSAuth
Line:        224
Source: 
> contract DSAuth is DSAuthEvents {
>     DSAuthority  public  authority;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address      public  owner;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSStop
Line:        333
Source: 
> contract DSStop is DSNote, DSAuth {
>     bool public stopped;
>     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSAuth
Line:        224
Source: 
> contract DSAuth is DSAuthEvents {
>     DSAuthority  public  authority;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address      public  owner;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSChiefApprovals
Line:        642
Source: 
>     DSToken public IOU; // non-voting representation of a token, for e.g. secondary voting mechanisms
>     address public hat; // the chieftain's hat
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VoteProxy
Line:        822
Source: 
>     address public hot;
>     DSToken public gov;
>     ^^^^^^^^^^^^^^^^^^
>     DSToken public iou;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VoteProxy
Line:        823
Source: 
>     DSToken public gov;
>     DSToken public iou;
>     ^^^^^^^^^^^^^^^^^^
>     DSChief public chief;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        236
Source: 
>     {
>         owner = owner_;
>         ^^^^^^^^^^^^^^
>         emit LogSetOwner(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        244
Source: 
>     {
>         authority = authority_;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        236
Source: 
>     {
>         owner = owner_;
>         ^^^^^^^^^^^^^^
>         emit LogSetOwner(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        244
Source: 
>     {
>         authority = authority_;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSStop
Line:        340
Source: 
>     function stop() public auth note {
>         stopped = true;
>         ^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSStop
Line:        343
Source: 
>     function start() public auth note {
>         stopped = false;
>         ^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        236
Source: 
>     {
>         owner = owner_;
>         ^^^^^^^^^^^^^^
>         emit LogSetOwner(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        244
Source: 
>     {
>         authority = authority_;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSStop
Line:        340
Source: 
>     function stop() public auth note {
>         stopped = true;
>         ^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSStop
Line:        343
Source: 
>     function start() public auth note {
>         stopped = false;
>         ^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSToken
Line:        423
Source: 
>     function mint(address guy, uint wad) public auth stoppable {
>         _balances[guy] = add(_balances[guy], wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _supply = add(_supply, wad);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSToken
Line:        424
Source: 
>         _balances[guy] = add(_balances[guy], wad);
>         _supply = add(_supply, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Mint(guy, wad);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSToken
Line:        443
Source: 
>     function setName(bytes32 name_) public auth {
>         name = name_;
>         ^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        236
Source: 
>     {
>         owner = owner_;
>         ^^^^^^^^^^^^^^
>         emit LogSetOwner(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        244
Source: 
>     {
>         authority = authority_;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        236
Source: 
>     {
>         owner = owner_;
>         ^^^^^^^^^^^^^^
>         emit LogSetOwner(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        244
Source: 
>     {
>         authority = authority_;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSRoles
Line:        572
Source: 
>     {
>         _root_users[who] = enabled;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSRoles
Line:        582
Source: 
>         if( enabled ) {
>             _user_roles[who] = last_roles | shifted;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSRoles
Line:        584
Source: 
>         } else {
>             _user_roles[who] = last_roles & BITNOT(shifted);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSRoles
Line:        592
Source: 
>     {
>         _public_capabilities[code][sig] = enabled;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSRoles
Line:        602
Source: 
>         if( enabled ) {
>             _capability_roles[code][sig] = last_roles | shifted;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSRoles
Line:        604
Source: 
>         } else {
>             _capability_roles[code][sig] = last_roles & BITNOT(shifted);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        236
Source: 
>     {
>         owner = owner_;
>         ^^^^^^^^^^^^^^
>         emit LogSetOwner(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        244
Source: 
>     {
>         authority = authority_;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSChiefApprovals
Line:        725
Source: 
>         for( uint i = 0; i < yays.length; i++) {
>             approvals[yays[i]] = add(approvals[yays[i]], weight);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSChiefApprovals
Line:        734
Source: 
>         for( uint i = 0; i < yays.length; i++) {
>             approvals[yays[i]] = sub(approvals[yays[i]], weight);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSChiefApprovals
Line:        717
Source: 
>         require(approvals[whom] > approvals[hat]);
>         hat = whom;
>         ^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        236
Source: 
>     {
>         owner = owner_;
>         ^^^^^^^^^^^^^^
>         emit LogSetOwner(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        244
Source: 
>     {
>         authority = authority_;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSRoles
Line:        572
Source: 
>     {
>         _root_users[who] = enabled;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSRoles
Line:        582
Source: 
>         if( enabled ) {
>             _user_roles[who] = last_roles | shifted;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSRoles
Line:        584
Source: 
>         } else {
>             _user_roles[who] = last_roles & BITNOT(shifted);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSRoles
Line:        592
Source: 
>     {
>         _public_capabilities[code][sig] = enabled;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSRoles
Line:        602
Source: 
>         if( enabled ) {
>             _capability_roles[code][sig] = last_roles | shifted;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSRoles
Line:        604
Source: 
>         } else {
>             _capability_roles[code][sig] = last_roles & BITNOT(shifted);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSChiefApprovals
Line:        725
Source: 
>         for( uint i = 0; i < yays.length; i++) {
>             approvals[yays[i]] = add(approvals[yays[i]], weight);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSChiefApprovals
Line:        734
Source: 
>         for( uint i = 0; i < yays.length; i++) {
>             approvals[yays[i]] = sub(approvals[yays[i]], weight);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSChiefApprovals
Line:        717
Source: 
>         require(approvals[whom] > approvals[hat]);
>         hat = whom;
>         ^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DSTokenBase
Line:        189
Source: 
>     function approve(address guy, uint wad) public returns (bool) {
>         _approvals[msg.sender][guy] = wad;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DSChiefApprovals
Line:        686
Source: 
>         bytes32 hash = keccak256(abi.encodePacked(yays));
>         slates[hash] = yays;
>         ^^^^^^^^^^^^^^^^^^^
>         emit Etch(hash);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DSRoles
Line:        584
Source: 
>         } else {
>             _user_roles[who] = last_roles & BITNOT(shifted);
>                                             ^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DSRoles
Line:        604
Source: 
>         } else {
>             _capability_roles[code][sig] = last_roles & BITNOT(shifted);
>                                                         ^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteProxy
Line:        833
Source: 
>         iou = chief.IOU();
>         gov.approve(address(chief), uint256(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         iou.approve(address(chief), uint256(-1));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteProxy
Line:        834
Source: 
>         gov.approve(address(chief), uint256(-1));
>         iou.approve(address(chief), uint256(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        75
Source: 
> 
>     uint constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant RAY = 10 ** 27;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        76
Source: 
>     uint constant WAD = 10 ** 18;
>     uint constant RAY = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        75
Source: 
> 
>     uint constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant RAY = 10 ** 27;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        76
Source: 
>     uint constant WAD = 10 ** 18;
>     uint constant RAY = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSStop
Line:        333
Source: 
> contract DSStop is DSNote, DSAuth {
>     bool public stopped;
>     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        75
Source: 
> 
>     uint constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant RAY = 10 ** 27;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        76
Source: 
>     uint constant WAD = 10 ** 18;
>     uint constant RAY = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSToken
Line:        369
Source: 
> 
>     bytes32  public  symbol;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint256  public  decimals = 18; // standard token precision. override to customize

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSToken
Line:        370
Source: 
>     bytes32  public  symbol;
>     uint256  public  decimals = 18; // standard token precision. override to customize
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSToken
Line:        440
Source: 
>     // Optional token name
>     bytes32   public  name = "";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        75
Source: 
> 
>     uint constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant RAY = 10 ** 27;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        76
Source: 
>     uint constant WAD = 10 ** 18;
>     uint constant RAY = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        75
Source: 
> 
>     uint constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant RAY = 10 ** 27;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        76
Source: 
>     uint constant WAD = 10 ** 18;
>     uint constant RAY = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        75
Source: 
> 
>     uint constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant RAY = 10 ** 27;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        76
Source: 
>     uint constant WAD = 10 ** 18;
>     uint constant RAY = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0xCCe54a99CB6eF7600e2f17e9A0b161e5300D02Be.sol
Tool Runtime = 30.093952254000214 seconds
#############################################