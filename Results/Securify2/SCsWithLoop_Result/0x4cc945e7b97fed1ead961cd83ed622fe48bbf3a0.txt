pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    NameFilter
Line:        391
Source: 
>  */
> interface IERC20 {
>    ^^^^^^^^^^^^^^^
>     /**

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        505
Source: 
>      */
>     function toPayable(address account) internal pure returns (address payable) {
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(uint160(account));

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    PlayerBook
Line:        1027
Source: 
>     /**
>      * @dev bind a refer,if affcode invalid, use default refer
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */  

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    PlayerBook
Line:        1053
Source: 
>         validAddress(from)  
>         private
>         ^^^^^^^
>         returns (bool)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PlayerBook
Line:        709
Source: 
> 
>     address payable public _teamWallet = 0x3D0a845C5ef9741De999FC068f70E2048A489F2b;
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PlayerBook
Line:        711
Source: 
>   
>     IERC20 public _dego = IERC20(0x0);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PlayerBook
Line:        718
Source: 
>         uint256 laff;
>         uint256 amount;
>                     ^^^
>         uint256 rreward;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PlayerBook
Line:        720
Source: 
>         uint256 rreward;
>         uint256 allReward;
>                    ^^^^^^^
>         uint256 lv1Count;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PlayerBook
Line:        722
Source: 
>         uint256 lv1Count;
>         uint256 lv2Count;
>         ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        462
Source: 
> 
> // File: @openzeppelin/contracts/utils/Address.sol
>                                    ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        474
Source: 
>      *
>      * [IMPORTANT]
>   ^^^^^^^^^^^^^^^^
>      * ====

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        274
Source: 
>      */
>     function isOwner() public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _msgSender() == _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        294
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>                                                                   ^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        303
Source: 
>         require(newOwner != address(0), "Ownable: new owner is the zero address");
>         emit OwnershipTransferred(_owner, newOwner);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Governance
Line:        648
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
>                    ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlayerBook
Line:        810
Source: 
>         onlyGovernance
>         public
>       ^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlayerBook
Line:        822
Source: 
>      */
>     function settleReward(address from, uint256 amount)
>                                               ^^^^^^^^^
>         isRegisteredPool()

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlayerBook
Line:        886
Source: 
> 
>         //get reward
>                    ^
>         _dego.safeTransfer(addr, reward);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlayerBook
Line:        912
Source: 
>      */
>     function addDefaultPlayer(address addr, bytes32 name)
>                                    ^^^^^^^^^^^^^^^^^^^^^^
>         private

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlayerBook
Line:        944
Source: 
>     {
>         _registrationStep = registrationStep;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlayerBook
Line:        957
Source: 
>     /**
>      * @dev registers a name.  UI will always display the last name you registered.
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * but you will still own all previously registered names to use as affiliate 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlayerBook
Line:        961
Source: 
>      * - must pay a registration fee.
>      * - name must be unique
>           ^^^^^^^^^^^^^^^^^^
>      * - names will be converted to lowercase

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlayerBook
Line:        985
Source: 
>         // filter name + condition checks
>         bytes32 name = NameFilter.nameFilter(nameString);
>                                                       ^^^
>         // if names already has been used

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PlayerBook
Line:        775
Source: 
>         asset.safeTransfer(_teamWallet, balance);
>     }
>      
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PlayerBook
Line:        786
Source: 
>      */
>     function() external payable {
>                             ^^^^^
>         revert();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SafeERC20
Line:        615
Source: 
> 
> // File: contracts/library/Governance.sol
>                    ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PlayerBook
Line:        798
Source: 
>     {
>         require( !_pools[poolAddr], "derp, that pool already been registered");
>                                                                ^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PlayerBook
Line:        990
Source: 
>         // set up address 
>         address addr = msg.sender;
>                                   
>          // set up our tx event data and determine if player is new or not

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        548
Source: 
>  * @dev Wrappers around ERC20 operations that throw on failure (when the token
>  * contract returns false). Tokens that return no value (and instead revert or
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * throw on failure) are also supported, non-reverting calls are assumed to be

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        615
Source: 
> 
> // File: contracts/library/Governance.sol
>                    ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        548
Source: 
>  * @dev Wrappers around ERC20 operations that throw on failure (when the token
>  * contract returns false). Tokens that return no value (and instead revert or
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * throw on failure) are also supported, non-reverting calls are assumed to be

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        615
Source: 
> 
> // File: contracts/library/Governance.sol
>                    ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        548
Source: 
>  * @dev Wrappers around ERC20 operations that throw on failure (when the token
>  * contract returns false). Tokens that return no value (and instead revert or
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * throw on failure) are also supported, non-reverting calls are assumed to be

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        615
Source: 
> 
> // File: contracts/library/Governance.sol
>                    ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        548
Source: 
>  * @dev Wrappers around ERC20 operations that throw on failure (when the token
>  * contract returns false). Tokens that return no value (and instead revert or
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * throw on failure) are also supported, non-reverting calls are assumed to be

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        303
Source: 
>         require(newOwner != address(0), "Ownable: new owner is the zero address");
>         emit OwnershipTransferred(_owner, newOwner);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PlayerBook
Line:        833
Source: 
>         uint256 affID = _plyr[pID].laff;
>         
>     ^^^^
>         if(affID <= 0 ){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PlayerBook
Line:        944
Source: 
>     {
>         _registrationStep = registrationStep;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PlayerBook
Line:        957
Source: 
>     /**
>      * @dev registers a name.  UI will always display the last name you registered.
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * but you will still own all previously registered names to use as affiliate 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PlayerBook
Line:        961
Source: 
>      * - must pay a registration fee.
>      * - name must be unique
>           ^^^^^^^^^^^^^^^^^^
>      * - names will be converted to lowercase

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PlayerBook
Line:        1124
Source: 
>     {
>         uint256 pID =  _pIDxAddr[from];
>                    ^^^^^^^^^^^^^^^^^^^^
>         if(_pID==0){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PlayerBook
Line:        912
Source: 
>      */
>     function addDefaultPlayer(address addr, bytes32 name)
>                                    ^^^^^^^^^^^^^^^^^^^^^^
>         private

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PlayerBook
Line:        985
Source: 
>         // filter name + condition checks
>         bytes32 name = NameFilter.nameFilter(nameString);
>                                                       ^^^
>         // if names already has been used

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PlayerBook
Line:        1041
Source: 
>             }
>         }
>          
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PlayerBook
Line:        1136
Source: 
>     {
>         uint256 pID =  _pIDxAddr[from];
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(_pID==0){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PlayerBook
Line:        1161
Source: 
> 
>     function getTotalReferReward()
>                    ^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NameFilter
Line:        337
Source: 
>         {
>             require(_temp[1] != 0x78, "string cannot start with 0x");
>                                    ^^^^^^^^^^^^^^^^^^
>             require(_temp[1] != 0x58, "string cannot start with 0X");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NameFilter
Line:        338
Source: 
>             require(_temp[1] != 0x78, "string cannot start with 0x");
>             require(_temp[1] != 0x58, "string cannot start with 0X");
>          ^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NameFilter
Line:        353
Source: 
>                 
>                 // we have a non number
>                  ^^^^^^^^^^^^^^^^^^
>                 if (_hasNonNumber == false)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NameFilter
Line:        389
Source: 
>  * @dev Interface of the ERC20 standard as defined in the EIP. Does not include
>  * the optional functions; to access them see {ERC20Detailed}.
>                                                 ^^^^^^^^^^^^
>  */

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        547
Source: 
>  * @title SafeERC20
>  * @dev Wrappers around ERC20 operations that throw on failure (when the token
>                                                                        ^^^^^^^
>  * contract returns false). Tokens that return no value (and instead revert or

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Governance
Line:        635
Source: 
> 
>     function setGovernance(address governance)  public  onlyGovernance
>                                                    ^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        683
Source: 
>     mapping (uint256 => Player) public _plyr;      
>     // (pID => name => bool) list of names a player owns.  (used so you can change your display name amoungst any name you own)        
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint256 => mapping (bytes32 => bool)) public _plyrNames; 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        683
Source: 
>     mapping (uint256 => Player) public _plyr;      
>     // (pID => name => bool) list of names a player owns.  (used so you can change your display name amoungst any name you own)        
>                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint256 => mapping (bytes32 => bool)) public _plyrNames; 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        685
Source: 
>     mapping (uint256 => mapping (bytes32 => bool)) public _plyrNames; 
>   
> ^^
>     // the  of refrerrals

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        688
Source: 
>     uint256 public _totalReferReward;         
>     // total number of players
>                  ^^^^^^^^^^^^^
>     uint256 public _pID;      

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        694
Source: 
>     // the direct refer's reward rate
>     uint256 public _refer1RewardRate = 700; //7%
>                            ^^^^^^^^^^^^^^^^^^^^^
>     // the second direct refer's reward rate

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        696
Source: 
>     // the second direct refer's reward rate
>     uint256 public _refer2RewardRate = 300; //3%
>                                  ^^^^^^^^^^^^^^^
>     // base rate

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        700
Source: 
> 
>     // base price to register a name
>       ^^^^^^^^^^^^^^^^^^^
>     uint256 public _registrationBaseFee = 100 finney;     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        701
Source: 
>     // base price to register a name
>     uint256 public _registrationBaseFee = 100 finney;     
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
>     // register fee count step

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        703
Source: 
>     // register fee count step
>     uint256 public _registrationStep = 100;
>                           ^^^^^^^^^^^^^^^^^
>     // add base price for one step

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        705
Source: 
>     // add base price for one step
>     uint256 public _stepFee = 100 finney;     
>                                          ^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        709
Source: 
> 
>     address payable public _teamWallet = 0x3D0a845C5ef9741De999FC068f70E2048A489F2b;
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        711
Source: 
>   
>     IERC20 public _dego = IERC20(0x0);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        715
Source: 
>         address addr;
>         bytes32 name;
>           ^^^^^^^^^^^
>         uint8 nameCount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        718
Source: 
>         uint256 laff;
>         uint256 amount;
>                     ^^^
>         uint256 rreward;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        720
Source: 
>         uint256 rreward;
>         uint256 allReward;
>                    ^^^^^^^
>         uint256 lv1Count;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        722
Source: 
>         uint256 lv1Count;
>         uint256 lv2Count;
>         ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        725
Source: 
> 
>     event eveClaim(uint256 pID, address addr, uint256 reward, uint256 balance );
>                                                                ^^^^^^^^^^^^^^^^^
>     event eveBindRefer(uint256 pID, address addr, bytes32 name, uint256 affID, address affAddr, bytes32 affName);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        728
Source: 
>     event eveDefaultPlayer(uint256 pID, address addr, bytes32 name);      
>     event eveNewName(uint256 pID, address addr, bytes32 name, uint256 affID, address affAddr, bytes32 affName, uint256 balance  );
>                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event eveSettle(uint256 pID, uint256 affID, uint256 aff_affID, uint256 affReward, uint256 aff_affReward, uint256 amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        729
Source: 
>     event eveNewName(uint256 pID, address addr, bytes32 name, uint256 affID, address affAddr, bytes32 affName, uint256 balance  );
>     event eveSettle(uint256 pID, uint256 affID, uint256 aff_affID, uint256 affReward, uint256 aff_affReward, uint256 amount);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event eveAddPool(address addr);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        730
Source: 
>     event eveSettle(uint256 pID, uint256 affID, uint256 aff_affID, uint256 affReward, uint256 aff_affReward, uint256 amount);
>     event eveAddPool(address addr);
>                     ^^^^^^^^^^^^^^^
>     event eveRemovePool(address addr);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        735
Source: 
>     constructor()
>         public
> ^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        742
Source: 
> 
>     /**
>   ^^^^^
>      * check address

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        747
Source: 
>         require(addr != address(0x0));
>         _;
>         ^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        752
Source: 
>      * check pool
>      */
> ^^^^^^^
>     modifier isRegisteredPool(){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        798
Source: 
>     {
>         require( !_pools[poolAddr], "derp, that pool already been registered");
>      ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        859
Source: 
>         _plyr[aff_affID].rreward = _plyr[aff_affID].rreward.add(aff_affReward);
>         _totalReferReward= _totalReferReward.add(aff_affReward);
>                                                                 
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        861
Source: 
> 
>         _plyr[pID].amount = _plyr[pID].amount.add( amount);
>                                              ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PlayerBook
Line:        1093
Source: 
>         private
>         returns (bool)
>             ^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ownable
Line:        253
Source: 
>         _owner = msgSender;
>         emit OwnershipTransferred(address(0), msgSender);
>                                      ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Governance
Line:        635
Source: 
> 
>     function setGovernance(address governance)  public  onlyGovernance
>                                                    ^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlayerBook
Line:        683
Source: 
>     mapping (uint256 => Player) public _plyr;      
>     // (pID => name => bool) list of names a player owns.  (used so you can change your display name amoungst any name you own)        
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint256 => mapping (bytes32 => bool)) public _plyrNames; 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlayerBook
Line:        683
Source: 
>     mapping (uint256 => Player) public _plyr;      
>     // (pID => name => bool) list of names a player owns.  (used so you can change your display name amoungst any name you own)        
>                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint256 => mapping (bytes32 => bool)) public _plyrNames; 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlayerBook
Line:        685
Source: 
>     mapping (uint256 => mapping (bytes32 => bool)) public _plyrNames; 
>   
> ^^
>     // the  of refrerrals

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlayerBook
Line:        694
Source: 
>     // the direct refer's reward rate
>     uint256 public _refer1RewardRate = 700; //7%
>                            ^^^^^^^^^^^^^^^^^^^^^
>     // the second direct refer's reward rate

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlayerBook
Line:        696
Source: 
>     // the second direct refer's reward rate
>     uint256 public _refer2RewardRate = 300; //3%
>                                  ^^^^^^^^^^^^^^^
>     // base rate

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlayerBook
Line:        700
Source: 
> 
>     // base price to register a name
>       ^^^^^^^^^^^^^^^^^^^
>     uint256 public _registrationBaseFee = 100 finney;     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlayerBook
Line:        701
Source: 
>     // base price to register a name
>     uint256 public _registrationBaseFee = 100 finney;     
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
>     // register fee count step

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlayerBook
Line:        703
Source: 
>     // register fee count step
>     uint256 public _registrationStep = 100;
>                           ^^^^^^^^^^^^^^^^^
>     // add base price for one step

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlayerBook
Line:        715
Source: 
>         address addr;
>         bytes32 name;
>           ^^^^^^^^^^^
>         uint8 nameCount;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlayerBook
Line:        718
Source: 
>         uint256 laff;
>         uint256 amount;
>                     ^^^
>         uint256 rreward;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlayerBook
Line:        720
Source: 
>         uint256 rreward;
>         uint256 allReward;
>                    ^^^^^^^
>         uint256 lv1Count;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlayerBook
Line:        722
Source: 
>         uint256 lv1Count;
>         uint256 lv2Count;
>         ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlayerBook
Line:        725
Source: 
> 
>     event eveClaim(uint256 pID, address addr, uint256 reward, uint256 balance );
>                                                                ^^^^^^^^^^^^^^^^^
>     event eveBindRefer(uint256 pID, address addr, bytes32 name, uint256 affID, address affAddr, bytes32 affName);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlayerBook
Line:        765
Source: 
>         returns(uint256)
>     {
>      
>         return (_dego.balanceOf(address(this)));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    PlayerBook
Line:        798
Source: 
>     {
>         require( !_pools[poolAddr], "derp, that pool already been registered");
>                                                                ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    PlayerBook
Line:        798
Source: 
>     {
>         require( !_pools[poolAddr], "derp, that pool already been registered");
>                                                                ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PlayerBook
Line:        798
Source: 
>     {
>         require( !_pools[poolAddr], "derp, that pool already been registered");
>                                                                ^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PlayerBook
Line:        786
Source: 
>      */
>     function() external payable {
>                             ^^^^^
>         revert();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PlayerBook
Line:        990
Source: 
>         // set up address 
>         address addr = msg.sender;
>                                   
>          // set up our tx event data and determine if player is new or not

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PlayerBook
Line:        775
Source: 
>         asset.safeTransfer(_teamWallet, balance);
>     }
>      
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    NameFilter
Line:        363
Source: 
>                     (_temp[i] > 0x2f && _temp[i] < 0x3a),
>                     "string contains invalid characters"
>                                ^^^^^^^^^^^^^
>                 );

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        506
Source: 
>     function toPayable(address account) internal pure returns (address payable) {
>         return address(uint160(account));
>            ^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    PlayerBook
Line:        798
Source: 
>     {
>         require( !_pools[poolAddr], "derp, that pool already been registered");
>                                                                ^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PlayerBook
Line:        1113
Source: 
>     {
>         _determinePID(from);
>    ^^^^^^
>         uint256 pID =  _pIDxAddr[from];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PlayerBook
Line:        1113
Source: 
>     {
>         _determinePID(from);
>                        ^^^^^
>         uint256 pID =  _pIDxAddr[from];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PlayerBook
Line:        1114
Source: 
>         _determinePID(from);
>         uint256 pID =  _pIDxAddr[from];
>                               ^^^^^^^^^
>         return (_plyr[pID].laff > 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        548
Source: 
>  * @dev Wrappers around ERC20 operations that throw on failure (when the token
>  * contract returns false). Tokens that return no value (and instead revert or
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * throw on failure) are also supported, non-reverting calls are assumed to be

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        609
Source: 
>         if (returndata.length > 0) { // Return data is optional
>             // solhint-disable-next-line max-line-length
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        615
Source: 
> 
> // File: contracts/library/Governance.sol
>                    ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        578
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        583
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        589
Source: 
>      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
>      * on the return value: the return value is optional (but if data is returned, it must not be false).
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param token The token targeted by the call.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        548
Source: 
>  * @dev Wrappers around ERC20 operations that throw on failure (when the token
>  * contract returns false). Tokens that return no value (and instead revert or
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * throw on failure) are also supported, non-reverting calls are assumed to be

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        609
Source: 
>         if (returndata.length > 0) { // Return data is optional
>             // solhint-disable-next-line max-line-length
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        615
Source: 
> 
> // File: contracts/library/Governance.sol
>                    ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        578
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        583
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        589
Source: 
>      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
>      * on the return value: the return value is optional (but if data is returned, it must not be false).
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param token The token targeted by the call.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        548
Source: 
>  * @dev Wrappers around ERC20 operations that throw on failure (when the token
>  * contract returns false). Tokens that return no value (and instead revert or
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * throw on failure) are also supported, non-reverting calls are assumed to be

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        609
Source: 
>         if (returndata.length > 0) { // Return data is optional
>             // solhint-disable-next-line max-line-length
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        615
Source: 
> 
> // File: contracts/library/Governance.sol
>                    ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        578
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        583
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        589
Source: 
>      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
>      * on the return value: the return value is optional (but if data is returned, it must not be false).
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param token The token targeted by the call.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        548
Source: 
>  * @dev Wrappers around ERC20 operations that throw on failure (when the token
>  * contract returns false). Tokens that return no value (and instead revert or
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * throw on failure) are also supported, non-reverting calls are assumed to be

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        578
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        583
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        589
Source: 
>      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
>      * on the return value: the return value is optional (but if data is returned, it must not be false).
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param token The token targeted by the call.

[0m

---------------------------------------------
For contract 0x4cc945e7b97fed1ead961cd83ed622fe48bbf3a0.sol
Tool Runtime = 19.249177898999733 seconds
#############################################