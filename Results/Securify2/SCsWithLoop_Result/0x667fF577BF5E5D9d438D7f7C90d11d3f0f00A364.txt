pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        355
Source: 
>      */
>     function toPayable(address account) internal pure returns (address payable) {
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(uint160(account));

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PauserRole
Line:        134
Source: 
>         return _pausers.has(account);
>     }
>   ^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DegoOpenSale
Line:        748
Source: 
>     //the user get fund per stage
>     mapping (uint8 =>  mapping (address => uint256) ) public _stageFund;
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        628
Source: 
> 
> // File: contracts/library/SafeERC20.sol
>                                    ^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        640
Source: 
>  * @dev Wrappers around ERC20 operations that throw on failure (when the token
>  * contract returns false). Tokens that return no value (and instead revert or
>                                                            ^^^^^^^^^^^^^^^^^^^
>  * throw on failure) are also supported, non-reverting calls are assumed to be

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        149
Source: 
> 
>     function _removePauser(address account) internal {
>                                                 ^^^^^^
>         _pausers.remove(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        155
Source: 
> 
> // File: @openzeppelin/contracts/lifecycle/Pausable.sol
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        149
Source: 
> 
>     function _removePauser(address account) internal {
>                                                 ^^^^^^
>         _pausers.remove(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        155
Source: 
> 
> // File: @openzeppelin/contracts/lifecycle/Pausable.sol
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        208
Source: 
>     /**
>      * @dev Modifier to make a function callable only when the contract is paused.
>                                                                ^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        232
Source: 
> 
> // File: @openzeppelin/contracts/ownership/Ownable.sol
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        239
Source: 
>  * @dev Contract module which provides a basic access control mechanism, where
>  * there is an account (an owner) that can be granted exclusive access to
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * specific functions.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        278
Source: 
>      */
>     function isOwner() public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _msgSender() == _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        298
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>                                                                   ^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        307
Source: 
>         require(newOwner != address(0), "Ownable: new owner is the zero address");
>         emit OwnershipTransferred(_owner, newOwner);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        149
Source: 
> 
>     function _removePauser(address account) internal {
>                                                 ^^^^^^
>         _pausers.remove(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        155
Source: 
> 
> // File: @openzeppelin/contracts/lifecycle/Pausable.sol
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        208
Source: 
>     /**
>      * @dev Modifier to make a function callable only when the contract is paused.
>                                                                ^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        239
Source: 
>  * @dev Contract module which provides a basic access control mechanism, where
>  * there is an account (an owner) that can be granted exclusive access to
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * specific functions.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        278
Source: 
>      */
>     function isOwner() public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _msgSender() == _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        298
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>                                                                   ^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        307
Source: 
>         require(newOwner != address(0), "Ownable: new owner is the zero address");
>         emit OwnershipTransferred(_owner, newOwner);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DegoOpenSale
Line:        811
Source: 
>     uint256 limitFund,
>     uint256 startTime,
>              ^^^^^^^^^
>     uint256 maxSoldAmount )

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DegoOpenSale
Line:        838
Source: 
>         onlyOwner
>     {
>    ^^
>         for (uint256 i = 0; i < users.length; i++) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DegoOpenSale
Line:        956
Source: 
>     // get sale eth 
>     function seizeEth() external  {
>              ^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _currentBalance =  address(this).balance;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        395
Source: 
>  *
>  * Arithmetic operations in Solidity wrap on overflow. This can easily result
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * in bugs, because programmers usually assume that an overflow raises an

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        707
Source: 
> 
> // File: contracts/token/DegoOpenSale.sol
>                    ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        395
Source: 
>  *
>  * Arithmetic operations in Solidity wrap on overflow. This can easily result
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * in bugs, because programmers usually assume that an overflow raises an

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        707
Source: 
> 
> // File: contracts/token/DegoOpenSale.sol
>                    ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        395
Source: 
>  *
>  * Arithmetic operations in Solidity wrap on overflow. This can easily result
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * in bugs, because programmers usually assume that an overflow raises an

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        707
Source: 
> 
> // File: contracts/token/DegoOpenSale.sol
>                    ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        395
Source: 
>  *
>  * Arithmetic operations in Solidity wrap on overflow. This can easily result
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * in bugs, because programmers usually assume that an overflow raises an

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        707
Source: 
> 
> // File: contracts/token/DegoOpenSale.sol
>                    ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        395
Source: 
>  *
>  * Arithmetic operations in Solidity wrap on overflow. This can easily result
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * in bugs, because programmers usually assume that an overflow raises an

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        707
Source: 
> 
> // File: contracts/token/DegoOpenSale.sol
>                    ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        145
Source: 
>     function _addPauser(address account) internal {
>         _pausers.add(account);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit PauserAdded(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        149
Source: 
> 
>     function _removePauser(address account) internal {
>                                                 ^^^^^^
>         _pausers.remove(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        145
Source: 
>     function _addPauser(address account) internal {
>         _pausers.add(account);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit PauserAdded(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        149
Source: 
> 
>     function _removePauser(address account) internal {
>                                                 ^^^^^^
>         _pausers.remove(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        307
Source: 
>         require(newOwner != address(0), "Ownable: new owner is the zero address");
>         emit OwnershipTransferred(_owner, newOwner);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        145
Source: 
>     function _addPauser(address account) internal {
>         _pausers.add(account);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit PauserAdded(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        149
Source: 
> 
>     function _removePauser(address account) internal {
>                                                 ^^^^^^
>         _pausers.remove(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        307
Source: 
>         require(newOwner != address(0), "Ownable: new owner is the zero address");
>         emit OwnershipTransferred(_owner, newOwner);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = newOwner;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DegoOpenSale
Line:        838
Source: 
>         onlyOwner
>     {
>    ^^
>         for (uint256 i = 0; i < users.length; i++) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DegoOpenSale
Line:        846
Source: 
>     /// if openTag <=0, removed 
>     function addWhiteList(uint8 stage, address user, bool openTag)
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DegoOpenSale
Line:        860
Source: 
> 
>     //
>       
>     function getStage( ) view public returns(uint8) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DegoOpenSale
Line:        956
Source: 
>     // get sale eth 
>     function seizeEth() external  {
>              ^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _currentBalance =  address(this).balance;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        393
Source: 
>  * @dev Wrappers over Solidity's arithmetic operations with added overflow
>  * checks.
>           
>  *

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DegoOpenSale
Line:        735
Source: 
>     //
>     /// All deposited ETH will be instantly forwarded to this address.
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address payable public _teamWallet = 0x3D0a845C5ef9741De999FC068f70E2048A489F2b;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DegoOpenSale
Line:        739
Source: 
>     /// IERC20 compilant _dego token contact instance
>     IERC20 public _dego = IERC20(0xEE5C75c2f1e8892c84d6d32B730Eff5C4181Bd10);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DegoOpenSale
Line:        741
Source: 
> 
>     /// tags show address can join in open sale
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint8 =>  mapping (address => bool)) public _fullWhiteList;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DegoOpenSale
Line:        744
Source: 
> 
>     //the stage condition map
>        ^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint8 => condition) public _stageCondition;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DegoOpenSale
Line:        748
Source: 
>     //the user get fund per stage
>     mapping (uint8 =>  mapping (address => uint256) ) public _stageFund;
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DegoOpenSale
Line:        752
Source: 
>     //the stage had sold amount
>     mapping (uint8 => uint256) public _stageSoldAmount;
>                                                  ^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DegoOpenSale
Line:        757
Source: 
>      */
>     event eveNewSale(address indexed destAddress, uint256 ethCost, uint256 gotTokens);
>                                                                ^^^^^^^^^^^^^^^^^^^^^^^
>     event eveClaim(address indexed destAddress, uint256 gotTokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DegoOpenSale
Line:        759
Source: 
>     event eveClaim(address indexed destAddress, uint256 gotTokens);
>     event eveTeamWallet(address wallet);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DegoOpenSale
Line:        764
Source: 
>     /// @dev valid the address
>     modifier validAddress( address addr ) {
>                                 ^^^^^^^^^^^
>         require(addr != address(0x0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DegoOpenSale
Line:        766
Source: 
>         require(addr != address(0x0));
>         require(addr != address(this));
>                                        
>         _;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DegoOpenSale
Line:        775
Source: 
> 
>         // uint256 testRate = 100;
>            ^^^^^^^^^^^^^^^^^^^^^^^
>         // uint256 testRate2 = 1000;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DegoOpenSale
Line:        778
Source: 
> 
>         // setCondition(1,3500 * testRate2,10*1e18/testRate, now,          525000*1e18);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // setCondition(2,2500 * testRate2,5 *1e18/testRate, now + 1 days, 375000*1e18);

[0m
Traceback (most recent call last):
  File "securify/__main__.py", line 286, in <module>
    main()
  File "securify/__main__.py", line 282, in main
    exclude_contracts=args.exclude_contracts)
  File "/sec/securify/analyses/analysis.py", line 148, in print_pattern_matches
    msg = format_match(analysis_context, pattern, match, include_contracts=include_contracts, exclude_contracts=exclude_contracts)
  File "/sec/securify/analyses/analysis.py", line 211, in format_match
    "^" * min(location.length, len(src_lines[line]) - indicator_offset - 2)
IndexError: list index out of range

---------------------------------------------
For contract 0x667fF577BF5E5D9d438D7f7C90d11d3f0f00A364.sol
Tool Runtime = 11.70940560300005 seconds
#############################################