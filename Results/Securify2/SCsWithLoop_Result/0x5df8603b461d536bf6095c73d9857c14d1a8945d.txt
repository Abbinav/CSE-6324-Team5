[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        38
Source: 
>     modifier onlyOwner() {
>         require(msg.sender == _OWNER_, "NOT_OWNER");
>                 ^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        56
Source: 
>     function claimOwnership() external {
>         require(msg.sender == _NEW_OWNER_, "INVALID_CLAIM");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DODOMine
Line:        389
Source: 
>     modifier lpTokenNotExist(address lpToken) {
>         require(lpTokenRegistry[lpToken] == 0, "LP Token Already Exist");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        38
Source: 
>     modifier onlyOwner() {
>         require(msg.sender == _OWNER_, "NOT_OWNER");
>                 ^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        80
Source: 
>     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        85
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "MUL_ERROR");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        38
Source: 
>     modifier onlyOwner() {
>         require(msg.sender == _OWNER_, "NOT_OWNER");
>                 ^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DODOMine
Line:        472
Source: 
>         for (uint256 pid = 0; pid < length; ++pid) {
>             if (userInfo[pid][_user].amount == 0 || poolInfos[pid].allocPoint == 0) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 continue; // save gas

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DODOMine
Line:        587
Source: 
>         uint256 pid = getPid(_lpToken);
>         if (userInfo[pid][msg.sender].amount == 0 || poolInfos[pid].allocPoint == 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return; // save gas

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DODOMine
Line:        587
Source: 
>         uint256 pid = getPid(_lpToken);
>         if (userInfo[pid][msg.sender].amount == 0 || poolInfos[pid].allocPoint == 0) {
>                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return; // save gas

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DODOMine
Line:        410
Source: 
> 
>     function addLpToken(
>     ^^^^^^^^^^^^^^^^^^^^
>         address _lpToken,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DODOMine
Line:        431
Source: 
> 
>     function setLpToken(
>     ^^^^^^^^^^^^^^^^^^^^
>         address _lpToken,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DODOMine
Line:        539
Source: 
> 
>     function deposit(address _lpToken, uint256 _amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 pid = getPid(_lpToken);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DODOMine
Line:        570
Source: 
> 
>     function withdrawAll(address _lpToken) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 balance = getUserLpBalance(_lpToken, msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DODOMine
Line:        576
Source: 
>     // Withdraw without caring about rewards. EMERGENCY ONLY.
>     function emergencyWithdraw(address _lpToken) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 pid = getPid(_lpToken);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DODOMine
Line:        585
Source: 
> 
>     function claim(address _lpToken) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 pid = getPid(_lpToken);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DODOMine
Line:        598
Source: 
> 
>     function claimAll() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 length = poolInfos.length;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DODOMine
Line:        521
Source: 
>         }
>         uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (lpSupply == 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DODOMine
Line:        455
Source: 
>         uint256 accDODOPerShare = pool.accDODOPerShare;
>         uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (block.number > pool.lastRewardBlock && lpSupply != 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SafeERC20
Line:        307
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    DODOMine
Line:        478
Source: 
>             uint256 accDODOPerShare = pool.accDODOPerShare;
>             uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (block.number > pool.lastRewardBlock && lpSupply != 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        307
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DODOMine
Line:        444
Source: 
> 
>     function setReward(uint256 _dodoPerBlock) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dodoPerBlock = _dodoPerBlock;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DODOMine
Line:        450
Source: 
> 
>     function getPendingReward(address _lpToken, address _user) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 pid = getPid(_lpToken);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DODOMine
Line:        499
Source: 
> 
>     function getDlpMiningSpeed(address _lpToken) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 pid = getPid(_lpToken);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DODOMine
Line:        539
Source: 
> 
>     function deposit(address _lpToken, uint256 _amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 pid = getPid(_lpToken);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DODOMine
Line:        556
Source: 
> 
>     function withdraw(address _lpToken, uint256 _amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 pid = getPid(_lpToken);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DODOMine
Line:        570
Source: 
> 
>     function withdrawAll(address _lpToken) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 balance = getUserLpBalance(_lpToken, msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DODOMine
Line:        576
Source: 
>     // Withdraw without caring about rewards. EMERGENCY ONLY.
>     function emergencyWithdraw(address _lpToken) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 pid = getPid(_lpToken);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DODOMine
Line:        585
Source: 
> 
>     function claim(address _lpToken) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 pid = getPid(_lpToken);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DODOMine
Line:        403
Source: 
> 
>     function getUserLpBalance(address _lpToken, address _user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 pid = getPid(_lpToken);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DODOMine
Line:        410
Source: 
> 
>     function addLpToken(
>     ^^^^^^^^^^^^^^^^^^^^
>         address _lpToken,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DODOMine
Line:        431
Source: 
> 
>     function setLpToken(
>     ^^^^^^^^^^^^^^^^^^^^
>         address _lpToken,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DODOMine
Line:        495
Source: 
> 
>     function getRealizedReward(address _user) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return realizedReward[_user];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        84
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "MUL_ERROR");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        26
Source: 
> contract Ownable {
>     address public _OWNER_;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     address public _NEW_OWNER_;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        27
Source: 
>     address public _OWNER_;
>     address public _NEW_OWNER_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DODOMine
Line:        457
Source: 
>         if (block.number > pool.lastRewardBlock && lpSupply != 0) {
>             uint256 DODOReward = block
>             ^^^^^^^^^^^^^^^^^^
>                 .number

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DODOMine
Line:        480
Source: 
>             if (block.number > pool.lastRewardBlock && lpSupply != 0) {
>                 uint256 DODOReward = block
>                 ^^^^^^^^^^^^^^^^^^
>                     .number

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DODOMine
Line:        526
Source: 
>         }
>         uint256 DODOReward = block
>         ^^^^^^^^^^^^^^^^^^
>             .number

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        15
Source: 
> //pragma solidity 0.6.9;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> pragma experimental ABIEncoderV2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DecimalMath
Line:        144
Source: 
> 
>     uint256 constant ONE = 10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DODOMine
Line:        383
Source: 
> 
>     modifier lpTokenExist(address lpToken) {
>                           ^^^^^^^^^^^^^^^
>         require(lpTokenRegistry[lpToken] > 0, "LP Token Not Exist");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DODOMine
Line:        388
Source: 
> 
>     modifier lpTokenNotExist(address lpToken) {
>                              ^^^^^^^^^^^^^^^
>         require(lpTokenRegistry[lpToken] == 0, "LP Token Already Exist");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DODOMine
Line:        521
Source: 
>         }
>         uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (lpSupply == 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DODOMine
Line:        455
Source: 
>         uint256 accDODOPerShare = pool.accDODOPerShare;
>         uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (block.number > pool.lastRewardBlock && lpSupply != 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DODOMine
Line:        478
Source: 
>             uint256 accDODOPerShare = pool.accDODOPerShare;
>             uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (block.number > pool.lastRewardBlock && lpSupply != 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        27
Source: 
>     address public _OWNER_;
>     address public _NEW_OWNER_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DODOMine
Line:        357
Source: 
>     address public dodoToken;
>     uint256 public dodoPerBlock;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DecimalMath
Line:        144
Source: 
> 
>     uint256 constant ONE = 10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DODOMine
Line:        619
Source: 
>         IERC20(dodoToken).safeTransfer(_to, _amount);
>         realizedReward[_to] = realizedReward[_to].add(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Claim(_to, _amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DODOMine
Line:        523
Source: 
>         if (lpSupply == 0) {
>             pool.lastRewardBlock = block.number;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DODOMine
Line:        532
Source: 
>             .div(totalAllocPoint);
>         pool.accDODOPerShare = pool.accDODOPerShare.add(DecimalMath.divFloor(DODOReward, lpSupply));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pool.lastRewardBlock = block.number;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DODOMine
Line:        533
Source: 
>         pool.accDODOPerShare = pool.accDODOPerShare.add(DecimalMath.divFloor(DODOReward, lpSupply));
>         pool.lastRewardBlock = block.number;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DODOMine
Line:        551
Source: 
>         IERC20(pool.lpToken).safeTransferFrom(address(msg.sender), address(this), _amount);
>         user.amount = user.amount.add(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         user.rewardDebt = DecimalMath.mul(user.amount, pool.accDODOPerShare);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DODOMine
Line:        552
Source: 
>         user.amount = user.amount.add(_amount);
>         user.rewardDebt = DecimalMath.mul(user.amount, pool.accDODOPerShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Deposit(msg.sender, pid, _amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DODOMine
Line:        581
Source: 
>         IERC20(pool.lpToken).safeTransfer(address(msg.sender), user.amount);
>         user.amount = 0;
>         ^^^^^^^^^^^^^^^
>         user.rewardDebt = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DODOMine
Line:        582
Source: 
>         user.amount = 0;
>         user.rewardDebt = 0;
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        307
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        284
Source: 
>         require(
>             (value == 0) || (token.allowance(address(this), spender) == 0),
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DecimalMath
Line:        144
Source: 
> 
>     uint256 constant ONE = 10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0x5df8603b461d536bf6095c73d9857c14d1a8945d.sol
Tool Runtime = 292.07192101099645 seconds
#############################################