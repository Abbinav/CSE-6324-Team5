[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controlled
Line:        234
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controlled
Line:        239
Source: 
> 
>     function transferOperator(address _newOperator) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOperator != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controlled
Line:        244
Source: 
> 
>     function addBlackList(address _blackAddr) public onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         blackList[_blackAddr] = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controlled
Line:        248
Source: 
>     
>     function removeBlackList(address _blackAddr) public onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete blackList[_blackAddr];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        141
Source: 
>         }
>         function getMonth(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return parseTimestamp(timestamp).month;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        144
Source: 
>         }
>         function getDay(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return parseTimestamp(timestamp).day;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        147
Source: 
>         }
>         function getHour(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8((timestamp / 60 / 60) % 24);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        150
Source: 
>         }
>         function getMinute(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8((timestamp / 60) % 60);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        153
Source: 
>         }
>         function getSecond(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8(timestamp % 60);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        164
Source: 
>         }
>         function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint16 i;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controlled
Line:        234
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controlled
Line:        239
Source: 
> 
>     function transferOperator(address _newOperator) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOperator != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controlled
Line:        244
Source: 
> 
>     function addBlackList(address _blackAddr) public onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         blackList[_blackAddr] = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controlled
Line:        248
Source: 
>     
>     function removeBlackList(address _blackAddr) public onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete blackList[_blackAddr];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenERC20
Line:        304
Source: 
>      */
>     function transfer(address _to, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, _to, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenERC20
Line:        318
Source: 
>      */
>     function transferFrom(address _from, address _to, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= allowance[_from][msg.sender]);     // Check allowance

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenERC20
Line:        333
Source: 
>      */
>     function approve(address _spender, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOf[msg.sender]);     // Check balance

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenERC20
Line:        344
Source: 
>      */
>     function burn(uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        141
Source: 
>         }
>         function getMonth(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return parseTimestamp(timestamp).month;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        144
Source: 
>         }
>         function getDay(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return parseTimestamp(timestamp).day;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        147
Source: 
>         }
>         function getHour(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8((timestamp / 60 / 60) % 24);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        150
Source: 
>         }
>         function getMinute(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8((timestamp / 60) % 60);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        153
Source: 
>         }
>         function getSecond(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8(timestamp % 60);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        164
Source: 
>         }
>         function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint16 i;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controlled
Line:        234
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controlled
Line:        239
Source: 
> 
>     function transferOperator(address _newOperator) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOperator != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controlled
Line:        244
Source: 
> 
>     function addBlackList(address _blackAddr) public onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         blackList[_blackAddr] = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controlled
Line:        248
Source: 
>     
>     function removeBlackList(address _blackAddr) public onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete blackList[_blackAddr];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenERC20
Line:        304
Source: 
>      */
>     function transfer(address _to, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, _to, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenERC20
Line:        318
Source: 
>      */
>     function transferFrom(address _from, address _to, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= allowance[_from][msg.sender]);     // Check allowance

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenERC20
Line:        333
Source: 
>      */
>     function approve(address _spender, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOf[msg.sender]);     // Check balance

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenERC20
Line:        344
Source: 
>      */
>     function burn(uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FrozenableToken
Line:        372
Source: 
> 
>     function unfreeze(address _receiver, uint256 _value) public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        141
Source: 
>         }
>         function getMonth(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return parseTimestamp(timestamp).month;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        144
Source: 
>         }
>         function getDay(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return parseTimestamp(timestamp).day;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        147
Source: 
>         }
>         function getHour(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8((timestamp / 60 / 60) % 24);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        150
Source: 
>         }
>         function getMinute(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8((timestamp / 60) % 60);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        153
Source: 
>         }
>         function getSecond(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8(timestamp % 60);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        164
Source: 
>         }
>         function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint16 i;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controlled
Line:        234
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controlled
Line:        239
Source: 
> 
>     function transferOperator(address _newOperator) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOperator != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controlled
Line:        244
Source: 
> 
>     function addBlackList(address _blackAddr) public onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         blackList[_blackAddr] = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controlled
Line:        248
Source: 
>     
>     function removeBlackList(address _blackAddr) public onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete blackList[_blackAddr];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenERC20
Line:        304
Source: 
>      */
>     function transfer(address _to, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, _to, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenERC20
Line:        318
Source: 
>      */
>     function transferFrom(address _from, address _to, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= allowance[_from][msg.sender]);     // Check allowance

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenERC20
Line:        333
Source: 
>      */
>     function approve(address _spender, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOf[msg.sender]);     // Check balance

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenERC20
Line:        344
Source: 
>      */
>     function burn(uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FrozenableToken
Line:        372
Source: 
> 
>     function unfreeze(address _receiver, uint256 _value) public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        141
Source: 
>         }
>         function getMonth(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return parseTimestamp(timestamp).month;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        144
Source: 
>         }
>         function getDay(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return parseTimestamp(timestamp).day;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        147
Source: 
>         }
>         function getHour(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8((timestamp / 60 / 60) % 24);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        150
Source: 
>         }
>         function getMinute(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8((timestamp / 60) % 60);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        153
Source: 
>         }
>         function getSecond(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8(timestamp % 60);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DateTime
Line:        164
Source: 
>         }
>         function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint16 i;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DateTime
Line:        141
Source: 
>         }
>         function getMonth(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return parseTimestamp(timestamp).month;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DateTime
Line:        144
Source: 
>         }
>         function getDay(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return parseTimestamp(timestamp).day;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenERC20
Line:        304
Source: 
>      */
>     function transfer(address _to, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, _to, _value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenERC20
Line:        318
Source: 
>      */
>     function transferFrom(address _from, address _to, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= allowance[_from][msg.sender]);     // Check allowance

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DateTime
Line:        141
Source: 
>         }
>         function getMonth(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return parseTimestamp(timestamp).month;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DateTime
Line:        144
Source: 
>         }
>         function getDay(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return parseTimestamp(timestamp).day;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenERC20
Line:        304
Source: 
>      */
>     function transfer(address _to, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, _to, _value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenERC20
Line:        318
Source: 
>      */
>     function transferFrom(address _from, address _to, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= allowance[_from][msg.sender]);     // Check allowance

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FrozenableToken
Line:        372
Source: 
> 
>     function unfreeze(address _receiver, uint256 _value) public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value > 0);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DateTime
Line:        141
Source: 
>         }
>         function getMonth(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return parseTimestamp(timestamp).month;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DateTime
Line:        144
Source: 
>         }
>         function getDay(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return parseTimestamp(timestamp).day;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenERC20
Line:        304
Source: 
>      */
>     function transfer(address _to, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, _to, _value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenERC20
Line:        318
Source: 
>      */
>     function transferFrom(address _from, address _to, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= allowance[_from][msg.sender]);     // Check allowance

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FrozenableToken
Line:        372
Source: 
> 
>     function unfreeze(address _receiver, uint256 _value) public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value > 0);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DateTime
Line:        141
Source: 
>         }
>         function getMonth(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return parseTimestamp(timestamp).month;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DateTime
Line:        144
Source: 
>         }
>         function getDay(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return parseTimestamp(timestamp).day;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controlled
Line:        244
Source: 
> 
>     function addBlackList(address _blackAddr) public onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         blackList[_blackAddr] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controlled
Line:        248
Source: 
>     
>     function removeBlackList(address _blackAddr) public onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete blackList[_blackAddr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        55
Source: 
>         uint16 constant ORIGIN_YEAR = 1970;
>         function isLeapYear(uint16 year) public pure returns (bool) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (year % 4 != 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        67
Source: 
>         }
>         function leapYearsBefore(uint year) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 year -= 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        71
Source: 
>         }
>         function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        147
Source: 
>         }
>         function getHour(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8((timestamp / 60 / 60) % 24);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        150
Source: 
>         }
>         function getMinute(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8((timestamp / 60) % 60);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        153
Source: 
>         }
>         function getSecond(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8(timestamp % 60);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        156
Source: 
>         }
>         function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return toTimestamp(year, month, day, 0, 0, 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        164
Source: 
>         }
>         function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint16 i;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controlled
Line:        244
Source: 
> 
>     function addBlackList(address _blackAddr) public onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         blackList[_blackAddr] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controlled
Line:        248
Source: 
>     
>     function removeBlackList(address _blackAddr) public onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete blackList[_blackAddr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenERC20
Line:        333
Source: 
>      */
>     function approve(address _spender, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOf[msg.sender]);     // Check balance

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        55
Source: 
>         uint16 constant ORIGIN_YEAR = 1970;
>         function isLeapYear(uint16 year) public pure returns (bool) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (year % 4 != 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        67
Source: 
>         }
>         function leapYearsBefore(uint year) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 year -= 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        71
Source: 
>         }
>         function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        147
Source: 
>         }
>         function getHour(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8((timestamp / 60 / 60) % 24);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        150
Source: 
>         }
>         function getMinute(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8((timestamp / 60) % 60);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        153
Source: 
>         }
>         function getSecond(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8(timestamp % 60);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        156
Source: 
>         }
>         function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return toTimestamp(year, month, day, 0, 0, 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        164
Source: 
>         }
>         function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint16 i;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controlled
Line:        244
Source: 
> 
>     function addBlackList(address _blackAddr) public onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         blackList[_blackAddr] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controlled
Line:        248
Source: 
>     
>     function removeBlackList(address _blackAddr) public onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete blackList[_blackAddr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenERC20
Line:        333
Source: 
>      */
>     function approve(address _spender, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOf[msg.sender]);     // Check balance

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        55
Source: 
>         uint16 constant ORIGIN_YEAR = 1970;
>         function isLeapYear(uint16 year) public pure returns (bool) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (year % 4 != 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        67
Source: 
>         }
>         function leapYearsBefore(uint year) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 year -= 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        71
Source: 
>         }
>         function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        147
Source: 
>         }
>         function getHour(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8((timestamp / 60 / 60) % 24);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        150
Source: 
>         }
>         function getMinute(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8((timestamp / 60) % 60);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        153
Source: 
>         }
>         function getSecond(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8(timestamp % 60);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        156
Source: 
>         }
>         function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return toTimestamp(year, month, day, 0, 0, 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        164
Source: 
>         }
>         function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint16 i;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controlled
Line:        244
Source: 
> 
>     function addBlackList(address _blackAddr) public onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         blackList[_blackAddr] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controlled
Line:        248
Source: 
>     
>     function removeBlackList(address _blackAddr) public onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete blackList[_blackAddr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenERC20
Line:        333
Source: 
>      */
>     function approve(address _spender, uint256 _value) public isNotBlack(msg.sender) returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOf[msg.sender]);     // Check balance

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        55
Source: 
>         uint16 constant ORIGIN_YEAR = 1970;
>         function isLeapYear(uint16 year) public pure returns (bool) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (year % 4 != 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        67
Source: 
>         }
>         function leapYearsBefore(uint year) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 year -= 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        71
Source: 
>         }
>         function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        147
Source: 
>         }
>         function getHour(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8((timestamp / 60 / 60) % 24);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        150
Source: 
>         }
>         function getMinute(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8((timestamp / 60) % 60);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        153
Source: 
>         }
>         function getSecond(uint timestamp) public pure returns (uint8) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return uint8(timestamp % 60);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        156
Source: 
>         }
>         function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return toTimestamp(year, month, day, 0, 0, 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DateTime
Line:        164
Source: 
>         }
>         function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint16 i;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        92
Source: 
>                 buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);
>                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        93
Source: 
>                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;
>                 secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 // Month

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        128
Source: 
>                 numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);
>                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        129
Source: 
>                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;
>                 secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 while (secondsAccountedFor > timestamp) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        92
Source: 
>                 buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);
>                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        93
Source: 
>                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;
>                 secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 // Month

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        128
Source: 
>                 numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);
>                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        129
Source: 
>                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;
>                 secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 while (secondsAccountedFor > timestamp) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        92
Source: 
>                 buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);
>                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        93
Source: 
>                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;
>                 secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 // Month

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        128
Source: 
>                 numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);
>                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        129
Source: 
>                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;
>                 secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 while (secondsAccountedFor > timestamp) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        92
Source: 
>                 buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);
>                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        93
Source: 
>                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;
>                 secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 // Month

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        128
Source: 
>                 numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);
>                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DateTime
Line:        129
Source: 
>                 secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;
>                 secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 while (secondsAccountedFor > timestamp) {

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity >=0.4.22 <0.6.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DateTime
Line:        49
Source: 
>         }
>         uint constant DAY_IN_SECONDS = 86400;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant YEAR_IN_SECONDS = 31536000;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DateTime
Line:        50
Source: 
>         uint constant DAY_IN_SECONDS = 86400;
>         uint constant YEAR_IN_SECONDS = 31536000;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant LEAP_YEAR_IN_SECONDS = 31622400;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DateTime
Line:        51
Source: 
>         uint constant YEAR_IN_SECONDS = 31536000;
>         uint constant LEAP_YEAR_IN_SECONDS = 31622400;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant HOUR_IN_SECONDS = 3600;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DateTime
Line:        52
Source: 
>         uint constant LEAP_YEAR_IN_SECONDS = 31622400;
>         uint constant HOUR_IN_SECONDS = 3600;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant MINUTE_IN_SECONDS = 60;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DateTime
Line:        53
Source: 
>         uint constant HOUR_IN_SECONDS = 3600;
>         uint constant MINUTE_IN_SECONDS = 60;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint16 constant ORIGIN_YEAR = 1970;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DateTime
Line:        54
Source: 
>         uint constant MINUTE_IN_SECONDS = 60;
>         uint16 constant ORIGIN_YEAR = 1970;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         function isLeapYear(uint16 year) public pure returns (bool) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Controlled
Line:        229
Source: 
> 
>     modifier isNotBlack(address _addr) {
>                         ^^^^^^^^^^^^^
>         require(blackList[_addr] == false);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CasinoTkoen
Line:        397
Source: 
>         decimals = 18;
>         totalFrozen = 100000000 * 10 ** uint256(decimals);
>                       ^^^^^^^^^
>         totalSupply = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DateTime
Line:        90
Source: 
>                 // Year
>                 dt.year = getYear(timestamp);
>                 ^^
>                 buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DateTime
Line:        177
Source: 
>                 uint8[12] memory monthDayCounts;
>                 monthDayCounts[0] = 31;
>                 ^^^^^^^^^^^^^^
>                 if (isLeapYear(year)) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenERC20
Line:        260
Source: 
>     uint8 public decimals;
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FrozenableToken
Line:        361
Source: 
> 
>     uint256 public totalFrozen;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TokenERC20
Line:        257
Source: 
>     // Public variables of the token
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TokenERC20
Line:        258
Source: 
>     string public name;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint8 public decimals;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TokenERC20
Line:        259
Source: 
>     string public symbol;
>     uint8 public decimals;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalSupply;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TokenERC20
Line:        257
Source: 
>     // Public variables of the token
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TokenERC20
Line:        258
Source: 
>     string public name;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint8 public decimals;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TokenERC20
Line:        259
Source: 
>     string public symbol;
>     uint8 public decimals;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalSupply;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        49
Source: 
>         }
>         uint constant DAY_IN_SECONDS = 86400;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant YEAR_IN_SECONDS = 31536000;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        50
Source: 
>         uint constant DAY_IN_SECONDS = 86400;
>         uint constant YEAR_IN_SECONDS = 31536000;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant LEAP_YEAR_IN_SECONDS = 31622400;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        51
Source: 
>         uint constant YEAR_IN_SECONDS = 31536000;
>         uint constant LEAP_YEAR_IN_SECONDS = 31622400;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant HOUR_IN_SECONDS = 3600;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        52
Source: 
>         uint constant LEAP_YEAR_IN_SECONDS = 31622400;
>         uint constant HOUR_IN_SECONDS = 3600;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant MINUTE_IN_SECONDS = 60;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        53
Source: 
>         uint constant HOUR_IN_SECONDS = 3600;
>         uint constant MINUTE_IN_SECONDS = 60;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint16 constant ORIGIN_YEAR = 1970;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        54
Source: 
>         uint constant MINUTE_IN_SECONDS = 60;
>         uint16 constant ORIGIN_YEAR = 1970;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         function isLeapYear(uint16 year) public pure returns (bool) {

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        49
Source: 
>         }
>         uint constant DAY_IN_SECONDS = 86400;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant YEAR_IN_SECONDS = 31536000;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        50
Source: 
>         uint constant DAY_IN_SECONDS = 86400;
>         uint constant YEAR_IN_SECONDS = 31536000;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant LEAP_YEAR_IN_SECONDS = 31622400;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        51
Source: 
>         uint constant YEAR_IN_SECONDS = 31536000;
>         uint constant LEAP_YEAR_IN_SECONDS = 31622400;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant HOUR_IN_SECONDS = 3600;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        52
Source: 
>         uint constant LEAP_YEAR_IN_SECONDS = 31622400;
>         uint constant HOUR_IN_SECONDS = 3600;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant MINUTE_IN_SECONDS = 60;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        53
Source: 
>         uint constant HOUR_IN_SECONDS = 3600;
>         uint constant MINUTE_IN_SECONDS = 60;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint16 constant ORIGIN_YEAR = 1970;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        54
Source: 
>         uint constant MINUTE_IN_SECONDS = 60;
>         uint16 constant ORIGIN_YEAR = 1970;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         function isLeapYear(uint16 year) public pure returns (bool) {

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        49
Source: 
>         }
>         uint constant DAY_IN_SECONDS = 86400;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant YEAR_IN_SECONDS = 31536000;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        50
Source: 
>         uint constant DAY_IN_SECONDS = 86400;
>         uint constant YEAR_IN_SECONDS = 31536000;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant LEAP_YEAR_IN_SECONDS = 31622400;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        51
Source: 
>         uint constant YEAR_IN_SECONDS = 31536000;
>         uint constant LEAP_YEAR_IN_SECONDS = 31622400;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant HOUR_IN_SECONDS = 3600;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        52
Source: 
>         uint constant LEAP_YEAR_IN_SECONDS = 31622400;
>         uint constant HOUR_IN_SECONDS = 3600;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant MINUTE_IN_SECONDS = 60;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        53
Source: 
>         uint constant HOUR_IN_SECONDS = 3600;
>         uint constant MINUTE_IN_SECONDS = 60;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint16 constant ORIGIN_YEAR = 1970;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        54
Source: 
>         uint constant MINUTE_IN_SECONDS = 60;
>         uint16 constant ORIGIN_YEAR = 1970;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         function isLeapYear(uint16 year) public pure returns (bool) {

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        49
Source: 
>         }
>         uint constant DAY_IN_SECONDS = 86400;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant YEAR_IN_SECONDS = 31536000;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        50
Source: 
>         uint constant DAY_IN_SECONDS = 86400;
>         uint constant YEAR_IN_SECONDS = 31536000;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant LEAP_YEAR_IN_SECONDS = 31622400;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        51
Source: 
>         uint constant YEAR_IN_SECONDS = 31536000;
>         uint constant LEAP_YEAR_IN_SECONDS = 31622400;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant HOUR_IN_SECONDS = 3600;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        52
Source: 
>         uint constant LEAP_YEAR_IN_SECONDS = 31622400;
>         uint constant HOUR_IN_SECONDS = 3600;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant MINUTE_IN_SECONDS = 60;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        53
Source: 
>         uint constant HOUR_IN_SECONDS = 3600;
>         uint constant MINUTE_IN_SECONDS = 60;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint16 constant ORIGIN_YEAR = 1970;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DateTime
Line:        54
Source: 
>         uint constant MINUTE_IN_SECONDS = 60;
>         uint16 constant ORIGIN_YEAR = 1970;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         function isLeapYear(uint16 year) public pure returns (bool) {

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenERC20
Line:        257
Source: 
>     // Public variables of the token
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenERC20
Line:        258
Source: 
>     string public name;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint8 public decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenERC20
Line:        259
Source: 
>     string public symbol;
>     uint8 public decimals;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenERC20
Line:        257
Source: 
>     // Public variables of the token
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenERC20
Line:        258
Source: 
>     string public name;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint8 public decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenERC20
Line:        259
Source: 
>     string public symbol;
>     uint8 public decimals;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenERC20
Line:        257
Source: 
>     // Public variables of the token
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenERC20
Line:        258
Source: 
>     string public name;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint8 public decimals;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    FrozenableToken
Line:        378
Source: 
>         totalSupply = totalSupply.add(_value);
>         uint256 timestamp = block.timestamp;
>                             ^^^^^^^^^^^^^^^
>         uint256 releasedDay = timestamp.toDay();

[0m

---------------------------------------------
For contract 0xe5d078f380d67b72ece5c55c65c4e0ec97ea1439.sol
Tool Runtime = 15.791914815999917 seconds
#############################################