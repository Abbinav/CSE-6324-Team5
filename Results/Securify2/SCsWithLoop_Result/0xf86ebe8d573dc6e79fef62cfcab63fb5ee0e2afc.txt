[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DODOAdapter
Line:        385
Source: 
>     // Pool info
>     function lockableToken(uint256 poolId) external view  returns (IERC20) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DODOAdapter
Line:        390
Source: 
> 
>     function lockedAmount(address user, uint256 poolId) external view  returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (uint256 amount,) = DODO_MINE.userInfo(poolId, user);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DODOAdapter
Line:        363
Source: 
>     // Victim actions, requires impersonation via delegatecall
>     function sellRewardForWeth(address, uint256 rewardAmount, address to) external  returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(rewardAmount > 0, "reward amount is zero");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DODOAdapter
Line:        396
Source: 
>     // Pool actions, requires impersonation via delegatecall
>     function deposit(address _adapter, uint256 poolId, uint256 amount) external  {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IVampireAdapter adapter = IVampireAdapter(_adapter);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DODOAdapter
Line:        403
Source: 
> 
>     function withdraw(address, uint256 poolId, uint256 amount) external  {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DODOAdapter
Line:        408
Source: 
> 
>     function claimReward(address, uint256 poolId) external  {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DODOAdapter
Line:        413
Source: 
> 
>     function emergencyWithdraw(address, uint256 poolId) external  {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DODOAdapter
Line:        419
Source: 
>     // Service methods
>     function poolAddress(uint256) external view  returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(DODO_MINE);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DODOAdapter
Line:        427
Source: 
> 
>     function lockedValue(address, uint256) external  view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(false, "not implemented");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DODOAdapter
Line:        431
Source: 
> 
>     function totalLockedValue(uint256) external  view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(false, "not implemented");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DODOAdapter
Line:        435
Source: 
> 
>     function normalizedAPY(uint256) external  view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(false, "not implemented");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DODOAdapter
Line:        386
Source: 
>     function lockableToken(uint256 poolId) external view  returns (IERC20) {
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);
>          ^^^^^^^^^^^^^^^
>         return IERC20(lpToken);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DODOAdapter
Line:        404
Source: 
>     function withdraw(address, uint256 poolId, uint256 amount) external  {
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);
>          ^^^^^^^^^^^^^^^
>         DODO_MINE.withdraw(lpToken, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DODOAdapter
Line:        409
Source: 
>     function claimReward(address, uint256 poolId) external  {
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);
>          ^^^^^^^^^^^^^^^
>         DODO_MINE.claim(lpToken);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DODOAdapter
Line:        414
Source: 
>     function emergencyWithdraw(address, uint256 poolId) external  {
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);
>          ^^^^^^^^^^^^^^^
>         DODO_MINE.emergencyWithdraw(lpToken);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        106
Source: 
> 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function PERMIT_TYPEHASH() external pure returns (bytes32);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        107
Source: 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     function PERMIT_TYPEHASH() external pure returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nonces(address owner) external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        124
Source: 
> 
>     function MINIMUM_LIQUIDITY() external pure returns (uint);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function factory() external view returns (address);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniswapV2Library
Line:        193
Source: 
>     function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {
>         (address token0,) = sortTokens(tokenA, tokenB);
>          ^^^^^^^^^^^^^^
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniswapV2Library
Line:        194
Source: 
>         (address token0,) = sortTokens(tokenA, tokenB);
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
>          ^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DODOAdapter
Line:        378
Source: 
>         USDT.transfer(address(WETH_USDT_PAIR), usdtAmount);
>         (uint wethReserve, uint usdtReserve,) = WETH_USDT_PAIR.getReserves();
>          ^^^^^^^^^^^^^^^^
>         uint amountOutput = UniswapV2Library.getAmountOut(usdtAmount, usdtReserve, wethReserve);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DODOAdapter
Line:        386
Source: 
>     function lockableToken(uint256 poolId) external view  returns (IERC20) {
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);
>          ^^^^^^^^^^^^^^^
>         return IERC20(lpToken);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DODOAdapter
Line:        391
Source: 
>     function lockedAmount(address user, uint256 poolId) external view  returns (uint256) {
>         (uint256 amount,) = DODO_MINE.userInfo(poolId, user);
>          ^^^^^^^^^^^^^^
>         return amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DODOAdapter
Line:        404
Source: 
>     function withdraw(address, uint256 poolId, uint256 amount) external  {
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);
>          ^^^^^^^^^^^^^^^
>         DODO_MINE.withdraw(lpToken, amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DODOAdapter
Line:        409
Source: 
>     function claimReward(address, uint256 poolId) external  {
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);
>          ^^^^^^^^^^^^^^^
>         DODO_MINE.claim(lpToken);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DODOAdapter
Line:        414
Source: 
>     function emergencyWithdraw(address, uint256 poolId) external  {
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);
>          ^^^^^^^^^^^^^^^
>         DODO_MINE.emergencyWithdraw(lpToken);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        10
Source: 
> //pragma solidity ^0.6.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        89
Source: 
> //pragma solidity >=0.5.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        145
Source: 
> //pragma solidity =0.6.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        166
Source: 
> //pragma solidity >=0.5.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        251
Source: 
> //pragma solidity 0.6.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        299
Source: 
> //pragma solidity 0.6.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        314
Source: 
> //pragma solidity 0.6.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        332
Source: 
> //pragma solidity 0.6.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DODOAdapter
Line:        342
Source: 
> contract DODOAdapter is IVampireAdapter {
>     IDrainController constant DRAIN_CONTROLLER = IDrainController(0x2e813f2e524dB699d279E631B0F2117856eb902C);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IUniswapV2Pair constant WETH_USDT_PAIR = IUniswapV2Pair(0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DODOAdapter
Line:        343
Source: 
>     IDrainController constant DRAIN_CONTROLLER = IDrainController(0x2e813f2e524dB699d279E631B0F2117856eb902C);
>     IUniswapV2Pair constant WETH_USDT_PAIR = IUniswapV2Pair(0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IDODOMine constant DODO_MINE = IDODOMine(0xaeD7384F03844Af886b830862FF0a7AFce0a632C);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DODOAdapter
Line:        344
Source: 
>     IUniswapV2Pair constant WETH_USDT_PAIR = IUniswapV2Pair(0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852);
>     IDODOMine constant DODO_MINE = IDODOMine(0xaeD7384F03844Af886b830862FF0a7AFce0a632C);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IDODO constant DODO_USDT = IDODO(0x8876819535b48b551C9e97EBc07332C7482b4b2d);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DODOAdapter
Line:        345
Source: 
>     IDODOMine constant DODO_MINE = IDODOMine(0xaeD7384F03844Af886b830862FF0a7AFce0a632C);
>     IDODO constant DODO_USDT = IDODO(0x8876819535b48b551C9e97EBc07332C7482b4b2d);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20 constant DODO = IERC20(0x43Dfc4159D86F3A37A5A4B3D4580b888ad7d4DDd);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DODOAdapter
Line:        346
Source: 
>     IDODO constant DODO_USDT = IDODO(0x8876819535b48b551C9e97EBc07332C7482b4b2d);
>     IERC20 constant DODO = IERC20(0x43Dfc4159D86F3A37A5A4B3D4580b888ad7d4DDd);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20 constant USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DODOAdapter
Line:        347
Source: 
>     IERC20 constant DODO = IERC20(0x43Dfc4159D86F3A37A5A4B3D4580b888ad7d4DDd);
>     IERC20 constant USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DODOAdapter
Line:        365
Source: 
>         require(rewardAmount > 0, "reward amount is zero");
>         require(DRAIN_CONTROLLER.priceIsUnderRejectionTreshold(), "Possible price manipulation, drain rejected");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         /*

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DODOAdapter
Line:        371
Source: 
>         // 1
>         require(DODO.approve(address(DODO_USDT), rewardAmount), "Must approve spending of reward amount");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 usdtAmount = DODO_USDT.sellBaseToken(rewardAmount, 0, new bytes(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DODOAdapter
Line:        372
Source: 
>         require(DODO.approve(address(DODO_USDT), rewardAmount), "Must approve spending of reward amount");
>         uint256 usdtAmount = DODO_USDT.sellBaseToken(rewardAmount, 0, new bytes(0));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(usdtAmount > 0, "DODO to USDT failed");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DODOAdapter
Line:        378
Source: 
>         USDT.transfer(address(WETH_USDT_PAIR), usdtAmount);
>         (uint wethReserve, uint usdtReserve,) = WETH_USDT_PAIR.getReserves();
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint amountOutput = UniswapV2Library.getAmountOut(usdtAmount, usdtReserve, wethReserve);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DODOAdapter
Line:        398
Source: 
>         IVampireAdapter adapter = IVampireAdapter(_adapter);
>         IERC20 lpToken = adapter.lockableToken(poolId);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lpToken.approve(address(DODO_MINE), uint256(-1));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DODOAdapter
Line:        404
Source: 
>     function withdraw(address, uint256 poolId, uint256 amount) external  {
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DODO_MINE.withdraw(lpToken, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DODOAdapter
Line:        409
Source: 
>     function claimReward(address, uint256 poolId) external  {
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DODO_MINE.claim(lpToken);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DODOAdapter
Line:        414
Source: 
>     function emergencyWithdraw(address, uint256 poolId) external  {
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DODO_MINE.emergencyWithdraw(lpToken);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DODOAdapter
Line:        355
Source: 
>     function poolCount() external view  returns (uint256) {
>         return DODO_MINE.poolLength();
>                ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DODOAdapter
Line:        376
Source: 
>         // 2
>         USDT.approve(address(WETH_USDT_PAIR), usdtAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         USDT.transfer(address(WETH_USDT_PAIR), usdtAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DODOAdapter
Line:        377
Source: 
>         USDT.approve(address(WETH_USDT_PAIR), usdtAmount);
>         USDT.transfer(address(WETH_USDT_PAIR), usdtAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (uint wethReserve, uint usdtReserve,) = WETH_USDT_PAIR.getReserves();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DODOAdapter
Line:        380
Source: 
>         uint amountOutput = UniswapV2Library.getAmountOut(usdtAmount, usdtReserve, wethReserve);
>         WETH_USDT_PAIR.swap(uint(0), amountOutput, to, new bytes(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return amountOutput;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DODOAdapter
Line:        386
Source: 
>     function lockableToken(uint256 poolId) external view  returns (IERC20) {
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return IERC20(lpToken);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DODOAdapter
Line:        391
Source: 
>     function lockedAmount(address user, uint256 poolId) external view  returns (uint256) {
>         (uint256 amount,) = DODO_MINE.userInfo(poolId, user);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return amount;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DODOAdapter
Line:        399
Source: 
>         IERC20 lpToken = adapter.lockableToken(poolId);
>         lpToken.approve(address(DODO_MINE), uint256(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DODO_MINE.deposit(address(lpToken), amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DODOAdapter
Line:        400
Source: 
>         lpToken.approve(address(DODO_MINE), uint256(-1));
>         DODO_MINE.deposit(address(lpToken), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DODOAdapter
Line:        405
Source: 
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);
>         DODO_MINE.withdraw(lpToken, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DODOAdapter
Line:        410
Source: 
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);
>         DODO_MINE.claim(lpToken);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DODOAdapter
Line:        415
Source: 
>         (address lpToken,,,) = DODO_MINE.poolInfos(poolId);
>         DODO_MINE.emergencyWithdraw(lpToken);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeMathUniswap
Line:        151
Source: 
>     function add(uint x, uint y) internal pure returns (uint z) {
>         require((z = x + y) >= x, 'ds-math-add-overflow');
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeMathUniswap
Line:        155
Source: 
>     function sub(uint x, uint y) internal pure returns (uint z) {
>         require((z = x - y) <= x, 'ds-math-sub-underflow');
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeMathUniswap
Line:        159
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');
>                            ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    UniswapV2Library
Line:        229
Source: 
>         amounts[0] = amountIn;
>         for (uint i; i < path.length - 1; i++) {
>                                           ^
>             (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DODOAdapter
Line:        376
Source: 
>         // 2
>         USDT.approve(address(WETH_USDT_PAIR), usdtAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         USDT.transfer(address(WETH_USDT_PAIR), usdtAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DODOAdapter
Line:        377
Source: 
>         USDT.approve(address(WETH_USDT_PAIR), usdtAmount);
>         USDT.transfer(address(WETH_USDT_PAIR), usdtAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (uint wethReserve, uint usdtReserve,) = WETH_USDT_PAIR.getReserves();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DODOAdapter
Line:        399
Source: 
>         IERC20 lpToken = adapter.lockableToken(poolId);
>         lpToken.approve(address(DODO_MINE), uint256(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DODO_MINE.deposit(address(lpToken), amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2Library
Line:        194
Source: 
>         (address token0,) = sortTokens(tokenA, tokenB);
>         (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);

[0m

---------------------------------------------
For contract 0xf86ebe8d573dc6e79fef62cfcab63fb5ee0e2afc.sol
Tool Runtime = 20.9740543730004 seconds
#############################################