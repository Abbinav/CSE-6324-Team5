pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Initializable
Line:        63
Source: 
>     uint256 cs;
>     assembly { cs := extcodesize(self) }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return cs == 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OpenZeppelinUpgradesECDSA
Line:        108
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly {
>         ^^^^^^^^^^
>             r := mload(add(signature, 0x20))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ERC20Wrapper
Line:        1066
Source: 
> 
>         assembly {
>            ^^^^^^^
>             // check number of bytes returned from last function call

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        239
Source: 
> 
>     function initialize(address sender) public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!isWhitelistAdmin(sender)) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        254
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        258
Source: 
> 
>     function renounceWhitelistAdmin() public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelistAdmin(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        254
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        258
Source: 
> 
>     function renounceWhitelistAdmin() public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelistAdmin(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        303
Source: 
> 
>     function initialize(address sender) public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WhitelistAdminRole.initialize(sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        307
Source: 
> 
>     function isWhitelisted(address account) public view returns (bool) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelisteds.has(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        311
Source: 
> 
>     function addWhitelisted(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelisted(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        315
Source: 
> 
>     function removeWhitelisted(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        319
Source: 
> 
>     function renounceWhitelisted() public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        254
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        258
Source: 
> 
>     function renounceWhitelistAdmin() public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelistAdmin(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        303
Source: 
> 
>     function initialize(address sender) public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WhitelistAdminRole.initialize(sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        307
Source: 
> 
>     function isWhitelisted(address account) public view returns (bool) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelisteds.has(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        311
Source: 
> 
>     function addWhitelisted(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelisted(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        315
Source: 
> 
>     function removeWhitelisted(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        319
Source: 
> 
>     function renounceWhitelisted() public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRoleMeta
Line:        350
Source: 
> 
>     function initialize(address sender) public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WhitelistAdminRole.initialize(sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRoleMeta
Line:        354
Source: 
> 
>     function addSignedWhitelisted(address account, bytes memory signature) public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address signer = getWhitelistedRoleActionSigner('addSignedWhitelisted', account, signature);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRoleMeta
Line:        361
Source: 
> 
>     function addSignedWhitelistAdmin(address account, bytes memory signature) public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address signer = getWhitelistedRoleActionSigner('addSignedWhitelistAdmin', account, signature);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ReentrancyGuardEmber
Line:        409
Source: 
> 
>     function initialize() public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // The counter starts at one to prevent changing it from zero to a non-zero

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        254
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        258
Source: 
> 
>     function renounceWhitelistAdmin() public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelistAdmin(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        303
Source: 
> 
>     function initialize(address sender) public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WhitelistAdminRole.initialize(sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        311
Source: 
> 
>     function addWhitelisted(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelisted(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        315
Source: 
> 
>     function removeWhitelisted(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        319
Source: 
> 
>     function renounceWhitelisted() public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRoleMeta
Line:        350
Source: 
> 
>     function initialize(address sender) public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WhitelistAdminRole.initialize(sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRoleMeta
Line:        354
Source: 
> 
>     function addSignedWhitelisted(address account, bytes memory signature) public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address signer = getWhitelistedRoleActionSigner('addSignedWhitelisted', account, signature);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRoleMeta
Line:        361
Source: 
> 
>     function addSignedWhitelistAdmin(address account, bytes memory signature) public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address signer = getWhitelistedRoleActionSigner('addSignedWhitelistAdmin', account, signature);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ReentrancyGuardEmber
Line:        409
Source: 
> 
>     function initialize() public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // The counter starts at one to prevent changing it from zero to a non-zero

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SmartWalletVault
Line:        1234
Source: 
>      */
>     function initialize(address _owner) public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       WhitelistedRoleMeta.initialize(_owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SmartWalletVault
Line:        1253
Source: 
> 
>     function getTransfersProxy() public view returns (address) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return 0x882d80D3a191859d64477eb78Cca46599307ec1C;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SmartWalletVault
Line:        1257
Source: 
> 
>     function getRebalancingSetExchangeIssuanceModule() public view returns (address payable) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return 0xde697AC56b1bD9C0987c08911020f2341e274813;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SmartWalletVault
Line:        1261
Source: 
> 
>     function getRebalancingSetIssuanceModule() public view returns (address payable) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return 0xDA6786379FF88729264d31d472FA917f5E561443;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SmartWalletVault
Line:        1265
Source: 
> 
>     function getCTokenaddressToAddressWhiteList() public view returns (address payable) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return 0x5BA020a8835ed40936941562bdF42D66F65fc00f;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SmartWalletVault
Line:        1269
Source: 
> 
>     function getWrappedEthInstance() public view returns (IWETH) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SmartWalletVault
Line:        1350
Source: 
> 
>     function vaultDeposit(
>        ^^^^^^^^^^^^^^^^^^^
>       address _vaultAddress,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SmartWalletVault
Line:        1398
Source: 
> 
>     function vaultWithdraw(
>        ^^^^^^^^^^^^^^^^^^^^
>       address _vaultAddress,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartWalletVault
Line:        1301
Source: 
>       require(tokenBalance >= _withdrawalAmount, "Withdrawal amount is too high");
>       require(this.isWhitelistAdmin(_to), "You can only withdraw to an owner address");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       ERC20Wrapper.transfer(

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartWalletVault
Line:        1319
Source: 
>       require(ethBalance >= _withdrawalAmount, "Withdrawal amount is too high");
>       require(this.isWhitelistAdmin(_to), "You can only withdraw to an owner address");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _to.transfer(_withdrawalAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartWalletVault
Line:        1320
Source: 
>       require(this.isWhitelistAdmin(_to), "You can only withdraw to an owner address");
>       _to.transfer(_withdrawalAmount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartWalletVault
Line:        1377
Source: 
>       // Deposit tokens to the vault
>       IVault(_vaultAddress).deposit(_amount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartWalletVault
Line:        1220
Source: 
>                          msg.data.length;
>       uint256 allowance = chiGasSaver.allowance(msg.sender, address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 chiTokensToSpend = (gasSpent + 14154) / 41947;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartWalletVault
Line:        1223
Source: 
>       if (allowance < chiTokensToSpend) {
>         chiGasSaver.approve(address(this), chiTokensToSpend);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartWalletVault
Line:        1225
Source: 
>       }
>       chiGasSaver.freeFromUpTo(msg.sender, chiTokensToSpend);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Wrapper
Line:        1015
Source: 
>     {
>         IERC20(_token).approve(_spender, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartWalletVault
Line:        1421
Source: 
>       // Withdraw shares of the vault to deposit token
>       IVault(_vaultAddress).withdraw(shares);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartWalletVault
Line:        1220
Source: 
>                          msg.data.length;
>       uint256 allowance = chiGasSaver.allowance(msg.sender, address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 chiTokensToSpend = (gasSpent + 14154) / 41947;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartWalletVault
Line:        1223
Source: 
>       if (allowance < chiTokensToSpend) {
>         chiGasSaver.approve(address(this), chiTokensToSpend);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SmartWalletVault
Line:        1225
Source: 
>       }
>       chiGasSaver.freeFromUpTo(msg.sender, chiTokensToSpend);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Wrapper
Line:        991
Source: 
>     {
>         IERC20(_token).transferFrom(_from, _to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC20Wrapper
Line:        965
Source: 
>     {
>         IERC20(_token).transfer(_to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC20Wrapper
Line:        927
Source: 
>     {
>         return IERC20(_token).balanceOf(_owner);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    SmartWalletVault
Line:        1301
Source: 
>       require(tokenBalance >= _withdrawalAmount, "Withdrawal amount is too high");
>       require(this.isWhitelistAdmin(_to), "You can only withdraw to an owner address");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       ERC20Wrapper.transfer(

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    SmartWalletVault
Line:        1319
Source: 
>       require(ethBalance >= _withdrawalAmount, "Withdrawal amount is too high");
>       require(this.isWhitelistAdmin(_to), "You can only withdraw to an owner address");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _to.transfer(_withdrawalAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    SmartWalletVault
Line:        1377
Source: 
>       // Deposit tokens to the vault
>       IVault(_vaultAddress).deposit(_amount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    SmartWalletVault
Line:        1220
Source: 
>                          msg.data.length;
>       uint256 allowance = chiGasSaver.allowance(msg.sender, address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 chiTokensToSpend = (gasSpent + 14154) / 41947;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    SmartWalletVault
Line:        1223
Source: 
>       if (allowance < chiTokensToSpend) {
>         chiGasSaver.approve(address(this), chiTokensToSpend);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    SmartWalletVault
Line:        1225
Source: 
>       }
>       chiGasSaver.freeFromUpTo(msg.sender, chiTokensToSpend);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    SmartWalletVault
Line:        1421
Source: 
>       // Withdraw shares of the vault to deposit token
>       IVault(_vaultAddress).withdraw(shares);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    SmartWalletVault
Line:        1220
Source: 
>                          msg.data.length;
>       uint256 allowance = chiGasSaver.allowance(msg.sender, address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 chiTokensToSpend = (gasSpent + 14154) / 41947;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    SmartWalletVault
Line:        1223
Source: 
>       if (allowance < chiTokensToSpend) {
>         chiGasSaver.approve(address(this), chiTokensToSpend);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    SmartWalletVault
Line:        1225
Source: 
>       }
>       chiGasSaver.freeFromUpTo(msg.sender, chiTokensToSpend);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        239
Source: 
> 
>     function initialize(address sender) public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!isWhitelistAdmin(sender)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        250
Source: 
> 
>     function isWhitelistAdmin(address account) public view returns (bool) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelistAdmins.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        254
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        239
Source: 
> 
>     function initialize(address sender) public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!isWhitelistAdmin(sender)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        250
Source: 
> 
>     function isWhitelistAdmin(address account) public view returns (bool) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelistAdmins.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        254
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        303
Source: 
> 
>     function initialize(address sender) public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WhitelistAdminRole.initialize(sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        307
Source: 
> 
>     function isWhitelisted(address account) public view returns (bool) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelisteds.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        311
Source: 
> 
>     function addWhitelisted(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelisted(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        315
Source: 
> 
>     function removeWhitelisted(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        239
Source: 
> 
>     function initialize(address sender) public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!isWhitelistAdmin(sender)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        250
Source: 
> 
>     function isWhitelistAdmin(address account) public view returns (bool) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelistAdmins.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        254
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        303
Source: 
> 
>     function initialize(address sender) public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WhitelistAdminRole.initialize(sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        307
Source: 
> 
>     function isWhitelisted(address account) public view returns (bool) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelisteds.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        311
Source: 
> 
>     function addWhitelisted(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelisted(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        315
Source: 
> 
>     function removeWhitelisted(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRoleMeta
Line:        350
Source: 
> 
>     function initialize(address sender) public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WhitelistAdminRole.initialize(sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRoleMeta
Line:        354
Source: 
> 
>     function addSignedWhitelisted(address account, bytes memory signature) public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address signer = getWhitelistedRoleActionSigner('addSignedWhitelisted', account, signature);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRoleMeta
Line:        361
Source: 
> 
>     function addSignedWhitelistAdmin(address account, bytes memory signature) public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address signer = getWhitelistedRoleActionSigner('addSignedWhitelistAdmin', account, signature);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        239
Source: 
> 
>     function initialize(address sender) public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!isWhitelistAdmin(sender)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        250
Source: 
> 
>     function isWhitelistAdmin(address account) public view returns (bool) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelistAdmins.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        254
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        303
Source: 
> 
>     function initialize(address sender) public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WhitelistAdminRole.initialize(sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        307
Source: 
> 
>     function isWhitelisted(address account) public view returns (bool) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelisteds.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        311
Source: 
> 
>     function addWhitelisted(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelisted(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        315
Source: 
> 
>     function removeWhitelisted(address account) public onlyWhitelistAdmin {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRoleMeta
Line:        350
Source: 
> 
>     function initialize(address sender) public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WhitelistAdminRole.initialize(sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRoleMeta
Line:        354
Source: 
> 
>     function addSignedWhitelisted(address account, bytes memory signature) public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address signer = getWhitelistedRoleActionSigner('addSignedWhitelisted', account, signature);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRoleMeta
Line:        361
Source: 
> 
>     function addSignedWhitelistAdmin(address account, bytes memory signature) public {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address signer = getWhitelistedRoleActionSigner('addSignedWhitelistAdmin', account, signature);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SmartWalletVault
Line:        1234
Source: 
>      */
>     function initialize(address _owner) public initializer {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       WhitelistedRoleMeta.initialize(_owner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SmartWalletVault
Line:        1312
Source: 
>      */
>     function withdrawETH(address payable _to, uint256 _withdrawalAmount)
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SmartWalletVault
Line:        1350
Source: 
> 
>     function vaultDeposit(
>        ^^^^^^^^^^^^^^^^^^^
>       address _vaultAddress,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SmartWalletVault
Line:        1398
Source: 
> 
>     function vaultWithdraw(
>        ^^^^^^^^^^^^^^^^^^^^
>       address _vaultAddress,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        919
Source: 
>      */
>     function balanceOf(
>        ^^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        958
Source: 
>      */
>     function transfer(
>        ^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        983
Source: 
>      */
>     function transferFrom(
>        ^^^^^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        919
Source: 
>      */
>     function balanceOf(
>        ^^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        958
Source: 
>      */
>     function transfer(
>        ^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        983
Source: 
>      */
>     function transferFrom(
>        ^^^^^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        919
Source: 
>      */
>     function balanceOf(
>        ^^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        958
Source: 
>      */
>     function transfer(
>        ^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        983
Source: 
>      */
>     function transferFrom(
>        ^^^^^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        919
Source: 
>      */
>     function balanceOf(
>        ^^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        958
Source: 
>      */
>     function transfer(
>        ^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        983
Source: 
>      */
>     function transferFrom(
>        ^^^^^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        919
Source: 
>      */
>     function balanceOf(
>        ^^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        958
Source: 
>      */
>     function transfer(
>        ^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        983
Source: 
>      */
>     function transferFrom(
>        ^^^^^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        919
Source: 
>      */
>     function balanceOf(
>        ^^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        958
Source: 
>      */
>     function transfer(
>        ^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        983
Source: 
>      */
>     function transferFrom(
>        ^^^^^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SmartWalletVault
Line:        1294
Source: 
>      */
>     function withdrawERC20(address _tokenAddress, address _to, uint256 _withdrawalAmount)
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        919
Source: 
>      */
>     function balanceOf(
>        ^^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        958
Source: 
>      */
>     function transfer(
>        ^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Wrapper
Line:        983
Source: 
>      */
>     function transferFrom(
>        ^^^^^^^^^^^^^^^^^^^
>         address _token,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    SmartWalletVault
Line:        1320
Source: 
>       require(this.isWhitelistAdmin(_to), "You can only withdraw to an owner address");
>       _to.transfer(_withdrawalAmount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Initializable
Line:        68
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WhitelistAdminRole
Line:        272
Source: 
> 
>     uint256[50] private ______gap;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WhitelistedRole
Line:        333
Source: 
> 
>     uint256[50] private ______gap;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ReentrancyGuardEmber
Line:        429
Source: 
> 
>     uint256[50] private ______gap;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartWalletVault
Line:        1210
Source: 
> 
>     uint16 public constant version = 3;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SmartWalletVault
Line:        1213
Source: 
>     // Gas token saver
>     ChiGasSaver public constant chiGasSaver = ChiGasSaver(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        8
Source: 
> //pragma solidity >=0.4.24 <0.7.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        74
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        150
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        182
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        222
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        278
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        339
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        385
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        435
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        611
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        825
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        895
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        1112
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        1136
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        1158
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> pragma experimental ABIEncoderV2;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        1186
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        28
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        33
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        68
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CommonMath
Line:        618
Source: 
> 
>     uint256 public constant SCALE_FACTOR = 10 ** 18;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant MAX_UINT_256 = 2 ** 256 - 1;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CommonMath
Line:        619
Source: 
>     uint256 public constant SCALE_FACTOR = 10 ** 18;
>     uint256 public constant MAX_UINT_256 = 2 ** 256 - 1;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        28
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        33
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        68
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CommonMath
Line:        618
Source: 
> 
>     uint256 public constant SCALE_FACTOR = 10 ** 18;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant MAX_UINT_256 = 2 ** 256 - 1;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CommonMath
Line:        619
Source: 
>     uint256 public constant SCALE_FACTOR = 10 ** 18;
>     uint256 public constant MAX_UINT_256 = 2 ** 256 - 1;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        28
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        33
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        68
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    WhitelistAdminRole
Line:        237
Source: 
> 
>     Roles.Role private _whitelistAdmins;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    WhitelistAdminRole
Line:        272
Source: 
> 
>     uint256[50] private ______gap;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CommonMath
Line:        618
Source: 
> 
>     uint256 public constant SCALE_FACTOR = 10 ** 18;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant MAX_UINT_256 = 2 ** 256 - 1;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CommonMath
Line:        619
Source: 
>     uint256 public constant SCALE_FACTOR = 10 ** 18;
>     uint256 public constant MAX_UINT_256 = 2 ** 256 - 1;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        28
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        33
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        68
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    WhitelistAdminRole
Line:        237
Source: 
> 
>     Roles.Role private _whitelistAdmins;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    WhitelistAdminRole
Line:        272
Source: 
> 
>     uint256[50] private ______gap;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    WhitelistedRole
Line:        296
Source: 
> 
>     Roles.Role private _whitelisteds;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    WhitelistedRole
Line:        333
Source: 
> 
>     uint256[50] private ______gap;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CommonMath
Line:        618
Source: 
> 
>     uint256 public constant SCALE_FACTOR = 10 ** 18;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant MAX_UINT_256 = 2 ** 256 - 1;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CommonMath
Line:        619
Source: 
>     uint256 public constant SCALE_FACTOR = 10 ** 18;
>     uint256 public constant MAX_UINT_256 = 2 ** 256 - 1;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        28
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        33
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        68
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    WhitelistAdminRole
Line:        237
Source: 
> 
>     Roles.Role private _whitelistAdmins;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    WhitelistAdminRole
Line:        272
Source: 
> 
>     uint256[50] private ______gap;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    WhitelistedRole
Line:        296
Source: 
> 
>     Roles.Role private _whitelisteds;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    WhitelistedRole
Line:        333
Source: 
> 
>     uint256[50] private ______gap;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CommonMath
Line:        618
Source: 
> 
>     uint256 public constant SCALE_FACTOR = 10 ** 18;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant MAX_UINT_256 = 2 ** 256 - 1;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CommonMath
Line:        619
Source: 
>     uint256 public constant SCALE_FACTOR = 10 ** 18;
>     uint256 public constant MAX_UINT_256 = 2 ** 256 - 1;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        28
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        33
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        68
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ReentrancyGuardEmber
Line:        407
Source: 
>     // counter to allow mutex lock with only one SSTORE operation
>     uint256 private _guardCounter;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ReentrancyGuardEmber
Line:        429
Source: 
> 
>     uint256[50] private ______gap;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CommonMath
Line:        618
Source: 
> 
>     uint256 public constant SCALE_FACTOR = 10 ** 18;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant MAX_UINT_256 = 2 ** 256 - 1;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CommonMath
Line:        619
Source: 
>     uint256 public constant SCALE_FACTOR = 10 ** 18;
>     uint256 public constant MAX_UINT_256 = 2 ** 256 - 1;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        28
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        33
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Initializable
Line:        68
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    WhitelistAdminRole
Line:        237
Source: 
> 
>     Roles.Role private _whitelistAdmins;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    WhitelistAdminRole
Line:        272
Source: 
> 
>     uint256[50] private ______gap;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    WhitelistedRole
Line:        296
Source: 
> 
>     Roles.Role private _whitelisteds;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    WhitelistedRole
Line:        333
Source: 
> 
>     uint256[50] private ______gap;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ReentrancyGuardEmber
Line:        407
Source: 
>     // counter to allow mutex lock with only one SSTORE operation
>     uint256 private _guardCounter;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ReentrancyGuardEmber
Line:        429
Source: 
> 
>     uint256[50] private ______gap;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SmartWalletVault
Line:        1208
Source: 
>     // Nonces to prevent replay attacks
>     mapping(uint256 => bool) private nonces;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SmartWalletVault
Line:        1210
Source: 
> 
>     uint16 public constant version = 3;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SmartWalletVault
Line:        1213
Source: 
>     // Gas token saver
>     ChiGasSaver public constant chiGasSaver = ChiGasSaver(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SmartWalletVault
Line:        1228
Source: 
> 
>     mapping(address => address) public depositTokenAddressToYVault;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => address) public yVaultToDepositTokenAddress;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SmartWalletVault
Line:        1229
Source: 
>     mapping(address => address) public depositTokenAddressToYVault;
>     mapping(address => address) public yVaultToDepositTokenAddress;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CommonMath
Line:        618
Source: 
> 
>     uint256 public constant SCALE_FACTOR = 10 ** 18;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant MAX_UINT_256 = 2 ** 256 - 1;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CommonMath
Line:        619
Source: 
>     uint256 public constant SCALE_FACTOR = 10 ** 18;
>     uint256 public constant MAX_UINT_256 = 2 ** 256 - 1;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Initializable
Line:        41
Source: 
> 
>     bool isTopLevelCall = !initializing;
>     ^^^^^^^^^^^^^^^^^^^
>     if (isTopLevelCall) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ReentrancyGuardEmber
Line:        424
Source: 
>         _guardCounter += 1;
>         uint256 localCounter = _guardCounter;
>            ^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SmartWalletVault
Line:        1216
Source: 
>     modifier discountChiGasSaver {
>       uint256 gasStart = gasleft();
>          ^^^^^^^^^^^^^^^^
>       _;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SmartWalletVault
Line:        1218
Source: 
>       _;
>       uint256 gasSpent = 21000 + gasStart - gasleft() + 16 *
>          ^^^^^^^^^^^^^^^^
>                          msg.data.length;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SmartWalletVault
Line:        1220
Source: 
>                          msg.data.length;
>       uint256 allowance = chiGasSaver.allowance(msg.sender, address(this));
>          ^^^^^^^^^^^^^^^^^
>       uint256 chiTokensToSpend = (gasSpent + 14154) / 41947;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SmartWalletVault
Line:        1221
Source: 
>       uint256 allowance = chiGasSaver.allowance(msg.sender, address(this));
>       uint256 chiTokensToSpend = (gasSpent + 14154) / 41947;
>          ^^^^^^^^^^^^^^^^^^^^^^^^
>       if (allowance < chiTokensToSpend) {

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CommonMath
Line:        736
Source: 
>         // Calculate error percentage
>         uint256 errPercentageTimes1000000 = remainder.mul(1000000).div(_numerator.mul(_principal));
>                                                              ^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    SmartWalletVault
Line:        1320
Source: 
>       require(this.isWhitelistAdmin(_to), "You can only withdraw to an owner address");
>       _to.transfer(_withdrawalAmount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    ERC20Wrapper
Line:        965
Source: 
>     {
>         IERC20(_token).transfer(_to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    ERC20Wrapper
Line:        927
Source: 
>     {
>         return IERC20(_token).balanceOf(_owner);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    SmartWalletVault
Line:        1319
Source: 
>       require(ethBalance >= _withdrawalAmount, "Withdrawal amount is too high");
>       require(this.isWhitelistAdmin(_to), "You can only withdraw to an owner address");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _to.transfer(_withdrawalAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    SmartWalletVault
Line:        1320
Source: 
>       require(this.isWhitelistAdmin(_to), "You can only withdraw to an owner address");
>       _to.transfer(_withdrawalAmount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    ERC20Wrapper
Line:        1015
Source: 
>     {
>         IERC20(_token).approve(_spender, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    ERC20Wrapper
Line:        991
Source: 
>     {
>         IERC20(_token).transferFrom(_from, _to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SmartWalletVault
Line:        1377
Source: 
>       // Deposit tokens to the vault
>       IVault(_vaultAddress).deposit(_amount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SmartWalletVault
Line:        1220
Source: 
>                          msg.data.length;
>       uint256 allowance = chiGasSaver.allowance(msg.sender, address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 chiTokensToSpend = (gasSpent + 14154) / 41947;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SmartWalletVault
Line:        1223
Source: 
>       if (allowance < chiTokensToSpend) {
>         chiGasSaver.approve(address(this), chiTokensToSpend);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SmartWalletVault
Line:        1225
Source: 
>       }
>       chiGasSaver.freeFromUpTo(msg.sender, chiTokensToSpend);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SmartWalletVault
Line:        1421
Source: 
>       // Withdraw shares of the vault to deposit token
>       IVault(_vaultAddress).withdraw(shares);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SmartWalletVault
Line:        1220
Source: 
>                          msg.data.length;
>       uint256 allowance = chiGasSaver.allowance(msg.sender, address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 chiTokensToSpend = (gasSpent + 14154) / 41947;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SmartWalletVault
Line:        1223
Source: 
>       if (allowance < chiTokensToSpend) {
>         chiGasSaver.approve(address(this), chiTokensToSpend);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SmartWalletVault
Line:        1225
Source: 
>       }
>       chiGasSaver.freeFromUpTo(msg.sender, chiTokensToSpend);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Wrapper
Line:        965
Source: 
>     {
>         IERC20(_token).transfer(_to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Wrapper
Line:        927
Source: 
>     {
>         return IERC20(_token).balanceOf(_owner);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartWalletVault
Line:        1301
Source: 
>       require(tokenBalance >= _withdrawalAmount, "Withdrawal amount is too high");
>       require(this.isWhitelistAdmin(_to), "You can only withdraw to an owner address");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       ERC20Wrapper.transfer(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartWalletVault
Line:        1319
Source: 
>       require(ethBalance >= _withdrawalAmount, "Withdrawal amount is too high");
>       require(this.isWhitelistAdmin(_to), "You can only withdraw to an owner address");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _to.transfer(_withdrawalAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartWalletVault
Line:        1320
Source: 
>       require(this.isWhitelistAdmin(_to), "You can only withdraw to an owner address");
>       _to.transfer(_withdrawalAmount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartWalletVault
Line:        1377
Source: 
>       // Deposit tokens to the vault
>       IVault(_vaultAddress).deposit(_amount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartWalletVault
Line:        1220
Source: 
>                          msg.data.length;
>       uint256 allowance = chiGasSaver.allowance(msg.sender, address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 chiTokensToSpend = (gasSpent + 14154) / 41947;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartWalletVault
Line:        1223
Source: 
>       if (allowance < chiTokensToSpend) {
>         chiGasSaver.approve(address(this), chiTokensToSpend);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartWalletVault
Line:        1225
Source: 
>       }
>       chiGasSaver.freeFromUpTo(msg.sender, chiTokensToSpend);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Wrapper
Line:        1015
Source: 
>     {
>         IERC20(_token).approve(_spender, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartWalletVault
Line:        1421
Source: 
>       // Withdraw shares of the vault to deposit token
>       IVault(_vaultAddress).withdraw(shares);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartWalletVault
Line:        1220
Source: 
>                          msg.data.length;
>       uint256 allowance = chiGasSaver.allowance(msg.sender, address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 chiTokensToSpend = (gasSpent + 14154) / 41947;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartWalletVault
Line:        1223
Source: 
>       if (allowance < chiTokensToSpend) {
>         chiGasSaver.approve(address(this), chiTokensToSpend);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartWalletVault
Line:        1225
Source: 
>       }
>       chiGasSaver.freeFromUpTo(msg.sender, chiTokensToSpend);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Wrapper
Line:        991
Source: 
>     {
>         IERC20(_token).transferFrom(_from, _to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SmartWalletVault
Line:        1301
Source: 
>       require(tokenBalance >= _withdrawalAmount, "Withdrawal amount is too high");
>       require(this.isWhitelistAdmin(_to), "You can only withdraw to an owner address");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       ERC20Wrapper.transfer(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SmartWalletVault
Line:        1319
Source: 
>       require(ethBalance >= _withdrawalAmount, "Withdrawal amount is too high");
>       require(this.isWhitelistAdmin(_to), "You can only withdraw to an owner address");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _to.transfer(_withdrawalAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SmartWalletVault
Line:        1220
Source: 
>                          msg.data.length;
>       uint256 allowance = chiGasSaver.allowance(msg.sender, address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 chiTokensToSpend = (gasSpent + 14154) / 41947;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        927
Source: 
>     {
>         return IERC20(_token).balanceOf(_owner);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        965
Source: 
>     {
>         IERC20(_token).transfer(_to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        991
Source: 
>     {
>         IERC20(_token).transferFrom(_from, _to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        927
Source: 
>     {
>         return IERC20(_token).balanceOf(_owner);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        965
Source: 
>     {
>         IERC20(_token).transfer(_to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        991
Source: 
>     {
>         IERC20(_token).transferFrom(_from, _to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        927
Source: 
>     {
>         return IERC20(_token).balanceOf(_owner);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        965
Source: 
>     {
>         IERC20(_token).transfer(_to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        991
Source: 
>     {
>         IERC20(_token).transferFrom(_from, _to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        927
Source: 
>     {
>         return IERC20(_token).balanceOf(_owner);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        965
Source: 
>     {
>         IERC20(_token).transfer(_to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        991
Source: 
>     {
>         IERC20(_token).transferFrom(_from, _to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        927
Source: 
>     {
>         return IERC20(_token).balanceOf(_owner);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        965
Source: 
>     {
>         IERC20(_token).transfer(_to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        991
Source: 
>     {
>         IERC20(_token).transferFrom(_from, _to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        927
Source: 
>     {
>         return IERC20(_token).balanceOf(_owner);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        965
Source: 
>     {
>         IERC20(_token).transfer(_to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        991
Source: 
>     {
>         IERC20(_token).transferFrom(_from, _to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        965
Source: 
>     {
>         IERC20(_token).transfer(_to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        927
Source: 
>     {
>         return IERC20(_token).balanceOf(_owner);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SmartWalletVault
Line:        1377
Source: 
>       // Deposit tokens to the vault
>       IVault(_vaultAddress).deposit(_amount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SmartWalletVault
Line:        1223
Source: 
>       if (allowance < chiTokensToSpend) {
>         chiGasSaver.approve(address(this), chiTokensToSpend);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SmartWalletVault
Line:        1225
Source: 
>       }
>       chiGasSaver.freeFromUpTo(msg.sender, chiTokensToSpend);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        1015
Source: 
>     {
>         IERC20(_token).approve(_spender, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SmartWalletVault
Line:        1421
Source: 
>       // Withdraw shares of the vault to deposit token
>       IVault(_vaultAddress).withdraw(shares);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SmartWalletVault
Line:        1223
Source: 
>       if (allowance < chiTokensToSpend) {
>         chiGasSaver.approve(address(this), chiTokensToSpend);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SmartWalletVault
Line:        1225
Source: 
>       }
>       chiGasSaver.freeFromUpTo(msg.sender, chiTokensToSpend);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Wrapper
Line:        991
Source: 
>     {
>         IERC20(_token).transferFrom(_from, _to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Initializable
Line:        64
Source: 
>     assembly { cs := extcodesize(self) }
>     return cs == 0;
>            ^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    OpenZeppelinUpgradesECDSA
Line:        123
Source: 
>         // these malleable signatures as well.
>         if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
>                        ^
>             return address(0);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    SmartWalletVault
Line:        1301
Source: 
>       require(tokenBalance >= _withdrawalAmount, "Withdrawal amount is too high");
>       require(this.isWhitelistAdmin(_to), "You can only withdraw to an owner address");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       ERC20Wrapper.transfer(

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    SmartWalletVault
Line:        1319
Source: 
>       require(ethBalance >= _withdrawalAmount, "Withdrawal amount is too high");
>       require(this.isWhitelistAdmin(_to), "You can only withdraw to an owner address");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _to.transfer(_withdrawalAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    SmartWalletVault
Line:        1320
Source: 
>       require(this.isWhitelistAdmin(_to), "You can only withdraw to an owner address");
>       _to.transfer(_withdrawalAmount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        927
Source: 
>     {
>         return IERC20(_token).balanceOf(_owner);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        965
Source: 
>     {
>         IERC20(_token).transfer(_to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        991
Source: 
>     {
>         IERC20(_token).transferFrom(_from, _to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        927
Source: 
>     {
>         return IERC20(_token).balanceOf(_owner);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        965
Source: 
>     {
>         IERC20(_token).transfer(_to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        991
Source: 
>     {
>         IERC20(_token).transferFrom(_from, _to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        927
Source: 
>     {
>         return IERC20(_token).balanceOf(_owner);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        965
Source: 
>     {
>         IERC20(_token).transfer(_to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        991
Source: 
>     {
>         IERC20(_token).transferFrom(_from, _to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        927
Source: 
>     {
>         return IERC20(_token).balanceOf(_owner);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        965
Source: 
>     {
>         IERC20(_token).transfer(_to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        991
Source: 
>     {
>         IERC20(_token).transferFrom(_from, _to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        927
Source: 
>     {
>         return IERC20(_token).balanceOf(_owner);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        965
Source: 
>     {
>         IERC20(_token).transfer(_to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        991
Source: 
>     {
>         IERC20(_token).transferFrom(_from, _to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        927
Source: 
>     {
>         return IERC20(_token).balanceOf(_owner);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        965
Source: 
>     {
>         IERC20(_token).transfer(_to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        991
Source: 
>     {
>         IERC20(_token).transferFrom(_from, _to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        965
Source: 
>     {
>         IERC20(_token).transfer(_to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        927
Source: 
>     {
>         return IERC20(_token).balanceOf(_owner);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    SmartWalletVault
Line:        1377
Source: 
>       // Deposit tokens to the vault
>       IVault(_vaultAddress).deposit(_amount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    SmartWalletVault
Line:        1220
Source: 
>                          msg.data.length;
>       uint256 allowance = chiGasSaver.allowance(msg.sender, address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 chiTokensToSpend = (gasSpent + 14154) / 41947;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    SmartWalletVault
Line:        1223
Source: 
>       if (allowance < chiTokensToSpend) {
>         chiGasSaver.approve(address(this), chiTokensToSpend);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    SmartWalletVault
Line:        1225
Source: 
>       }
>       chiGasSaver.freeFromUpTo(msg.sender, chiTokensToSpend);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        1015
Source: 
>     {
>         IERC20(_token).approve(_spender, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    SmartWalletVault
Line:        1421
Source: 
>       // Withdraw shares of the vault to deposit token
>       IVault(_vaultAddress).withdraw(shares);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    SmartWalletVault
Line:        1220
Source: 
>                          msg.data.length;
>       uint256 allowance = chiGasSaver.allowance(msg.sender, address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 chiTokensToSpend = (gasSpent + 14154) / 41947;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    SmartWalletVault
Line:        1223
Source: 
>       if (allowance < chiTokensToSpend) {
>         chiGasSaver.approve(address(this), chiTokensToSpend);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    SmartWalletVault
Line:        1225
Source: 
>       }
>       chiGasSaver.freeFromUpTo(msg.sender, chiTokensToSpend);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Wrapper
Line:        991
Source: 
>     {
>         IERC20(_token).transferFrom(_from, _to, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        43
Source: 
>     if (isTopLevelCall) {
>       initializing = true;
>       ^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        44
Source: 
>       initializing = true;
>       initialized = true;
>       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        50
Source: 
>     if (isTopLevelCall) {
>       initializing = false;
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        198
Source: 
>         require(!has(role, account), "Roles: account already has role");
>         role.bearer[account] = true;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        206
Source: 
>         require(has(role, account), "Roles: account does not have role");
>         role.bearer[account] = false;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        43
Source: 
>     if (isTopLevelCall) {
>       initializing = true;
>       ^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        44
Source: 
>       initializing = true;
>       initialized = true;
>       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        50
Source: 
>     if (isTopLevelCall) {
>       initializing = false;
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        198
Source: 
>         require(!has(role, account), "Roles: account already has role");
>         role.bearer[account] = true;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        206
Source: 
>         require(has(role, account), "Roles: account does not have role");
>         role.bearer[account] = false;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        43
Source: 
>     if (isTopLevelCall) {
>       initializing = true;
>       ^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        44
Source: 
>       initializing = true;
>       initialized = true;
>       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        50
Source: 
>     if (isTopLevelCall) {
>       initializing = false;
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        43
Source: 
>     if (isTopLevelCall) {
>       initializing = true;
>       ^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        44
Source: 
>       initializing = true;
>       initialized = true;
>       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        50
Source: 
>     if (isTopLevelCall) {
>       initializing = false;
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        206
Source: 
>         require(has(role, account), "Roles: account does not have role");
>         role.bearer[account] = false;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        43
Source: 
>     if (isTopLevelCall) {
>       initializing = true;
>       ^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        44
Source: 
>       initializing = true;
>       initialized = true;
>       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        50
Source: 
>     if (isTopLevelCall) {
>       initializing = false;
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        43
Source: 
>     if (isTopLevelCall) {
>       initializing = true;
>       ^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        44
Source: 
>       initializing = true;
>       initialized = true;
>       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        50
Source: 
>     if (isTopLevelCall) {
>       initializing = false;
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        43
Source: 
>     if (isTopLevelCall) {
>       initializing = true;
>       ^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        44
Source: 
>       initializing = true;
>       initialized = true;
>       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        50
Source: 
>     if (isTopLevelCall) {
>       initializing = false;
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        206
Source: 
>         require(has(role, account), "Roles: account does not have role");
>         role.bearer[account] = false;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        43
Source: 
>     if (isTopLevelCall) {
>       initializing = true;
>       ^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        44
Source: 
>       initializing = true;
>       initialized = true;
>       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        50
Source: 
>     if (isTopLevelCall) {
>       initializing = false;
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        43
Source: 
>     if (isTopLevelCall) {
>       initializing = true;
>       ^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        44
Source: 
>       initializing = true;
>       initialized = true;
>       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        50
Source: 
>     if (isTopLevelCall) {
>       initializing = false;
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        43
Source: 
>     if (isTopLevelCall) {
>       initializing = true;
>       ^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        44
Source: 
>       initializing = true;
>       initialized = true;
>       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuardEmber
Line:        412
Source: 
>         // value, which is a more expensive operation.
>         _guardCounter = 1;
>            ^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        50
Source: 
>     if (isTopLevelCall) {
>       initializing = false;
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        43
Source: 
>     if (isTopLevelCall) {
>       initializing = true;
>       ^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        44
Source: 
>       initializing = true;
>       initialized = true;
>       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SmartWalletVault
Line:        1241
Source: 
>       // yEarn USDT 0x2f08119C6f07c006695E079AAFc638b8789FAf18
>       depositTokenAddressToYVault[0xdAC17F958D2ee523a2206206994597C13D831ec7] = 0x2f08119C6f07c006695E079AAFc638b8789FAf18;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       yVaultToDepositTokenAddress[0x2f08119C6f07c006695E079AAFc638b8789FAf18] = 0xdAC17F958D2ee523a2206206994597C13D831ec7;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SmartWalletVault
Line:        1242
Source: 
>       depositTokenAddressToYVault[0xdAC17F958D2ee523a2206206994597C13D831ec7] = 0x2f08119C6f07c006695E079AAFc638b8789FAf18;
>       yVaultToDepositTokenAddress[0x2f08119C6f07c006695E079AAFc638b8789FAf18] = 0xdAC17F958D2ee523a2206206994597C13D831ec7;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        50
Source: 
>     if (isTopLevelCall) {
>       initializing = false;
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuardEmber
Line:        423
Source: 
>     modifier nonReentrant() {
>         _guardCounter += 1;
>            ^^^^^^^^^^^^^^^^
>         uint256 localCounter = _guardCounter;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Roles
Line:        198
Source: 
>         require(!has(role, account), "Roles: account already has role");
>         role.bearer[account] = true;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        43
Source: 
>     if (isTopLevelCall) {
>       initializing = true;
>       ^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        44
Source: 
>       initializing = true;
>       initialized = true;
>       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ReentrancyGuardEmber
Line:        412
Source: 
>         // value, which is a more expensive operation.
>         _guardCounter = 1;
>            ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        50
Source: 
>     if (isTopLevelCall) {
>       initializing = false;
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Roles
Line:        198
Source: 
>         require(!has(role, account), "Roles: account already has role");
>         role.bearer[account] = true;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SmartWalletVault
Line:        1330
Source: 
>       require(!nonces[_nonce], "Replay attack detected.");
>       nonces[_nonce] = true;
>          ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        947
Source: 
>     {
>         return IERC20(_token).allowance(_owner, _spender);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1015
Source: 
>     {
>         IERC20(_token).approve(_spender, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1019
Source: 
>         require(
>             checkSuccess(),
>                ^^^^^^^^^^^^
>             "ERC20Wrapper.approve: Bad return value"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1046
Source: 
>                 _spender,
>                 CommonMath.maxUInt256()
>                    ^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        947
Source: 
>     {
>         return IERC20(_token).allowance(_owner, _spender);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1015
Source: 
>     {
>         IERC20(_token).approve(_spender, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1019
Source: 
>         require(
>             checkSuccess(),
>                ^^^^^^^^^^^^
>             "ERC20Wrapper.approve: Bad return value"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1046
Source: 
>                 _spender,
>                 CommonMath.maxUInt256()
>                    ^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        947
Source: 
>     {
>         return IERC20(_token).allowance(_owner, _spender);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1015
Source: 
>     {
>         IERC20(_token).approve(_spender, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1019
Source: 
>         require(
>             checkSuccess(),
>                ^^^^^^^^^^^^
>             "ERC20Wrapper.approve: Bad return value"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1046
Source: 
>                 _spender,
>                 CommonMath.maxUInt256()
>                    ^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        947
Source: 
>     {
>         return IERC20(_token).allowance(_owner, _spender);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1015
Source: 
>     {
>         IERC20(_token).approve(_spender, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1019
Source: 
>         require(
>             checkSuccess(),
>                ^^^^^^^^^^^^
>             "ERC20Wrapper.approve: Bad return value"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1046
Source: 
>                 _spender,
>                 CommonMath.maxUInt256()
>                    ^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        947
Source: 
>     {
>         return IERC20(_token).allowance(_owner, _spender);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1015
Source: 
>     {
>         IERC20(_token).approve(_spender, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1019
Source: 
>         require(
>             checkSuccess(),
>                ^^^^^^^^^^^^
>             "ERC20Wrapper.approve: Bad return value"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1046
Source: 
>                 _spender,
>                 CommonMath.maxUInt256()
>                    ^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        947
Source: 
>     {
>         return IERC20(_token).allowance(_owner, _spender);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1015
Source: 
>     {
>         IERC20(_token).approve(_spender, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1019
Source: 
>         require(
>             checkSuccess(),
>                ^^^^^^^^^^^^
>             "ERC20Wrapper.approve: Bad return value"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1046
Source: 
>                 _spender,
>                 CommonMath.maxUInt256()
>                    ^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SmartWalletVault
Line:        1223
Source: 
>       if (allowance < chiTokensToSpend) {
>         chiGasSaver.approve(address(this), chiTokensToSpend);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SmartWalletVault
Line:        1225
Source: 
>       }
>       chiGasSaver.freeFromUpTo(msg.sender, chiTokensToSpend);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1015
Source: 
>     {
>         IERC20(_token).approve(_spender, _quantity);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SmartWalletVault
Line:        1223
Source: 
>       if (allowance < chiTokensToSpend) {
>         chiGasSaver.approve(address(this), chiTokensToSpend);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SmartWalletVault
Line:        1225
Source: 
>       }
>       chiGasSaver.freeFromUpTo(msg.sender, chiTokensToSpend);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        947
Source: 
>     {
>         return IERC20(_token).allowance(_owner, _spender);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20Wrapper
Line:        1046
Source: 
>                 _spender,
>                 CommonMath.maxUInt256()
>                    ^^^^^^^^^^^^^^^^^^^^
>             );

[0m

---------------------------------------------
For contract 0x044a4C29dcAD5FE3DA932155F949FC0564F8fCae.sol
Tool Runtime = 55.04387554599998 seconds
#############################################