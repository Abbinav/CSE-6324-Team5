pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    BasicToken
Line:        139
Source: 
>   using SafeMath for uint256;
>   IterableMapping.itmap balances;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    IBRIDGE
Line:        323
Source: 
>     
>     string public name = "Bridge Protocol";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol = "BGPT";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    IBRIDGE
Line:        324
Source: 
>     string public name = "Bridge Protocol";
>     string public symbol = "BGPT";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    IBRIDGE
Line:        325
Source: 
>     string public symbol = "BGPT";
>     uint8 public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public INITIAL_SUPPLY = 10000000000 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    IBRIDGE
Line:        326
Source: 
>     uint8 public decimals = 18;
>     uint256 public INITIAL_SUPPLY = 10000000000 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        146
Source: 
>   */
>   function totalSupply() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return totalSupply_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        155
Source: 
>   */
>   function transfer(address _to, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        171
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return IterableMapping.iterate_getValue(balances, _owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IterableMapping
Line:        32
Source: 
>   }
>   function remove(itmap storage self, address key) public returns (bool success)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IterableMapping
Line:        41
Source: 
>   }
>   function contains(itmap storage self, address key) public view returns (bool)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IterableMapping
Line:        45
Source: 
>   }
>   function iterate_start(itmap storage self) public view returns (uint keyIndex)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IterableMapping
Line:        49
Source: 
>   }
>   function iterate_valid(itmap storage self, uint keyIndex) public view returns (bool)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IterableMapping
Line:        60
Source: 
>   }
>   function iterate_get(itmap storage self, uint keyIndex) public view returns (address key, uint value)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        146
Source: 
>   */
>   function totalSupply() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return totalSupply_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        155
Source: 
>   */
>   function transfer(address _to, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        171
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return IterableMapping.iterate_getValue(balances, _owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        216
Source: 
>    */
>   function transferFrom(
>   ^^^^^^^^^^^^^^^^^^^^^^
>     address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        248
Source: 
>    */
>   function approve(address _spender, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        260
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address _owner,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        280
Source: 
>    */
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        302
Source: 
>    */
>   function decreaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IterableMapping
Line:        32
Source: 
>   }
>   function remove(itmap storage self, address key) public returns (bool success)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IterableMapping
Line:        41
Source: 
>   }
>   function contains(itmap storage self, address key) public view returns (bool)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IterableMapping
Line:        45
Source: 
>   }
>   function iterate_start(itmap storage self) public view returns (uint keyIndex)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IterableMapping
Line:        49
Source: 
>   }
>   function iterate_valid(itmap storage self, uint keyIndex) public view returns (bool)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IterableMapping
Line:        60
Source: 
>   }
>   function iterate_get(itmap storage self, uint keyIndex) public view returns (address key, uint value)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        146
Source: 
>   */
>   function totalSupply() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return totalSupply_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        155
Source: 
>   */
>   function transfer(address _to, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        171
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return IterableMapping.iterate_getValue(balances, _owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        216
Source: 
>    */
>   function transferFrom(
>   ^^^^^^^^^^^^^^^^^^^^^^
>     address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        248
Source: 
>    */
>   function approve(address _spender, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        260
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address _owner,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        280
Source: 
>    */
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        302
Source: 
>    */
>   function decreaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IBRIDGE
Line:        333
Source: 
>     
>     function balancesStart() public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return IterableMapping.iterate_start(balances);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IBRIDGE
Line:        337
Source: 
>     
>     function balancesGetBool(uint256 num) public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return IterableMapping.iterate_valid(balances, num);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IBRIDGE
Line:        341
Source: 
>     
>     function balancesGetNext(uint256 num) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return IterableMapping.iterate_next(balances, num);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IBRIDGE
Line:        345
Source: 
>     
>     function balancesGetValue(uint256 num) public view returns(address, uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address key;                            

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IterableMapping
Line:        32
Source: 
>   }
>   function remove(itmap storage self, address key) public returns (bool success)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IterableMapping
Line:        41
Source: 
>   }
>   function contains(itmap storage self, address key) public view returns (bool)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    IterableMapping
Line:        45
Source: 
>   }
>   function iterate_start(itmap storage self) public view returns (uint keyIndex)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StandardToken
Line:        280
Source: 
>    */
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    IterableMapping
Line:        45
Source: 
>   }
>   function iterate_start(itmap storage self) public view returns (uint keyIndex)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StandardToken
Line:        280
Source: 
>    */
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    IBRIDGE
Line:        341
Source: 
>     
>     function balancesGetNext(uint256 num) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return IterableMapping.iterate_next(balances, num);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    IterableMapping
Line:        45
Source: 
>   }
>   function iterate_start(itmap storage self) public view returns (uint keyIndex)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicToken
Line:        171
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return IterableMapping.iterate_getValue(balances, _owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IterableMapping
Line:        17
Source: 
>   struct KeyFlag { address key; bool deleted; }
>   function insert(itmap storage self, address key, uint value) public returns (bool replaced)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IterableMapping
Line:        41
Source: 
>   }
>   function contains(itmap storage self, address key) public view returns (bool)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IterableMapping
Line:        49
Source: 
>   }
>   function iterate_valid(itmap storage self, uint keyIndex) public view returns (bool)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IterableMapping
Line:        60
Source: 
>   }
>   function iterate_get(itmap storage self, uint keyIndex) public view returns (address key, uint value)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IterableMapping
Line:        65
Source: 
>   }
>   function iterate_getValue(itmap storage self, address key) public view returns (uint value) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return self.data[key].value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicToken
Line:        171
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return IterableMapping.iterate_getValue(balances, _owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        248
Source: 
>    */
>   function approve(address _spender, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        260
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IterableMapping
Line:        17
Source: 
>   struct KeyFlag { address key; bool deleted; }
>   function insert(itmap storage self, address key, uint value) public returns (bool replaced)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IterableMapping
Line:        41
Source: 
>   }
>   function contains(itmap storage self, address key) public view returns (bool)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IterableMapping
Line:        49
Source: 
>   }
>   function iterate_valid(itmap storage self, uint keyIndex) public view returns (bool)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IterableMapping
Line:        60
Source: 
>   }
>   function iterate_get(itmap storage self, uint keyIndex) public view returns (address key, uint value)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IterableMapping
Line:        65
Source: 
>   }
>   function iterate_getValue(itmap storage self, address key) public view returns (uint value) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return self.data[key].value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicToken
Line:        171
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return IterableMapping.iterate_getValue(balances, _owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        248
Source: 
>    */
>   function approve(address _spender, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        260
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IBRIDGE
Line:        337
Source: 
>     
>     function balancesGetBool(uint256 num) public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return IterableMapping.iterate_valid(balances, num);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IBRIDGE
Line:        345
Source: 
>     
>     function balancesGetValue(uint256 num) public view returns(address, uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address key;                            

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IterableMapping
Line:        17
Source: 
>   struct KeyFlag { address key; bool deleted; }
>   function insert(itmap storage self, address key, uint value) public returns (bool replaced)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IterableMapping
Line:        41
Source: 
>   }
>   function contains(itmap storage self, address key) public view returns (bool)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IterableMapping
Line:        49
Source: 
>   }
>   function iterate_valid(itmap storage self, uint keyIndex) public view returns (bool)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IterableMapping
Line:        60
Source: 
>   }
>   function iterate_get(itmap storage self, uint keyIndex) public view returns (address key, uint value)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IterableMapping
Line:        65
Source: 
>   }
>   function iterate_getValue(itmap storage self, address key) public view returns (uint value) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return self.data[key].value;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IterableMapping
Line:        9
Source: 
> library IterableMapping {
>   struct itmap
>   ^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IterableMapping
Line:        45
Source: 
>   }
>   function iterate_start(itmap storage self) public view returns (uint keyIndex)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IterableMapping
Line:        49
Source: 
>   }
>   function iterate_valid(itmap storage self, uint keyIndex) public view returns (bool)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IterableMapping
Line:        53
Source: 
>   }
>   function iterate_next(itmap storage self, uint keyIndex) public view returns (uint r_keyIndex)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IterableMapping
Line:        60
Source: 
>   }
>   function iterate_get(itmap storage self, uint keyIndex) public view returns (address key, uint value)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IterableMapping
Line:        65
Source: 
>   }
>   function iterate_getValue(itmap storage self, address key) public view returns (uint value) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return self.data[key].value;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IBRIDGE
Line:        326
Source: 
>     uint8 public decimals = 18;
>     uint256 public INITIAL_SUPPLY = 10000000000 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BasicToken
Line:        139
Source: 
>   using SafeMath for uint256;
>   IterableMapping.itmap balances;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    IBRIDGE
Line:        326
Source: 
>     uint8 public decimals = 18;
>     uint256 public INITIAL_SUPPLY = 10000000000 ether;
>                                     ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BasicToken
Line:        139
Source: 
>   using SafeMath for uint256;
>   IterableMapping.itmap balances;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BasicToken
Line:        141
Source: 
> 
>   uint256 internal totalSupply_;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BasicToken
Line:        139
Source: 
>   using SafeMath for uint256;
>   IterableMapping.itmap balances;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BasicToken
Line:        141
Source: 
> 
>   uint256 internal totalSupply_;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BasicToken
Line:        139
Source: 
>   using SafeMath for uint256;
>   IterableMapping.itmap balances;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        20
Source: 
>     uint keyIndex = self.data[key].keyIndex;
>     self.data[key].value = value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (keyIndex > 0)

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        25
Source: 
>     {
>       keyIndex = self.keys.length++;
>                  ^^^^^^^^^^^^^^^^^^
>       self.data[key].keyIndex = keyIndex + 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        26
Source: 
>       keyIndex = self.keys.length++;
>       self.data[key].keyIndex = keyIndex + 1;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       self.keys[keyIndex].key = key;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        27
Source: 
>       self.data[key].keyIndex = keyIndex + 1;
>       self.keys[keyIndex].key = key;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       self.size++;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        28
Source: 
>       self.keys[keyIndex].key = key;
>       self.size++;
>       ^^^^^^^^^^^
>       return false;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        37
Source: 
>       return false;
>     delete self.data[key];
>     ^^^^^^^^^^^^^^^^^^^^^
>     self.keys[keyIndex - 1].deleted = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        38
Source: 
>     delete self.data[key];
>     self.keys[keyIndex - 1].deleted = true;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     self.size --;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        39
Source: 
>     self.keys[keyIndex - 1].deleted = true;
>     self.size --;
>     ^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        20
Source: 
>     uint keyIndex = self.data[key].keyIndex;
>     self.data[key].value = value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (keyIndex > 0)

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        25
Source: 
>     {
>       keyIndex = self.keys.length++;
>                  ^^^^^^^^^^^^^^^^^^
>       self.data[key].keyIndex = keyIndex + 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        26
Source: 
>       keyIndex = self.keys.length++;
>       self.data[key].keyIndex = keyIndex + 1;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       self.keys[keyIndex].key = key;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        27
Source: 
>       self.data[key].keyIndex = keyIndex + 1;
>       self.keys[keyIndex].key = key;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       self.size++;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        28
Source: 
>       self.keys[keyIndex].key = key;
>       self.size++;
>       ^^^^^^^^^^^
>       return false;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        249
Source: 
>   function approve(address _spender, uint256 _value) public returns (bool) {
>     allowed[msg.sender][_spender] = _value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        287
Source: 
>   {
>     allowed[msg.sender][_spender] = (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       allowed[msg.sender][_spender].add(_addedValue));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        37
Source: 
>       return false;
>     delete self.data[key];
>     ^^^^^^^^^^^^^^^^^^^^^
>     self.keys[keyIndex - 1].deleted = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        38
Source: 
>     delete self.data[key];
>     self.keys[keyIndex - 1].deleted = true;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     self.size --;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        39
Source: 
>     self.keys[keyIndex - 1].deleted = true;
>     self.size --;
>     ^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        20
Source: 
>     uint keyIndex = self.data[key].keyIndex;
>     self.data[key].value = value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (keyIndex > 0)

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        25
Source: 
>     {
>       keyIndex = self.keys.length++;
>                  ^^^^^^^^^^^^^^^^^^
>       self.data[key].keyIndex = keyIndex + 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        26
Source: 
>       keyIndex = self.keys.length++;
>       self.data[key].keyIndex = keyIndex + 1;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       self.keys[keyIndex].key = key;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        27
Source: 
>       self.data[key].keyIndex = keyIndex + 1;
>       self.keys[keyIndex].key = key;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       self.size++;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        28
Source: 
>       self.keys[keyIndex].key = key;
>       self.size++;
>       ^^^^^^^^^^^
>       return false;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        249
Source: 
>   function approve(address _spender, uint256 _value) public returns (bool) {
>     allowed[msg.sender][_spender] = _value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        287
Source: 
>   {
>     allowed[msg.sender][_spender] = (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       allowed[msg.sender][_spender].add(_addedValue));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        37
Source: 
>       return false;
>     delete self.data[key];
>     ^^^^^^^^^^^^^^^^^^^^^
>     self.keys[keyIndex - 1].deleted = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        38
Source: 
>     delete self.data[key];
>     self.keys[keyIndex - 1].deleted = true;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     self.size --;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    IterableMapping
Line:        39
Source: 
>     self.keys[keyIndex - 1].deleted = true;
>     self.size --;
>     ^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IBRIDGE
Line:        323
Source: 
>     
>     string public name = "Bridge Protocol";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol = "BGPT";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IBRIDGE
Line:        324
Source: 
>     string public name = "Bridge Protocol";
>     string public symbol = "BGPT";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IBRIDGE
Line:        325
Source: 
>     string public symbol = "BGPT";
>     uint8 public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public INITIAL_SUPPLY = 10000000000 ether;

[0m

---------------------------------------------
For contract 0xdaac493113eb830ffad46069307a14ea38a845b9.sol
Tool Runtime = 5.615762313000232 seconds
#############################################