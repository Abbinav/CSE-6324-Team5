pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        284
Source: 
>     uint32 public _grouthStep = 10;
>     uint32 constant public _highMax = 50;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint32 constant public _midMax = 50;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        285
Source: 
>     uint32 constant public _highMax = 50;
>     uint32 constant public _midMax = 50;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        287
Source: 
> 
>     uint256 constant public  _initMaxValue = 500 * (10**18);  //500lp,10w usdt,100 eth
>         ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        287
Source: 
> 
>     uint256 constant public  _initMaxValue = 500 * (10**18);  //500lp,10w usdt,100 eth
>                                     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        287
Source: 
> 
>     uint256 constant public  _initMaxValue = 500 * (10**18);  //500lp,10w usdt,100 eth
>                                                                ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        289
Source: 
> 
>     address public _contractCaller = address(0x0);
>                                     ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        294
Source: 
>      */
>     modifier isNormalPool(){
>                 ^^^^^^^^^^^^
>         require( msg.sender==_contractCaller,"invalid pool address!");

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        295
Source: 
>     modifier isNormalPool(){
>         require( msg.sender==_contractCaller,"invalid pool address!");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Governance
Line:        243
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
>             ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        372
Source: 
>         for (uint8 i = 1; i <= _ruler.length; i++) {
>             splitPoint = maxCount * _ruler[i - 1]/10;
>                                              ^^^^^^^^
>             if (splitPoint <= 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SegmentPowerStrategy
Line:        318
Source: 
>             _playerId = _playerId+1;
>             _addressXId[sender] = _playerId;
>                              ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SegmentPowerStrategy
Line:        372
Source: 
>         for (uint8 i = 1; i <= _ruler.length; i++) {
>             splitPoint = maxCount * _ruler[i - 1]/10;
>                                              ^^^^^^^^
>             if (splitPoint <= 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        346
Source: 
>     
>     function getPower(address sender) 
>              ^^^^^^^^^^^^^^^^^^^^^^^^^
>     view external

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Governance
Line:        230
Source: 
> 
>     function setGovernance(address governance)  public  onlyGovernance
>                                                    ^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        267
Source: 
>     mapping(address => uint32) public _addressXId;
>     mapping(uint8 => degoSegment) public _degoSegment;
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint8 => countSegment) public _countSegment;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        268
Source: 
>     mapping(uint8 => degoSegment) public _degoSegment;
>     mapping(uint8 => countSegment) public _countSegment;
>                                        ^^^^^^^^^^^^^^^^^
>     mapping(uint8 => mapping(uint32 => uint32)) public _playerIds;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        269
Source: 
>     mapping(uint8 => countSegment) public _countSegment;
>     mapping(uint8 => mapping(uint32 => uint32)) public _playerIds;
>                                                               ^^^^
>     mapping(uint32 => playerInfo) public _playerMap;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        273
Source: 
>     uint8[3] public _ruler = [8, 1, 1];
>     uint8[3] public _factor = [3, 5, 1];
>                             ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        276
Source: 
>     uint8 public _high = 3;
>     uint8 public _mid = 2;
>          ^^^^^^^^^^^^^^^^^
>     uint8 public _low = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        279
Source: 
> 
>     uint32 public _playerId = 0;
>          ^^^^^^^^^^^^^^^^^^^^^^^
>     uint32 public _base = 100;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        281
Source: 
>     uint32 public _base = 100;
>     uint32 public _anchor = _base;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint32 public _grouthCondition = 100;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        282
Source: 
>     uint32 public _anchor = _base;
>     uint32 public _grouthCondition = 100;
>                                   ^^^^^^^
>     uint32 public _grouthStep = 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        284
Source: 
>     uint32 public _grouthStep = 10;
>     uint32 constant public _highMax = 50;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint32 constant public _midMax = 50;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        285
Source: 
>     uint32 constant public _highMax = 50;
>     uint32 constant public _midMax = 50;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        287
Source: 
> 
>     uint256 constant public  _initMaxValue = 500 * (10**18);  //500lp,10w usdt,100 eth
>         ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        287
Source: 
> 
>     uint256 constant public  _initMaxValue = 500 * (10**18);  //500lp,10w usdt,100 eth
>                                     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        287
Source: 
> 
>     uint256 constant public  _initMaxValue = 500 * (10**18);  //500lp,10w usdt,100 eth
>                                                                ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        289
Source: 
> 
>     address public _contractCaller = address(0x0);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        289
Source: 
> 
>     address public _contractCaller = address(0x0);
>                                     ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        292
Source: 
>     /**
>      * check pool
>        ^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        294
Source: 
>      */
>     modifier isNormalPool(){
>                 ^^^^^^^^^^^^
>         require( msg.sender==_contractCaller,"invalid pool address!");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        295
Source: 
>     modifier isNormalPool(){
>         require( msg.sender==_contractCaller,"invalid pool address!");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        295
Source: 
>     modifier isNormalPool(){
>         require( msg.sender==_contractCaller,"invalid pool address!");
>                                                                  ^^^^^
>         _;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        300
Source: 
>     constructor()
>         public
> ^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        302
Source: 
>     {
>         _playerId = 0;
>                      ^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        308
Source: 
> 
>     function lpIn(address sender, uint256 amount) 
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     isNormalPool()

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        213
Source: 
> //pragma solidity 0.5.12;
> pragma solidity >=0.5 <0.7.17;
>                   ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Governance
Line:        230
Source: 
> 
>     function setGovernance(address governance)  public  onlyGovernance
>                                                    ^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        287
Source: 
> 
>     uint256 constant public  _initMaxValue = 500 * (10**18);  //500lp,10w usdt,100 eth
>                                     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        287
Source: 
> 
>     uint256 constant public  _initMaxValue = 500 * (10**18);  //500lp,10w usdt,100 eth
>                                                                ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        289
Source: 
> 
>     address public _contractCaller = address(0x0);
>                                     ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        292
Source: 
>     /**
>      * check pool
>        ^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        294
Source: 
>      */
>     modifier isNormalPool(){
>                 ^^^^^^^^^^^^
>         require( msg.sender==_contractCaller,"invalid pool address!");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        295
Source: 
>     modifier isNormalPool(){
>         require( msg.sender==_contractCaller,"invalid pool address!");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        295
Source: 
>     modifier isNormalPool(){
>         require( msg.sender==_contractCaller,"invalid pool address!");
>                                                                  ^^^^^
>         _;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        302
Source: 
>     {
>         _playerId = 0;
>                      ^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SegmentPowerStrategy
Line:        308
Source: 
> 
>     function lpIn(address sender, uint256 amount) 
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     isNormalPool()

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SegmentPowerStrategy
Line:        469
Source: 
> 
>             uint32 originTail = _countSegment[oldSegIndex].curCount-1;
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint32 originTailPlayer = _playerIds[oldSegIndex][originTail];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SegmentPowerStrategy
Line:        470
Source: 
>             uint32 originTail = _countSegment[oldSegIndex].curCount-1;
>             uint32 originTailPlayer = _playerIds[oldSegIndex][originTail];
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SegmentPowerStrategy
Line:        470
Source: 
>             uint32 originTail = _countSegment[oldSegIndex].curCount-1;
>             uint32 originTailPlayer = _playerIds[oldSegIndex][originTail];
>                                                            ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SegmentPowerStrategy
Line:        474
Source: 
> 
>                 _playerMap[originTailPlayer].segIndex = oldSegIndex;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _playerMap[originTailPlayer].offset = oldOffset;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SegmentPowerStrategy
Line:        481
Source: 
>             _countSegment[oldSegIndex].curCount = _countSegment[oldSegIndex].curCount-1;
>         }
>   ^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SegmentPowerStrategy
Line:        485
Source: 
>     //swap the player data with tail 
>     function tailSwap( uint8 segIndex) internal returns (uint32){
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SegmentPowerStrategy
Line:        487
Source: 
> 
>         uint32 minPlayerOffset;
>               ^^^^^^^^^^^^^^^^^
>         uint256 secondMinAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SegmentPowerStrategy
Line:        489
Source: 
>         uint256 secondMinAmount;
>         (minPlayerOffset,secondMinAmount) = findSegmentMinPlayer(segIndex);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _degoSegment[segIndex].min = secondMinAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SegmentPowerStrategy
Line:        490
Source: 
>         (minPlayerOffset,secondMinAmount) = findSegmentMinPlayer(segIndex);
>         _degoSegment[segIndex].min = secondMinAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SegmentPowerStrategy
Line:        541
Source: 
> 
>         uint256 amount = _playerMap[playerId].amount;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint8 segIndex = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SegmentPowerStrategy
Line:        546
Source: 
>                 segIndex = i;
>                 break;
>  ^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SegmentPowerStrategy
Line:        499
Source: 
> 
>         _playerMap[tailPlayerId].offset = minPlayerOffset;
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SegmentPowerStrategy
Line:        509
Source: 
>         } else {
>             uint32 leftPlayerId = tailSwap(segIndex);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             joinMid(leftPlayerId);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SegmentPowerStrategy
Line:        510
Source: 
>             uint32 leftPlayerId = tailSwap(segIndex);
>             joinMid(leftPlayerId);
>                  ^^^^^^^^^^^^^^^^^
>             segmentSwap(playerId, segIndex);

[0m

---------------------------------------------
For contract 0xE0384c1741c051333BC28585321217d9B8E9d9882.sol
Tool Runtime = 9.769567055999687 seconds
#############################################