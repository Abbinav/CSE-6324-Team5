[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EEEMoney
Line:        149
Source: 
>         
>         assembly {
>         ^^^^^^^^^^
>             size := extcodesize(useraddress)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EEEMoney
Line:        233
Source: 
>         
>         assembly {
>         ^^^^^^^^^^
>             size := extcodesize(useraddress)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EEEMoney
Line:        308
Source: 
>             
>             assembly {
>             ^^^^^^^^^^
>                 size := extcodesize(_useradd)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EEEMoney
Line:        68
Source: 
>     address public ownerWallet;
>     address public signature;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public poolMoney;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EEEMoney
Line:        70
Source: 
>     uint public poolMoney;
>     uint public qualifiedPoolHolding = 0.5 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public invest = 0.25 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EEEMoney
Line:        71
Source: 
>     uint public qualifiedPoolHolding = 0.5 ether;
>     uint public invest = 0.25 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public feePercentage = 5 ether; 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EEEMoney
Line:        72
Source: 
>     uint public invest = 0.25 ether;
>     uint public feePercentage = 5 ether; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public currUserID = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EEEMoney
Line:        74
Source: 
>     uint public currUserID = 0;
>     uint public qualify = 86400;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool public lockStatus;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EEEMoney
Line:        127
Source: 
>      */
>     function regUser(uint _referrerID) public payable returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EEEMoney
Line:        214
Source: 
>      */
>     function investOnShare(uint _noOfShares) public payable returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EEEMoney
Line:        281
Source: 
>     
>     function shareWithdraw(address[] memory _userAddress, uint[] memory _shareAmount, uint [] memory _shares, uint _gasFee) public returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EEEMoney
Line:        385
Source: 
>      */ 
>     function failSafe(address payable _toUser, uint _amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerWallet, "Only Owner Wallet");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EEEMoney
Line:        398
Source: 
>      */
>     function contractLock(bool _lockStatus) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerWallet, "Invalid ownerWallet");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EEEMoney
Line:        405
Source: 
>     
>     function changeOwnerWallet(address _ownerWallet)public returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerWallet,"only ownerWallet");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EEEMoney
Line:        487
Source: 
>     
>     function syncID1(address _user) public view  returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint oldData;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EEEMoney
Line:        506
Source: 
>     
>     function syncID2(address _user) public view  returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint oldData;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EEEMoney
Line:        641
Source: 
>     
>      function getTotalEarnedEther() public view returns(uint) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint totalEth;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EEEMoney
Line:        662
Source: 
>      */ 
>     function viewUserReferral(address _user) public view returns(address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].referral;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EEEMoney
Line:        667
Source: 
>     
>     function syncRefferrals(address _user)public view returns(address[] memory,address[] memory,address[] memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return(users[_user].referral,oldEEEMoney1.viewUserReferral(_user),oldEEEMoney2.viewUserReferral(_user));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        98
Source: 
>         currUserID = oldEEEMoney2.currUserID();
>         poolMoney = poolMoney.add(oldEEEMoney1.poolMoney());
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^
>         poolMoney = poolMoney.add(oldEEEMoney2.poolMoney());

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        99
Source: 
>         poolMoney = poolMoney.add(oldEEEMoney1.poolMoney());
>         poolMoney = poolMoney.add(oldEEEMoney2.poolMoney());
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        177
Source: 
>         
>         if(_referrerID <= oldEEEMoney1.currUserID())
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^
>             referer = oldEEEMoney1.userList(_referrerID);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        178
Source: 
>         if(_referrerID <= oldEEEMoney1.currUserID())
>             referer = oldEEEMoney1.userList(_referrerID);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         else if(_referrerID <= oldEEEMoney2.currUserID())

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        184
Source: 
>             
>         if(referer == oldEEEMoney1.ownerWallet())
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             referer = ownerWallet;    

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        196
Source: 
>         require(
>             address(uint160(referer)).send(_value),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Transaction failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        179
Source: 
>             referer = oldEEEMoney1.userList(_referrerID);
>         else if(_referrerID <= oldEEEMoney2.currUserID())
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^
>             referer = oldEEEMoney2.userList(_referrerID);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        180
Source: 
>         else if(_referrerID <= oldEEEMoney2.currUserID())
>             referer = oldEEEMoney2.userList(_referrerID);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         else    

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        227
Source: 
>         
>         require(msg.sender != oldEEEMoney1.ownerWallet(), "old ownerWallet");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        254
Source: 
>         if(_referer == address(0))
>             _referer = oldEEEMoney2.userList(referrerID); 
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        257
Source: 
>         if(_referer == address(0))
>             _referer = oldEEEMoney1.userList(referrerID);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        259
Source: 
>         
>         if((_referer == address(0)) || (_referer == oldEEEMoney1.ownerWallet()))
>                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _referer = ownerWallet;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        263
Source: 
>         require(
>             address(uint160(_referer)).send(_value),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Transaction failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        390
Source: 
> 
>         (_toUser).transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        501
Source: 
>             oldData) = 
>             oldEEEMoney1.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        520
Source: 
>             oldData) = 
>             oldEEEMoney2.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        668
Source: 
>     function syncRefferrals(address _user)public view returns(address[] memory,address[] memory,address[] memory){
>         return(users[_user].referral,oldEEEMoney1.viewUserReferral(_user),oldEEEMoney2.viewUserReferral(_user));
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EEEMoney
Line:        668
Source: 
>     function syncRefferrals(address _user)public view returns(address[] memory,address[] memory,address[] memory){
>         return(users[_user].referral,oldEEEMoney1.viewUserReferral(_user),oldEEEMoney2.viewUserReferral(_user));
>                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EEEMoney
Line:        482
Source: 
>             oldData) = 
>             oldEEEMoney2.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EEEMoney
Line:        464
Source: 
>             oldData) = 
>             oldEEEMoney1.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EEEMoney
Line:        577
Source: 
>             oldData) = 
>             oldEEEMoney1.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EEEMoney
Line:        596
Source: 
>             oldData) = 
>             oldEEEMoney2.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EEEMoney
Line:        291
Source: 
>             
>             require(_userAddress[i] != oldEEEMoney1.ownerWallet(), "old contract ownerWallet");
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EEEMoney
Line:        328
Source: 
>             if(_referer == address(0))
>                 _referer = oldEEEMoney2.userList(referrerID); 
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EEEMoney
Line:        331
Source: 
>             if(_referer == address(0))
>                 _referer = oldEEEMoney1.userList(referrerID);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EEEMoney
Line:        333
Source: 
>             
>             if((_referer == address(0)) || (_referer == oldEEEMoney1.ownerWallet()))
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _referer = ownerWallet;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EEEMoney
Line:        345
Source: 
>             require(
>                 address(uint160(_referer)).send(_value),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "re-inverset referer 50 percentage failed"

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EEEMoney
Line:        363
Source: 
>             require(
>                 address(uint160(_useradd)).send(_walletAmount) &&
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 address(uint160(ownerWallet)).send(_adminCommission.add(_gasFee)),

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EEEMoney
Line:        364
Source: 
>                 address(uint160(_useradd)).send(_walletAmount) &&
>                 address(uint160(ownerWallet)).send(_adminCommission.add(_gasFee)),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "user wallet transfer failed"

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EEEMoney
Line:        558
Source: 
>             created) = 
>             oldEEEMoney2.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EEEMoney
Line:        539
Source: 
>             created) = 
>             oldEEEMoney1.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EEEMoney
Line:        616
Source: 
>             oldData) = 
>             oldEEEMoney1.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EEEMoney
Line:        635
Source: 
>             oldData) = 
>             oldEEEMoney2.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EEEMoney
Line:        647
Source: 
>             if(user == address(0))
>                 user = oldEEEMoney1.userList(_userIndex);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EEEMoney
Line:        650
Source: 
>             if(user == address(0))
>                 user = oldEEEMoney2.userList(_userIndex);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EEEMoney
Line:        214
Source: 
>      */
>     function investOnShare(uint _noOfShares) public payable returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EEEMoney
Line:        281
Source: 
>     
>     function shareWithdraw(address[] memory _userAddress, uint[] memory _shareAmount, uint [] memory _shares, uint _gasFee) public returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EEEMoney
Line:        398
Source: 
>      */
>     function contractLock(bool _lockStatus) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerWallet, "Invalid ownerWallet");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EEEMoney
Line:        451
Source: 
>     
>     function syncIsExist1(address _user) public view  returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint oldData;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EEEMoney
Line:        469
Source: 
>     
>     function syncIsExist2(address _user) public view  returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint oldData;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EEEMoney
Line:        487
Source: 
>     
>     function syncID1(address _user) public view  returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint oldData;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EEEMoney
Line:        506
Source: 
>     
>     function syncID2(address _user) public view  returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint oldData;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EEEMoney
Line:        525
Source: 
>     
>     function syncUserCreated1(address _user) public view  returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint oldData;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EEEMoney
Line:        544
Source: 
>     
>     function syncUserCreated2(address _user) public view  returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint oldData;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EEEMoney
Line:        563
Source: 
>     
>     function syncReferrerID1(address _user) public view  returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint oldData;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EEEMoney
Line:        582
Source: 
>     
>     function syncReferrerID2(address _user) public view  returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint oldData;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EEEMoney
Line:        602
Source: 
> 
>     function syncTotalEarned1(address _user) public view  returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint oldData;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EEEMoney
Line:        621
Source: 
>     
>     function syncTotalEarned2(address _user) public view  returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint oldData;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EEEMoney
Line:        667
Source: 
>     
>     function syncRefferrals(address _user)public view returns(address[] memory,address[] memory,address[] memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return(users[_user].referral,oldEEEMoney1.viewUserReferral(_user),oldEEEMoney2.viewUserReferral(_user));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EEEMoney
Line:        662
Source: 
>      */ 
>     function viewUserReferral(address _user) public view returns(address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].referral;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        26
Source: 
>         }
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    EEEMoney
Line:        177
Source: 
>         
>         if(_referrerID <= oldEEEMoney1.currUserID())
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^
>             referer = oldEEEMoney1.userList(_referrerID);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    EEEMoney
Line:        178
Source: 
>         if(_referrerID <= oldEEEMoney1.currUserID())
>             referer = oldEEEMoney1.userList(_referrerID);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         else if(_referrerID <= oldEEEMoney2.currUserID())

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    EEEMoney
Line:        184
Source: 
>             
>         if(referer == oldEEEMoney1.ownerWallet())
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             referer = ownerWallet;    

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    EEEMoney
Line:        179
Source: 
>             referer = oldEEEMoney1.userList(_referrerID);
>         else if(_referrerID <= oldEEEMoney2.currUserID())
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^
>             referer = oldEEEMoney2.userList(_referrerID);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    EEEMoney
Line:        180
Source: 
>         else if(_referrerID <= oldEEEMoney2.currUserID())
>             referer = oldEEEMoney2.userList(_referrerID);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         else    

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    EEEMoney
Line:        363
Source: 
>             require(
>                 address(uint160(_useradd)).send(_walletAmount) &&
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 address(uint160(ownerWallet)).send(_adminCommission.add(_gasFee)),

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    EEEMoney
Line:        364
Source: 
>                 address(uint160(_useradd)).send(_walletAmount) &&
>                 address(uint160(ownerWallet)).send(_adminCommission.add(_gasFee)),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "user wallet transfer failed"

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EEEMoney
Line:        196
Source: 
>         require(
>             address(uint160(referer)).send(_value),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Transaction failed"

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EEEMoney
Line:        263
Source: 
>         require(
>             address(uint160(_referer)).send(_value),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Transaction failed"

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EEEMoney
Line:        345
Source: 
>             require(
>                 address(uint160(_referer)).send(_value),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "re-inverset referer 50 percentage failed"

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        82
Source: 
>     // Events
>     event regEvent(address indexed _user, address indexed _referrer, uint _time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event poolMoneyEvent(address indexed _user, uint _money, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        83
Source: 
>     event regEvent(address indexed _user, address indexed _referrer, uint _time);
>     event poolMoneyEvent(address indexed _user, uint _money, uint _time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event splitOverEvent(address indexed _user, uint _shareAmount, uint _userShares, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        84
Source: 
>     event poolMoneyEvent(address indexed _user, uint _money, uint _time);
>     event splitOverEvent(address indexed _user, uint _shareAmount, uint _userShares, uint _time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event userInversement(address indexed _user, uint _noOfShares, uint _amount, uint _time, uint investType);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        85
Source: 
>     event splitOverEvent(address indexed _user, uint _shareAmount, uint _userShares, uint _time);
>     event userInversement(address indexed _user, uint _noOfShares, uint _amount, uint _time, uint investType);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event userWalletTransferEvent(address indexed _user, uint _amount, uint _percentage, uint _gasFee, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        86
Source: 
>     event userInversement(address indexed _user, uint _noOfShares, uint _amount, uint _time, uint investType);
>     event userWalletTransferEvent(address indexed _user, uint _amount, uint _percentage, uint _gasFee, uint _time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event ownerWalletTransferEvent(address indexed _user, uint _percentage, uint _gasFee, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        87
Source: 
>     event userWalletTransferEvent(address indexed _user, uint _amount, uint _percentage, uint _gasFee, uint _time);
>     event ownerWalletTransferEvent(address indexed _user, uint _percentage, uint _gasFee, uint _time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        191
Source: 
>     
>         uint _value = invest.div(2);
>         ^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        239
Source: 
>         
>         uint _value = (msg.value).div(2);
>         ^^^^^^^^^^^
>         address _referer;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        240
Source: 
>         uint _value = (msg.value).div(2);
>         address _referer;
>         ^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        306
Source: 
>             
>             address _useradd = _userAddress[i]; 
>             ^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        314
Source: 
>             
>             address _referer;
>             ^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        336
Source: 
>             
>             uint _totalInvestingShare = _shareAmount[i].div(qualifiedPoolHolding);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint _referervalue = invest.div(2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        337
Source: 
>             uint _totalInvestingShare = _shareAmount[i].div(qualifiedPoolHolding);
>             uint _referervalue = invest.div(2);
>             ^^^^^^^^^^^^^^^^^^
>             uint _value = (_referervalue.mul(_totalInvestingShare));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        338
Source: 
>             uint _referervalue = invest.div(2);
>             uint _value = (_referervalue.mul(_totalInvestingShare));
>             ^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        357
Source: 
>             // wallet
>             uint _walletAmount = invest.mul(_totalInvestingShare);
>             ^^^^^^^^^^^^^^^^^^
>             uint _adminCommission = (_walletAmount.mul(feePercentage)).div(100 ether);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        358
Source: 
>             uint _walletAmount = invest.mul(_totalInvestingShare);
>             uint _adminCommission = (_walletAmount.mul(feePercentage)).div(100 ether);
>             ^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        490
Source: 
>         bool isExist;
>         uint ID;
>         ^^^^^^^
>         (isExist, 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        509
Source: 
>         bool isExist;
>         uint ID;
>         ^^^^^^^
>         (isExist, 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        565
Source: 
>         uint oldData;
>         uint RefID;
>         ^^^^^^^^^^
>         bool isExist;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        584
Source: 
>         uint oldData;
>         uint RefID;
>         ^^^^^^^^^^
>         bool isExist;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EEEMoney
Line:        644
Source: 
>         
>         for( uint _userIndex=1;_userIndex<= currUserID;_userIndex++) {
>              ^^^^^^^^^^^^^^^
>             address user = userList[_userIndex];

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity 0.5.16;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EEEMoney
Line:        196
Source: 
>         require(
>             address(uint160(referer)).send(_value),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Transaction failed"

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EEEMoney
Line:        263
Source: 
>         require(
>             address(uint160(_referer)).send(_value),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Transaction failed"

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EEEMoney
Line:        345
Source: 
>             require(
>                 address(uint160(_referer)).send(_value),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "re-inverset referer 50 percentage failed"

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EEEMoney
Line:        363
Source: 
>             require(
>                 address(uint160(_useradd)).send(_walletAmount) &&
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 address(uint160(ownerWallet)).send(_adminCommission.add(_gasFee)),

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EEEMoney
Line:        364
Source: 
>                 address(uint160(_useradd)).send(_walletAmount) &&
>                 address(uint160(ownerWallet)).send(_adminCommission.add(_gasFee)),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "user wallet transfer failed"

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    EEEMoney
Line:        196
Source: 
>         require(
>             address(uint160(referer)).send(_value),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Transaction failed"

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    EEEMoney
Line:        263
Source: 
>         require(
>             address(uint160(_referer)).send(_value),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Transaction failed"

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    EEEMoney
Line:        345
Source: 
>             require(
>                 address(uint160(_referer)).send(_value),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "re-inverset referer 50 percentage failed"

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    EEEMoney
Line:        363
Source: 
>             require(
>                 address(uint160(_useradd)).send(_walletAmount) &&
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 address(uint160(ownerWallet)).send(_adminCommission.add(_gasFee)),

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    EEEMoney
Line:        364
Source: 
>                 address(uint160(_useradd)).send(_walletAmount) &&
>                 address(uint160(ownerWallet)).send(_adminCommission.add(_gasFee)),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "user wallet transfer failed"

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    EEEMoney
Line:        390
Source: 
> 
>         (_toUser).transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EEEMoney
Line:        196
Source: 
>         require(
>             address(uint160(referer)).send(_value),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Transaction failed"

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EEEMoney
Line:        263
Source: 
>         require(
>             address(uint160(_referer)).send(_value),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Transaction failed"

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EEEMoney
Line:        345
Source: 
>             require(
>                 address(uint160(_referer)).send(_value),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "re-inverset referer 50 percentage failed"

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EEEMoney
Line:        363
Source: 
>             require(
>                 address(uint160(_useradd)).send(_walletAmount) &&
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 address(uint160(ownerWallet)).send(_adminCommission.add(_gasFee)),

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EEEMoney
Line:        364
Source: 
>                 address(uint160(_useradd)).send(_walletAmount) &&
>                 address(uint160(ownerWallet)).send(_adminCommission.add(_gasFee)),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "user wallet transfer failed"

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EEEMoney
Line:        390
Source: 
> 
>         (_toUser).transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        97
Source: 
>         UserStruct memory userStruct;
>         currUserID = oldEEEMoney2.currUserID();
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^
>         poolMoney = poolMoney.add(oldEEEMoney1.poolMoney());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        98
Source: 
>         currUserID = oldEEEMoney2.currUserID();
>         poolMoney = poolMoney.add(oldEEEMoney1.poolMoney());
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^
>         poolMoney = poolMoney.add(oldEEEMoney2.poolMoney());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        99
Source: 
>         poolMoney = poolMoney.add(oldEEEMoney1.poolMoney());
>         poolMoney = poolMoney.add(oldEEEMoney2.poolMoney());
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        177
Source: 
>         
>         if(_referrerID <= oldEEEMoney1.currUserID())
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^
>             referer = oldEEEMoney1.userList(_referrerID);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        178
Source: 
>         if(_referrerID <= oldEEEMoney1.currUserID())
>             referer = oldEEEMoney1.userList(_referrerID);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         else if(_referrerID <= oldEEEMoney2.currUserID())

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        184
Source: 
>             
>         if(referer == oldEEEMoney1.ownerWallet())
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             referer = ownerWallet;    

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        179
Source: 
>             referer = oldEEEMoney1.userList(_referrerID);
>         else if(_referrerID <= oldEEEMoney2.currUserID())
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^
>             referer = oldEEEMoney2.userList(_referrerID);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        180
Source: 
>         else if(_referrerID <= oldEEEMoney2.currUserID())
>             referer = oldEEEMoney2.userList(_referrerID);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         else    

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        227
Source: 
>         
>         require(msg.sender != oldEEEMoney1.ownerWallet(), "old ownerWallet");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        254
Source: 
>         if(_referer == address(0))
>             _referer = oldEEEMoney2.userList(referrerID); 
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        257
Source: 
>         if(_referer == address(0))
>             _referer = oldEEEMoney1.userList(referrerID);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        259
Source: 
>         
>         if((_referer == address(0)) || (_referer == oldEEEMoney1.ownerWallet()))
>                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _referer = ownerWallet;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        291
Source: 
>             
>             require(_userAddress[i] != oldEEEMoney1.ownerWallet(), "old contract ownerWallet");
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        328
Source: 
>             if(_referer == address(0))
>                 _referer = oldEEEMoney2.userList(referrerID); 
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        331
Source: 
>             if(_referer == address(0))
>                 _referer = oldEEEMoney1.userList(referrerID);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        333
Source: 
>             
>             if((_referer == address(0)) || (_referer == oldEEEMoney1.ownerWallet()))
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _referer = ownerWallet;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        363
Source: 
>             require(
>                 address(uint160(_useradd)).send(_walletAmount) &&
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 address(uint160(ownerWallet)).send(_adminCommission.add(_gasFee)),

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        647
Source: 
>             if(user == address(0))
>                 user = oldEEEMoney1.userList(_userIndex);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EEEMoney
Line:        650
Source: 
>             if(user == address(0))
>                 user = oldEEEMoney2.userList(_userIndex);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EEEMoney
Line:        482
Source: 
>             oldData) = 
>             oldEEEMoney2.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EEEMoney
Line:        464
Source: 
>             oldData) = 
>             oldEEEMoney1.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EEEMoney
Line:        577
Source: 
>             oldData) = 
>             oldEEEMoney1.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EEEMoney
Line:        596
Source: 
>             oldData) = 
>             oldEEEMoney2.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EEEMoney
Line:        558
Source: 
>             created) = 
>             oldEEEMoney2.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EEEMoney
Line:        539
Source: 
>             created) = 
>             oldEEEMoney1.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EEEMoney
Line:        501
Source: 
>             oldData) = 
>             oldEEEMoney1.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EEEMoney
Line:        520
Source: 
>             oldData) = 
>             oldEEEMoney2.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EEEMoney
Line:        616
Source: 
>             oldData) = 
>             oldEEEMoney1.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EEEMoney
Line:        635
Source: 
>             oldData) = 
>             oldEEEMoney2.users(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EEEMoney
Line:        668
Source: 
>     function syncRefferrals(address _user)public view returns(address[] memory,address[] memory,address[] memory){
>         return(users[_user].referral,oldEEEMoney1.viewUserReferral(_user),oldEEEMoney2.viewUserReferral(_user));
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EEEMoney
Line:        668
Source: 
>     function syncRefferrals(address _user)public view returns(address[] memory,address[] memory,address[] memory){
>         return(users[_user].referral,oldEEEMoney1.viewUserReferral(_user),oldEEEMoney2.viewUserReferral(_user));
>                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    EEEMoney
Line:        153
Source: 
>         
>         require(size == 0, "cannot be a contract");
>                 ^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    EEEMoney
Line:        237
Source: 
>         
>         require(size == 0, "cannot be a contract");
>                 ^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    EEEMoney
Line:        312
Source: 
>             
>             require(size == 0, "cannot be a contract");
>                     ^^^^
>             

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    EEEMoney
Line:        75
Source: 
>     uint public qualify = 86400;
>     bool public lockStatus;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    EEEMoney
Line:        68
Source: 
>     address public ownerWallet;
>     address public signature;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public poolMoney;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EEEMoney
Line:        68
Source: 
>     address public ownerWallet;
>     address public signature;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public poolMoney;

[0m

---------------------------------------------
For contract 0x623e539cd4108e6cab4458f25517adc48eeb4725.sol
Tool Runtime = 101.13627713000005 seconds
#############################################