[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Fund
Line:        20
Source: 
>     address game;
>     uint public priceAction = 50000000000000000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public finishedCount = 100;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Fund
Line:        21
Source: 
>     uint public priceAction = 50000000000000000;
>     uint public finishedCount = 100;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public lastRound;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fund
Line:        88
Source: 
>         require((_turns + Rounds[lastRound].totalParticipants) <= finishedCount, "Only 100 total turns");
>         if(game != msg.sender){ require(PV_Interface(pv).getUserStatusReferrers(msg.sender, now) == true, "Registered users only"); }
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if( Rounds[lastRound].isExist == false ){

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fund
Line:        144
Source: 
>         if( _amount > 0 && _user != address(0)){
>             address(uint160(_user)).transfer(_amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit eventWinner(_user, lastRound, _amount, _x);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fund
Line:        151
Source: 
>         if( address(this).balance > 0){
>             address(uint160(developers)).transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Fund
Line:        158
Source: 
>             uint amount = address(this).balance * 10 / 100;
>             address(uint160(payments)).transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Fund
Line:        60
Source: 
> 
>     function setAddrGame(address _addr) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         game = _addr;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Fund
Line:        64
Source: 
> 
>     function setCheck(bool _check) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         check = _check;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fund
Line:        48
Source: 
> 
>     function setAddrDevelopers(address _addr) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         developers = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fund
Line:        52
Source: 
> 
>     function setAddrpv(address _addr) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pv = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fund
Line:        56
Source: 
> 
>     function setAddrPayments(address _addr) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         payments = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fund
Line:        126
Source: 
> 
>     function randomness(uint nonce) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return uint(uint(keccak256(abi.encode(block.timestamp, block.difficulty, nonce)))%(Rounds[lastRound].totalParticipants+1));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fund
Line:        181
Source: 
> 
>     function withdraw(address _addr) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address(uint160(_addr)).transfer(address(this).balance);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Fund
Line:        88
Source: 
>         require((_turns + Rounds[lastRound].totalParticipants) <= finishedCount, "Only 100 total turns");
>         if(game != msg.sender){ require(PV_Interface(pv).getUserStatusReferrers(msg.sender, now) == true, "Registered users only"); }
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if( Rounds[lastRound].isExist == false ){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PV_Interface
Line:        9
Source: 
> 
> contract PV_Interface {
> ^^^^^^^^^^^^^^^^^^^^^^^
>     function getUserStatusReferrers(address _user, uint _now) public view returns (bool);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fund
Line:        35
Source: 
>     }
>     mapping(uint => RoundStruct) public Rounds;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint => mapping (uint => address)) public RoundsParticipants;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fund
Line:        36
Source: 
>     mapping(uint => RoundStruct) public Rounds;
>     mapping(uint => mapping (uint => address)) public RoundsParticipants;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fund
Line:        82
Source: 
> 
>     function Game(uint _turns) external payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(game != msg.sender){ require((_turns * priceAction) == msg.value, "The quantity sent is not correct"); }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fund
Line:        90
Source: 
>         if( Rounds[lastRound].isExist == false ){
>             RoundStruct memory round_struct;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             round_struct = RoundStruct({

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fund
Line:        171
Source: 
>             count++;
>             address _userCheck = RoundsParticipants[lastRound][randomness(count)];
>             ^^^^^^^^^^^^^^^^^^
>             if(check){ _userCheck = game; }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fund
Line:        185
Source: 
> 
>     event eventWinner(address indexed _user, uint indexed _game, uint _amount, uint indexed _level);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event eventGame(address indexed _user, uint _turns, uint indexed _game);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fund
Line:        186
Source: 
>     event eventWinner(address indexed _user, uint indexed _game, uint _amount, uint indexed _level);
>     event eventGame(address indexed _user, uint _turns, uint indexed _game);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity ^0.5.14;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fund
Line:        19
Source: 
>     address public pv;
>     address game;
>     ^^^^^^^^^^^^
>     uint public priceAction = 50000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fund
Line:        24
Source: 
>     uint public earnings;
>     bool check;
>     ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Fund
Line:        20
Source: 
>     address game;
>     uint public priceAction = 50000000000000000;
>                               ^^^^^^^^^^^^^^^^^
>     uint public finishedCount = 100;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Fund
Line:        144
Source: 
>         if( _amount > 0 && _user != address(0)){
>             address(uint160(_user)).transfer(_amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit eventWinner(_user, lastRound, _amount, _x);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fund
Line:        151
Source: 
>         if( address(this).balance > 0){
>             address(uint160(developers)).transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fund
Line:        158
Source: 
>             uint amount = address(this).balance * 10 / 100;
>             address(uint160(payments)).transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fund
Line:        182
Source: 
>     function withdraw(address _addr) external onlyOwner {
>         address(uint160(_addr)).transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Fund
Line:        144
Source: 
>         if( _amount > 0 && _user != address(0)){
>             address(uint160(_user)).transfer(_amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit eventWinner(_user, lastRound, _amount, _x);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Fund
Line:        182
Source: 
>     function withdraw(address _addr) external onlyOwner {
>         address(uint160(_addr)).transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fund
Line:        151
Source: 
>         if( address(this).balance > 0){
>             address(uint160(developers)).transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fund
Line:        158
Source: 
>             uint amount = address(this).balance * 10 / 100;
>             address(uint160(payments)).transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fund
Line:        144
Source: 
>         if( _amount > 0 && _user != address(0)){
>             address(uint160(_user)).transfer(_amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit eventWinner(_user, lastRound, _amount, _x);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fund
Line:        151
Source: 
>         if( address(this).balance > 0){
>             address(uint160(developers)).transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fund
Line:        158
Source: 
>             uint amount = address(this).balance * 10 / 100;
>             address(uint160(payments)).transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fund
Line:        182
Source: 
>     function withdraw(address _addr) external onlyOwner {
>         address(uint160(_addr)).transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Fund
Line:        88
Source: 
>         require((_turns + Rounds[lastRound].totalParticipants) <= finishedCount, "Only 100 total turns");
>         if(game != msg.sender){ require(PV_Interface(pv).getUserStatusReferrers(msg.sender, now) == true, "Registered users only"); }
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if( Rounds[lastRound].isExist == false ){

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Fund
Line:        16
Source: 
>     address public owner;
>     address public developers;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public payments;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Fund
Line:        17
Source: 
>     address public developers;
>     address public payments;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     address public pv;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Fund
Line:        18
Source: 
>     address public payments;
>     address public pv;
>     ^^^^^^^^^^^^^^^^^
>     address game;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Fund
Line:        19
Source: 
>     address public pv;
>     address game;
>     ^^^^^^^^^^^^
>     uint public priceAction = 50000000000000000;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Fund
Line:        22
Source: 
>     uint public finishedCount = 100;
>     uint public lastRound;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint public earnings;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Fund
Line:        23
Source: 
>     uint public lastRound;
>     uint public earnings;
>     ^^^^^^^^^^^^^^^^^^^^
>     bool check;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Fund
Line:        24
Source: 
>     uint public earnings;
>     bool check;
>     ^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Fund
Line:        144
Source: 
>         if( _amount > 0 && _user != address(0)){
>             address(uint160(_user)).transfer(_amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit eventWinner(_user, lastRound, _amount, _x);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Fund
Line:        151
Source: 
>         if( address(this).balance > 0){
>             address(uint160(developers)).transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Fund
Line:        158
Source: 
>             uint amount = address(this).balance * 10 / 100;
>             address(uint160(payments)).transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fund
Line:        121
Source: 
>             finishedGame();
>             Rounds[lastRound].finish = now;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             lastRound++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fund
Line:        122
Source: 
>             Rounds[lastRound].finish = now;
>             lastRound++;
>             ^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fund
Line:        166
Source: 
>         uint balance = address(this).balance;
>         earnings += balance;
>         ^^^^^^^^^^^^^^^^^^^
>         Rounds[lastRound].amount = balance;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Fund
Line:        167
Source: 
>         earnings += balance;
>         Rounds[lastRound].amount = balance;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sendBalancePayments();

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Fund
Line:        127
Source: 
>     function randomness(uint nonce) public view returns (uint) {
>         return uint(uint(keccak256(abi.encode(block.timestamp, block.difficulty, nonce)))%(Rounds[lastRound].totalParticipants+1));
>                                               ^^^^^^^^^^^^^^^
>     }

[0m

---------------------------------------------
For contract 0x174ce5ccf640fe3958076cbeb88bc05c98e1727d.sol
Tool Runtime = 6.800043610999637 seconds
#############################################