[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DSNote
Line:        45
Source: 
> 
>         assembly {
>         ^^^^^^^^^^
>             foo := calldataload(4)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Interest
Line:        202
Source: 
>     function rpow(uint x, uint n, uint base) public pure returns (uint z) {
>         assembly {
>             ^^^^^^
>             switch x case 0 {switch n case 0 {z := base} default {z := 0}}

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    NAVFeed
Line:        573
Source: 
> 
>     WriteOff [4] public writeOffs;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Math
Line:        114
Source: 
>     function safeMul(uint x, uint y) public pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "safe-mul-failed");
>                            ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    NAVFeed
Line:        806
Source: 
>         // not true if buckets are only sparsely populated over long periods of time
>         while(buckets[currDate].next == 0) { currDate = currDate + 1 days; }
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Auth
Line:        79
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) public auth note { wards[usr] = 0; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Auth
Line:        80
Source: 
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     function deny(address usr) public auth note { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth { require(wards[msg.sender] == 1); _; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        117
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        121
Source: 
> 
>     function rmul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = safeMul(x, y) / ONE;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        125
Source: 
> 
>     function rdiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y > 0, "division by zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        117
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        125
Source: 
> 
>     function rdiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y > 0, "division by zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Interest
Line:        166
Source: 
>     // @return The new accumulated rate, as well as the difference between the debt calculated with the old and new accumulated rates.
>     function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint pie) public view returns (uint, uint) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp >= lastUpdated, "tinlake-math/invalid-timestamp");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Interest
Line:        179
Source: 
>     // @return interestBearingAmount + interest
>     function chargeInterest(uint interestBearingAmount, uint ratePerSecond, uint lastUpdated) public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (block.timestamp >= lastUpdated) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Interest
Line:        192
Source: 
>     // convert pie to debt/savings amount
>     function toAmount(uint chi, uint pie) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rmul(pie, chi);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Interest
Line:        197
Source: 
>     // convert debt/savings amount to pie
>     function toPie(uint chi, uint amount) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rdivup(amount, chi);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Auth
Line:        79
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) public auth note { wards[usr] = 0; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Auth
Line:        80
Source: 
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     function deny(address usr) public auth note { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth { require(wards[msg.sender] == 1); _; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        117
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        125
Source: 
> 
>     function rdiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y > 0, "division by zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        395
Source: 
>      // part of Feed interface
>     function file(bytes32 name, uint value) public auth {}
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        411
Source: 
>     // returns the nftID for the underlying collateral nft
>     function nftID(uint loan) public view returns (bytes32) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (address registry, uint tokenId) = shelf.shelf(loan);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        416
Source: 
> 
>     function file(bytes32 name, uint risk_, uint thresholdRatio_, uint ceilingRatio_, uint rate_) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(name == "riskGroupNFT") {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        429
Source: 
>     // The nft value is to be updated by authenticated oracles
>     function update(bytes32 nftID_,  uint value) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // switch of collateral risk group results in new: ceiling, threshold for existing loan

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        435
Source: 
>      // The nft value & risk group is to be updated by authenticated oracles
>     function update(bytes32 nftID_, uint value, uint risk_) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // the risk group has to exist

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        465
Source: 
>     // borrowEvent is called by the shelf in the borrow method
>     function borrowEvent(uint loan) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint risk_ = risk[nftID(loan)];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        477
Source: 
>     // part of Feed interface
>     function unlockEvent(uint loan) public auth {}
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        482
Source: 
>     // the ceiling defines the maximum amount which can be borrowed
>     function ceiling(uint loan) public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (borrowed[loan] > currentCeiling(loan)) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        496
Source: 
>     // if the loan debt is above the loan threshold the NFT can be seized
>     function threshold(uint loan) public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 nftID_ = nftID(loan);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        502
Source: 
>     /// implements feed interface and returns poolValue as the total debt of all loans
>     function totalValue() public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pile.total();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Auth
Line:        79
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) public auth note { wards[usr] = 0; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Auth
Line:        80
Source: 
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     function deny(address usr) public auth note { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth { require(wards[msg.sender] == 1); _; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Math
Line:        117
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Interest
Line:        166
Source: 
>     // @return The new accumulated rate, as well as the difference between the debt calculated with the old and new accumulated rates.
>     function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint pie) public view returns (uint, uint) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp >= lastUpdated, "tinlake-math/invalid-timestamp");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Interest
Line:        179
Source: 
>     // @return interestBearingAmount + interest
>     function chargeInterest(uint interestBearingAmount, uint ratePerSecond, uint lastUpdated) public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (block.timestamp >= lastUpdated) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Interest
Line:        192
Source: 
>     // convert pie to debt/savings amount
>     function toAmount(uint chi, uint pie) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rmul(pie, chi);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Interest
Line:        197
Source: 
>     // convert debt/savings amount to pie
>     function toPie(uint chi, uint amount) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rdivup(amount, chi);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        411
Source: 
>     // returns the nftID for the underlying collateral nft
>     function nftID(uint loan) public view returns (bytes32) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (address registry, uint tokenId) = shelf.shelf(loan);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        416
Source: 
> 
>     function file(bytes32 name, uint risk_, uint thresholdRatio_, uint ceilingRatio_, uint rate_) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(name == "riskGroupNFT") {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        429
Source: 
>     // The nft value is to be updated by authenticated oracles
>     function update(bytes32 nftID_,  uint value) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // switch of collateral risk group results in new: ceiling, threshold for existing loan

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        435
Source: 
>      // The nft value & risk group is to be updated by authenticated oracles
>     function update(bytes32 nftID_, uint value, uint risk_) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // the risk group has to exist

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        465
Source: 
>     // borrowEvent is called by the shelf in the borrow method
>     function borrowEvent(uint loan) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint risk_ = risk[nftID(loan)];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        477
Source: 
>     // part of Feed interface
>     function unlockEvent(uint loan) public auth {}
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        496
Source: 
>     // if the loan debt is above the loan threshold the NFT can be seized
>     function threshold(uint loan) public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 nftID_ = nftID(loan);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BaseNFTFeed
Line:        502
Source: 
>     /// implements feed interface and returns poolValue as the total debt of all loans
>     function totalValue() public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pile.total();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NAVFeed
Line:        600
Source: 
> 
>     function init() public {
>         ^^^^^^^^^^^^^^^^^^^^
>         require(ceilingRatio[0] == 0, "already-initialized");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NAVFeed
Line:        625
Source: 
> 
>     function file(bytes32 name, uint risk_, uint thresholdRatio_, uint ceilingRatio_, uint rate_, uint recoveryRatePD_) public auth  {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(name == "riskGroup") {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NAVFeed
Line:        643
Source: 
>     /// maturityDate is a unix timestamp
>     function file(bytes32 name, bytes32 nftID_, uint maturityDate_) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // maturity date only can be changed when there is no debt on the collateral -> futureValue == 0

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NAVFeed
Line:        651
Source: 
> 
>     function file(bytes32 name, uint value) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (name == "discountRate") {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NAVFeed
Line:        703
Source: 
>     /// update the nft value and change the risk group
>     function update(bytes32 nftID_, uint value, uint risk_) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nftValues[nftID_] = value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NAVFeed
Line:        828
Source: 
> 
>     function calcUpdateNAV() public returns(uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // approximated NAV is updated and at this point in time 100% correct

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NAVFeed
Line:        835
Source: 
>     /// workaround for transition phase between V2 & V3
>     function totalValue() public view returns(uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return currentNAV();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NAVFeed
Line:        839
Source: 
> 
>     function dateBucket(uint timestamp) public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return buckets[timestamp].value;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BaseNFTFeed
Line:        412
Source: 
>     function nftID(uint loan) public view returns (bytes32) {
>         (address registry, uint tokenId) = shelf.shelf(loan);
>                                                ^^^^^^^^^^^^^^
>         return nftID(registry, tokenId);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BaseNFTFeed
Line:        422
Source: 
>             // set interestRate for risk group
>             pile.file("rate", risk_, rate_);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {revert ("unkown name");}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BaseNFTFeed
Line:        441
Source: 
>         // change to new rate interestRate immediately in pile if loan debt exists
>         uint loan = shelf.nftlookup(nftID_);
>                         ^^^^^^^^^^^^^^^^^^^^
>         if (pile.pie(loan) != 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BaseNFTFeed
Line:        442
Source: 
>         uint loan = shelf.nftlookup(nftID_);
>         if (pile.pie(loan) != 0) {
>                 ^^^^^^^^^^^^^^
>             pile.changeRate(loan, risk_);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BaseNFTFeed
Line:        443
Source: 
>         if (pile.pie(loan) != 0) {
>             pile.changeRate(loan, risk_);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BaseNFTFeed
Line:        470
Source: 
>         // correct interest rate has to be set on first borrow event
>         if(pile.loanRates(loan) != risk_) {
>                ^^^^^^^^^^^^^^^^^^^^
>             // set loan interest rate to the one of the correct risk group

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BaseNFTFeed
Line:        472
Source: 
>             // set loan interest rate to the one of the correct risk group
>             pile.setRate(loan, risk_);
>                 ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BaseNFTFeed
Line:        503
Source: 
>     function totalValue() public view returns (uint) {
>         return pile.total();
>                    ^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NAVFeed
Line:        635
Source: 
>         writeOffs[phase_] = WriteOff(group_, Fixed27(writeOffPercentage_));
>         pile.file("rate", group_, rate_);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NAVFeed
Line:        675
Source: 
>         // calculate amount including fixed fee if applicatable
>         (, , , , uint fixedRate) = pile.rates(pile.loanRates(loan));
>                                                   ^^^^^^^^^^^^^^^^^^
>         uint amountIncludingFixed =  safeAdd(amount, rmul(amount, fixedRate));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NAVFeed
Line:        675
Source: 
>         // calculate amount including fixed fee if applicatable
>         (, , , , uint fixedRate) = pile.rates(pile.loanRates(loan));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint amountIncludingFixed =  safeAdd(amount, rmul(amount, fixedRate));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NAVFeed
Line:        698
Source: 
>         // retrieve interest rate from the pile
>         (, ,uint loanInterestRate, ,) = pile.rates(pile.loanRates(loan));
>                                                        ^^^^^^^^^^^^^^^^^^
>         return rmul(rmul(rpow(loanInterestRate, safeSub(maturityDate_, uniqueDayTimestamp(now)), ONE), amount), recoveryRatePD_);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NAVFeed
Line:        698
Source: 
>         // retrieve interest rate from the pile
>         (, ,uint loanInterestRate, ,) = pile.rates(pile.loanRates(loan));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rmul(rmul(rpow(loanInterestRate, safeSub(maturityDate_, uniqueDayTimestamp(now)), ONE), amount), recoveryRatePD_);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NAVFeed
Line:        720
Source: 
> 
>         uint loan = shelf.nftlookup(nftID_);
>                         ^^^^^^^^^^^^^^^^^^^^
>         uint maturityDate_ = maturityDate[nftID_];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NAVFeed
Line:        728
Source: 
> 
>         futureValue[nftID_] = calcFutureValue(loan, pile.debt(loan), maturityDate[nftID_], recoveryRatePD[risk[nftID_]].value);
>                                                         ^^^^^^^^^^^^^^^
>         buckets[maturityDate_].value = safeAdd(buckets[maturityDate_].value, futureValue[nftID_]);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NAVFeed
Line:        764
Source: 
> 
>         uint debt = pile.debt(loan);
>                         ^^^^^^^^^^^^
>         debt = safeSub(debt, amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    NAVFeed
Line:        823
Source: 
>             // multiply writeOffGroupDebt with the writeOff rate
>             nav_ = safeAdd(nav_, rmul(pile.rateDebt(writeOffs[i].rateGroup), writeOffs[i].percentage.value));
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BaseNFTFeed
Line:        411
Source: 
>     // returns the nftID for the underlying collateral nft
>     function nftID(uint loan) public view returns (bytes32) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (address registry, uint tokenId) = shelf.shelf(loan);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BaseNFTFeed
Line:        450
Source: 
>     // function checks if the borrow amount does not exceed the max allowed borrow amount (=ceiling)
>     function borrow(uint loan, uint amount) external auth returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // increase borrowed amount -> note: max allowed borrow amount does not include accrued interest

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BaseNFTFeed
Line:        465
Source: 
>     // borrowEvent is called by the shelf in the borrow method
>     function borrowEvent(uint loan) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint risk_ = risk[nftID(loan)];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BaseNFTFeed
Line:        411
Source: 
>     // returns the nftID for the underlying collateral nft
>     function nftID(uint loan) public view returns (bytes32) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (address registry, uint tokenId) = shelf.shelf(loan);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BaseNFTFeed
Line:        450
Source: 
>     // function checks if the borrow amount does not exceed the max allowed borrow amount (=ceiling)
>     function borrow(uint loan, uint amount) external auth returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // increase borrowed amount -> note: max allowed borrow amount does not include accrued interest

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BaseNFTFeed
Line:        465
Source: 
>     // borrowEvent is called by the shelf in the borrow method
>     function borrowEvent(uint loan) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint risk_ = risk[nftID(loan)];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NAVFeed
Line:        733
Source: 
>     // In case of successful repayment the approximatedNAV is decreased by the repaid amount
>     function repay(uint loan, uint amount) external auth returns (uint navDecrease) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         navDecrease = _repay(loan, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Auth
Line:        79
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) public auth note { wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Auth
Line:        80
Source: 
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     function deny(address usr) public auth note { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth { require(wards[msg.sender] == 1); _; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        105
Source: 
> 
>     function safeAdd(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x + y) >= x, "safe-add-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        109
Source: 
> 
>     function safeSub(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x - y) <= x, "safe-sub-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        113
Source: 
> 
>     function safeMul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y == 0 || (z = x * y) / y == x, "safe-mul-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        117
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        121
Source: 
> 
>     function rmul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = safeMul(x, y) / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        125
Source: 
> 
>     function rdiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y > 0, "division by zero");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        105
Source: 
> 
>     function safeAdd(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x + y) >= x, "safe-add-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        109
Source: 
> 
>     function safeSub(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x - y) <= x, "safe-sub-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        113
Source: 
> 
>     function safeMul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y == 0 || (z = x * y) / y == x, "safe-mul-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        117
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        121
Source: 
> 
>     function rmul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = safeMul(x, y) / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        125
Source: 
> 
>     function rdiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y > 0, "division by zero");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        166
Source: 
>     // @return The new accumulated rate, as well as the difference between the debt calculated with the old and new accumulated rates.
>     function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint pie) public view returns (uint, uint) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp >= lastUpdated, "tinlake-math/invalid-timestamp");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        179
Source: 
>     // @return interestBearingAmount + interest
>     function chargeInterest(uint interestBearingAmount, uint ratePerSecond, uint lastUpdated) public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (block.timestamp >= lastUpdated) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        192
Source: 
>     // convert pie to debt/savings amount
>     function toAmount(uint chi, uint pie) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rmul(pie, chi);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        197
Source: 
>     // convert debt/savings amount to pie
>     function toPie(uint chi, uint amount) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rdivup(amount, chi);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        201
Source: 
> 
>     function rpow(uint x, uint n, uint base) public pure returns (uint z) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Auth
Line:        79
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) public auth note { wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Auth
Line:        80
Source: 
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     function deny(address usr) public auth note { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth { require(wards[msg.sender] == 1); _; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        105
Source: 
> 
>     function safeAdd(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x + y) >= x, "safe-add-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        109
Source: 
> 
>     function safeSub(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x - y) <= x, "safe-sub-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        113
Source: 
> 
>     function safeMul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y == 0 || (z = x * y) / y == x, "safe-mul-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        117
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        121
Source: 
> 
>     function rmul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = safeMul(x, y) / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        125
Source: 
> 
>     function rdiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y > 0, "division by zero");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        395
Source: 
>      // part of Feed interface
>     function file(bytes32 name, uint value) public auth {}
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        398
Source: 
>     /// sets the dependency to another contract
>     function depend(bytes32 contractName, address addr) external auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (contractName == "pile") {pile = PileLike_2(addr);}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        406
Source: 
>     // the nftID is used to set the risk group and value for nfts
>     function nftID(address registry, uint tokenId) public pure returns (bytes32) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return keccak256(abi.encodePacked(registry, tokenId));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        416
Source: 
> 
>     function file(bytes32 name, uint risk_, uint thresholdRatio_, uint ceilingRatio_, uint rate_) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(name == "riskGroupNFT") {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        429
Source: 
>     // The nft value is to be updated by authenticated oracles
>     function update(bytes32 nftID_,  uint value) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // switch of collateral risk group results in new: ceiling, threshold for existing loan

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        435
Source: 
>      // The nft value & risk group is to be updated by authenticated oracles
>     function update(bytes32 nftID_, uint value, uint risk_) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // the risk group has to exist

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        459
Source: 
>     // part of Feed interface
>     function repay(uint, uint amount) external auth returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // note: borrowed amount is not decreased as the feed implements the principal and not credit line method

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        477
Source: 
>     // part of Feed interface
>     function unlockEvent(uint loan) public auth {}
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        489
Source: 
> 
>     function currentCeiling(uint loan) public view returns(uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 nftID_ = nftID(loan);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        496
Source: 
>     // if the loan debt is above the loan threshold the NFT can be seized
>     function threshold(uint loan) public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 nftID_ = nftID(loan);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Auth
Line:        79
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) public auth note { wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Auth
Line:        80
Source: 
>     function rely(address usr) public auth note { wards[usr] = 1; }
>     function deny(address usr) public auth note { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth { require(wards[msg.sender] == 1); _; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        105
Source: 
> 
>     function safeAdd(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x + y) >= x, "safe-add-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        109
Source: 
> 
>     function safeSub(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((z = x - y) <= x, "safe-sub-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        113
Source: 
> 
>     function safeMul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y == 0 || (z = x * y) / y == x, "safe-mul-failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        117
Source: 
> 
>     function safeDiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = x / y;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        121
Source: 
> 
>     function rmul(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         z = safeMul(x, y) / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Math
Line:        125
Source: 
> 
>     function rdiv(uint x, uint y) public pure returns (uint z) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(y > 0, "division by zero");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        166
Source: 
>     // @return The new accumulated rate, as well as the difference between the debt calculated with the old and new accumulated rates.
>     function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint pie) public view returns (uint, uint) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp >= lastUpdated, "tinlake-math/invalid-timestamp");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        179
Source: 
>     // @return interestBearingAmount + interest
>     function chargeInterest(uint interestBearingAmount, uint ratePerSecond, uint lastUpdated) public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (block.timestamp >= lastUpdated) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        192
Source: 
>     // convert pie to debt/savings amount
>     function toAmount(uint chi, uint pie) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rmul(pie, chi);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        197
Source: 
>     // convert debt/savings amount to pie
>     function toPie(uint chi, uint amount) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rdivup(amount, chi);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Interest
Line:        201
Source: 
> 
>     function rpow(uint x, uint n, uint base) public pure returns (uint z) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        395
Source: 
>      // part of Feed interface
>     function file(bytes32 name, uint value) public auth {}
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        398
Source: 
>     /// sets the dependency to another contract
>     function depend(bytes32 contractName, address addr) external auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (contractName == "pile") {pile = PileLike_2(addr);}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        406
Source: 
>     // the nftID is used to set the risk group and value for nfts
>     function nftID(address registry, uint tokenId) public pure returns (bytes32) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return keccak256(abi.encodePacked(registry, tokenId));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        416
Source: 
> 
>     function file(bytes32 name, uint risk_, uint thresholdRatio_, uint ceilingRatio_, uint rate_) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(name == "riskGroupNFT") {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        429
Source: 
>     // The nft value is to be updated by authenticated oracles
>     function update(bytes32 nftID_,  uint value) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // switch of collateral risk group results in new: ceiling, threshold for existing loan

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        435
Source: 
>      // The nft value & risk group is to be updated by authenticated oracles
>     function update(bytes32 nftID_, uint value, uint risk_) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // the risk group has to exist

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        459
Source: 
>     // part of Feed interface
>     function repay(uint, uint amount) external auth returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // note: borrowed amount is not decreased as the feed implements the principal and not credit line method

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        477
Source: 
>     // part of Feed interface
>     function unlockEvent(uint loan) public auth {}
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        489
Source: 
> 
>     function currentCeiling(uint loan) public view returns(uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 nftID_ = nftID(loan);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseNFTFeed
Line:        496
Source: 
>     // if the loan debt is above the loan threshold the NFT can be seized
>     function threshold(uint loan) public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 nftID_ = nftID(loan);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NAVFeed
Line:        625
Source: 
> 
>     function file(bytes32 name, uint risk_, uint thresholdRatio_, uint ceilingRatio_, uint rate_, uint recoveryRatePD_) public auth  {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(name == "riskGroup") {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NAVFeed
Line:        638
Source: 
> 
>     function uniqueDayTimestamp(uint timestamp) public pure returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (1 days) * (timestamp/(1 days));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NAVFeed
Line:        643
Source: 
>     /// maturityDate is a unix timestamp
>     function file(bytes32 name, bytes32 nftID_, uint maturityDate_) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // maturity date only can be changed when there is no debt on the collateral -> futureValue == 0

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NAVFeed
Line:        651
Source: 
> 
>     function file(bytes32 name, uint value) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (name == "discountRate") {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NAVFeed
Line:        658
Source: 
>     // In case of successful borrow the approximatedNAV is increased by the borrowed amount
>     function borrow(uint loan, uint amount) external auth returns(uint navIncrease) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         navIncrease = _borrow(loan, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NAVFeed
Line:        696
Source: 
>     // calculate the future value based on the amount, maturityDate interestRate and recoveryRate
>     function calcFutureValue(uint loan, uint amount, uint maturityDate_, uint recoveryRatePD_) public returns(uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // retrieve interest rate from the pile

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NAVFeed
Line:        703
Source: 
>     /// update the nft value and change the risk group
>     function update(bytes32 nftID_, uint value, uint risk_) public auth {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nftValues[nftID_] = value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NAVFeed
Line:        787
Source: 
> 
>     function calcDiscount(uint amount, uint normalizedBlockTimestamp, uint maturityDate_) public view returns (uint result) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rdiv(amount, rpow(discountRate.value, safeSub(maturityDate_, normalizedBlockTimestamp), ONE));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NAVFeed
Line:        839
Source: 
> 
>     function dateBucket(uint timestamp) public view returns (uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return buckets[timestamp].value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Math
Line:        114
Source: 
>     function safeMul(uint x, uint y) public pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "safe-mul-failed");
>                                 ^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    NAVFeed
Line:        639
Source: 
>     function uniqueDayTimestamp(uint timestamp) public pure returns (uint) {
>         return (1 days) * (timestamp/(1 days));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BaseNFTFeed
Line:        422
Source: 
>             // set interestRate for risk group
>             pile.file("rate", risk_, rate_);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {revert ("unkown name");}

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BaseNFTFeed
Line:        441
Source: 
>         // change to new rate interestRate immediately in pile if loan debt exists
>         uint loan = shelf.nftlookup(nftID_);
>                         ^^^^^^^^^^^^^^^^^^^^
>         if (pile.pie(loan) != 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BaseNFTFeed
Line:        442
Source: 
>         uint loan = shelf.nftlookup(nftID_);
>         if (pile.pie(loan) != 0) {
>                 ^^^^^^^^^^^^^^
>             pile.changeRate(loan, risk_);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BaseNFTFeed
Line:        443
Source: 
>         if (pile.pie(loan) != 0) {
>             pile.changeRate(loan, risk_);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BaseNFTFeed
Line:        422
Source: 
>             // set interestRate for risk group
>             pile.file("rate", risk_, rate_);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {revert ("unkown name");}

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BaseNFTFeed
Line:        441
Source: 
>         // change to new rate interestRate immediately in pile if loan debt exists
>         uint loan = shelf.nftlookup(nftID_);
>                         ^^^^^^^^^^^^^^^^^^^^
>         if (pile.pie(loan) != 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BaseNFTFeed
Line:        442
Source: 
>         uint loan = shelf.nftlookup(nftID_);
>         if (pile.pie(loan) != 0) {
>                 ^^^^^^^^^^^^^^
>             pile.changeRate(loan, risk_);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BaseNFTFeed
Line:        443
Source: 
>         if (pile.pie(loan) != 0) {
>             pile.changeRate(loan, risk_);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NAVFeed
Line:        675
Source: 
>         // calculate amount including fixed fee if applicatable
>         (, , , , uint fixedRate) = pile.rates(pile.loanRates(loan));
>                                                   ^^^^^^^^^^^^^^^^^^
>         uint amountIncludingFixed =  safeAdd(amount, rmul(amount, fixedRate));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NAVFeed
Line:        675
Source: 
>         // calculate amount including fixed fee if applicatable
>         (, , , , uint fixedRate) = pile.rates(pile.loanRates(loan));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint amountIncludingFixed =  safeAdd(amount, rmul(amount, fixedRate));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NAVFeed
Line:        720
Source: 
> 
>         uint loan = shelf.nftlookup(nftID_);
>                         ^^^^^^^^^^^^^^^^^^^^
>         uint maturityDate_ = maturityDate[nftID_];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NAVFeed
Line:        728
Source: 
> 
>         futureValue[nftID_] = calcFutureValue(loan, pile.debt(loan), maturityDate[nftID_], recoveryRatePD[risk[nftID_]].value);
>                                                         ^^^^^^^^^^^^^^^
>         buckets[maturityDate_].value = safeAdd(buckets[maturityDate_].value, futureValue[nftID_]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NAVFeed
Line:        764
Source: 
> 
>         uint debt = pile.debt(loan);
>                         ^^^^^^^^^^^^
>         debt = safeSub(debt, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    NAVFeed
Line:        675
Source: 
>         // calculate amount including fixed fee if applicatable
>         (, , , , uint fixedRate) = pile.rates(pile.loanRates(loan));
>                      ^^^^^^^^^^^^^^
>         uint amountIncludingFixed =  safeAdd(amount, rmul(amount, fixedRate));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    NAVFeed
Line:        698
Source: 
>         // retrieve interest rate from the pile
>         (, ,uint loanInterestRate, ,) = pile.rates(pile.loanRates(loan));
>                 ^^^^^^^^^^^^^^^^^^^^^
>         return rmul(rmul(rpow(loanInterestRate, safeSub(maturityDate_, uniqueDayTimestamp(now)), ONE), amount), recoveryRatePD_);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Buckets
Line:        261
Source: 
> 
>     uint constant public NullDate = 1;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ShelfLike_2
Line:        345
Source: 
> 
> contract ShelfLike_2 {
>     ^^^^^^^^^^^^^^^^^^
>     function shelf(uint loan) public view returns (address registry, uint tokenId);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PileLike_2
Line:        350
Source: 
> 
> contract PileLike_2 {
>     ^^^^^^^^^^^^^^^^^
>     function setRate(uint loan, uint rate) public;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NAVFeed
Line:        675
Source: 
>         // calculate amount including fixed fee if applicatable
>         (, , , , uint fixedRate) = pile.rates(pile.loanRates(loan));
>                      ^^^^^^^^^^^^^^
>         uint amountIncludingFixed =  safeAdd(amount, rmul(amount, fixedRate));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NAVFeed
Line:        698
Source: 
>         // retrieve interest rate from the pile
>         (, ,uint loanInterestRate, ,) = pile.rates(pile.loanRates(loan));
>                 ^^^^^^^^^^^^^^^^^^^^^
>         return rmul(rmul(rpow(loanInterestRate, safeSub(maturityDate_, uniqueDayTimestamp(now)), ONE), amount), recoveryRatePD_);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        9
Source: 
> //pragma solidity >=0.4.23 >=0.5.15 >=0.5.15 <0.6.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> pragma experimental ABIEncoderV2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSNote
Line:        41
Source: 
>     modifier note {
>         bytes32 foo;
>         ^^^^^^^^^^^
>         bytes32 bar;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSNote
Line:        42
Source: 
>         bytes32 foo;
>         bytes32 bar;
>         ^^^^^^^^^^^
>         uint256 wad;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSNote
Line:        43
Source: 
>         bytes32 bar;
>         uint256 wad;
>         ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Math
Line:        103
Source: 
> contract Math {
>     uint256 constant ONE = 10 ** 27;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BaseNFTFeed
Line:        387
Source: 
> 
>     PileLike_2 pile;
>         ^^^^^^^^^^^^
>     ShelfLike_2 shelf;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BaseNFTFeed
Line:        388
Source: 
>     PileLike_2 pile;
>     ShelfLike_2 shelf;
>         ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    NAVFeed
Line:        610
Source: 
>         // risk group: 0, APR: 12.70%
>         file("riskGroup", 0, ONE, ONE, uint(1000000004027143581938102486), 99.88*10**25);
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    NAVFeed
Line:        614
Source: 
>         // write-off group: 0 - 0% write off - Grace period
>         setWriteOff(0, WRITE_OFF_PHASE_A, uint(1000000004027143581938102486), ONE);
>                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // write-off group: 1 - after 7d, 20% write off

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    NAVFeed
Line:        616
Source: 
>         // write-off group: 1 - after 7d, 20% write off
>         setWriteOff(1, WRITE_OFF_PHASE_B, uint(1000000004027143581938102486), 80 * 10**25);
>                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // write-off group: 2 - after 30d, 80% write off

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BaseNFTFeed
Line:        441
Source: 
>         // change to new rate interestRate immediately in pile if loan debt exists
>         uint loan = shelf.nftlookup(nftID_);
>                         ^^^^^^^^^^^^^^^^^^^^
>         if (pile.pie(loan) != 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BaseNFTFeed
Line:        442
Source: 
>         uint loan = shelf.nftlookup(nftID_);
>         if (pile.pie(loan) != 0) {
>                 ^^^^^^^^^^^^^^
>             pile.changeRate(loan, risk_);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BaseNFTFeed
Line:        470
Source: 
>         // correct interest rate has to be set on first borrow event
>         if(pile.loanRates(loan) != risk_) {
>                ^^^^^^^^^^^^^^^^^^^^
>             // set loan interest rate to the one of the correct risk group

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BaseNFTFeed
Line:        441
Source: 
>         // change to new rate interestRate immediately in pile if loan debt exists
>         uint loan = shelf.nftlookup(nftID_);
>                         ^^^^^^^^^^^^^^^^^^^^
>         if (pile.pie(loan) != 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BaseNFTFeed
Line:        442
Source: 
>         uint loan = shelf.nftlookup(nftID_);
>         if (pile.pie(loan) != 0) {
>                 ^^^^^^^^^^^^^^
>             pile.changeRate(loan, risk_);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BaseNFTFeed
Line:        470
Source: 
>         // correct interest rate has to be set on first borrow event
>         if(pile.loanRates(loan) != risk_) {
>                ^^^^^^^^^^^^^^^^^^^^
>             // set loan interest rate to the one of the correct risk group

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NAVFeed
Line:        675
Source: 
>         // calculate amount including fixed fee if applicatable
>         (, , , , uint fixedRate) = pile.rates(pile.loanRates(loan));
>                                                   ^^^^^^^^^^^^^^^^^^
>         uint amountIncludingFixed =  safeAdd(amount, rmul(amount, fixedRate));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NAVFeed
Line:        675
Source: 
>         // calculate amount including fixed fee if applicatable
>         (, , , , uint fixedRate) = pile.rates(pile.loanRates(loan));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint amountIncludingFixed =  safeAdd(amount, rmul(amount, fixedRate));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NAVFeed
Line:        698
Source: 
>         // retrieve interest rate from the pile
>         (, ,uint loanInterestRate, ,) = pile.rates(pile.loanRates(loan));
>                                                        ^^^^^^^^^^^^^^^^^^
>         return rmul(rmul(rpow(loanInterestRate, safeSub(maturityDate_, uniqueDayTimestamp(now)), ONE), amount), recoveryRatePD_);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NAVFeed
Line:        720
Source: 
> 
>         uint loan = shelf.nftlookup(nftID_);
>                         ^^^^^^^^^^^^^^^^^^^^
>         uint maturityDate_ = maturityDate[nftID_];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NAVFeed
Line:        728
Source: 
> 
>         futureValue[nftID_] = calcFutureValue(loan, pile.debt(loan), maturityDate[nftID_], recoveryRatePD[risk[nftID_]].value);
>                                                         ^^^^^^^^^^^^^^^
>         buckets[maturityDate_].value = safeAdd(buckets[maturityDate_].value, futureValue[nftID_]);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NAVFeed
Line:        764
Source: 
> 
>         uint debt = pile.debt(loan);
>                         ^^^^^^^^^^^^
>         debt = safeSub(debt, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NAVFeed
Line:        823
Source: 
>             // multiply writeOffGroupDebt with the writeOff rate
>             nav_ = safeAdd(nav_, rmul(pile.rateDebt(writeOffs[i].rateGroup), writeOffs[i].percentage.value));
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BaseNFTFeed
Line:        412
Source: 
>     function nftID(uint loan) public view returns (bytes32) {
>         (address registry, uint tokenId) = shelf.shelf(loan);
>                                                ^^^^^^^^^^^^^^
>         return nftID(registry, tokenId);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BaseNFTFeed
Line:        422
Source: 
>             // set interestRate for risk group
>             pile.file("rate", risk_, rate_);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {revert ("unkown name");}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BaseNFTFeed
Line:        443
Source: 
>         if (pile.pie(loan) != 0) {
>             pile.changeRate(loan, risk_);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BaseNFTFeed
Line:        472
Source: 
>             // set loan interest rate to the one of the correct risk group
>             pile.setRate(loan, risk_);
>                 ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BaseNFTFeed
Line:        503
Source: 
>     function totalValue() public view returns (uint) {
>         return pile.total();
>                    ^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BaseNFTFeed
Line:        412
Source: 
>     function nftID(uint loan) public view returns (bytes32) {
>         (address registry, uint tokenId) = shelf.shelf(loan);
>                                                ^^^^^^^^^^^^^^
>         return nftID(registry, tokenId);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BaseNFTFeed
Line:        422
Source: 
>             // set interestRate for risk group
>             pile.file("rate", risk_, rate_);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {revert ("unkown name");}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BaseNFTFeed
Line:        443
Source: 
>         if (pile.pie(loan) != 0) {
>             pile.changeRate(loan, risk_);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BaseNFTFeed
Line:        472
Source: 
>             // set loan interest rate to the one of the correct risk group
>             pile.setRate(loan, risk_);
>                 ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BaseNFTFeed
Line:        503
Source: 
>     function totalValue() public view returns (uint) {
>         return pile.total();
>                    ^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NAVFeed
Line:        635
Source: 
>         writeOffs[phase_] = WriteOff(group_, Fixed27(writeOffPercentage_));
>         pile.file("rate", group_, rate_);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NAVFeed
Line:        698
Source: 
>         // retrieve interest rate from the pile
>         (, ,uint loanInterestRate, ,) = pile.rates(pile.loanRates(loan));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rmul(rmul(rpow(loanInterestRate, safeSub(maturityDate_, uniqueDayTimestamp(now)), ONE), amount), recoveryRatePD_);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Math
Line:        106
Source: 
>     function safeAdd(uint x, uint y) public pure returns (uint z) {
>         require((z = x + y) >= x, "safe-add-failed");
>                   ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Math
Line:        110
Source: 
>     function safeSub(uint x, uint y) public pure returns (uint z) {
>         require((z = x - y) <= x, "safe-sub-failed");
>                   ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Math
Line:        114
Source: 
>     function safeMul(uint x, uint y) public pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "safe-mul-failed");
>                             ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BaseNFTFeed
Line:        387
Source: 
> 
>     PileLike_2 pile;
>         ^^^^^^^^^^^^
>     ShelfLike_2 shelf;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BaseNFTFeed
Line:        388
Source: 
>     PileLike_2 pile;
>     ShelfLike_2 shelf;
>         ^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Buckets
Line:        258
Source: 
>     // pointer to the first bucket and last bucket
>     uint public firstBucket;
>         ^^^^^^^^^^^^^^^^^^^^
>     uint public lastBucket;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Buckets
Line:        259
Source: 
>     uint public firstBucket;
>     uint public lastBucket;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BaseNFTFeed
Line:        387
Source: 
> 
>     PileLike_2 pile;
>         ^^^^^^^^^^^^
>     ShelfLike_2 shelf;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BaseNFTFeed
Line:        388
Source: 
>     PileLike_2 pile;
>     ShelfLike_2 shelf;
>         ^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NAVFeed
Line:        582
Source: 
>     // discount rate applied on every asset's fv depending on its maturityDate. The discount decreases with the maturityDate approaching.
>     Fixed27 public discountRate;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NAVFeed
Line:        587
Source: 
>     // This is required for more accurate Senior & JuniorAssetValue estimations between epochs
>     uint public approximatedNAV;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Buckets
Line:        258
Source: 
>     // pointer to the first bucket and last bucket
>     uint public firstBucket;
>         ^^^^^^^^^^^^^^^^^^^^
>     uint public lastBucket;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Buckets
Line:        259
Source: 
>     uint public firstBucket;
>     uint public lastBucket;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NAVFeed
Line:        573
Source: 
> 
>     WriteOff [4] public writeOffs;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NAVFeed
Line:        830
Source: 
>         // approximated NAV is updated and at this point in time 100% correct
>         approximatedNAV = currentNAV();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return approximatedNAV;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NAVFeed
Line:        634
Source: 
>     function setWriteOff(uint phase_, uint group_, uint rate_, uint writeOffPercentage_) internal {
>         writeOffs[phase_] = WriteOff(group_, Fixed27(writeOffPercentage_));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pile.file("rate", group_, rate_);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Buckets
Line:        255
Source: 
>     // timestamp => bucket
>     mapping (uint => Bucket) public buckets;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Buckets
Line:        258
Source: 
>     // pointer to the first bucket and last bucket
>     uint public firstBucket;
>         ^^^^^^^^^^^^^^^^^^^^
>     uint public lastBucket;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Buckets
Line:        259
Source: 
>     uint public firstBucket;
>     uint public lastBucket;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Buckets
Line:        261
Source: 
> 
>     uint constant public NullDate = 1;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Interest
Line:        167
Source: 
>     function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint pie) public view returns (uint, uint) {
>         require(block.timestamp >= lastUpdated, "tinlake-math/invalid-timestamp");
>                    ^^^^^^^^^^^^^^^
>         require(chi != 0);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Interest
Line:        180
Source: 
>     function chargeInterest(uint interestBearingAmount, uint ratePerSecond, uint lastUpdated) public view returns (uint) {
>         if (block.timestamp >= lastUpdated) {
>                 ^^^^^^^^^^^^^^^
>             interestBearingAmount = _chargeInterest(interestBearingAmount, ratePerSecond, lastUpdated, block.timestamp);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Interest
Line:        167
Source: 
>     function compounding(uint chi, uint ratePerSecond, uint lastUpdated, uint pie) public view returns (uint, uint) {
>         require(block.timestamp >= lastUpdated, "tinlake-math/invalid-timestamp");
>                    ^^^^^^^^^^^^^^^
>         require(chi != 0);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Interest
Line:        180
Source: 
>     function chargeInterest(uint interestBearingAmount, uint ratePerSecond, uint lastUpdated) public view returns (uint) {
>         if (block.timestamp >= lastUpdated) {
>                 ^^^^^^^^^^^^^^^
>             interestBearingAmount = _chargeInterest(interestBearingAmount, ratePerSecond, lastUpdated, block.timestamp);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    NAVFeed
Line:        672
Source: 
>         // maturity date has to be a value in the future
>         require(maturityDate_ > block.timestamp, "maturity-date-is-not-in-the-future");
>                                     ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    NAVFeed
Line:        692
Source: 
>         // return increase NAV amount
>         return calcDiscount(fv, uniqueDayTimestamp(block.timestamp), maturityDate_);
>                                                        ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    NAVFeed
Line:        755
Source: 
>         // no fv decrease calculation needed if maturity date is in the past
>         if (maturityDate_ < uniqueDayTimestamp(block.timestamp)) {
>                                                    ^^^^^^^^^^^^^^^
>             // if a loan is overdue, the portfolio value is initially equal to the existing debt

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    NAVFeed
Line:        784
Source: 
>         // return decrease NAV amount
>         return calcDiscount(safeSub(preFutureValue, fv), uniqueDayTimestamp(block.timestamp), maturityDate_);
>                                                                                 ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    NAVFeed
Line:        794
Source: 
>     function calcTotalDiscount() public view returns(uint) {
>         uint normalizedBlockTimestamp = uniqueDayTimestamp(block.timestamp);
>                                                                ^^^^^^^^^^^^^
>         uint sum = 0;

[0m

---------------------------------------------
For contract 0xdB9A84e5214e03a4e5DD14cFB3782e0bcD7567a7.sol
Tool Runtime = 402.91017323399865 seconds
#############################################