[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    rentCollector
Line:        22
Source: 
>     
>     function addMarket(uint _position, address _marketAddress) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == 0xacD628D01dd8534Db6Ebe4894C1be3c8D34ebe14,"not owner");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    rentCollector
Line:        27
Source: 
>     
>     function setNumberOfMarkets(uint _numberOfMarkets) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == 0xacD628D01dd8534Db6Ebe4894C1be3c8D34ebe14,"not owner");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    rentCollector
Line:        48
Source: 
>     
>     function collectRentAllTokensAllMarkets() public 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    rentCollector
Line:        37
Source: 
>             IRealityCards rc = IRealityCards(marketAddresses[i]);
>             for (uint j = 0; j < rc.numberOfTokens(); j++) {
>                                  ^^^^^^^^^^^^^^^^^^^
>                 if (rc.currentOwnerRemainingDeposit(j) == 0 && rc.ownerOf(j) != address(rc)) {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    rentCollector
Line:        38
Source: 
>             for (uint j = 0; j < rc.numberOfTokens(); j++) {
>                 if (rc.currentOwnerRemainingDeposit(j) == 0 && rc.ownerOf(j) != address(rc)) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     _expired = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    rentCollector
Line:        38
Source: 
>             for (uint j = 0; j < rc.numberOfTokens(); j++) {
>                 if (rc.currentOwnerRemainingDeposit(j) == 0 && rc.ownerOf(j) != address(rc)) {
>                                                                ^^^^^^^^^^^^^
>                     _expired = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    rentCollector
Line:        55
Source: 
>             _expired = false;
>             for (uint j = 0; j < rc.numberOfTokens(); j++) {
>                                  ^^^^^^^^^^^^^^^^^^^
>                 if (rc.currentOwnerRemainingDeposit(j) == 0 && rc.ownerOf(j) != address(rc)) {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    rentCollector
Line:        56
Source: 
>             for (uint j = 0; j < rc.numberOfTokens(); j++) {
>                 if (rc.currentOwnerRemainingDeposit(j) == 0 && rc.ownerOf(j) != address(rc)) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     _expired = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    rentCollector
Line:        56
Source: 
>             for (uint j = 0; j < rc.numberOfTokens(); j++) {
>                 if (rc.currentOwnerRemainingDeposit(j) == 0 && rc.ownerOf(j) != address(rc)) {
>                                                                ^^^^^^^^^^^^^
>                     _expired = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    rentCollector
Line:        60
Source: 
>             if (_expired) {
>                 rc.collectRentAllTokens(); 
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    rentCollector
Line:        27
Source: 
>     
>     function setNumberOfMarkets(uint _numberOfMarkets) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == 0xacD628D01dd8534Db6Ebe4894C1be3c8D34ebe14,"not owner");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    rentCollector
Line:        22
Source: 
>     
>     function addMarket(uint _position, address _marketAddress) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == 0xacD628D01dd8534Db6Ebe4894C1be3c8D34ebe14,"not owner");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rentCollector
Line:        17
Source: 
> 
> contract rentCollector {
> ^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rentCollector
Line:        33
Source: 
>     function hasCardExpired() external view returns (bool) {
>         bool _expired = false;
>         ^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rentCollector
Line:        50
Source: 
>     {
>         bool _expired;
>         ^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity 0.6.6;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    rentCollector
Line:        37
Source: 
>             IRealityCards rc = IRealityCards(marketAddresses[i]);
>             for (uint j = 0; j < rc.numberOfTokens(); j++) {
>                                  ^^^^^^^^^^^^^^^^^^^
>                 if (rc.currentOwnerRemainingDeposit(j) == 0 && rc.ownerOf(j) != address(rc)) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    rentCollector
Line:        38
Source: 
>             for (uint j = 0; j < rc.numberOfTokens(); j++) {
>                 if (rc.currentOwnerRemainingDeposit(j) == 0 && rc.ownerOf(j) != address(rc)) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     _expired = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    rentCollector
Line:        38
Source: 
>             for (uint j = 0; j < rc.numberOfTokens(); j++) {
>                 if (rc.currentOwnerRemainingDeposit(j) == 0 && rc.ownerOf(j) != address(rc)) {
>                                                                ^^^^^^^^^^^^^
>                     _expired = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    rentCollector
Line:        55
Source: 
>             _expired = false;
>             for (uint j = 0; j < rc.numberOfTokens(); j++) {
>                                  ^^^^^^^^^^^^^^^^^^^
>                 if (rc.currentOwnerRemainingDeposit(j) == 0 && rc.ownerOf(j) != address(rc)) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    rentCollector
Line:        56
Source: 
>             for (uint j = 0; j < rc.numberOfTokens(); j++) {
>                 if (rc.currentOwnerRemainingDeposit(j) == 0 && rc.ownerOf(j) != address(rc)) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     _expired = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    rentCollector
Line:        56
Source: 
>             for (uint j = 0; j < rc.numberOfTokens(); j++) {
>                 if (rc.currentOwnerRemainingDeposit(j) == 0 && rc.ownerOf(j) != address(rc)) {
>                                                                ^^^^^^^^^^^^^
>                     _expired = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    rentCollector
Line:        60
Source: 
>             if (_expired) {
>                 rc.collectRentAllTokens(); 
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    rentCollector
Line:        20
Source: 
>     mapping (uint256 => address) public marketAddresses; 
>     uint public numberOfMarkets;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m

---------------------------------------------
For contract 0x41c6ff92688c283e3a9aaa2779ad25c571c0bd8d.sol
Tool Runtime = 2.533482582999568 seconds
#############################################