[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        143
Source: 
> 
>     uint256 oneYear = 365 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 hundred;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        147
Source: 
> 
>     uint256 public version = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        343
Source: 
> 
>   uint256 public SECPYEAR = 31536000;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Permissions
Line:        80
Source: 
>   function addPermit(address _addr) public onlyPermits{
>     require(permits[_addr] == false);
>             ^^^^^^^^^^^^^^^^^^^^^^^
>     permits[_addr] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        202
Source: 
>             uint256 idx = depositIdx[_from];
>             if(idx == 0){
>                ^^^^^^^^
>                 DepositContract memory dep = DepositContract({

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        214
Source: 
>                 idx = idx - 1;
>                 if(balance[_from] == amount){
>                    ^^^^^^^^^^^^^^^^^^^^^^^^
>                     deposits[idx].startTime = now;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        12
Source: 
>   function mul(uint256 a, uint256 b,uint256 decimal) internal pure returns (uint256) {
>     if (a == 0) {
>         ^^^^^^
>       return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        16
Source: 
>     uint256 c = a * b;
>     require(c / a == b,"MUL ERROR");
>             ^^^^^^^^^^
>     c = c / (10 ** decimal);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        362
Source: 
> 
>       if(borrows[idx].status == 0)
>          ^^^^^^^^^^^^^^^^^^^^^^^^
>       {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        388
Source: 
>       
>       if(totalSupplyNoDecimal == 0)
>          ^^^^^^^^^^^^^^^^^^^^^^^^^
>           return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        463
Source: 
>         uint256 idx = conIdx - 1;
>         require(borrows[idx].status == 1);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Permissions
Line:        75
Source: 
> 
>   function isPermit(address _addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return permits[_addr];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Permissions
Line:        79
Source: 
> 
>   function addPermit(address _addr) public onlyPermits{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(permits[_addr] == false);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Permissions
Line:        87
Source: 
> 
>   function removePermit(address _addr) public onlyPermits{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_addr != msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Permissions
Line:        75
Source: 
> 
>   function isPermit(address _addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return permits[_addr];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Permissions
Line:        79
Source: 
> 
>   function addPermit(address _addr) public onlyPermits{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(permits[_addr] == false);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Permissions
Line:        87
Source: 
> 
>   function removePermit(address _addr) public onlyPermits{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_addr != msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        167
Source: 
> 
>   function setCatToken(address _addr) public onlyPermits{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     catToken = ERC20(_addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        171
Source: 
> 
>   function setBorrowInterest(uint256 _newInterst) public onlyPermits{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      emit Interest(borrowInterest,_newInterst);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        176
Source: 
> 
>   function getInterestProfit() public view returns(uint256){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> //      require(depositIdx[msg.sender] > 0,"Not have deposit");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        186
Source: 
> 
>   function deposit(address _from,uint256 amount) public returns (bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       // check amount should not have decimal

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        264
Source: 
>   
>   function withdrawWithInterest(uint256 amount) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(depositIdx[msg.sender] > 0,"Not deposit");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        293
Source: 
> //============ All About contract ==============
>   function maxContractUser() public view returns(uint256){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return contracts[msg.sender].length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        297
Source: 
> 
>   function getContractUser() public view returns(uint256[] memory cons){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 leng = contracts[msg.sender].length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        304
Source: 
>   
>   function getMaxDeposit() public view returns(uint256){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return deposits.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        317
Source: 
>   
>    function getDepositData(address addr) public view returns(uint256[] memory _data){
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(depositIdx[addr] > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        324
Source: 
>   
>   function getMaxBorrowContract() public view returns(uint256){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return borrows.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        328
Source: 
> 
>   function getBorrowData(uint256 condIdx) public view returns(uint256[] memory _data){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(condIdx <= borrows.length && condIdx > 0,"Error not have this idx");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        384
Source: 
> 
>   function supplyInterest() public view returns(uint256){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 supInt;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        429
Source: 
> 
>   function borrow(uint256 amount) public returns(uint256 contractID){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _borrow(amount,msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        434
Source: 
> 
>   function borrowWithAddr(uint256 amount,address _addr)public onlyPermits returns(uint256 contractID){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _borrow(amount,_addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        531
Source: 
>  
>   function rePaymentWithWrap(uint256 amount,uint256 conIdx,address _addr) public onlyPermits returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return _rePayment(amount,conIdx,_addr,true);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        535
Source: 
> 
>   function rePayment(uint256 amount,uint256 conIdx) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return _rePayment(amount,conIdx,msg.sender,false);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        196
Source: 
>       
>        if(token.transferFrom(_from,address(this),amount) == true){
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balance[_from] += amount;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        232
Source: 
> 
>     if(token.transfer(msg.sender,amount) == true){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balance[msg.sender] -= amount;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        259
Source: 
>       totalClaimInterest += amount;
>       token.transfer(msg.sender,amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        404
Source: 
>       amount  = (amount / (10 ** 18)) * (10 ** 18);
>       require(amount <= catToken.balanceOf(_addr),"not enought CAT Token");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 amountStable = (amount / (10 ** 18)) * (10 ** decimal);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        420
Source: 
>       contracts[_addr].push(idx);
>       catToken.intTransfer(_addr,address(this),amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       token.transfer(_addr,amountStable);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        421
Source: 
>       catToken.intTransfer(_addr,address(this),amount);
>       token.transfer(_addr,amountStable);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       totalBorrow += amountStable;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        474
Source: 
>             if(wrap == true)
>               token.intTransfer(_addr,address(this),amount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             else

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        490
Source: 
> 
>             catToken.transfer(_addr,catReturn);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _shareInterest(interest);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        476
Source: 
>             else
>               token.transferFrom(_addr,address(this),amount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        497
Source: 
>            if(wrap == true)
>             token.intTransfer(_addr,address(this),amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            else

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        514
Source: 
> 
>               catToken.transfer(_addr,catReturn);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               _shareInterest(interest);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        499
Source: 
>            else
>             token.transferFrom(_addr,address(this),amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            emit Repayment(_addr,conIdx,amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        429
Source: 
> 
>   function borrow(uint256 amount) public returns(uint256 contractID){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _borrow(amount,msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        434
Source: 
> 
>   function borrowWithAddr(uint256 amount,address _addr)public onlyPermits returns(uint256 contractID){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _borrow(amount,_addr);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        531
Source: 
>  
>   function rePaymentWithWrap(uint256 amount,uint256 conIdx,address _addr) public onlyPermits returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return _rePayment(amount,conIdx,_addr,true);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        535
Source: 
> 
>   function rePayment(uint256 amount,uint256 conIdx) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return _rePayment(amount,conIdx,msg.sender,false);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Permissions
Line:        75
Source: 
> 
>   function isPermit(address _addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return permits[_addr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        167
Source: 
> 
>   function setCatToken(address _addr) public onlyPermits{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     catToken = ERC20(_addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        171
Source: 
> 
>   function setBorrowInterest(uint256 _newInterst) public onlyPermits{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      emit Interest(borrowInterest,_newInterst);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        308
Source: 
>   
>   function getDepositDataIdx(uint256 idx) public view returns(uint256[] memory _data){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(idx >=0 && idx < deposits.length);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        328
Source: 
> 
>   function getBorrowData(uint256 condIdx) public view returns(uint256[] memory _data){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(condIdx <= borrows.length && condIdx > 0,"Error not have this idx");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        350
Source: 
>       fullInt = _intPY / SECPYEAR / 100;
>       fullInt = (fullInt * _time); //fullInt.mul(_amount,decimal);
>                  ^^^^^^^^^^^^^^^
>       fullInt = fullInt.mul(_amount,decimal);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        15
Source: 
>     }
>     uint256 c = a * b;
>                 ^^^^^
>     require(c / a == b,"MUL ERROR");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        392
Source: 
>       {
>           supInt =  (totalInterest * 100) / totalSupplyNoDecimal;
>                      ^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        403
Source: 
>   function _borrow(uint256 amount,address _addr) internal returns(uint256 contractID){
>       amount  = (amount / (10 ** 18)) * (10 ** 18);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(amount <= catToken.balanceOf(_addr),"not enought CAT Token");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        405
Source: 
>       require(amount <= catToken.balanceOf(_addr),"not enought CAT Token");
>       uint256 amountStable = (amount / (10 ** 18)) * (10 ** decimal);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(amountStable <= totalSupply - totalBorrow,"Not have fund to borrw");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        452
Source: 
>             
>             deposits[i].interest +=   (amount * percent) / (10 ** decimal); 
>                                        ^^^^^^^^^^^^^^^^
>           }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        485
Source: 
>             if(decimal < 18)
>                catReturn = principle * (10 ** (18 - decimal));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             else

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        509
Source: 
>               if(decimal < 18)
>                 catReturn = principle * (10 ** (18 - decimal));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               else

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        196
Source: 
>       
>        if(token.transferFrom(_from,address(this),amount) == true){
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balance[_from] += amount;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        232
Source: 
> 
>     if(token.transfer(msg.sender,amount) == true){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balance[msg.sender] -= amount;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        404
Source: 
>       amount  = (amount / (10 ** 18)) * (10 ** 18);
>       require(amount <= catToken.balanceOf(_addr),"not enought CAT Token");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 amountStable = (amount / (10 ** 18)) * (10 ** decimal);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        420
Source: 
>       contracts[_addr].push(idx);
>       catToken.intTransfer(_addr,address(this),amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       token.transfer(_addr,amountStable);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        421
Source: 
>       catToken.intTransfer(_addr,address(this),amount);
>       token.transfer(_addr,amountStable);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       totalBorrow += amountStable;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        474
Source: 
>             if(wrap == true)
>               token.intTransfer(_addr,address(this),amount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             else

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        490
Source: 
> 
>             catToken.transfer(_addr,catReturn);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _shareInterest(interest);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        476
Source: 
>             else
>               token.transferFrom(_addr,address(this),amount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        497
Source: 
>            if(wrap == true)
>             token.intTransfer(_addr,address(this),amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            else

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        514
Source: 
> 
>               catToken.transfer(_addr,catReturn);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               _shareInterest(interest);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        499
Source: 
>            else
>             token.transferFrom(_addr,address(this),amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            emit Repayment(_addr,conIdx,amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        138
Source: 
>     uint256 public decimal;
>     string public TOKEN_POOLS;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        343
Source: 
> 
>   uint256 public SECPYEAR = 31536000;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity ^0.5.17;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Permissions
Line:        58
Source: 
>   mapping (address=>bool) public permits;
>   bool allPermit;
>   ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        123
Source: 
>     mapping (address => uint256) public balance;
>     mapping (address => uint256) depositIdx;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        125
Source: 
> 
>     BorrowContract[] borrows;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     DepositContract[]  deposits;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        126
Source: 
>     BorrowContract[] borrows;
>     DepositContract[]  deposits;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        128
Source: 
> 
>     mapping (address=>uint256[]) contracts;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        143
Source: 
> 
>     uint256 oneYear = 365 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 hundred;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        144
Source: 
>     uint256 oneYear = 365 days;
>     uint256 hundred;
>     ^^^^^^^^^^^^^^^
>     bool  public  wrapPools;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        154
Source: 
>     catToken = ERC20(0x2D916e99E53b31Ae968991472b15b90e1355E7B9); // CAT
>     decimal = token.decimals();
>               ^^^^^^^^^^^^^^^^
>     hundred = 100 * (10 ** decimal);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        196
Source: 
>       
>        if(token.transferFrom(_from,address(this),amount) == true){
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balance[_from] += amount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        232
Source: 
> 
>     if(token.transfer(msg.sender,amount) == true){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balance[msg.sender] -= amount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        404
Source: 
>       amount  = (amount / (10 ** 18)) * (10 ** 18);
>       require(amount <= catToken.balanceOf(_addr),"not enought CAT Token");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 amountStable = (amount / (10 ** 18)) * (10 ** decimal);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        259
Source: 
>       totalClaimInterest += amount;
>       token.transfer(msg.sender,amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        420
Source: 
>       contracts[_addr].push(idx);
>       catToken.intTransfer(_addr,address(this),amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       token.transfer(_addr,amountStable);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        421
Source: 
>       catToken.intTransfer(_addr,address(this),amount);
>       token.transfer(_addr,amountStable);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       totalBorrow += amountStable;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        474
Source: 
>             if(wrap == true)
>               token.intTransfer(_addr,address(this),amount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             else

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        490
Source: 
> 
>             catToken.transfer(_addr,catReturn);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _shareInterest(interest);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        476
Source: 
>             else
>               token.transferFrom(_addr,address(this),amount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        497
Source: 
>            if(wrap == true)
>             token.intTransfer(_addr,address(this),amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            else

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        514
Source: 
> 
>               catToken.transfer(_addr,catReturn);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               _shareInterest(interest);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        499
Source: 
>            else
>             token.transferFrom(_addr,address(this),amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            emit Repayment(_addr,conIdx,amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        131
Source: 
>     using SafeMath for uint256;
>     uint256 public borrowInterest;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalInterest;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        132
Source: 
>     uint256 public borrowInterest;
>     uint256 public totalInterest;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalClaimInterest;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        133
Source: 
>     uint256 public totalInterest;
>     uint256 public totalClaimInterest;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // uint256 public supplyInterest;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        135
Source: 
>     // uint256 public supplyInterest;
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalBorrow;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        136
Source: 
>     uint256 public totalSupply;
>     uint256 public totalBorrow;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public decimal;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        137
Source: 
>     uint256 public totalBorrow;
>     uint256 public decimal;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     string public TOKEN_POOLS;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        138
Source: 
>     uint256 public decimal;
>     string public TOKEN_POOLS;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        144
Source: 
>     uint256 oneYear = 365 days;
>     uint256 hundred;
>     ^^^^^^^^^^^^^^^
>     bool  public  wrapPools;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        199
Source: 
>             emit Deposit(_from,amount);
>             totalSupply += amount;
>             ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        418
Source: 
> 
>       uint256 idx = borrows.push(br);
>                     ^^^^^^^^^^^^^^^^
>       contracts[_addr].push(idx);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        419
Source: 
>       uint256 idx = borrows.push(br);
>       contracts[_addr].push(idx);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       catToken.intTransfer(_addr,address(this),amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        422
Source: 
>       token.transfer(_addr,amountStable);
>       totalBorrow += amountStable;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        452
Source: 
>             
>             deposits[i].interest +=   (amount * percent) / (10 ** decimal); 
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        480
Source: 
> 
>             borrows[idx].interestPay += interest;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             borrows[idx].repayAmount += principle;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        481
Source: 
>             borrows[idx].interestPay += interest;
>             borrows[idx].repayAmount += principle;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalInterest += interest;  

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        482
Source: 
>             borrows[idx].repayAmount += principle;
>             totalInterest += interest;  
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalBorrow -= principle;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        483
Source: 
>             totalInterest += interest;  
>             totalBorrow -= principle;
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             if(decimal < 18)

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        492
Source: 
>             _shareInterest(interest);
>             borrows[idx].time = now;
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        504
Source: 
>               principle = amount - interest;
>               borrows[idx].interestPay += interest;
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               borrows[idx].repayAmount += principle;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        505
Source: 
>               borrows[idx].interestPay += interest;
>               borrows[idx].repayAmount += principle;
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               totalInterest += interest;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        506
Source: 
>               borrows[idx].repayAmount += principle;
>               totalInterest += interest;
>               ^^^^^^^^^^^^^^^^^^^^^^^^^
>               totalBorrow -= principle;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        507
Source: 
>               totalInterest += interest;
>               totalBorrow -= principle;
>               ^^^^^^^^^^^^^^^^^^^^^^^^
>               if(decimal < 18)

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        516
Source: 
>               _shareInterest(interest);
>                borrows[idx].time = now;
>                ^^^^^^^^^^^^^^^^^^^^^^^
>               return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        521
Source: 
>            {
>               borrows[idx].interestPay += amount;
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               totalInterest += amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        522
Source: 
>               borrows[idx].interestPay += amount;
>               totalInterest += amount;
>               ^^^^^^^^^^^^^^^^^^^^^^^
>               _shareInterest(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShuttleOneDepositPools
Line:        524
Source: 
>               _shareInterest(amount);
>                borrows[idx].time = now;
>                ^^^^^^^^^^^^^^^^^^^^^^^
>               return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        197
Source: 
>        if(token.transferFrom(_from,address(this),amount) == true){
>             balance[_from] += amount;
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Deposit(_from,amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        208
Source: 
>                 });
>                 idx = deposits.push(dep);
>                       ^^^^^^^^^^^^^^^^^^
>                 depositIdx[_from] = idx;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        209
Source: 
>                 idx = deposits.push(dep);
>                 depositIdx[_from] = idx;
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        215
Source: 
>                 if(balance[_from] == amount){
>                     deposits[idx].startTime = now;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }   

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        217
Source: 
>                 }   
>                 deposits[idx].amount += amount;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        259
Source: 
>       totalClaimInterest += amount;
>       token.transfer(msg.sender,amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        420
Source: 
>       contracts[_addr].push(idx);
>       catToken.intTransfer(_addr,address(this),amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       token.transfer(_addr,amountStable);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        421
Source: 
>       catToken.intTransfer(_addr,address(this),amount);
>       token.transfer(_addr,amountStable);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       totalBorrow += amountStable;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        474
Source: 
>             if(wrap == true)
>               token.intTransfer(_addr,address(this),amount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             else

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        490
Source: 
> 
>             catToken.transfer(_addr,catReturn);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _shareInterest(interest);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        476
Source: 
>             else
>               token.transferFrom(_addr,address(this),amount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        497
Source: 
>            if(wrap == true)
>             token.intTransfer(_addr,address(this),amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            else

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        514
Source: 
> 
>               catToken.transfer(_addr,catReturn);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               _shareInterest(interest);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        499
Source: 
>            else
>             token.transferFrom(_addr,address(this),amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            emit Repayment(_addr,conIdx,amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Permissions
Line:        58
Source: 
>   mapping (address=>bool) public permits;
>   bool allPermit;
>   ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        138
Source: 
>     uint256 public decimal;
>     string public TOKEN_POOLS;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        143
Source: 
> 
>     uint256 oneYear = 365 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 hundred;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        144
Source: 
>     uint256 oneYear = 365 days;
>     uint256 hundred;
>     ^^^^^^^^^^^^^^^
>     bool  public  wrapPools;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        145
Source: 
>     uint256 hundred;
>     bool  public  wrapPools;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ShuttleOneDepositPools
Line:        147
Source: 
> 
>     uint256 public version = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0xe3013029af5f33ec3fc0f3b71508acb775ddc196.sol
Tool Runtime = 249.11757236599806 seconds
#############################################