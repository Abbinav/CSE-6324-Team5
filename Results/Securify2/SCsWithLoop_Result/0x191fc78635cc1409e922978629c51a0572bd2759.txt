[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owable
Line:        31
Source: 
>     
>     function changeOwner(address _newOwner) public isOwable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Stop
Line:        45
Source: 
>     
>     function stop() public isOwable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stopped = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Stop
Line:        49
Source: 
>     
>     function start() public isOwable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stopped = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owable
Line:        31
Source: 
>     
>     function changeOwner(address _newOwner) public isOwable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SupplyController
Line:        64
Source: 
>     
>     function setSupplyController(address _newController) public isOwable returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!controllers[_newController], "Already is a controller");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SupplyController
Line:        71
Source: 
>     
>     function getControllerList() public view isOwable returns (address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return controllerList;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SupplyController
Line:        75
Source: 
>     
>     function deleteSupplyController(address _controller) public isOwable returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(controllers[_controller], "Not a controller");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owable
Line:        31
Source: 
>     
>     function changeOwner(address _newOwner) public isOwable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Stop
Line:        45
Source: 
>     
>     function stop() public isOwable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stopped = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Stop
Line:        49
Source: 
>     
>     function start() public isOwable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stopped = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SupplyController
Line:        64
Source: 
>     
>     function setSupplyController(address _newController) public isOwable returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!controllers[_newController], "Already is a controller");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SupplyController
Line:        71
Source: 
>     
>     function getControllerList() public view isOwable returns (address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return controllerList;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SupplyController
Line:        75
Source: 
>     
>     function deleteSupplyController(address _controller) public isOwable returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(controllers[_controller], "Not a controller");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    QuickCash
Line:        119
Source: 
> 
>     function getIncome() public view isOwable returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return income;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    QuickCash
Line:        123
Source: 
> 
>     function setIncome(address _newIncome) public isRun isOwable returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         income = _newIncome;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    QuickCash
Line:        128
Source: 
>     
>     function totalSupply() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return supply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    QuickCash
Line:        132
Source: 
>     
>     function balanceOf(address _owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    QuickCash
Line:        136
Source: 
>     
>     function transfer(address _to, uint256 _value) public isRun returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferFrom(msg.sender, _to, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    QuickCash
Line:        151
Source: 
>     
>     function approve(address _spender, uint256 _value) public isRun returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_spender != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    QuickCash
Line:        158
Source: 
>     
>     function allowance(address _owner, address _spender) public view isRun returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return approvals[_owner][_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    QuickCash
Line:        162
Source: 
>     
>     function loan(address _account, uint256 _value, uint256 _charge) public isRun isController returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_account != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    QuickCash
Line:        175
Source: 
>     
>     function repay(uint256 _value, uint256 _charge) public isRun returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender != address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owable
Line:        31
Source: 
>     
>     function changeOwner(address _newOwner) public isOwable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    QuickCash
Line:        123
Source: 
> 
>     function setIncome(address _newIncome) public isRun isOwable returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         income = _newIncome;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    QuickCash
Line:        132
Source: 
>     
>     function balanceOf(address _owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    QuickCash
Line:        136
Source: 
>     
>     function transfer(address _to, uint256 _value) public isRun returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferFrom(msg.sender, _to, _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    QuickCash
Line:        140
Source: 
>     
>     function transferFrom(address _from, address _to, uint256 _value) public isRun returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_to != address(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    QuickCash
Line:        151
Source: 
>     
>     function approve(address _spender, uint256 _value) public isRun returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_spender != address(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    QuickCash
Line:        158
Source: 
>     
>     function allowance(address _owner, address _spender) public view isRun returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return approvals[_owner][_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    QuickCash
Line:        162
Source: 
>     
>     function loan(address _account, uint256 _value, uint256 _charge) public isRun isController returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_account != address(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    QuickCash
Line:        175
Source: 
>     
>     function repay(uint256 _value, uint256 _charge) public isRun returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender != address(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    QuickCash
Line:        99
Source: 
>     uint256 internal supply;
>     string public constant name = "QuickCash";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "QC";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    QuickCash
Line:        100
Source: 
>     string public constant name = "QuickCash";
>     string public constant symbol = "QC";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    QuickCash
Line:        101
Source: 
>     string public constant symbol = "QC";
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity >=0.4.23;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    QuickCash
Line:        105
Source: 
>     
>     mapping (address => uint256) balances;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => mapping (address => uint256)) approvals;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    QuickCash
Line:        106
Source: 
>     mapping (address => uint256) balances;
>     mapping (address => mapping (address => uint256)) approvals;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Math
Line:        10
Source: 
>     function add(uint x, uint y) internal pure returns (uint z) {
>         require((z = x + y) >= x, "add overflow");
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Math
Line:        14
Source: 
>     function sub(uint x, uint y) internal pure returns(uint z) {
>         require((z = x - y) <= x, "sub underflow");
>                  ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Stop
Line:        38
Source: 
>     
>     bool public stopped;
>     ^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    QuickCash
Line:        98
Source: 
>     
>     uint256 internal supply;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant name = "QuickCash";

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    QuickCash
Line:        103
Source: 
>     
>     address internal income;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    QuickCash
Line:        145
Source: 
>         }
>         balances[_from] = sub(balances[_from], _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[_to] = add(balances[_to], _value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    QuickCash
Line:        146
Source: 
>         balances[_from] = sub(balances[_from], _value);
>         balances[_to] = add(balances[_to], _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_from, _to, _value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    QuickCash
Line:        153
Source: 
>         require(_spender != address(0));
>         approvals[msg.sender][_spender] = _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Stop
Line:        38
Source: 
>     
>     bool public stopped;
>     ^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    QuickCash
Line:        99
Source: 
>     uint256 internal supply;
>     string public constant name = "QuickCash";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "QC";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    QuickCash
Line:        100
Source: 
>     string public constant name = "QuickCash";
>     string public constant symbol = "QC";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    QuickCash
Line:        101
Source: 
>     string public constant symbol = "QC";
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m

---------------------------------------------
For contract 0x191fc78635cc1409e922978629c51a0572bd2759.sol
Tool Runtime = 4.818402476000301 seconds
#############################################