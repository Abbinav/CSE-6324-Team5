[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DtaPool
Line:        58
Source: 
>     uint[] public dateList;
>     function snapshotCreate(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _date,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DtaPool
Line:        111
Source: 
>     }
>     function stake(string memory amount, uint _date,address superiorAddr) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isRun == true, "It doesn't work");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DtaPool
Line:        155
Source: 
>     }
>     function leave(string memory amount, uint256 _date) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isRun == true, "It doesn't work");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DtaPool
Line:        183
Source: 
>     }
>     function changeIsRun() public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(_owner == msg.sender, "Not an administrator");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DtaPool
Line:        187
Source: 
>     }
>     function approveUser(address addr) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        _token.approve(addr,21000000);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DtaPool
Line:        190
Source: 
>     }
>     function userPledgeNum(address addr) public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return pledgors[addr].amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DtaPool
Line:        193
Source: 
>     }
>     function totalDtaNumber() public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return _token.balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DtaPool
Line:        196
Source: 
>     }
>     function _totalDta() public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint totalDta = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DtaPool
Line:        204
Source: 
>     }
>     function allAddress() public view returns (address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pllist;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DtaPool
Line:        207
Source: 
>     }
>     function allDate() public view returns (uint[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return dateList;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DtaPool
Line:        210
Source: 
>     }
>     function allUserAddress(address addr) public view returns (address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory addrList = new address[](100);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DtaPool
Line:        222
Source: 
>     }
>     function transferAmount(address addr,uint _date,string memory amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_owner == msg.sender, "Not an administrator");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DtaPool
Line:        187
Source: 
>     }
>     function approveUser(address addr) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        _token.approve(addr,21000000);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DtaPool
Line:        58
Source: 
>     uint[] public dateList;
>     function snapshotCreate(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _date,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DtaPool
Line:        111
Source: 
>     }
>     function stake(string memory amount, uint _date,address superiorAddr) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isRun == true, "It doesn't work");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DtaPool
Line:        155
Source: 
>     }
>     function leave(string memory amount, uint256 _date) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isRun == true, "It doesn't work");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DtaPool
Line:        190
Source: 
>     }
>     function userPledgeNum(address addr) public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return pledgors[addr].amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DtaPool
Line:        210
Source: 
>     }
>     function allUserAddress(address addr) public view returns (address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory addrList = new address[](100);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DtaPool
Line:        222
Source: 
>     }
>     function transferAmount(address addr,uint _date,string memory amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_owner == msg.sender, "Not an administrator");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DtaPool
Line:        19
Source: 
> contract DtaPool{
>     address public _owner;
>     ^^^^^^^^^^^^^^^^^^^^^
>     IERC20 public _token;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DtaPool
Line:        20
Source: 
>     address public _owner;
>     IERC20 public _token;
>     ^^^^^^^^^^^^^^^^^^^^
>     bool public _isRun;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DtaPool
Line:        21
Source: 
>     IERC20 public _token;
>     bool public _isRun;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DtaPool
Line:        114
Source: 
>         uint totalBalanceSender = _token.balanceOf(msg.sender);
>         uint _amount = parseInt(amount);
>         ^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DtaPool
Line:        157
Source: 
>         require(_isRun == true, "It doesn't work");
>         uint _amount = parseInt(amount);
>         ^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DtaPool
Line:        196
Source: 
>     }
>     function _totalDta() public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint totalDta = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DtaPool
Line:        225
Source: 
>         require(pledgors[addr].receiveDate != _date, "Not an administrator");
>         uint _amount = parseInt(amount);
>         ^^^^^^^^^^^^
>         _token.transfer(addr, _amount);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> //pragma solidity >=0.5.0 <0.8.0;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DtaPool
Line:        188
Source: 
>     function approveUser(address addr) public {
>        _token.approve(addr,21000000);
>                            ^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DtaPool
Line:        113
Source: 
>         require(_isRun == true, "It doesn't work");
>         uint totalBalanceSender = _token.balanceOf(msg.sender);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _amount = parseInt(amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DtaPool
Line:        134
Source: 
>         }
>         _token.transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         userDayAmount[msg.sender][_date] += _amount;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DtaPool
Line:        173
Source: 
>         pledgors[msg.sender].amount -= _amount;
>         _token.transfer(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DtaPool
Line:        188
Source: 
>     function approveUser(address addr) public {
>        _token.approve(addr,21000000);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DtaPool
Line:        194
Source: 
>     function totalDtaNumber() public view returns(uint256){
>       return _token.balanceOf(address(this));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DtaPool
Line:        226
Source: 
>         uint _amount = parseInt(amount);
>         _token.transfer(addr, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pledgors[addr].receiveDate = _date;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DtaPool
Line:        135
Source: 
>         _token.transferFrom(msg.sender, address(this), _amount);
>         userDayAmount[msg.sender][_date] += _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         userDfAmount[msg.sender][_date] += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DtaPool
Line:        136
Source: 
>         userDayAmount[msg.sender][_date] += _amount;
>         userDfAmount[msg.sender][_date] += _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint8 f = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DtaPool
Line:        139
Source: 
>         _treeAdd(msg.sender, _amount, f);
>         pledgors[msg.sender].date = _date;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pledgors[msg.sender].amount += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DtaPool
Line:        140
Source: 
>         pledgors[msg.sender].date = _date;
>         pledgors[msg.sender].amount += _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DtaPool
Line:        148
Source: 
>     function _treeAdd(address addr,uint _amount,uint8 f) internal {
>         pledgors[addr].invitarionDta += _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address s = pledgors[addr].superiorAddr;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DtaPool
Line:        176
Source: 
>     function _treeSub(address addr,uint _amount,uint8 f) internal {
>       pledgors[addr].invitarionDta -= _amount;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       address s = pledgors[addr].superiorAddr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DtaPool
Line:        134
Source: 
>         }
>         _token.transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         userDayAmount[msg.sender][_date] += _amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DtaPool
Line:        173
Source: 
>         pledgors[msg.sender].amount -= _amount;
>         _token.transfer(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DtaPool
Line:        188
Source: 
>     function approveUser(address addr) public {
>        _token.approve(addr,21000000);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DtaPool
Line:        226
Source: 
>         uint _amount = parseInt(amount);
>         _token.transfer(addr, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pledgors[addr].receiveDate = _date;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DtaPool
Line:        40
Source: 
>     }
>     Pledgor[] public pledgor;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => Pledgor) public pledgors;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DtaPool
Line:        55
Source: 
>     }
>     Snapshot[] public snapshot;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint => Snapshot) public snapshots;

[0m

---------------------------------------------
For contract 0xe539893109ad320b6b02f59d11f06b56aa6f8603.sol
Tool Runtime = 6.107877849000033 seconds
#############################################