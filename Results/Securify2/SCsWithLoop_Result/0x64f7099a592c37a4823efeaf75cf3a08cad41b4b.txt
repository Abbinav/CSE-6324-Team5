[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UNI3d
Line:        111
Source: 
> 		uint32 _size;
> 		assembly {
>   ^^^^^^^^^^
> 			_size := extcodesize(_to)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    UNI3d
Line:        49
Source: 
> 	}
> 	Info private info;
>  ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNI3d
Line:        139
Source: 
> 
> 	function allInfoFor(address _user) public view returns (uint256 contractBalance, uint256 totalTokenSupply, uint256 truePrice, uint256 buyPrice, uint256 sellPrice, uint256 userUNI, uint256 userAllowance, uint256 userBalance, uint256 userDividends, uint256 userLiquidValue) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		contractBalance = info.uni.balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UNI3d
Line:        150
Source: 
> 
> 	function allowance(address _user, address _spender) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].allowance[_spender];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    UNI3d
Line:        66
Source: 
> 		require(_amount > 0);
> 		require(info.uni.transferFrom(msg.sender, address(this), _amount));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _buy(_amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    UNI3d
Line:        205
Source: 
> 		info.scaledUniPerToken += _tax * FLOAT_SCALAR / info.totalSupply;
> 		info.uni.transfer(msg.sender, amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(msg.sender, address(0x0), _tokens);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    UNI3d
Line:        79
Source: 
> 		info.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);
> 		info.uni.transfer(msg.sender, _dividends);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Withdraw(msg.sender, _dividends);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    UNI3d
Line:        115
Source: 
> 		if (_size > 0) {
> 			require(Callable(_to).tokenCallback(msg.sender, _tokens, _data));
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    UNI3d
Line:        140
Source: 
> 	function allInfoFor(address _user) public view returns (uint256 contractBalance, uint256 totalTokenSupply, uint256 truePrice, uint256 buyPrice, uint256 sellPrice, uint256 userUNI, uint256 userAllowance, uint256 userBalance, uint256 userDividends, uint256 userLiquidValue) {
> 		contractBalance = info.uni.balanceOf(address(this));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalTokenSupply = totalSupply();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    UNI3d
Line:        143
Source: 
> 		(truePrice, buyPrice, sellPrice) = currentPrices();
> 		userUNI = info.uni.balanceOf(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		userAllowance = info.uni.allowance(_user, address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    UNI3d
Line:        144
Source: 
> 		userUNI = info.uni.balanceOf(_user);
> 		userAllowance = info.uni.allowance(_user, address(this));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		userBalance = balanceOf(_user);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UNI3d
Line:        70
Source: 
> 
> 	function sell(uint256 _tokens) external returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(balanceOf(msg.sender) >= _tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UNI3d
Line:        139
Source: 
> 
> 	function allInfoFor(address _user) public view returns (uint256 contractBalance, uint256 totalTokenSupply, uint256 truePrice, uint256 buyPrice, uint256 sellPrice, uint256 userUNI, uint256 userAllowance, uint256 userBalance, uint256 userDividends, uint256 userLiquidValue) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		contractBalance = info.uni.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UNI3d
Line:        154
Source: 
> 
> 	function calculateResult(uint256 _amount, bool _buy, bool _inverse) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 _buyPrice;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UNI3d
Line:        92
Source: 
> 
> 	function transfer(address _to, uint256 _tokens) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _transfer(msg.sender, _to, _tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UNI3d
Line:        96
Source: 
> 
> 	function approve(address _spender, uint256 _tokens) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].allowance[_spender] = _tokens;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UNI3d
Line:        102
Source: 
> 
> 	function transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(info.users[_from].allowance[msg.sender] >= _tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UNI3d
Line:        108
Source: 
> 
> 	function transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(msg.sender, _to, _tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UNI3d
Line:        131
Source: 
> 
> 	function balanceOf(address _user) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].balance;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UNI3d
Line:        135
Source: 
> 
> 	function dividendsOf(address _user) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return uint256(int256(info.scaledUniPerToken * balanceOf(_user)) - info.users[_user].scaledPayout) / FLOAT_SCALAR;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UNI3d
Line:        150
Source: 
> 
> 	function allowance(address _user, address _spender) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].allowance[_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        187
Source: 
> 	function _buy(uint256 _amount) internal returns (uint256 tokens) {
> 		uint256 _tax = _amount * BUY_TAX / 100;
>                  ^^^^^^^^^^^^^^^^^
> 		tokens = calculateResult(_amount, true, false);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        191
Source: 
> 		info.users[msg.sender].balance += tokens;
> 		info.users[msg.sender].scaledPayout += int256(tokens * info.scaledUniPerToken);
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.scaledUniPerToken += _tax * FLOAT_SCALAR / info.totalSupply;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        192
Source: 
> 		info.users[msg.sender].scaledPayout += int256(tokens * info.scaledUniPerToken);
> 		info.scaledUniPerToken += _tax * FLOAT_SCALAR / info.totalSupply;
>                             ^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(address(0x0), msg.sender, tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        162
Source: 
> 			if (_inverse) {
> 				return (2 * _rate - _sqrt(4 * _rate * _rate + _increment * _increment - 4 * _rate * _increment - 8 * _amount * _increment) - _increment) * 1e18 / (2 * _increment);
>             ^^^^^^^^^
> 			} else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        162
Source: 
> 			if (_inverse) {
> 				return (2 * _rate - _sqrt(4 * _rate * _rate + _increment * _increment - 4 * _rate * _increment - 8 * _amount * _increment) - _increment) * 1e18 / (2 * _increment);
>                               ^^^^^^^^^
> 			} else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        162
Source: 
> 			if (_inverse) {
> 				return (2 * _rate - _sqrt(4 * _rate * _rate + _increment * _increment - 4 * _rate * _increment - 8 * _amount * _increment) - _increment) * 1e18 / (2 * _increment);
>                               ^^^^^^^^^^^^^^^^^
> 			} else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        162
Source: 
> 			if (_inverse) {
> 				return (2 * _rate - _sqrt(4 * _rate * _rate + _increment * _increment - 4 * _rate * _increment - 8 * _amount * _increment) - _increment) * 1e18 / (2 * _increment);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^
> 			} else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        162
Source: 
> 			if (_inverse) {
> 				return (2 * _rate - _sqrt(4 * _rate * _rate + _increment * _increment - 4 * _rate * _increment - 8 * _amount * _increment) - _increment) * 1e18 / (2 * _increment);
>                                                                             ^^^^^^^^^
> 			} else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        162
Source: 
> 			if (_inverse) {
> 				return (2 * _rate - _sqrt(4 * _rate * _rate + _increment * _increment - 4 * _rate * _increment - 8 * _amount * _increment) - _increment) * 1e18 / (2 * _increment);
>                                                                             ^^^^^^^^^^^^^^^^^^^^^^
> 			} else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        162
Source: 
> 			if (_inverse) {
> 				return (2 * _rate - _sqrt(4 * _rate * _rate + _increment * _increment - 4 * _rate * _increment - 8 * _amount * _increment) - _increment) * 1e18 / (2 * _increment);
>                                                                                                      ^^^^^^^^^^^
> 			} else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        162
Source: 
> 			if (_inverse) {
> 				return (2 * _rate - _sqrt(4 * _rate * _rate + _increment * _increment - 4 * _rate * _increment - 8 * _amount * _increment) - _increment) * 1e18 / (2 * _increment);
>                                                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^
> 			} else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        162
Source: 
> 			if (_inverse) {
> 				return (2 * _rate - _sqrt(4 * _rate * _rate + _increment * _increment - 4 * _rate * _increment - 8 * _amount * _increment) - _increment) * 1e18 / (2 * _increment);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			} else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        162
Source: 
> 			if (_inverse) {
> 				return (2 * _rate - _sqrt(4 * _rate * _rate + _increment * _increment - 4 * _rate * _increment - 8 * _amount * _increment) - _increment) * 1e18 / (2 * _increment);
>                                                                                                                                                        ^^^^^^^^^^^^^^
> 			} else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        164
Source: 
> 			} else {
> 				return (_sqrt((_increment + 2 * _rate) * (_increment + 2 * _rate) + 8 * _amount * _increment) - _increment - 2 * _rate) * 1e18 / (2 * _increment);
>                                 ^^^^^^^^^
> 			}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        164
Source: 
> 			} else {
> 				return (_sqrt((_increment + 2 * _rate) * (_increment + 2 * _rate) + 8 * _amount * _increment) - _increment - 2 * _rate) * 1e18 / (2 * _increment);
>                                                            ^^^^^^^^^
> 			}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        164
Source: 
> 			} else {
> 				return (_sqrt((_increment + 2 * _rate) * (_increment + 2 * _rate) + 8 * _amount * _increment) - _increment - 2 * _rate) * 1e18 / (2 * _increment);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        164
Source: 
> 			} else {
> 				return (_sqrt((_increment + 2 * _rate) * (_increment + 2 * _rate) + 8 * _amount * _increment) - _increment - 2 * _rate) * 1e18 / (2 * _increment);
>                                                                         ^^^^^^^^^^^
> 			}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        164
Source: 
> 			} else {
> 				return (_sqrt((_increment + 2 * _rate) * (_increment + 2 * _rate) + 8 * _amount * _increment) - _increment - 2 * _rate) * 1e18 / (2 * _increment);
>                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^
> 			}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        164
Source: 
> 			} else {
> 				return (_sqrt((_increment + 2 * _rate) * (_increment + 2 * _rate) + 8 * _amount * _increment) - _increment - 2 * _rate) * 1e18 / (2 * _increment);
>                                                                                                                  ^^^^^^^^^
> 			}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        164
Source: 
> 			} else {
> 				return (_sqrt((_increment + 2 * _rate) * (_increment + 2 * _rate) + 8 * _amount * _increment) - _increment - 2 * _rate) * 1e18 / (2 * _increment);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        164
Source: 
> 			} else {
> 				return (_sqrt((_increment + 2 * _rate) * (_increment + 2 * _rate) + 8 * _amount * _increment) - _increment - 2 * _rate) * 1e18 / (2 * _increment);
>                                                                                                                                       ^^^^^^^^^^^^^^
> 			}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        168
Source: 
> 			if (_inverse) {
> 				return (_rate * _amount + (_increment * (_amount + 1e18) / 2e18) * _amount) / 1e18;
>             ^^^^^^^^^^^^^^^
> 			} else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        168
Source: 
> 			if (_inverse) {
> 				return (_rate * _amount + (_increment * (_amount + 1e18) / 2e18) * _amount) / 1e18;
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			} else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        168
Source: 
> 			if (_inverse) {
> 				return (_rate * _amount + (_increment * (_amount + 1e18) / 2e18) * _amount) / 1e18;
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			} else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        170
Source: 
> 			} else {
> 				return (_rate * _amount - (_increment * (_amount + 1e18) / 2e18) * _amount) / 1e18;
>             ^^^^^^^^^^^^^^^
> 			}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        170
Source: 
> 			} else {
> 				return (_rate * _amount - (_increment * (_amount + 1e18) / 2e18) * _amount) / 1e18;
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        170
Source: 
> 			} else {
> 				return (_rate * _amount - (_increment * (_amount + 1e18) / 2e18) * _amount) / 1e18;
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        127
Source: 
> 		truePrice = STARTING_PRICE + INCREMENT * totalSupply() / 1e18;
> 		buyPrice = truePrice * 100 / (100 - BUY_TAX);
>              ^^^^^^^^^^^^^^^
> 		sellPrice = truePrice * (100 - SELL_TAX) / 100;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        128
Source: 
> 		buyPrice = truePrice * 100 / (100 - BUY_TAX);
> 		sellPrice = truePrice * (100 - SELL_TAX) / 100;
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        200
Source: 
> 		amount = calculateResult(_tokens, false, false);
> 		uint256 _tax = amount * SELL_TAX / (100 - SELL_TAX);
>                  ^^^^^^^^^^^^^^^^^
> 		info.totalSupply -= _tokens;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        204
Source: 
> 		info.users[msg.sender].scaledPayout -= int256(_tokens * info.scaledUniPerToken);
> 		info.scaledUniPerToken += _tax * FLOAT_SCALAR / info.totalSupply;
>                             ^^^^^^^^^^^^^^^^^^^
> 		info.uni.transfer(msg.sender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        78
Source: 
> 		require(_dividends > 0);
> 		info.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.uni.transfer(msg.sender, _dividends);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        87
Source: 
> 		require(_dividends > 0);
> 		info.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Reinvest(msg.sender, _dividends);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        179
Source: 
> 		info.users[_from].balance -= _tokens;
> 		info.users[_from].scaledPayout -= int256(_tokens * info.scaledUniPerToken);
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[_to].balance += _tokens;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UNI3d
Line:        181
Source: 
> 		info.users[_to].balance += _tokens;
> 		info.users[_to].scaledPayout += int256(_tokens * info.scaledUniPerToken);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(_from, _to, _tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    UNI3d
Line:        154
Source: 
> 
> 	function calculateResult(uint256 _amount, bool _buy, bool _inverse) public view returns (uint256) {
>                                            ^^^^^^^^^
> 		uint256 _buyPrice;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNI3d
Line:        33
Source: 
> 
> 	string constant public name = "UNI3d";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	string constant public symbol = "U3D";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNI3d
Line:        34
Source: 
> 	string constant public name = "UNI3d";
> 	string constant public symbol = "U3D";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint8 constant public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNI3d
Line:        35
Source: 
> 	string constant public symbol = "U3D";
> 	uint8 constant public decimals = 18;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNI3d
Line:        76
Source: 
> 	function withdraw() external returns (uint256) {
> 		uint256 _dividends = dividendsOf(msg.sender);
>   ^^^^^^^^^^^^^^^^^^
> 		require(_dividends > 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNI3d
Line:        85
Source: 
> 	function reinvest() external returns (uint256) {
> 		uint256 _dividends = dividendsOf(msg.sender);
>   ^^^^^^^^^^^^^^^^^^
> 		require(_dividends > 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNI3d
Line:        110
Source: 
> 		_transfer(msg.sender, _to, _tokens);
> 		uint32 _size;
>   ^^^^^^^^^^^^
> 		assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNI3d
Line:        155
Source: 
> 	function calculateResult(uint256 _amount, bool _buy, bool _inverse) public view returns (uint256) {
> 		uint256 _buyPrice;
>   ^^^^^^^^^^^^^^^^^
> 		uint256 _sellPrice;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNI3d
Line:        156
Source: 
> 		uint256 _buyPrice;
> 		uint256 _sellPrice;
>   ^^^^^^^^^^^^^^^^^^
> 		( , _buyPrice, _sellPrice) = currentPrices();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNI3d
Line:        158
Source: 
> 		( , _buyPrice, _sellPrice) = currentPrices();
> 		uint256 _rate = (_buy ? _buyPrice : _sellPrice);
>   ^^^^^^^^^^^^^
> 		uint256 _increment = INCREMENT * (_buy ? 100 : (100 - SELL_TAX)) / (_buy ? (100 - BUY_TAX) : 100);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNI3d
Line:        159
Source: 
> 		uint256 _rate = (_buy ? _buyPrice : _sellPrice);
> 		uint256 _increment = INCREMENT * (_buy ? 100 : (100 - SELL_TAX)) / (_buy ? (100 - BUY_TAX) : 100);
>   ^^^^^^^^^^^^^^^^^^
> 		if ((_buy && !_inverse) || (!_buy && _inverse)) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNI3d
Line:        187
Source: 
> 	function _buy(uint256 _amount) internal returns (uint256 tokens) {
> 		uint256 _tax = _amount * BUY_TAX / 100;
>   ^^^^^^^^^^^^
> 		tokens = calculateResult(_amount, true, false);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNI3d
Line:        200
Source: 
> 		amount = calculateResult(_tokens, false, false);
> 		uint256 _tax = amount * SELL_TAX / (100 - SELL_TAX);
>   ^^^^^^^^^^^^
> 		info.totalSupply -= _tokens;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UNI3d
Line:        212
Source: 
> 	function _sqrt(uint256 _n) internal pure returns (uint256 result) {
> 		uint256 _tmp = (_n + 1) / 2;
>   ^^^^^^^^^^^^
> 		result = _n;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        12
Source: 
> //pragma solidity ^0.5.17;
> pragma solidity >=0.5 <0.7.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UNI3d
Line:        66
Source: 
> 		require(_amount > 0);
> 		require(info.uni.transferFrom(msg.sender, address(this), _amount));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _buy(_amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UNI3d
Line:        115
Source: 
> 		if (_size > 0) {
> 			require(Callable(_to).tokenCallback(msg.sender, _tokens, _data));
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UNI3d
Line:        205
Source: 
> 		info.scaledUniPerToken += _tax * FLOAT_SCALAR / info.totalSupply;
> 		info.uni.transfer(msg.sender, amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(msg.sender, address(0x0), _tokens);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UNI3d
Line:        79
Source: 
> 		info.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);
> 		info.uni.transfer(msg.sender, _dividends);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Withdraw(msg.sender, _dividends);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UNI3d
Line:        140
Source: 
> 	function allInfoFor(address _user) public view returns (uint256 contractBalance, uint256 totalTokenSupply, uint256 truePrice, uint256 buyPrice, uint256 sellPrice, uint256 userUNI, uint256 userAllowance, uint256 userBalance, uint256 userDividends, uint256 userLiquidValue) {
> 		contractBalance = info.uni.balanceOf(address(this));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalTokenSupply = totalSupply();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UNI3d
Line:        143
Source: 
> 		(truePrice, buyPrice, sellPrice) = currentPrices();
> 		userUNI = info.uni.balanceOf(_user);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		userAllowance = info.uni.allowance(_user, address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UNI3d
Line:        144
Source: 
> 		userUNI = info.uni.balanceOf(_user);
> 		userAllowance = info.uni.allowance(_user, address(this));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		userBalance = balanceOf(_user);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    UNI3d
Line:        114
Source: 
> 		}
> 		if (_size > 0) {
>       ^^^^^
> 			require(Callable(_to).tokenCallback(msg.sender, _tokens, _data));

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    UNI3d
Line:        49
Source: 
> 	}
> 	Info private info;
>  ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UNI3d
Line:        78
Source: 
> 		require(_dividends > 0);
> 		info.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.uni.transfer(msg.sender, _dividends);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UNI3d
Line:        87
Source: 
> 		require(_dividends > 0);
> 		info.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Reinvest(msg.sender, _dividends);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UNI3d
Line:        178
Source: 
> 		require(info.users[_from].balance >= _tokens);
> 		info.users[_from].balance -= _tokens;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[_from].scaledPayout -= int256(_tokens * info.scaledUniPerToken);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UNI3d
Line:        179
Source: 
> 		info.users[_from].balance -= _tokens;
> 		info.users[_from].scaledPayout -= int256(_tokens * info.scaledUniPerToken);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[_to].balance += _tokens;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UNI3d
Line:        180
Source: 
> 		info.users[_from].scaledPayout -= int256(_tokens * info.scaledUniPerToken);
> 		info.users[_to].balance += _tokens;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[_to].scaledPayout += int256(_tokens * info.scaledUniPerToken);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UNI3d
Line:        181
Source: 
> 		info.users[_to].balance += _tokens;
> 		info.users[_to].scaledPayout += int256(_tokens * info.scaledUniPerToken);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(_from, _to, _tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UNI3d
Line:        189
Source: 
> 		tokens = calculateResult(_amount, true, false);
> 		info.totalSupply += tokens;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].balance += tokens;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UNI3d
Line:        190
Source: 
> 		info.totalSupply += tokens;
> 		info.users[msg.sender].balance += tokens;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].scaledPayout += int256(tokens * info.scaledUniPerToken);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UNI3d
Line:        191
Source: 
> 		info.users[msg.sender].balance += tokens;
> 		info.users[msg.sender].scaledPayout += int256(tokens * info.scaledUniPerToken);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.scaledUniPerToken += _tax * FLOAT_SCALAR / info.totalSupply;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UNI3d
Line:        192
Source: 
> 		info.users[msg.sender].scaledPayout += int256(tokens * info.scaledUniPerToken);
> 		info.scaledUniPerToken += _tax * FLOAT_SCALAR / info.totalSupply;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(address(0x0), msg.sender, tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UNI3d
Line:        97
Source: 
> 	function approve(address _spender, uint256 _tokens) external returns (bool) {
> 		info.users[msg.sender].allowance[_spender] = _tokens;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(msg.sender, _spender, _tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UNI3d
Line:        205
Source: 
> 		info.scaledUniPerToken += _tax * FLOAT_SCALAR / info.totalSupply;
> 		info.uni.transfer(msg.sender, amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(msg.sender, address(0x0), _tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UNI3d
Line:        79
Source: 
> 		info.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);
> 		info.uni.transfer(msg.sender, _dividends);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Withdraw(msg.sender, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UNI3d
Line:        33
Source: 
> 
> 	string constant public name = "UNI3d";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	string constant public symbol = "U3D";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UNI3d
Line:        34
Source: 
> 	string constant public name = "UNI3d";
> 	string constant public symbol = "U3D";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint8 constant public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UNI3d
Line:        35
Source: 
> 	string constant public symbol = "U3D";
> 	uint8 constant public decimals = 18;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m

---------------------------------------------
For contract 0x64f7099a592c37a4823efeaf75cf3a08cad41b4b.sol
Tool Runtime = 9.36721376100013 seconds
#############################################