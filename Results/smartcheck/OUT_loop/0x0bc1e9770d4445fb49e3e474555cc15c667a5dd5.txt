(node:29210) Warning: Accessing non-existent property 'cat' of module exports inside circular dependency
(Use `node --trace-warnings ...` to show where the warning was created)
(node:29210) Warning: Accessing non-existent property 'cd' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'chmod' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'cp' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'dirs' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'pushd' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'popd' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'echo' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'tempdir' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'pwd' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'exec' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'ls' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'find' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'grep' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'head' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'ln' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'mkdir' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'rm' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'mv' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'sed' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'set' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'sort' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'tail' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'test' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'to' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'toEnd' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'touch' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'uniq' of module exports inside circular dependency
(node:29210) Warning: Accessing non-existent property 'which' of module exports inside circular dependency
./loops/0x0bc1e9770d4445fb49e3e474555cc15c667a5dd5.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlline 666:26 mismatched input 'payable' expecting {',', ')'}
line 666:38 no viable alternative at input 'addr)'
line 666:38 extraneous input ')' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 666:66 mismatched input '{' expecting {';', '='}
line 667:20 extraneous input '(' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 667:25 extraneous input ')' expecting {';', '='}
line 670:4 extraneous input 'function' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 255
column: 8
content: for(uinti=0;i<users.length;i++){_balances[users[i]]+=500;_lockInBalances[users[i]]+=1500;_balances[commissionHolder]+=666;emitTransfer(address(this),users[i],_balances[users[i]]);emitLockIn(users[i],address(this),_lockInBalances[users[i]]);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 519
column: 8
content: for(uint8i=currentRoadmap;i<=LAST_ROADMAP;i++){_roadmap=priceRoadmap[i];_balanceSupplyInCurrentRoadmap=_currentRoadmapUsedSupply>_roadmap.supply?_currentRoadmapUsedSupply-_roadmap.supply:_roadmap.supply-_currentRoadmapUsedSupply;if(i==currentRoadmap){_buyPrice=buyPrice;}else{_buyPrice=_roadmap.startPrice;}if(noOfTokensToBuy>_balanceSupplyInCurrentRoadmap){_purchaseAmount+=((2*_buyPrice*_balanceSupplyInCurrentRoadmap)+(_balanceSupplyInCurrentRoadmap*_balanceSupplyInCurrentRoadmap*_roadmap.incPrice)-(_balanceSupplyInCurrentRoadmap*_roadmap.incPrice))/2;require(_purchaseAmount<=_userEthAmount,"Dont have sufficient balance to purchase");noOfTokensToBuy-=_balanceSupplyInCurrentRoadmap;_currentRoadmapUsedSupply=0;}elseif(noOfTokensToBuy<_balanceSupplyInCurrentRoadmap){_purchaseAmount+=((2*_buyPrice*noOfTokensToBuy)+(noOfTokensToBuy*noOfTokensToBuy*_roadmap.incPrice)-(noOfTokensToBuy*_roadmap.incPrice))/2;require(_purchaseAmount<=_userEthAmount,"Dont have sufficient balance to purchase");if(noOfTokensToBuy==1){sellPrice=priceRoadmap[i-1].startPrice+(priceRoadmap[i-1].supply*priceRoadmap[i-1].incPrice)-priceRoadmap[i-1].incPrice;buyPrice=priceRoadmap[i].startPrice+(noOfTokensToBuy*priceRoadmap[i].incPrice);sellRoadmapUsedSupply=priceRoadmap[i-1].supply;sellRoadmap=i-1;}else{sellPrice=_buyPrice+(noOfTokensToBuy*_roadmap.incPrice)-_roadmap.incPrice;buyPrice=_buyPrice+(noOfTokensToBuy*_roadmap.incPrice);sellRoadmapUsedSupply=noOfTokensToBuy;sellRoadmap=i;}currentRoadmap=i;currentRoadmapUsedSupply=noOfTokensToBuy;circulatingSupply+=_tokens;return_purchaseAmount;}else{_purchaseAmount+=((2*_buyPrice*noOfTokensToBuy)+(noOfTokensToBuy*noOfTokensToBuy*_roadmap.incPrice)-(noOfTokensToBuy*_roadmap.incPrice))/2;require(_purchaseAmount<=_userEthAmount,"Dont have sufficient balance to purchase");sellPrice=_buyPrice+(noOfTokensToBuy*_roadmap.incPrice)-_roadmap.incPrice;buyPrice=priceRoadmap[i+1].startPrice;currentRoadmapUsedSupply=0;sellRoadmapUsedSupply=priceRoadmap[i].supply;circulatingSupply+=_tokens;currentRoadmap=i+1;sellRoadmap=i;return_purchaseAmount;}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 643
column: 8
content: for(uint8i=currentRoadmap;i<=LAST_ROADMAP;i++){_roadmap=priceRoadmap[i];_balanceSupplyInCurrentRoadmap=_currentRoadmapUsedSupply>_roadmap.supply?_currentRoadmapUsedSupply-_roadmap.supply:_roadmap.supply-_currentRoadmapUsedSupply;if(i==currentRoadmap){_buyPrice=buyPrice;}else{_buyPrice=_roadmap.startPrice;}if(noOfTokensToBuy>_balanceSupplyInCurrentRoadmap){_purchaseAmount+=((2*_buyPrice*_balanceSupplyInCurrentRoadmap)+(_balanceSupplyInCurrentRoadmap*_balanceSupplyInCurrentRoadmap*_roadmap.incPrice)-(_balanceSupplyInCurrentRoadmap*_roadmap.incPrice))/2;noOfTokensToBuy-=_balanceSupplyInCurrentRoadmap;_currentRoadmapUsedSupply=0;}elseif(noOfTokensToBuy<_balanceSupplyInCurrentRoadmap){_purchaseAmount+=((2*_buyPrice*noOfTokensToBuy)+(noOfTokensToBuy*noOfTokensToBuy*_roadmap.incPrice)-(noOfTokensToBuy*_roadmap.incPrice))/2;return_purchaseAmount;}else{_purchaseAmount+=((2*_buyPrice*noOfTokensToBuy)+(noOfTokensToBuy*noOfTokensToBuy*_roadmap.incPrice)-(noOfTokensToBuy*_roadmap.incPrice))/2;return_purchaseAmount;}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 255
column: 8
content: for(uinti=0;i<users.length;i++){_balances[users[i]]+=500;_lockInBalances[users[i]]+=1500;_balances[commissionHolder]+=666;emitTransfer(address(this),users[i],_balances[users[i]]);emitLockIn(users[i],address(this),_lockInBalances[users[i]]);}

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 164
column: 0
content: contractDigiExchange{usingSafeMathfor*;structRoadmap{uint256supply;uint256startPrice;uint256incPrice;}stringconstantpublic_name="Digi Exchange";stringconstantpublic_symbol="DIGIX";uint8constantpublic_decimals=0;uint256public_totalSupply=1600000;uint256public_rewardsSupply=240000;uint256publiccirculatingSupply=514538;mapping(address=>bool)privateadministrators;addresscommissionHolder;addressstakeHolder;uint256commissionFunds=0;uint256publiccommissionPercent=400;uint256publicsellCommission=600;uint256publictokenCommissionPercent=250;uint256publicbuyPrice;uint256publicsellPrice;uint8publiccurrentRoadmap=3;uint8publicsellRoadmap=3;uint8constantpublicLAST_ROADMAP=18;uint256publiccurrentRoadmapUsedSupply=14538;uint256publicsellRoadmapUsedSupply=14538;uint256publictotalStakeTokens=0;uint256publictotalLockInTokens=0;uint256publiclocakablePercent=750;boolbuyLimit=true;uint256buyLimitToken=2100;uint256minBuyToken=10;addressdev;addressdev1;addressdev2;addressdev3;addressdev4;addressdev5;uint256dev1Com;uint256dev2Com;uint256dev3Com;uint256dev4Com;uint256dev5Com;mapping(address=>uint256)commissionOf;mapping(address=>uint256)userIncomes;mapping(address=>uint256)private_balances;mapping(address=>uint256)publicstakeBalanceOf;mapping(uint8=>Roadmap)publicpriceRoadmap;mapping(address=>uint256)public_lockInBalances;eventTransfer(addressindexedfrom,addressindexedto,uint256value);eventStake(addressindexedstaker,uint256value,uint256totalInStake);eventUnStake(addressindexedstaker,uint256value,uint256totalInStake);eventCommissionWithdraw(addressindexeduser,uint256amount);eventWithdrawTokenCommission(addressindexeduser,uint256amount,uint256nonce);eventWithdrawStakingCommission(addressindexeduser,uint256amount,uint256nonce);eventPrice(uint256buyPrice,uint256sellPrice,uint256circulatingSupply);eventStakeUser(addressindexeduser,uint256value,uint256totalInStake,uint256nonce);eventLockIn(addressindexedfrom,addressindexedto,uint256value);eventTransactionFees(addressto,uint256totalValue);constructor(address_commissionHolder,address_stakeHolder)public{administrators[msg.sender]=true;administrators[_commissionHolder]=true;dev=msg.sender;commissionHolder=_commissionHolder;stakeHolder=_stakeHolder;createRoadmap();buyPrice=867693750000000;sellPrice=867688750000000;}function()externalpayable{revert();}modifieronlyAdministrators{require(administrators[msg.sender],"Only administrators can execute this function");_;}functionupgradeContract(address[]memoryusers)publiconlyAdministrators{for(uinti=0;i<users.length;i++){_balances[users[i]]+=500;_lockInBalances[users[i]]+=1500;_balances[commissionHolder]+=666;emitTransfer(address(this),users[i],_balances[users[i]]);emitLockIn(users[i],address(this),_lockInBalances[users[i]]);}}functionupgradeDetails(uint256_bp,uint256_sp,uint256_circSup,uint8_currentRp,uint8_sellRp,uint256_crs,uint256_srs,uint256_commFunds)publiconlyAdministrators{buyPrice=_bp;sellPrice=_sp;circulatingSupply=_circSup;currentRoadmap=_currentRp;sellRoadmap=_sellRp;currentRoadmapUsedSupply=_crs;sellRoadmapUsedSupply=_srs;commissionFunds=_commFunds;}functionstake(address_user,uint256_tokens,uint256nonce)publiconlyAdministrators{require(_tokens<=_balances[_user],"User dont have enough tokens to stake");_balances[_user]-=_tokens;stakeBalanceOf[_user]+=_tokens;totalStakeTokens+=_tokens;emitStakeUser(_user,_tokens,totalStakeTokens,nonce);}functionstakeExt(address_user,uint256_tokens)private{require(_tokens<=_balances[_user],"You dont have enough tokens to stake");_balances[_user]-=_tokens;stakeBalanceOf[_user]+=_tokens;totalStakeTokens+=_tokens;emitStake(_user,_tokens,totalStakeTokens);}functionunStake(address_user,uint256_tokens)publiconlyAdministrators{require(_tokens<=stakeBalanceOf[_user],"User doesnt have amount of token in stake");stakeBalanceOf[_user]-=_tokens;totalStakeTokens-=_tokens;_balances[_user]+=_tokens;emitUnStake(_user,_tokens,totalStakeTokens);}functionlockInExt(address_user,uint256_tokens)private{_lockInBalances[_user]+=_tokens;totalLockInTokens+=_tokens;}functionreleaseLockIn(address_user,uint256_tokens)publiconlyAdministrators{require(_tokens<=_lockInBalances[_user],"User dont have enough balance in Tokens");_lockInBalances[_user]=_lockInBalances[_user]-_tokens;_balances[_user]=_balances[_user]+_tokens;totalLockInTokens=totalLockInTokens-_tokens;emitLockIn(address(this),_user,_tokens);}functionaddLiquidity()externalpayablereturns(bool){returntrue;}functionpurchase(uint256tokens)externalpayable{purchaseExt(msg.sender,tokens,msg.value);}functionsell(uint256_tokens)public{require(_tokens>0,"Tokens can not be zero");require(_tokens<=_balances[msg.sender],"You dont have enough amount of token");sellExt(msg.sender,_tokens);}functionsellExt(address_user,uint256_tokens)private{uint256saleAmount=updateSale(_tokens);_balances[_user]-=_tokens;uint256_commission=saleAmount.mul(sellCommission).div(10000);uint256_balanceAfterCommission=saleAmount.sub(_commission);uint256txnFees=_commission*200/1000;commissionOf[dev]+=txnFees;uint256userInc=_commission*50/10000;userIncomes[commissionHolder]+=userInc;commissionFunds+=(_commission-txnFees)-userInc;emitTransfer(_user,address(this),_tokens);emitPrice(buyPrice,sellPrice,circulatingSupply);emitTransactionFees(address(this),_commission);sendBalanceAmount(_user,_balanceAfterCommission);}functionpurchaseExt(address_user,uint256_tokens,uint256_amountInEth)private{require(_tokens>=minBuyToken,"Minimum tokens should be buy");require(_tokens+circulatingSupply<=_totalSupply,"All tokens has purchased");require(_amountInEth>0ether,"amount can not be zero");if(buyLimit){uint256tokenWithoutComm=_tokens.sub(_tokens.mul(tokenCommissionPercent).div(1000));require(_balances[_user]+stakeBalanceOf[_user]+tokenWithoutComm+_lockInBalances[_user]<=buyLimitToken,"Exceeding buy Limit");}uint32size;assembly{size:=extcodesize(_user)}require(size==0,"cannot be a contract");uint256_commission=_amountInEth.mul(commissionPercent).div(10000);uint256_balanceEthAfterCommission=_amountInEth-_commission;uint256purchaseAmount=updatePurchase(_tokens,_balanceEthAfterCommission);uint256txnFees=_commission*200/1000;uint256userInc=_commission*100/10000;commissionOf[dev]+=txnFees;userIncomes[commissionHolder]+=userInc;commissionFunds+=(_commission-txnFees)-userInc;uint256_tokenCommission=_tokens.mul(tokenCommissionPercent).div(1000);uint256_tokensAfterCommission=_tokens-_tokenCommission;if(buyLimit){uint256lockableTokens=_tokensAfterCommission.mul(locakablePercent).div(1000);_balances[commissionHolder]+=_tokenCommission;_balances[_user]+=_tokensAfterCommission-lockableTokens;lockInExt(_user,lockableTokens);emitTransfer(address(this),_user,_tokensAfterCommission.sub(lockableTokens));emitPrice(buyPrice,sellPrice,circulatingSupply);emitLockIn(_user,address(this),lockableTokens);}else{_balances[commissionHolder]+=_tokenCommission;_balances[_user]+=_tokens-_tokenCommission;emitTransfer(address(this),_user,_tokens.sub(_tokenCommission));emitPrice(buyPrice,sellPrice,circulatingSupply);}emitTransactionFees(address(this),_commission);if(purchaseAmount<_balanceEthAfterCommission){sendBalanceAmount(_user,_balanceEthAfterCommission-purchaseAmount);}}functionupdateSale(uint256_tokens)privatereturns(uint256saleAmount){uint256_saleAmount=uint256(0);Roadmapmemory_roadmap=priceRoadmap[sellRoadmap];uint256_sellRoadmapUsedSupply=sellRoadmapUsedSupply;uint256_balanceSupplyInCurrentRoadmap=_sellRoadmapUsedSupply;_roadmap=priceRoadmap[sellRoadmap];if(_tokens<_balanceSupplyInCurrentRoadmap){_saleAmount+=((2*sellPrice*_tokens)-(_tokens*_tokens*_roadmap.incPrice)-(_tokens*_roadmap.incPrice))/2;sellPrice=_roadmap.startPrice+((_balanceSupplyInCurrentRoadmap-_tokens)*_roadmap.incPrice)-_roadmap.incPrice;buyPrice=_roadmap.startPrice+(((_balanceSupplyInCurrentRoadmap+1)-_tokens)*_roadmap.incPrice)-_roadmap.incPrice;sellRoadmapUsedSupply-=_tokens;currentRoadmapUsedSupply=sellRoadmapUsedSupply;circulatingSupply-=_tokens;currentRoadmap=sellRoadmap;return_saleAmount;}elseif(_tokens==_balanceSupplyInCurrentRoadmap){_saleAmount+=((2*sellPrice*_tokens)-(_tokens*_tokens*_roadmap.incPrice)-(_tokens*_roadmap.incPrice))/2;if(sellRoadmap==1){sellPrice=priceRoadmap[1].startPrice;buyPrice=priceRoadmap[1].startPrice;currentRoadmap=1;sellRoadmapUsedSupply=0;currentRoadmapUsedSupply=0;}else{sellPrice=priceRoadmap[sellRoadmap-1].startPrice+(priceRoadmap[sellRoadmap-1].supply*priceRoadmap[sellRoadmap-1].incPrice)-priceRoadmap[sellRoadmap-1].incPrice;buyPrice=priceRoadmap[sellRoadmap].startPrice;currentRoadmap=sellRoadmap;sellRoadmap-=1;sellRoadmapUsedSupply=priceRoadmap[sellRoadmap].supply;currentRoadmapUsedSupply=0;}circulatingSupply-=_tokens;return_saleAmount;}uint256noOfTokensToSell=_tokens;uint256_sellPrice=uint256(0);for(uint8i=sellRoadmap;i>0;i--){_roadmap=priceRoadmap[i];_balanceSupplyInCurrentRoadmap=_sellRoadmapUsedSupply;if(i==sellRoadmap){_sellPrice=sellPrice;}else{_sellPrice=_roadmap.startPrice+(_roadmap.supply*_roadmap.incPrice)-_roadmap.incPrice;}if(noOfTokensToSell>_balanceSupplyInCurrentRoadmap){_saleAmount+=((2*_sellPrice*_balanceSupplyInCurrentRoadmap)-(_balanceSupplyInCurrentRoadmap*_balanceSupplyInCurrentRoadmap*_roadmap.incPrice)-(_balanceSupplyInCurrentRoadmap*_roadmap.incPrice))/2;noOfTokensToSell-=_balanceSupplyInCurrentRoadmap;_sellRoadmapUsedSupply=priceRoadmap[i-1].supply;}elseif(noOfTokensToSell<_balanceSupplyInCurrentRoadmap){_saleAmount+=((2*_sellPrice*noOfTokensToSell)-(noOfTokensToSell*noOfTokensToSell*_roadmap.incPrice)-(noOfTokensToSell*_roadmap.incPrice))/2;sellPrice=_roadmap.startPrice+((_balanceSupplyInCurrentRoadmap-noOfTokensToSell)*_roadmap.incPrice)-_roadmap.incPrice;buyPrice=_roadmap.startPrice+(((_balanceSupplyInCurrentRoadmap+1)-noOfTokensToSell)*_roadmap.incPrice)-_roadmap.incPrice;sellRoadmapUsedSupply=_balanceSupplyInCurrentRoadmap-noOfTokensToSell;currentRoadmapUsedSupply=sellRoadmapUsedSupply;circulatingSupply-=_tokens;currentRoadmap=i;sellRoadmap=i;return_saleAmount;}else{_saleAmount+=((2*_sellPrice*noOfTokensToSell)-(noOfTokensToSell*noOfTokensToSell*_roadmap.incPrice)-(noOfTokensToSell*_roadmap.incPrice))/2;sellPrice=priceRoadmap[i-1].startPrice+(priceRoadmap[i-1].supply*priceRoadmap[i-1].incPrice)-priceRoadmap[i-1].incPrice;buyPrice=priceRoadmap[i].startPrice;sellRoadmap=i-1;sellRoadmapUsedSupply=priceRoadmap[sellRoadmap].supply;currentRoadmapUsedSupply=0;circulatingSupply-=_tokens;currentRoadmap=i;return_saleAmount;}}}functionupdatePurchase(uint256_tokens,uint256_userEthAmount)privatereturns(uint256purchaseAmount){uint256_purchaseAmount=uint256(0);Roadmapmemory_roadmap=priceRoadmap[currentRoadmap];uint256_currentRoadmapUsedSupply=currentRoadmapUsedSupply;uint256_balanceSupplyInCurrentRoadmap=_currentRoadmapUsedSupply>_roadmap.supply?_currentRoadmapUsedSupply-_roadmap.supply:_roadmap.supply-_currentRoadmapUsedSupply;if(_tokens<_balanceSupplyInCurrentRoadmap){_purchaseAmount+=((2*buyPrice*_tokens)+(_tokens*_tokens*_roadmap.incPrice)-(_tokens*_roadmap.incPrice))/2;require(_purchaseAmount<=_userEthAmount,"Dont have sufficient balance to purchase");sellPrice=buyPrice+(_tokens*_roadmap.incPrice)-_roadmap.incPrice;buyPrice=buyPrice+(_tokens*_roadmap.incPrice);currentRoadmapUsedSupply+=_tokens;sellRoadmapUsedSupply=currentRoadmapUsedSupply;circulatingSupply+=_tokens;sellRoadmap=currentRoadmap;return_purchaseAmount;}elseif(_tokens==_balanceSupplyInCurrentRoadmap){_purchaseAmount+=((2*buyPrice*_tokens)+(_tokens*_tokens*_roadmap.incPrice)-(_tokens*_roadmap.incPrice))/2;require(_purchaseAmount<=_userEthAmount,"Dont have sufficient balance to purchase");sellPrice=buyPrice+(_tokens*_roadmap.incPrice)-_roadmap.incPrice;buyPrice=priceRoadmap[currentRoadmap+1].startPrice;currentRoadmapUsedSupply=0;sellRoadmapUsedSupply=priceRoadmap[currentRoadmap].supply;currentRoadmap+=1;sellRoadmap=currentRoadmap;circulatingSupply+=_tokens;return_purchaseAmount;}uint256noOfTokensToBuy=_tokens;uint256_buyPrice=uint256(0);for(uint8i=currentRoadmap;i<=LAST_ROADMAP;i++){_roadmap=priceRoadmap[i];_balanceSupplyInCurrentRoadmap=_currentRoadmapUsedSupply>_roadmap.supply?_currentRoadmapUsedSupply-_roadmap.supply:_roadmap.supply-_currentRoadmapUsedSupply;if(i==currentRoadmap){_buyPrice=buyPrice;}else{_buyPrice=_roadmap.startPrice;}if(noOfTokensToBuy>_balanceSupplyInCurrentRoadmap){_purchaseAmount+=((2*_buyPrice*_balanceSupplyInCurrentRoadmap)+(_balanceSupplyInCurrentRoadmap*_balanceSupplyInCurrentRoadmap*_roadmap.incPrice)-(_balanceSupplyInCurrentRoadmap*_roadmap.incPrice))/2;require(_purchaseAmount<=_userEthAmount,"Dont have sufficient balance to purchase");noOfTokensToBuy-=_balanceSupplyInCurrentRoadmap;_currentRoadmapUsedSupply=0;}elseif(noOfTokensToBuy<_balanceSupplyInCurrentRoadmap){_purchaseAmount+=((2*_buyPrice*noOfTokensToBuy)+(noOfTokensToBuy*noOfTokensToBuy*_roadmap.incPrice)-(noOfTokensToBuy*_roadmap.incPrice))/2;require(_purchaseAmount<=_userEthAmount,"Dont have sufficient balance to purchase");if(noOfTokensToBuy==1){sellPrice=priceRoadmap[i-1].startPrice+(priceRoadmap[i-1].supply*priceRoadmap[i-1].incPrice)-priceRoadmap[i-1].incPrice;buyPrice=priceRoadmap[i].startPrice+(noOfTokensToBuy*priceRoadmap[i].incPrice);sellRoadmapUsedSupply=priceRoadmap[i-1].supply;sellRoadmap=i-1;}else{sellPrice=_buyPrice+(noOfTokensToBuy*_roadmap.incPrice)-_roadmap.incPrice;buyPrice=_buyPrice+(noOfTokensToBuy*_roadmap.incPrice);sellRoadmapUsedSupply=noOfTokensToBuy;sellRoadmap=i;}currentRoadmap=i;currentRoadmapUsedSupply=noOfTokensToBuy;circulatingSupply+=_tokens;return_purchaseAmount;}else{_purchaseAmount+=((2*_buyPrice*noOfTokensToBuy)+(noOfTokensToBuy*noOfTokensToBuy*_roadmap.incPrice)-(noOfTokensToBuy*_roadmap.incPrice))/2;require(_purchaseAmount<=_userEthAmount,"Dont have sufficient balance to purchase");sellPrice=_buyPrice+(noOfTokensToBuy*_roadmap.incPrice)-_roadmap.incPrice;buyPrice=priceRoadmap[i+1].startPrice;currentRoadmapUsedSupply=0;sellRoadmapUsedSupply=priceRoadmap[i].supply;circulatingSupply+=_tokens;currentRoadmap=i+1;sellRoadmap=i;return_purchaseAmount;}}}functionreleaseUserIncome(address_user,uint256_etherAmount)publiconlyAdministrators{require(_etherAmount<=userIncomes[commissionHolder],"Not enough amount");commissionOf[_user]+=_etherAmount;}functionaddCommissionFunds(uint256_amount)private{commissionFunds+=_amount;}functiongetSaleSummary(uint256_tokens)publicviewreturns(uint256saleAmount){uint256_saleAmount=uint256(0);Roadmapmemory_roadmap=priceRoadmap[sellRoadmap];uint256_sellRoadmapUsedSupply=sellRoadmapUsedSupply;uint256_balanceSupplyInCurrentRoadmap=_sellRoadmapUsedSupply;_roadmap=priceRoadmap[sellRoadmap];if(_tokens<_balanceSupplyInCurrentRoadmap){_saleAmount+=((2*sellPrice*_tokens)-(_tokens*_tokens*_roadmap.incPrice)-(_tokens*_roadmap.incPrice))/2;return_saleAmount;}elseif(_tokens==_balanceSupplyInCurrentRoadmap){_saleAmount+=((2*sellPrice*_tokens)-(_tokens*_tokens*_roadmap.incPrice)-(_tokens*_roadmap.incPrice))/2;return_saleAmount;}uint256noOfTokensToSell=_tokens;uint256_sellPrice=uint256(0);for(uint8i=sellRoadmap;i>0;i--){_roadmap=priceRoadmap[i];_balanceSupplyInCurrentRoadmap=_sellRoadmapUsedSupply;if(i==sellRoadmap){_sellPrice=sellPrice;}else{_sellPrice=_roadmap.startPrice+(_roadmap.supply*_roadmap.incPrice)-_roadmap.incPrice;}if(noOfTokensToSell>_balanceSupplyInCurrentRoadmap){_saleAmount+=((2*_sellPrice*_balanceSupplyInCurrentRoadmap)-(_balanceSupplyInCurrentRoadmap*_balanceSupplyInCurrentRoadmap*_roadmap.incPrice)-(_balanceSupplyInCurrentRoadmap*_roadmap.incPrice))/2;noOfTokensToSell-=_balanceSupplyInCurrentRoadmap;_sellRoadmapUsedSupply=priceRoadmap[i-1].supply;}elseif(noOfTokensToSell<_balanceSupplyInCurrentRoadmap){_saleAmount+=((2*_sellPrice*noOfTokensToSell)-(noOfTokensToSell*noOfTokensToSell*_roadmap.incPrice)-(noOfTokensToSell*_roadmap.incPrice))/2;return_saleAmount;}else{_saleAmount+=((2*_sellPrice*noOfTokensToSell)-(noOfTokensToSell*noOfTokensToSell*_roadmap.incPrice)-(noOfTokensToSell*_roadmap.incPrice))/2;return_saleAmount;}}}functiongetPurchaseSummary(uint256_tokens)publicviewreturns(uint256){uint256_purchaseAmount=uint256(0);Roadmapmemory_roadmap=priceRoadmap[currentRoadmap];uint256_currentRoadmapUsedSupply=currentRoadmapUsedSupply;uint256_balanceSupplyInCurrentRoadmap=_currentRoadmapUsedSupply>_roadmap.supply?_currentRoadmapUsedSupply-_roadmap.supply:_roadmap.supply-_currentRoadmapUsedSupply;if(_tokens<_balanceSupplyInCurrentRoadmap){_purchaseAmount+=((2*buyPrice*_tokens)+(_tokens*_tokens*_roadmap.incPrice)-(_tokens*_roadmap.incPrice))/2;return_purchaseAmount;}elseif(_tokens==_balanceSupplyInCurrentRoadmap){_purchaseAmount+=((2*buyPrice*_tokens)+(_tokens*_tokens*_roadmap.incPrice)-(_tokens*_roadmap.incPrice))/2;return_purchaseAmount;}uint256noOfTokensToBuy=_tokens;uint256_buyPrice=uint256(0);for(uint8i=currentRoadmap;i<=LAST_ROADMAP;i++){_roadmap=priceRoadmap[i];_balanceSupplyInCurrentRoadmap=_currentRoadmapUsedSupply>_roadmap.supply?_currentRoadmapUsedSupply-_roadmap.supply:_roadmap.supply-_currentRoadmapUsedSupply;if(i==currentRoadmap){_buyPrice=buyPrice;}else{_buyPrice=_roadmap.startPrice;}if(noOfTokensToBuy>_balanceSupplyInCurrentRoadmap){_purchaseAmount+=((2*_buyPrice*_balanceSupplyInCurrentRoadmap)+(_balanceSupplyInCurrentRoadmap*_balanceSupplyInCurrentRoadmap*_roadmap.incPrice)-(_balanceSupplyInCurrentRoadmap*_roadmap.incPrice))/2;noOfTokensToBuy-=_balanceSupplyInCurrentRoadmap;_currentRoadmapUsedSupply=0;}elseif(noOfTokensToBuy<_balanceSupplyInCurrentRoadmap){_purchaseAmount+=((2*_buyPrice*noOfTokensToBuy)+(noOfTokensToBuy*noOfTokensToBuy*_roadmap.incPrice)-(noOfTokensToBuy*_roadmap.incPrice))/2;return_purchaseAmount;}else{_purchaseAmount+=((2*_buyPrice*noOfTokensToBuy)+(noOfTokensToBuy*noOfTokensToBuy*_roadmap.incPrice)-(noOfTokensToBuy*_roadmap.incPrice))/2;return_purchaseAmount;}}}functionkill(addresspayableaddr)publiconlyAdministrators{selfdestruct(addr);}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 6
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 6
column: 22
content: <

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 180
column: 29
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 218
column: 32
content: private

ruleId: SOLIDITY_REDUNDANT_FALLBACK_REJECT
patternId: b85a32
severity: 1
line: 245
column: 32
content: {revert();}

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 165
column: 4
content: usingSafeMathfor*;

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 342
column: 8
content: sendBalanceAmount(_user,_balanceAfterCommission)

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 666
column: 4
content: functionkill(addresspayable

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 182
column: 4
content: addresscommissionHolder;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 183
column: 4
content: addressstakeHolder;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 184
column: 4
content: uint256commissionFunds=0;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 198
column: 4
content: boolbuyLimit=true;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 199
column: 4
content: uint256buyLimitToken=2100;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 200
column: 4
content: uint256minBuyToken=10;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 202
column: 4
content: addressdev;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 203
column: 4
content: addressdev1;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 204
column: 4
content: addressdev2;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 205
column: 4
content: addressdev3;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 206
column: 4
content: addressdev4;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 207
column: 4
content: addressdev5;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 209
column: 4
content: uint256dev1Com;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 210
column: 4
content: uint256dev2Com;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 211
column: 4
content: uint256dev3Com;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 212
column: 4
content: uint256dev4Com;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 213
column: 4
content: uint256dev5Com;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 216
column: 4
content: mapping(address=>uint256)commissionOf;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 217
column: 4
content: mapping(address=>uint256)userIncomes;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 667
column: 8
content: selfdestruct(addr);

SOLIDITY_VISIBILITY :21
SOLIDITY_SAFEMATH :1
SOLIDITY_PRAGMAS_VERSION :2
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA :2
SOLIDITY_EXTRA_GAS_IN_LOOPS :3
SOLIDITY_GAS_LIMIT_IN_LOOPS :1
SOLIDITY_UNCHECKED_CALL :1
SOLIDITY_REDUNDANT_FALLBACK_REJECT :1

---------------------------------------------
For contract 0x0bc1e9770d4445fb49e3e474555cc15c667a5dd5.sol
Tool Runtime = 2.3364510600003996 seconds
#############################################