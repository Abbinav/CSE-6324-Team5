(node:5313) Warning: Accessing non-existent property 'cat' of module exports inside circular dependency
(Use `node --trace-warnings ...` to show where the warning was created)
(node:5313) Warning: Accessing non-existent property 'cd' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'chmod' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'cp' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'dirs' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'pushd' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'popd' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'echo' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'tempdir' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'pwd' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'exec' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'ls' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'find' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'grep' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'head' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'ln' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'mkdir' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'rm' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'mv' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'sed' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'set' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'sort' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'tail' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'test' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'to' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'toEnd' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'touch' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'uniq' of module exports inside circular dependency
(node:5313) Warning: Accessing non-existent property 'which' of module exports inside circular dependency
./loops/0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlline 859:69 extraneous input 'data' expecting {',', ')'}
line 877:19 extraneous input 'data' expecting {',', ')'}
line 2029:57 extraneous input 'payable' expecting {',', ')'}
line 2154:12 extraneous input 'payable' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 2265:16 no viable alternative at input 'addresspayable'
line 2274:32 mismatched input 'payable' expecting {',', ')'}
line 2274:44 no viable alternative at input 'user)'
line 2274:44 extraneous input ')' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 2274:63 mismatched input '{' expecting {';', '='}
line 2275:16 extraneous input '=' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 2278:4 extraneous input 'function' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: adc165
severity: 1
line: 1044
column: 48
content: 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 630
column: 23
content: 0xFF

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 633
column: 23
content: 0xFFFF

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 636
column: 23
content: 0xFFFFFFFF

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 639
column: 23
content: 0xFFFFFFFFFFFFFFFF

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 2227
column: 19
content: 0x41

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 2227
column: 34
content: 0x5A

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 1040
column: 2
content: addressconstantprivateSENDER_OVERRIDE=address(0);

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 2099
column: 8
content: _owner=address(0)

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: c67a09
severity: 1
line: 2215
column: 17
content: 0x0

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 806
column: 4
content: for(uint256i=0;i<_values.length;i++){self.buf.encodeString(_values[i]);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 2238
column: 8
content: for(uinti=0;i<_baseBytes.length;i++){_baseBytes[i]=_lower(_baseBytes[i]);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 2248
column: 8
content: for(i=0;i<b.length;i++){uint8c=uint8(b[i]);if(c>=48&&c<=57){result=result*10+(c-48);}else{revert();}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 806
column: 4
content: for(uint256i=0;i<_values.length;i++){self.buf.encodeString(_values[i]);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 2238
column: 8
content: for(uinti=0;i<_baseBytes.length;i++){_baseBytes[i]=_lower(_baseBytes[i]);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 2248
column: 8
content: for(i=0;i<b.length;i++){uint8c=uint8(b[i]);if(c>=48&&c<=57){result=result*10+(c-48);}else{revert();}}

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 1885
column: 0
content: contractApproveAndCallFallBack{functionreceiveApproval(addressfrom,uint256tokens,addresstoken,bytesmemorydata)publicpayablereturns(bool);}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 2270
column: 4
content: functionsetGasRequirement(uint256gas)publiconlyOwner{gasRequirement=gas;}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 8
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 8
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 613
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 613
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 687
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 687
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 816
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 816
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 846
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 846
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 866
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 866
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 891
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 891
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 900
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 900
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 909
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 909
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1020
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1020
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1286
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1286
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1306
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1306
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1402
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1402
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1829
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1829
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1858
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1858
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1883
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1883
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1892
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1892
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1904
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1904
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1923
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1923
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1934
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1934
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1944
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1944
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 2010
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 2010
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 2042
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 2042
column: 22
content: <

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 2125
column: 16
content: >=

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 2125
column: 22
content: <

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 619
column: 8
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 620
column: 8
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 621
column: 8
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 622
column: 8
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 623
column: 8
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 624
column: 8
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 625
column: 8
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1039
column: 19
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1040
column: 19
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1041
column: 19
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1042
column: 19
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1043
column: 19
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1044
column: 19
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1046
column: 15
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1047
column: 10
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1048
column: 21
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1049
column: 28
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1050
column: 10
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1051
column: 30
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1964
column: 7
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1969
column: 7
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 2004
column: 14
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 2056
column: 12
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 2119
column: 16
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 2146
column: 11
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 2148
column: 29
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 2149
column: 23
content: private

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 2250
column: 12
content: if(c>=48&&c<=57){result=result*10+(c-48);}else{revert();}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 35
column: 2
content: functioninit(buffermemorybuf,uintcapacity)internalpurereturns(buffermemory){if(capacity%32!=0){capacity+=32-(capacity%32);}buf.capacity=capacity;assembly{letptr:=mload(0x40)mstore(buf,ptr)mstore(ptr,0)mstore(0x40,add(32,add(ptr,capacity)))}returnbuf;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 81
column: 2
content: functiontruncate(buffermemorybuf)internalpurereturns(buffermemory){assembly{letbufptr:=mload(buf)mstore(bufptr,0)}returnbuf;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 98
column: 2
content: functionwrite(buffermemorybuf,uintoff,bytesmemorydata,uintlen)internalpurereturns(buffermemory){require(len<=data.length);if(off+len>buf.capacity){resize(buf,max(buf.capacity,len+off)*2);}uintdest;uintsrc;assembly{letbufptr:=mload(buf)letbuflen:=mload(bufptr)dest:=add(add(bufptr,32),off)ifgt(add(len,off),buflen){mstore(bufptr,add(len,off))}src:=add(data,32)}for(;len>=32;len-=32){assembly{mstore(dest,mload(src))}dest+=32;src+=32;}uintmask=256**(32-len)-1;assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}returnbuf;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 172
column: 2
content: functionwriteUint8(buffermemorybuf,uintoff,uint8data)internalpurereturns(buffermemory){if(off>=buf.capacity){resize(buf,buf.capacity*2);}assembly{letbufptr:=mload(buf)letbuflen:=mload(bufptr)letdest:=add(add(bufptr,off),32)mstore8(dest,data)ifeq(off,buflen){mstore(bufptr,add(buflen,1))}}returnbuf;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 213
column: 2
content: functionwrite(buffermemorybuf,uintoff,bytes32data,uintlen)privatepurereturns(buffermemory){if(len+off>buf.capacity){resize(buf,(len+off)*2);}uintmask=256**len-1;data=data>>(8*(32-len));assembly{letbufptr:=mload(buf)letdest:=add(add(bufptr,off),len)mstore(dest,or(and(mload(dest),not(mask)),data))ifgt(add(off,len),mload(bufptr)){mstore(bufptr,add(off,len))}}returnbuf;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 278
column: 2
content: functionwriteInt(buffermemorybuf,uintoff,uintdata,uintlen)privatepurereturns(buffermemory){if(len+off>buf.capacity){resize(buf,(len+off)*2);}uintmask=256**len-1;assembly{letbufptr:=mload(buf)letdest:=add(add(bufptr,off),len)mstore(dest,or(and(mload(dest),not(mask)),data))ifgt(add(off,len),mload(bufptr)){mstore(bufptr,add(off,len))}}returnbuf;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 335
column: 2
content: functioninit(buffermemorybuf,uintcapacity)internalpurereturns(buffermemory){if(capacity%32!=0){capacity+=32-(capacity%32);}buf.capacity=capacity;assembly{letptr:=mload(0x40)mstore(buf,ptr)mstore(ptr,0)mstore(0x40,add(32,add(ptr,capacity)))}returnbuf;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 381
column: 2
content: functiontruncate(buffermemorybuf)internalpurereturns(buffermemory){assembly{letbufptr:=mload(buf)mstore(bufptr,0)}returnbuf;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 398
column: 2
content: functionwrite(buffermemorybuf,uintoff,bytesmemorydata,uintlen)internalpurereturns(buffermemory){require(len<=data.length);if(off+len>buf.capacity){resize(buf,max(buf.capacity,len+off)*2);}uintdest;uintsrc;assembly{letbufptr:=mload(buf)letbuflen:=mload(bufptr)dest:=add(add(bufptr,32),off)ifgt(add(len,off),buflen){mstore(bufptr,add(len,off))}src:=add(data,32)}for(;len>=32;len-=32){assembly{mstore(dest,mload(src))}dest+=32;src+=32;}uintmask=256**(32-len)-1;assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}returnbuf;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 472
column: 2
content: functionwriteUint8(buffermemorybuf,uintoff,uint8data)internalpurereturns(buffermemory){if(off>=buf.capacity){resize(buf,buf.capacity*2);}assembly{letbufptr:=mload(buf)letbuflen:=mload(bufptr)letdest:=add(add(bufptr,off),32)mstore8(dest,data)ifeq(off,buflen){mstore(bufptr,add(buflen,1))}}returnbuf;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 513
column: 2
content: functionwrite(buffermemorybuf,uintoff,bytes32data,uintlen)privatepurereturns(buffermemory){if(len+off>buf.capacity){resize(buf,(len+off)*2);}uintmask=256**len-1;data=data>>(8*(32-len));assembly{letbufptr:=mload(buf)letdest:=add(add(bufptr,off),len)mstore(dest,or(and(mload(dest),not(mask)),data))ifgt(add(off,len),mload(bufptr)){mstore(bufptr,add(off,len))}}returnbuf;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 578
column: 2
content: functionwriteInt(buffermemorybuf,uintoff,uintdata,uintlen)privatepurereturns(buffermemory){if(len+off>buf.capacity){resize(buf,(len+off)*2);}uintmask=256**len-1;assembly{letbufptr:=mload(buf)letdest:=add(add(bufptr,off),len)mstore(dest,or(and(mload(dest),not(mask)),data))ifgt(add(off,len),mload(bufptr)){mstore(bufptr,add(off,len))}}returnbuf;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1350
column: 4
content: functionmemcpy(uintdest,uintsrc,uintlen)privatepure{for(;len>=32;len-=32){assembly{mstore(dest,mload(src))}dest+=32;src+=32;}uintmask=256**(32-len)-1;assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1374
column: 4
content: functiontoSlice(stringmemoryself)internalpurereturns(slicememory){uintptr;assembly{ptr:=add(self,0x20)}returnslice(bytes(self).length,ptr);}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1389
column: 4
content: functionconcat(slicememoryself,slicememoryother)internalpurereturns(stringmemory){stringmemoryret=newstring(self._len+other._len);uintretptr;assembly{retptr:=add(ret,32)}memcpy(retptr,self._ptr,self._len);memcpy(retptr+self._len,other._ptr,other._len);returnret;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1405
column: 4
content: functionconcat(bytesmemory_preBytes,bytesmemory_postBytes)internalpurereturns(bytesmemory){bytesmemorytempBytes;assembly{tempBytes:=mload(0x40)letlength:=mload(_preBytes)mstore(tempBytes,length)letmc:=add(tempBytes,0x20)letend:=add(mc,length)for{letcc:=add(_preBytes,0x20)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}length:=mload(_postBytes)mstore(tempBytes,add(length,mload(tempBytes)))mc:=endend:=add(mc,length)for{letcc:=add(_postBytes,0x20)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}mstore(0x40,and(add(add(end,iszero(add(length,mload(_preBytes)))),31),not(31)))}returntempBytes;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1596
column: 4
content: functionslice(bytesmemory_bytes,uint_start,uint_length)internalpurereturns(bytesmemory){require(_bytes.length>=(_start+_length));bytesmemorytempBytes;assembly{switchiszero(_length)case0{tempBytes:=mload(0x40)letlengthmod:=and(_length,31)letmc:=add(add(tempBytes,lengthmod),mul(0x20,iszero(lengthmod)))letend:=add(mc,_length)for{letcc:=add(add(add(_bytes,lengthmod),mul(0x20,iszero(lengthmod))),_start)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}mstore(tempBytes,_length)mstore(0x40,and(add(mc,31),not(31)))}default{tempBytes:=mload(0x40)mstore(0x40,add(tempBytes,0x20))}}returntempBytes;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1651
column: 4
content: functiontoAddress(bytesmemory_bytes,uint_start)internalpurereturns(address){require(_bytes.length>=(_start+20));addresstempAddress;assembly{tempAddress:=div(mload(add(add(_bytes,0x20),_start)),0x1000000000000000000000000)}returntempAddress;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1659
column: 4
content: functiontoUint8(bytesmemory_bytes,uint_start)internalpurereturns(uint8){require(_bytes.length>=(_start+1));uint8tempUint;assembly{tempUint:=mload(add(add(_bytes,0x1),_start))}returntempUint;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1667
column: 4
content: functiontoUint16(bytesmemory_bytes,uint_start)internalpurereturns(uint16){require(_bytes.length>=(_start+2));uint16tempUint;assembly{tempUint:=mload(add(add(_bytes,0x2),_start))}returntempUint;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1675
column: 4
content: functiontoUint32(bytesmemory_bytes,uint_start)internalpurereturns(uint32){require(_bytes.length>=(_start+4));uint32tempUint;assembly{tempUint:=mload(add(add(_bytes,0x4),_start))}returntempUint;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1683
column: 4
content: functiontoUint64(bytesmemory_bytes,uint_start)internalpurereturns(uint64){require(_bytes.length>=(_start+8));uint64tempUint;assembly{tempUint:=mload(add(add(_bytes,0x8),_start))}returntempUint;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1691
column: 4
content: functiontoUint96(bytesmemory_bytes,uint_start)internalpurereturns(uint96){require(_bytes.length>=(_start+12));uint96tempUint;assembly{tempUint:=mload(add(add(_bytes,0xc),_start))}returntempUint;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1699
column: 4
content: functiontoUint128(bytesmemory_bytes,uint_start)internalpurereturns(uint128){require(_bytes.length>=(_start+16));uint128tempUint;assembly{tempUint:=mload(add(add(_bytes,0x10),_start))}returntempUint;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1707
column: 4
content: functiontoUint(bytesmemory_bytes,uint_start)internalpurereturns(uint256){require(_bytes.length>=(_start+32));uint256tempUint;assembly{tempUint:=mload(add(add(_bytes,0x20),_start))}returntempUint;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1715
column: 4
content: functiontoBytes32(bytesmemory_bytes,uint_start)internalpurereturns(bytes32){require(_bytes.length>=(_start+32));bytes32tempBytes32;assembly{tempBytes32:=mload(add(add(_bytes,0x20),_start))}returntempBytes32;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1723
column: 4
content: functionequal(bytesmemory_preBytes,bytesmemory_postBytes)internalpurereturns(bool){boolsuccess=true;assembly{letlength:=mload(_preBytes)switcheq(length,mload(_postBytes))case1{letcb:=1letmc:=add(_preBytes,0x20)letend:=add(mc,length)for{letcc:=add(_postBytes,0x20)}eq(add(lt(mc,end),cb),2){mc:=add(mc,0x20)cc:=add(cc,0x20)}{ifiszero(eq(mload(mc),mload(cc))){success:=0cb:=0}}}default{success:=0}}returnsuccess;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 2212
column: 4
content: functionstringToBytes32(stringmemorysource)privatepurereturns(bytes32result){bytesmemorytempEmptyStringTest=bytes(source);if(tempEmptyStringTest.length==0){return0x0;}assembly{result:=mload(add(source,32))}}

ruleId: SOLIDITY_SHOULD_NOT_BE_VIEW
patternId: 189abf
severity: 1
line: 1760
column: 4
content: functionequalStorage(bytesstorage_preBytes,bytesmemory_postBytes)internalviewreturns(bool){boolsuccess=true;assembly{letfslot:=sload(_preBytes_slot)letslength:=div(and(fslot,sub(mul(0x100,iszero(and(fslot,1))),1)),2)letmlength:=mload(_postBytes)switcheq(slength,mlength)case1{ifiszero(iszero(slength)){switchlt(slength,32)case1{fslot:=mul(div(fslot,0x100),0x100)ifiszero(eq(fslot,mload(add(_postBytes,0x20)))){success:=0}}default{letcb:=1mstore(0x0,_preBytes_slot)letsc:=keccak256(0x0,0x20)letmc:=add(_postBytes,0x20)letend:=add(mc,mlength)for{}eq(add(lt(mc,end),cb),2){sc:=add(sc,1)mc:=add(mc,0x20)}{ifiszero(eq(sload(sc),mload(mc))){success:=0cb:=0}}}}}default{success:=0}}returnsuccess;}

ruleId: SOLIDITY_SHOULD_NOT_BE_VIEW
patternId: 189abf
severity: 1
line: 1991
column: 2
content: functionisConstructor()privateviewreturns(bool){addressself=address(this);uint256cs;assembly{cs:=extcodesize(self)}returncs==0;}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 41
column: 4
content: assembly{letptr:=mload(0x40)mstore(buf,ptr)mstore(ptr,0)mstore(0x40,add(32,add(ptr,capacity)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 82
column: 4
content: assembly{letbufptr:=mload(buf)mstore(bufptr,0)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 107
column: 4
content: assembly{letbufptr:=mload(buf)letbuflen:=mload(bufptr)dest:=add(add(bufptr,32),off)ifgt(add(len,off),buflen){mstore(bufptr,add(len,off))}src:=add(data,32)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 123
column: 6
content: assembly{mstore(dest,mload(src))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 132
column: 4
content: assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 177
column: 4
content: assembly{letbufptr:=mload(buf)letbuflen:=mload(bufptr)letdest:=add(add(bufptr,off),32)mstore8(dest,data)ifeq(off,buflen){mstore(bufptr,add(buflen,1))}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 221
column: 4
content: assembly{letbufptr:=mload(buf)letdest:=add(add(bufptr,off),len)mstore(dest,or(and(mload(dest),not(mask)),data))ifgt(add(off,len),mload(bufptr)){mstore(bufptr,add(off,len))}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 284
column: 4
content: assembly{letbufptr:=mload(buf)letdest:=add(add(bufptr,off),len)mstore(dest,or(and(mload(dest),not(mask)),data))ifgt(add(off,len),mload(bufptr)){mstore(bufptr,add(off,len))}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 341
column: 4
content: assembly{letptr:=mload(0x40)mstore(buf,ptr)mstore(ptr,0)mstore(0x40,add(32,add(ptr,capacity)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 382
column: 4
content: assembly{letbufptr:=mload(buf)mstore(bufptr,0)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 407
column: 4
content: assembly{letbufptr:=mload(buf)letbuflen:=mload(bufptr)dest:=add(add(bufptr,32),off)ifgt(add(len,off),buflen){mstore(bufptr,add(len,off))}src:=add(data,32)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 423
column: 6
content: assembly{mstore(dest,mload(src))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 432
column: 4
content: assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 477
column: 4
content: assembly{letbufptr:=mload(buf)letbuflen:=mload(bufptr)letdest:=add(add(bufptr,off),32)mstore8(dest,data)ifeq(off,buflen){mstore(bufptr,add(buflen,1))}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 521
column: 4
content: assembly{letbufptr:=mload(buf)letdest:=add(add(bufptr,off),len)mstore(dest,or(and(mload(dest),not(mask)),data))ifgt(add(off,len),mload(bufptr)){mstore(bufptr,add(off,len))}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 584
column: 4
content: assembly{letbufptr:=mload(buf)letdest:=add(add(bufptr,off),len)mstore(dest,or(and(mload(dest),not(mask)),data))ifgt(add(off,len),mload(bufptr)){mstore(bufptr,add(off,len))}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1353
column: 12
content: assembly{mstore(dest,mload(src))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1362
column: 8
content: assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1376
column: 8
content: assembly{ptr:=add(self,0x20)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1392
column: 8
content: assembly{retptr:=add(ret,32)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1414
column: 8
content: assembly{tempBytes:=mload(0x40)letlength:=mload(_preBytes)mstore(tempBytes,length)letmc:=add(tempBytes,0x20)letend:=add(mc,length)for{letcc:=add(_preBytes,0x20)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}length:=mload(_postBytes)mstore(tempBytes,add(length,mload(tempBytes)))mc:=endend:=add(mc,length)for{letcc:=add(_postBytes,0x20)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}mstore(0x40,and(add(add(end,iszero(add(length,mload(_preBytes)))),31),not(31)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1474
column: 8
content: assembly{letfslot:=sload(_preBytes_slot)letslength:=div(and(fslot,sub(mul(0x100,iszero(and(fslot,1))),1)),2)letmlength:=mload(_postBytes)letnewlength:=add(slength,mlength)switchadd(lt(slength,32),lt(newlength,32))case2{sstore(_preBytes_slot,add(fslot,add(mul(div(mload(add(_postBytes,0x20)),exp(0x100,sub(32,mlength))),exp(0x100,sub(32,newlength))),mul(mlength,2))))}case1{mstore(0x0,_preBytes_slot)letsc:=add(keccak256(0x0,0x20),div(slength,32))sstore(_preBytes_slot,add(mul(newlength,2),1))letsubmod:=sub(32,slength)letmc:=add(_postBytes,submod)letend:=add(_postBytes,mlength)letmask:=sub(exp(0x100,submod),1)sstore(sc,add(and(fslot,0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),and(mload(mc),mask)))for{mc:=add(mc,0x20)sc:=add(sc,1)}lt(mc,end){sc:=add(sc,1)mc:=add(mc,0x20)}{sstore(sc,mload(mc))}mask:=exp(0x100,sub(mc,end))sstore(sc,mul(div(mload(mc),mask),mask))}default{mstore(0x0,_preBytes_slot)letsc:=add(keccak256(0x0,0x20),div(slength,32))sstore(_preBytes_slot,add(mul(newlength,2),1))letslengthmod:=mod(slength,32)letmlengthmod:=mod(mlength,32)letsubmod:=sub(32,slengthmod)letmc:=add(_postBytes,submod)letend:=add(_postBytes,mlength)letmask:=sub(exp(0x100,submod),1)sstore(sc,add(sload(sc),and(mload(mc),mask)))for{sc:=add(sc,1)mc:=add(mc,0x20)}lt(mc,end){sc:=add(sc,1)mc:=add(mc,0x20)}{sstore(sc,mload(mc))}mask:=exp(0x100,sub(mc,end))sstore(sc,mul(div(mload(mc),mask),mask))}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1607
column: 8
content: assembly{switchiszero(_length)case0{tempBytes:=mload(0x40)letlengthmod:=and(_length,31)letmc:=add(add(tempBytes,lengthmod),mul(0x20,iszero(lengthmod)))letend:=add(mc,_length)for{letcc:=add(add(add(_bytes,lengthmod),mul(0x20,iszero(lengthmod))),_start)}lt(mc,end){mc:=add(mc,0x20)cc:=add(cc,0x20)}{mstore(mc,mload(cc))}mstore(tempBytes,_length)mstore(0x40,and(add(mc,31),not(31)))}default{tempBytes:=mload(0x40)mstore(0x40,add(tempBytes,0x20))}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1654
column: 8
content: assembly{tempAddress:=div(mload(add(add(_bytes,0x20),_start)),0x1000000000000000000000000)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1662
column: 8
content: assembly{tempUint:=mload(add(add(_bytes,0x1),_start))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1670
column: 8
content: assembly{tempUint:=mload(add(add(_bytes,0x2),_start))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1678
column: 8
content: assembly{tempUint:=mload(add(add(_bytes,0x4),_start))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1686
column: 8
content: assembly{tempUint:=mload(add(add(_bytes,0x8),_start))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1694
column: 8
content: assembly{tempUint:=mload(add(add(_bytes,0xc),_start))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1702
column: 8
content: assembly{tempUint:=mload(add(add(_bytes,0x10),_start))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1710
column: 8
content: assembly{tempUint:=mload(add(add(_bytes,0x20),_start))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1718
column: 8
content: assembly{tempBytes32:=mload(add(add(_bytes,0x20),_start))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1725
column: 8
content: assembly{letlength:=mload(_preBytes)switcheq(length,mload(_postBytes))case1{letcb:=1letmc:=add(_preBytes,0x20)letend:=add(mc,length)for{letcc:=add(_postBytes,0x20)}eq(add(lt(mc,end),cb),2){mc:=add(mc,0x20)cc:=add(cc,0x20)}{ifiszero(eq(mload(mc),mload(cc))){success:=0cb:=0}}}default{success:=0}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1769
column: 8
content: assembly{letfslot:=sload(_preBytes_slot)letslength:=div(and(fslot,sub(mul(0x100,iszero(and(fslot,1))),1)),2)letmlength:=mload(_postBytes)switcheq(slength,mlength)case1{ifiszero(iszero(slength)){switchlt(slength,32)case1{fslot:=mul(div(fslot,0x100),0x100)ifiszero(eq(fslot,mload(add(_postBytes,0x20)))){success:=0}}default{letcb:=1mstore(0x0,_preBytes_slot)letsc:=keccak256(0x0,0x20)letmc:=add(_postBytes,0x20)letend:=add(mc,mlength)for{}eq(add(lt(mc,end),cb),2){sc:=add(sc,1)mc:=add(mc,0x20)}{ifiszero(eq(sload(sc),mload(mc))){success:=0cb:=0}}}}}default{success:=0}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 2218
column: 8
content: assembly{result:=mload(add(source,32))}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 2274
column: 4
content: functionsetGasUser(addresspayable

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 2168
column: 4
content: mapping(bytes32=>WithdrawlRequest)pendingRequests;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 2275
column: 8
content: gasUser=user;

SOLIDITY_VISIBILITY :3
SOLIDITY_OVERPOWERED_ROLE :1
SOLIDITY_PRAGMAS_VERSION :48
SOLIDITY_REVERT_REQUIRE :1
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA :27
SOLIDITY_EXTRA_GAS_IN_LOOPS :3
SOLIDITY_ADDRESS_HARDCODED :10
SOLIDITY_GAS_LIMIT_IN_LOOPS :3
SOLIDITY_USING_INLINE_ASSEMBLY :35
SOLIDITY_SHOULD_NOT_BE_VIEW :2
SOLIDITY_SHOULD_NOT_BE_PURE :28

---------------------------------------------
For contract 0x269081c519c270a5e57f06e22c1c9e050d395d8e.sol
Tool Runtime = 2.669619149997743 seconds
#############################################