$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol
Total states:35615
173.47701
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.052784
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.892102
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.129850
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.020051
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.209176
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.690081
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.284874
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.026459
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.732304
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.474307
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.096984
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:37.211313
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.963709
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.676744
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.485110
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.596466
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.732084
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:36.025015
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15577
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x52cc59d4a92ca8cb6b82f7741bae005766fc4912.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x64f7099a592c37a4823efeaf75cf3a08cad41b4b.sol
Total states:20457
318.764188
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.085782
Transaction Length: 1
Severity: High
Contract: UNI3d
Function name: transferAndCall(address,uint256,bytes)
PC address: 1121
Estimated Gas Usage: 401 - 496
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x64f7099a592c37a4823efeaf75cf3a08cad41b4b.sol:3

*/

//
// UNI3d
// Uniswap in Three

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:23.998024
Transaction Length: 1
Severity: Medium
Contract: UNI3d
Function name: transferAndCall(address,uint256,bytes)
PC address: 3932
Estimated Gas Usage: 27338 - 111980
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop2/0x64f7099a592c37a4823efeaf75cf3a08cad41b4b.sol:115

Callable(_to).tokenCallback(msg.sender, _tokens, _data)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:04:38.850240
Transaction Length: 2
Severity: Medium
Contract: UNI3d
Function name: transferAndCall(address,uint256,bytes)
PC address: 3932
Estimated Gas Usage: 27338 - 111980
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop2/0x64f7099a592c37a4823efeaf75cf3a08cad41b4b.sol:115

Callable(_to).tokenCallback(msg.sender, _tokens, _data)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:26.992588
Transaction Length: 1
Severity: Low
Contract: UNI3d
Function name: buy(uint256)
PC address: 5341
Estimated Gas Usage: 1637 - 2628
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x64f7099a592c37a4823efeaf75cf3a08cad41b4b.sol:66

info.uni.transferFrom(msg.sender, address(this), _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:04:43.849958
Transaction Length: 2
Severity: Low
Contract: UNI3d
Function name: buy(uint256)
PC address: 5341
Estimated Gas Usage: 1634 - 2625
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x64f7099a592c37a4823efeaf75cf3a08cad41b4b.sol:66

info.uni.transferFrom(msg.sender, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xa3128cc400e2878571368ae0a83f588eb838552b.sol
Total states:2220
100.916582
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.297000
Transaction Length: 1
Severity: High
Contract: Balancer_ZapIn_General_V2_6
Function name: ZapIn(address,address,uint256,uint256)
PC address: 9636
Estimated Gas Usage: 10377 - 67601
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa3128cc400e2878571368ae0a83f588eb838552b.sol:101

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x038c12e33625736d28b55c137f974ef47315eacf.sol
Total states:736
1.429786
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x72FaD6ffF363ec7f39136331416491Aba01EAF4a.sol
Total states:34206
405.828022
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.036340
Transaction Length: 1
Severity: High
Contract: DSChiefApprovals
Function name: etch(address[])
PC address: 707
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x72FaD6ffF363ec7f39136331416491Aba01EAF4a.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.502392
Transaction Length: 1
Severity: High
Contract: DSChiefApprovals
Function name: etch(address[])
PC address: 709
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x72FaD6ffF363ec7f39136331416491Aba01EAF4a.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.548372
Transaction Length: 1
Severity: High
Contract: DSChief
Function name: etch(address[])
PC address: 1231
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x72FaD6ffF363ec7f39136331416491Aba01EAF4a.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.564472
Transaction Length: 1
Severity: High
Contract: DSChief
Function name: etch(address[])
PC address: 1233
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x72FaD6ffF363ec7f39136331416491Aba01EAF4a.sol:3

*/

/**
 *Submitted for verification

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x8c0929691A458f454cf3438Cf2EF8Bc901a72CcA.sol
Total states:5938
25.223624
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:05.465993
Transaction Length: 1
Severity: Medium
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 144
Estimated Gas Usage: 5139 - 108825
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 250
Offset: 409
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop2/0x8c0929691A458f454cf3438Cf2EF8Bc901a72CcA.sol:1271

function claimReward(address rewarder) public {
        uint256 reward = StakingRewards(rewarder).getReward();
        IERC20(StakingRewards(rewarder).gov()).transfer(msg.sender, reward);
    }

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:02.273457
Transaction Length: 1
Severity: Medium
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 250
Estimated Gas Usage: 1019 - 1395
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop2/0x8c0929691A458f454cf3438Cf2EF8Bc901a72CcA.sol:1272

StakingRewards(rewarder).getReward()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.328111
Transaction Length: 1
Severity: Low
Contract: RewardProxyActions
Function name: claimReward(address)
PC address: 630
Estimated Gas Usage: 4314 - 73814
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x8c0929691A458f454cf3438Cf2EF8Bc901a72CcA.sol:1273

IERC20(StakingRewards(rewarder).gov()).transfer(msg.sender, reward)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x151af502425c1f9cf741314d565a40b729e6b351.sol
Total states:2324
1.848801
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol
Total states:46543
130.775194
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.510421
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:145

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.673171
Transaction Length: 1
Severity: Low
Contract: LockupContract
Function name: lockedAllocationData(address,uint256)
PC address: 3295
Estimated Gas Usage: 821 - 1106
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:911

mapping(address => uint256[]) public lockedAllocationData

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.835643
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3578
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:978

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.135441
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3603
Estimated Gas Usage: 2951 - 4089
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:978

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.292397
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3605
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:978

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.998517
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:145

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.945501
Transaction Length: 1
Severity: Low
Contract: CLIAllocator
Function name: unlockManuallyLockedBalances(address)
PC address: 4785
Estimated Gas Usage: 5545 - 76368
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:1265

lockupContract.setManuallyLockedForAddress(
            _holder,
            0
        )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.500728
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5243
Estimated Gas Usage: 13852 - 89787
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.528251
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5255
Estimated Gas Usage: 24473 - 140693
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:958

lockedAllocationData[_address].push(_amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.621784
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5348
Estimated Gas Usage: 24473 - 140693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:10.588371
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5360
Estimated Gas Usage: 35094 - 191599
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:959

lockedAllocationData[_address].push(_lockPeriodInSeconds)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.178912
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5453
Estimated Gas Usage: 35094 - 191599
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:2

ification at Ether

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.937753
Transaction Length: 2
Severity: High
Contract: CLIReferral
Function name: getReferrerTokens(address,uint256)
PC address: 8130
Estimated Gas Usage: 1789 - 2404
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb25ba6bb96a8427603df2ead98280cffa0bb1a16.sol:199

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x19c36da0293e6dccd1e5fba44a7a2d7eaff030e82.sol
Total states:2398
19.452457
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x1495304c6c1fab2a75f88983a524ac783c128ea8.sol
Total states:2324
1.802247
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x26653c1a589749396189b6a96b4cdf00b4bb5275.sol
Total states:28040
204.429923
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:05.636815
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x26653c1a589749396189b6a96b4cdf00b4bb5275.sol:56

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:50.039304
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3818
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x26653c1a589749396189b6a96b4cdf00b4bb5275.sol:56

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.394213
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 6145
Estimated Gas Usage: 1511 - 2316
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x26653c1a589749396189b6a96b4cdf00b4bb5275.sol:56

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x42cabe2d06cb87a75bc8bef50ee6d95d6fa651c7.sol
Total states:16824
37.39163
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.511151
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x42cabe2d06cb87a75bc8bef50ee6d95d6fa651c7.sol:38

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.606127
Transaction Length: 1
Severity: Low
Contract: ZETCAB
Function name: lockState(address,uint256)
PC address: 4016
Estimated Gas Usage: 830 - 1115
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x42cabe2d06cb87a75bc8bef50ee6d95d6fa651c7.sol:319

lockInfo[_holder][_idx]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.763863
Transaction Length: 2
Severity: High
Contract: ZETCAB
Function name: increaseAllowance(address,uint256)
PC address: 11747
Estimated Gas Usage: 968 - 1443
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x42cabe2d06cb87a75bc8bef50ee6d95d6fa651c7.sol:38

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x619108560f0a3a0f2b38840b40e9456070294fa0.sol
Total states:426
0.781937
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xfd8af7910fcef63d0115474dfb98363c42f23a83.sol
Total states:1308
1.117933
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x408019bf8f9cda619a44cd67725342979ccaa7be.sol
Total states:782
2.610081
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol
Total states:35215
177.961848
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.030586
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:5

olidity>=0.5.1;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.116735
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:3

*/

//pragma solidity>=0.5.1;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.372558
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:5

olidity>=0.5.1;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.993791
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:3

*/

//pragma solidity>=0.5.1;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.137480
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:5

olidity>=0.5.1;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.949112
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:3

*/

//pragma solidity>=0.5.1;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.505519
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:5

olidity>=0.5.1;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.236488
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:3

*/

//pragma solidity>=0.5.1;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.789561
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.438352
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3691
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.904028
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3691
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:41.733392
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.334678
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.685561
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.434037
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.713517
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.480335
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.223636
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15437
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x84078967e5a353fc1c73366887010a8eef8387dc.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol
Total states:35615
156.104075
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.197480
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.528639
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.431357
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.290969
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.120686
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.258023
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.585533
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.088681
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.833484
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.466745
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.104900
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:37.183149
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:20.412038
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.725315
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.848877
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.622459
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.531026
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:31.294068
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15577
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5921e451931cb279032fbaaf9fd8282f95a0c201.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x81ed79fa03a8194e62f415ec47e23ac89076f1bc.sol
Total states:23598
70.866419
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.097681
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x81ed79fa03a8194e62f415ec47e23ac89076f1bc.sol:121

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.161589
Transaction Length: 1
Severity: High
Contract: CreamUSD
Function name: swapExactAmountOut(address,address,uint256,uint256,uint256)
PC address: 11869
Estimated Gas Usage: 2280 - 37172
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x81ed79fa03a8194e62f415ec47e23ac89076f1bc.sol:140

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.805197
Transaction Length: 2
Severity: High
Contract: CreamUSD
Function name: increaseAllowance(address,uint256)
PC address: 12798
Estimated Gas Usage: 1037 - 1512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x81ed79fa03a8194e62f415ec47e23ac89076f1bc.sol:121

a + b

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:09.906736
Transaction Length: 1
Severity: High
Contract: CreamUSD
Function name: getInExactOut(address,int256,int256,int256)
PC address: 14651
Estimated Gas Usage: 538 - 633
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x81ed79fa03a8194e62f415ec47e23ac89076f1bc.sol:229

a - b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.376176
Transaction Length: 1
Severity: High
Contract: CreamUSD
Function name: getOutExactIn(address,int256,int256,int256)
PC address: 15945
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x81ed79fa03a8194e62f415ec47e23ac89076f1bc.sol:235

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.091222
Transaction Length: 1
Severity: High
Contract: CreamUSD
Function name: getInExactOut(address,int256,int256,int256)
PC address: 17070
Estimated Gas Usage: 788 - 883
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x81ed79fa03a8194e62f415ec47e23ac89076f1bc.sol:215

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x43a041ee9ac82f4e375a67f67685b750c0c7c9af.sol
Total states:3225
104.619314
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xAD6E6594e2E9Cca9326dd80BFFD7BaEf4e2a10F1.sol
Total states:18028
257.158005
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:57.498499
Transaction Length: 1
Severity: Low
Contract: MainnetUsdcToUsdcAssimilator
Function name: outputRawAndGetBalance(address,uint256)
PC address: 2028
Estimated Gas Usage: 1179 - 1745
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xAD6E6594e2E9Cca9326dd80BFFD7BaEf4e2a10F1.sol:883

usdc.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:59.088123
Transaction Length: 1
Severity: Low
Contract: MainnetUsdcToUsdcAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 3172
Estimated Gas Usage: 1131 - 1792
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xAD6E6594e2E9Cca9326dd80BFFD7BaEf4e2a10F1.sol:849

usdc.transferFrom(msg.sender, address(this), _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:04:01.022556
Transaction Length: 1
Severity: Low
Contract: MainnetUsdcToUsdcAssimilator
Function name: outputRaw(address,uint256)
PC address: 4094
Estimated Gas Usage: 1169 - 1735
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xAD6E6594e2E9Cca9326dd80BFFD7BaEf4e2a10F1.sol:897

usdc.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:04:13.175812
Transaction Length: 1
Severity: Low
Contract: MainnetUsdcToUsdcAssimilator
Function name: intakeRaw(uint256)
PC address: 4572
Estimated Gas Usage: 1210 - 1871
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xAD6E6594e2E9Cca9326dd80BFFD7BaEf4e2a10F1.sol:863

usdc.transferFrom(msg.sender, address(this), _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xe08fdd8d4e6526750aa541de3be4e815372b82af.sol
Total states:563
23.978266
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.333864
Transaction Length: 1
Severity: High
Contract: DropToken
Function name: dropTKN(address[],address,uint256,bytes32)
PC address: 158
Estimated Gas Usage: 296 - 391
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xe08fdd8d4e6526750aa541de3be4e815372b82af.sol:5

olidity 0.5.17;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.766677
Transaction Length: 1
Severity: High
Contract: DropToken
Function name: dropTKN(address[],address,uint256,bytes32)
PC address: 160
Estimated Gas Usage: 296 - 391
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xe08fdd8d4e6526750aa541de3be4e815372b82af.sol:3

*/

//pragma solidity 0.5.17;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:23.868131
Transaction Length: 1
Severity: Low
Contract: DropToken
Function name: dropTKN(address[],address,uint256,bytes32)
PC address: 270
Estimated Gas Usage: 486 - 581
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xe08fdd8d4e6526750aa541de3be4e815372b82af.sol:17

amount / recipients.length

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:21.374110
Transaction Length: 1
Severity: Medium
Contract: DropToken
Function name: dropTKN(address[],address,uint256,bytes32)
PC address: 551
Estimated Gas Usage: 3349 - 38762
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop2/0xe08fdd8d4e6526750aa541de3be4e815372b82af.sol:19

token.transferFrom(msg.sender, recipients[i], amounts)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x0b7df9dbcf0f29f074296adbe1266ffab53d8111.sol
Total states:745
1.483652
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x6ee4d72d3d17a05dd7f0449e095670119b7d5829.sol
Total states:149
2.721375
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol
Total states:41276
116.236713
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.509931
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:145

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.467224
Transaction Length: 1
Severity: Low
Contract: LockupContract
Function name: lockedAllocationData(address,uint256)
PC address: 3295
Estimated Gas Usage: 821 - 1106
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:1025

mapping(address => uint256[]) public lockedAllocationData

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.160907
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3578
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:1092

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.399120
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3603
Estimated Gas Usage: 2951 - 4089
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:1092

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.465919
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3605
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:1092

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.638269
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:145

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.814938
Transaction Length: 1
Severity: Low
Contract: CLIAllocator
Function name: unlockManuallyLockedBalances(address)
PC address: 4785
Estimated Gas Usage: 5545 - 76368
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:1208

lockupContract.setManuallyLockedForAddress(
            _holder,
            0
        )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.357739
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5243
Estimated Gas Usage: 13852 - 89787
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.295922
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5255
Estimated Gas Usage: 24473 - 140693
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:1072

lockedAllocationData[_address].push(_amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.184996
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5348
Estimated Gas Usage: 24473 - 140693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:10.693862
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5360
Estimated Gas Usage: 35094 - 191599
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:1073

lockedAllocationData[_address].push(_lockPeriodInSeconds)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.721323
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5453
Estimated Gas Usage: 35094 - 191599
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1c8f6057585af75df2e386dabefd11cbf32906e.sol:2

ification at Ether

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x1542e790a742333ea6a2f171c5d07a2e7794eef4.sol
Total states:854
9.302747
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x46ee0eefe6d8d7bb757d3fca2713a18001fb71fe.sol
Total states:240
21.674131
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xe6179bb571d2d69837be731da88c76e377ec4738.sol
Total states:594
1.514925
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xd9ba52162a5eea7c82521b96eb2103deeb67a7ac.sol
Total states:1308
0.992156
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x404789fd049f56bd9924419f12afba1b2573fc20.sol
Total states:2126
21.020315
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.530295
Transaction Length: 1
Severity: High
Contract: KYF
Function name: removeMultiple(address[])
PC address: 927
Estimated Gas Usage: 428 - 523
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x404789fd049f56bd9924419f12afba1b2573fc20.sol:7

    |  __    / ____|


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.412277
Transaction Length: 1
Severity: High
Contract: KYF
Function name: removeMultiple(address[])
PC address: 929
Estimated Gas Usage: 428 - 523
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x404789fd049f56bd9924419f12afba1b2573fc20.sol:3

*/

/*

    /     |  __    / ____|
 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol
Total states:35050
168.574831
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.179038
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.481226
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.416247
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.561812
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.333346
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1250
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.356553
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1252
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.855962
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1335
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.665409
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1337
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.819246
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.583767
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3621
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.099047
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3621
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.675075
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.863143
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.776663
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.499471
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.620886
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.319370
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.166315
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15373
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xc2999a44d3bb440c17fc82fe499fdd581352a8d7.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x9447dd070e8d4896073e8e4fba9f013142b78f57.sol
Total states:2023
5.36694
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xd4260e4bfb354259f5e30279cb0d7f784ea5f37a.sol
Total states:822
10.258252
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xf8345037Da48e90A68A9590C4bBAad6fbbd62661.sol
Total states:60
1.113794
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.132928
Transaction Length: 0
Severity: High
Contract: Msign
Function name: constructor
PC address: 120
Estimated Gas Usage: 287 - 3153
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf8345037Da48e90A68A9590C4bBAad6fbbd62661.sol:11

ic Set type with
    

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xa2cdf1944c40f2511cb3fdd975b45ff0d217296c.sol
Total states:1880
96.452396
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.598574
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa2cdf1944c40f2511cb3fdd975b45ff0d217296c.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.695752
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa2cdf1944c40f2511cb3fdd975b45ff0d217296c.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.547330
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa2cdf1944c40f2511cb3fdd975b45ff0d217296c.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.435371
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa2cdf1944c40f2511cb3fdd975b45ff0d217296c.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:31.720657
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xa2cdf1944c40f2511cb3fdd975b45ff0d217296c.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:31.159883
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xa2cdf1944c40f2511cb3fdd975b45ff0d217296c.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x15c41b6e5541d4c31334b5339975a163d1ec27b5.sol
Total states:843
32.433456
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.096027
Transaction Length: 0
Severity: High
Contract: ETHDropOpenAdd
Function name: constructor
PC address: 101
Estimated Gas Usage: 263 - 3129
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x15c41b6e5541d4c31334b5339975a163d1ec27b5.sol:28

 {

        bool exis

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.432613
Transaction Length: 1
Severity: High
Contract: ETHDropFactory
Function name: newETHDropOpenAdd(uint256,address[])
PC address: 166
Estimated Gas Usage: 299 - 394
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x15c41b6e5541d4c31334b5339975a163d1ec27b5.sol:9

ma solidity 0.5.14;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.584424
Transaction Length: 1
Severity: High
Contract: ETHDropFactory
Function name: newETHDropOpenAdd(uint256,address[])
PC address: 168
Estimated Gas Usage: 299 - 394
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x15c41b6e5541d4c31334b5339975a163d1ec27b5.sol:3



*/



//pragma solidity 0.5.14;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.167696
Transaction Length: 0
Severity: Low
Contract: ETHDropOpenAdd
Function name: constructor
PC address: 701
Estimated Gas Usage: 5784 - 28743
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x15c41b6e5541d4c31334b5339975a163d1ec27b5.sol:84

members[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:31.736135
Transaction Length: 1
Severity: Low
Contract: ETHDropFactory
Function name: drops(uint256)
PC address: 878
Estimated Gas Usage: 656 - 751
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x15c41b6e5541d4c31334b5339975a163d1ec27b5.sol:236

address[] public drops

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x9f152426bc5b9157dbfb5cf9354dd4e79df21496.sol
Total states:2324
2.238683
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x49d6f49c854279633c78905371e5e17e9abd65e7.sol
Total states:723
5.836134
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xbad9103654c05517cc86673c20c77be2781be196.sol
Total states:822
10.373068
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x95a93641b9b8cc91ba7fa729d5e099d677129080.sol
Total states:2324
1.870897
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x7679a6dba4435cad1f876fc50e0e09a93afa2d08.sol
Total states:594
1.500052
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xD2f7D8A940324F12DFe623D5529b077E353314d3.sol
Total states:11221
61.102942
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.851898
Transaction Length: 1
Severity: High
Contract: Staking
Function name: stake(uint256,bytes)
PC address: 668
Estimated Gas Usage: 414 - 509
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xD2f7D8A940324F12DFe623D5529b077E353314d3.sol:3

*/

// File: contracts/lib/os/ERC20

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.317485
Transaction Length: 1
Severity: High
Contract: Staking
Function name: stakeFor(address,uint256,bytes)
PC address: 831
Estimated Gas Usage: 469 - 564
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xD2f7D8A940324F12DFe623D5529b077E353314d3.sol:3

*/

// File: contracts/lib/os/ERC20

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.223646
Transaction Length: 1
Severity: High
Contract: Staking
Function name: allowManagerAndLock(uint256,address,uint256,bytes)
PC address: 1004
Estimated Gas Usage: 518 - 613
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xD2f7D8A940324F12DFe623D5529b077E353314d3.sol:3

*/

// File: contracts/lib/os/ERC20

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.045385
Transaction Length: 1
Severity: High
Contract: Staking
Function name: receiveApproval(address,uint256,address,bytes)
PC address: 2656
Estimated Gas Usage: 456 - 551
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xD2f7D8A940324F12DFe623D5529b077E353314d3.sol:3

*/

// File: contracts/lib/os/ERC20

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.371532
Transaction Length: 1
Severity: High
Contract: Staking
Function name: allowManager(address,uint256,bytes)
PC address: 2975
Estimated Gas Usage: 489 - 584
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xD2f7D8A940324F12DFe623D5529b077E353314d3.sol:3

*/

// File: contracts/lib/os/ERC20

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.312136
Transaction Length: 1
Severity: High
Contract: Staking
Function name: unstake(uint256,bytes)
PC address: 3174
Estimated Gas Usage: 412 - 507
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xD2f7D8A940324F12DFe623D5529b077E353314d3.sol:3

*/

// File: contracts/lib/os/ERC20

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x0c073c92e7684031cfc297b83ecc33619e864d18.sol
Total states:782
2.458907
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x26572bf2620108cb5006987e6348c07dc4e14a0f.sol
Total states:272
74.389946
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.065400
Transaction Length: 0
Severity: High
Contract: VaultProRata
Function name: constructor
PC address: 408
Estimated Gas Usage: 82423 - 403508
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x26572bf2620108cb5006987e6348c07dc4e14a0f.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.690797
Transaction Length: 0
Severity: Low
Contract: VaultProRata
Function name: constructor
PC address: 422
Estimated Gas Usage: 82433 - 403518
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x26572bf2620108cb5006987e6348c07dc4e14a0f.sol:35

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xBA940b56CF4D6fd48DB5C574145618F1116470392.sol
Total states:1387
1.34506
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.601659
Transaction Length: 1
Severity: Low
Contract: KYFToken
Function name: kyfInstancesArray(uint256)
PC address: 1788
Estimated Gas Usage: 723 - 818
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xBA940b56CF4D6fd48DB5C574145618F1116470392.sol:78

address[] public kyfInstancesArray

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xa0a9c17def31a03908bc3da719d0ba02d375d923.sol
Total states:1759
6.346106
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol
Total states:2097
64.734285
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.672336
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: sendPrize(address[],uint256[])
PC address: 608
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:9

e: @openzeppelin/cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.365640
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: sendPrize(address[],uint256[])
PC address: 610
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:3



*/



// File: @openzeppelin/contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.638342
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: sendPrize(address[],uint256[])
PC address: 693
Estimated Gas Usage: 539 - 634
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:9

e: @openzeppelin/cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.909732
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: sendPrize(address[],uint256[])
PC address: 695
Estimated Gas Usage: 539 - 634
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:3



*/



// File: @openzeppelin/contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:57.557651
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: updateWhitelist(address[],bool)
PC address: 1122
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:9

e: @openzeppelin/cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:00.647264
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: updateWhitelist(address[],bool)
PC address: 1124
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:3



*/



// File: @openzeppelin/contr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.490621
Transaction Length: 1
Severity: Low
Contract: SecretSanta
Function name: prizeTokensId(uint256)
PC address: 1565
Estimated Gas Usage: 680 - 775
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:276

uint256[] public prizeTokensId

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.911611
Transaction Length: 1
Severity: Low
Contract: SecretSanta
Function name: prizeTokens(uint256)
PC address: 1606
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:274

address[] public prizeTokens

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.944563
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: claimPrize()
PC address: 1661
Estimated Gas Usage: 1053 - 1148
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:498

lastPresentAt + prizeDelay

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.215060
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: sendPrize(address[],uint256[])
PC address: 2810
Estimated Gas Usage: 1460 - 1555
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:356

lastPresentAt + prizeDelay

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:02.708539
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: isTooLate()
PC address: 4106
Estimated Gas Usage: 1100 - 1195
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:582

lastPresentAt + prizeDelay

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:03.372992
Transaction Length: 1
Severity: High
Contract: SecretSanta
Function name: sendPresent(address,uint256)
PC address: 4408
Estimated Gas Usage: 1100 - 1195
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x8496b5ce2851b1da7833e61b84043890b4b94bfa.sol:432

lastPresentAt + prizeDelay

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x044a4C29dcAD5FE3DA932155F949FC0564F8fCae.sol
Total states:12671
40.632911
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol
Total states:14979
203.666419
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.035031
Transaction Length: 0
Severity: High
Contract: ERC721Metadata
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:12

PDX-License-Identifier: GPL-3.0-or-later

/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.045172
Transaction Length: 0
Severity: High
Contract: Title
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:12

PDX-License-Identifier: GPL-3.0-or-later

/

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:22.781471
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 820
Estimated Gas Usage: 309 - 404
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:545

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:25.180326
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 959
Estimated Gas Usage: 324 - 419
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:553

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.388584
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 985
Estimated Gas Usage: 382 - 477
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:549

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.205892
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 1128
Estimated Gas Usage: 496 - 591
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:541

x + y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.339923
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1136
Estimated Gas Usage: 477 - 572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:3

*/

// Verified using https://dapp.

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:42.546835
Transaction Length: 1
Severity: Medium
Contract: Shelf
Function name: issue(address,uint256)
PC address: 1819
Estimated Gas Usage: 22744 - 157449
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 11416
Offset: 12054
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1410

function issue(address registry_, uint token_) external note returns (uint) {
        require(NFTLike_2(registry_).ownerOf(token_) == msg.sender, "nft-not-owned");
        bytes32 nft = keccak256(abi.encodePacked(registry_, token_));
        require(nftlookup[nft] == 0, "nft-in-use");
        uint loan = title.issue(msg.sender);
        nftlookup[nft] = loan;
        shelf[loan].registry = registry_;
        shelf[loan].tokenId = token_;

        return loan;
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:53.310579
Transaction Length: 2
Severity: Medium
Contract: Shelf
Function name: lock(uint256)
PC address: 2627
Estimated Gas Usage: 7640 - 81359
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 15479
Offset: 16139
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1513

function lock(uint loan) external owner(loan) note {
        if(address(subscriber) != address(0)) {
            subscriber.unlockEvent(loan);
        }
        NFTLike_2(shelf[loan].registry).transferFrom(msg.sender, address(this), shelf[loan].tokenId);
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.774072
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: withdraw(uint256,uint256,address)
PC address: 4850
Estimated Gas Usage: 1674 - 2475
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:06.734710
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: withdraw(uint256,uint256,address)
PC address: 4850
Estimated Gas Usage: 1674 - 2475
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.328207
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: close(uint256)
PC address: 6219
Estimated Gas Usage: 1577 - 2378
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1423

pile.debt(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:12.675168
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: close(uint256)
PC address: 6219
Estimated Gas Usage: 1577 - 2378
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1423

pile.debt(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:36.168474
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: borrow(uint256,uint256)
PC address: 8042
Estimated Gas Usage: 1618 - 2419
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:18.351774
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: borrow(uint256,uint256)
PC address: 8042
Estimated Gas Usage: 1618 - 2419
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:37.751620
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: unlock(uint256)
PC address: 9574
Estimated Gas Usage: 1591 - 2392
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:24.725361
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: unlock(uint256)
PC address: 9574
Estimated Gas Usage: 1591 - 2392
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:39.150760
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: unlock(uint256)
PC address: 9832
Estimated Gas Usage: 3739 - 39432
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1523

pile.debt(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:31.427164
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: unlock(uint256)
PC address: 9832
Estimated Gas Usage: 3739 - 39432
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1523

pile.debt(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:41.849074
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: issue(address,uint256)
PC address: 12054
Estimated Gas Usage: 3994 - 40206
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1414

title.issue(msg.sender)

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:43.018405
Transaction Length: 1
Severity: High
Contract: Shelf
Function name: safeSub(uint256,uint256)
PC address: 14144
Estimated Gas Usage: 399 - 494
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:545

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:45.352288
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: safeDiv(uint256,uint256)
PC address: 14283
Estimated Gas Usage: 325 - 420
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:553

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.486243
Transaction Length: 1
Severity: High
Contract: Shelf
Function name: rdiv(uint256,uint256)
PC address: 14439
Estimated Gas Usage: 472 - 567
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:549

x * y

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:47.035499
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: repay(uint256,uint256)
PC address: 14748
Estimated Gas Usage: 1639 - 2440
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:38.732599
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: repay(uint256,uint256)
PC address: 14748
Estimated Gas Usage: 1639 - 2440
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:48.516100
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 15479
Estimated Gas Usage: 1545 - 2346
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:44.757093
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 15479
Estimated Gas Usage: 1545 - 2346
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1289

title.ownerOf(loan)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:50.586491
Transaction Length: 1
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 16139
Estimated Gas Usage: 4797 - 41390
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1517

NFTLike_2(shelf[loan].registry).transferFrom(msg.sender, address(this), shelf[loan].tokenId)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:52.254375
Transaction Length: 2
Severity: Low
Contract: Shelf
Function name: lock(uint256)
PC address: 16139
Estimated Gas Usage: 4797 - 41390
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:1517

NFTLike_2(shelf[loan].registry).transferFrom(msg.sender, address(this), shelf[loan].tokenId)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.019046
Transaction Length: 1
Severity: High
Contract: Shelf
Function name: rdiv(uint256,uint256)
PC address: 16964
Estimated Gas Usage: 586 - 681
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5b2b43b3676057e38F332De73A9fCf0F8f6Babf7.sol:541

x + y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x6032d6e0ad0446d77118b9171f8f2e2cfd433069.sol
Total states:1759
6.528483
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x1f5aac1f2f6b74220996f2bbfb59e786c798ce23.sol
Total states:2324
2.328335
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x3e06b9de07c7b6c4b714ce32f15ebffc038392b0.sol
Total states:426
0.754955
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xEe87b220d9b0e762f0643C501fADeFd6d9cc5B7E.sol
Total states:629
1.456054
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xD85e2772912213e0c584d80B2694c79D6a09E39A.sol
Total states:1634
1.494847
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.584009
Transaction Length: 1
Severity: Low
Contract: KYFToken
Function name: kyfInstancesArray(uint256)
PC address: 1854
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xD85e2772912213e0c584d80B2694c79D6a09E39A.sol:182

address[] public kyfInstancesArray

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol
Total states:150
32.947172
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.291634
Transaction Length: 1
Severity: High
Contract: MStableStrat
Function name: setAllowances(address,address[],bool)
PC address: 480
Estimated Gas Usage: 375 - 470
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:5

ontracts/vaults/IStra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.416569
Transaction Length: 1
Severity: High
Contract: MStableStrat
Function name: setAllowances(address,address[],bool)
PC address: 482
Estimated Gas Usage: 375 - 470
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:3

*/

// File: contracts/vaults/IStrat

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:15.060170
Transaction Length: 1
Severity: Low
Contract: MStableStrat
Function name: exchangeRewardForWant(bool)
PC address: 3392
Estimated Gas Usage: 5172 - 41905
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:866

balProxy.smartSwapExactIn(
            mta,
            musd,
            exchangeAll ? swapAmt : swapAmt.mul(8000).div(DENOM),
            0,
            numPools
        )

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:16.803582
Transaction Length: 1
Severity: Low
Contract: MStableStrat
Function name: exchangeRewardForWant(bool)
PC address: 3789
Estimated Gas Usage: 8631 - 81296
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:875

balProxy.smartSwapExactIn(
            musd,
            want,
            swapAmt,
            0,
            numPools
        )

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:12.671740
Transaction Length: 1
Severity: Low
Contract: MStableStrat
Function name: exitMGov()
PC address: 4064
Estimated Gas Usage: 1425 - 2131
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:843

mtaGov.withdraw()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:13.466505
Transaction Length: 1
Severity: Low
Contract: MStableStrat
Function name: exitMGov()
PC address: 4361
Estimated Gas Usage: 2609 - 39052
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xcda1fdce80d324f3f4a5de323d51428bd402d41c.sol:846

address(this).call(
            abi.encodeWithSignature(
                "exchangeRewardForWant(bool)",
                true
            )
        )

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x071124f489b96101e4a6b1ce78a0c4b9eba881a2.sol
Total states:77
3.315086
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol
Total states:17402
535.109349
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:21.864257
Transaction Length: 1
Severity: Low
Contract: MainnetStableXToIStableXAssimilator
Function name: outputRawAndGetBalance(address,uint256)
PC address: 2348
Estimated Gas Usage: 1141 - 1612
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:903

istablex.unstake(_amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:24.130421
Transaction Length: 1
Severity: Low
Contract: MainnetStableXToIStableXAssimilator
Function name: outputRawAndGetBalance(address,uint256)
PC address: 2594
Estimated Gas Usage: 2829 - 37957
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:905

stablex.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:25.682713
Transaction Length: 1
Severity: Low
Contract: MainnetStableXToIStableXAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 3963
Estimated Gas Usage: 1131 - 1792
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:863

stablex.transferFrom(msg.sender, address(this), _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:27.815895
Transaction Length: 1
Severity: Low
Contract: MainnetStableXToIStableXAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 4245
Estimated Gas Usage: 2804 - 38027
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:867

istablex.stake(_amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:28.209890
Transaction Length: 1
Severity: High
Contract: MainnetStableXToIStableXAssimilator
Function name: intakeRawAndGetBalance(uint256)
PC address: 4555
Estimated Gas Usage: 5467 - 109438
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:871

_balance * _index

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:30.995972
Transaction Length: 1
Severity: High
Contract: MainnetStableXToIStableXAssimilator
Function name: viewNumeraireBalance(address)
PC address: 5052
Estimated Gas Usage: 3721 - 72845
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:959

_balance * _index

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:35.150339
Transaction Length: 1
Severity: Low
Contract: MainnetStableXToIStableXAssimilator
Function name: outputRaw(address,uint256)
PC address: 5221
Estimated Gas Usage: 1134 - 1605
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:919

istablex.unstake(_amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:37.165033
Transaction Length: 1
Severity: Low
Contract: MainnetStableXToIStableXAssimilator
Function name: outputRaw(address,uint256)
PC address: 5466
Estimated Gas Usage: 2813 - 37941
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:921

stablex.transfer(_dst, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:49.187721
Transaction Length: 1
Severity: Low
Contract: MainnetStableXToIStableXAssimilator
Function name: intakeRaw(uint256)
PC address: 5954
Estimated Gas Usage: 1210 - 1871
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:879

stablex.transferFrom(msg.sender, address(this), _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:08:51.035122
Transaction Length: 1
Severity: Low
Contract: MainnetStableXToIStableXAssimilator
Function name: intakeRaw(uint256)
PC address: 6234
Estimated Gas Usage: 2880 - 38103
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x36F1d6a9DCf388C7524B26b70857d0c26d91A53D.sol:883

istablex.stake(_amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x6b41459ced638645092a1c6d50726b428a66348a.sol
Total states:596
1.626604
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x1eae93c8544c7935815aadea5cc5aedd04326680.sol
Total states:30
0.222941
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x92ec47df1aa167806dfa4916d9cfb99da6953b8f.sol
Total states:235
0.506203
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol
Total states:4261
24.938605
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.115215
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 762
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.886709
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistTokens(address[])
PC address: 764
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.906336
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],uint256,bool)
PC address: 1039
Estimated Gas Usage: 440 - 535
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.862802
Transaction Length: 1
Severity: High
Contract: Core
Function name: whitelistPeak(address,uint256[],uint256,bool)
PC address: 1041
Estimated Gas Usage: 440 - 535
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:18.098561
Transaction Length: 1
Severity: Low
Contract: Core
Function name: systemCoins(uint256)
PC address: 6996
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:504

address[] public systemCoins

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:20.149382
Transaction Length: 1
Severity: Low
Contract: Core
Function name: peaksAddresses(uint256)
PC address: 7847
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:522

address[] public peaksAddresses

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:20.825741
Transaction Length: 1
Severity: Low
Contract: Core
Function name: feed(uint256)
PC address: 8610
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xab6adbf1a0b140663d33026b0bfdeafef97370d8.sol:505

uint[] public feed

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xf6e53b3aae671319a0f9d9ca7fac5f41599bc7a5.sol
Total states:2858
30.279835
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.195604
Transaction Length: 1
Severity: High
Contract: MerkleDrop
Function name: addFunder(address)
PC address: 2988
Estimated Gas Usage: 2509 - 37403
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf6e53b3aae671319a0f9d9ca7fac5f41599bc7a5.sol:5

dity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.544363
Transaction Length: 1
Severity: High
Contract: MerkleDrop
Function name: addFunder(address)
PC address: 2991
Estimated Gas Usage: 2509 - 37403
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf6e53b3aae671319a0f9d9ca7fac5f41599bc7a5.sol:3



//pragma solidity 0.5.16;
pragma solidity

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.401888
Transaction Length: 1
Severity: High
Contract: MerkleDrop
Function name: addFunder(address)
PC address: 3003
Estimated Gas Usage: 2509 - 37403
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf6e53b3aae671319a0f9d9ca7fac5f41599bc7a5.sol:550

nexus.governor()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:03.062250
Transaction Length: 1
Severity: High
Contract: MerkleDrop
Function name: addFunder(address)
PC address: 6995
Estimated Gas Usage: 2509 - 37403
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf6e53b3aae671319a0f9d9ca7fac5f41599bc7a5.sol:123

ry instead of the unche

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.082161
Transaction Length: 1
Severity: High
Contract: MerkleDrop
Function name: claimWeeks(address,uint256[],uint256[],bytes32[][])
PC address: 9667
Estimated Gas Usage: 688 - 876
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf6e53b3aae671319a0f9d9ca7fac5f41599bc7a5.sol:679

  mapping(uint256

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xf64ba2fA3595612cd56f7290E9FCf0293007E7bb.sol
Total states:2391
19.777955
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x05bd31d5ca9ca645fd4d0efb7a0ad383ca78566f.sol
Total states:22531
42.614456
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.502474
Transaction Length: 1
Severity: High
Contract: AuctionProtection
Function name: distributionStackInBatch(address[])
PC address: 2364
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x05bd31d5ca9ca645fd4d0efb7a0ad383ca78566f.sol:5

ontracts/InterFaces/I

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.851855
Transaction Length: 1
Severity: High
Contract: AuctionProtection
Function name: distributionStackInBatch(address[])
PC address: 2366
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x05bd31d5ca9ca645fd4d0efb7a0ad383ca78566f.sol:3

*/

// File: contracts/InterFaces/IA

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:12.490968
Transaction Length: 1
Severity: Low
Contract: AuctionProtection
Function name: cancelInvestment()
PC address: 17105
Estimated Gas Usage: 2028 - 2924
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x05bd31d5ca9ca645fd4d0efb7a0ad383ca78566f.sol:777

IAuction(auctionAddress).auctionDay()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:06.572153
Transaction Length: 2
Severity: Low
Contract: AuctionProtection
Function name: cancelInvestment()
PC address: 17105
Estimated Gas Usage: 2028 - 2924
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x05bd31d5ca9ca645fd4d0efb7a0ad383ca78566f.sol:777

IAuction(auctionAddress).auctionDay()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.077246
Transaction Length: 1
Severity: Low
Contract: AuctionProtection
Function name: unlockTokenFromStack()
PC address: 18781
Estimated Gas Usage: 2794 - 4070
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x05bd31d5ca9ca645fd4d0efb7a0ad383ca78566f.sol:420

_token.transfer(_to, _amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x0eadd31db1d0f367a54eff9e4c76beb4f121e729.sol
Total states:22554
103.64572
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.146483
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 844
Estimated Gas Usage: 558 - 3889
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0eadd31db1d0f367a54eff9e4c76beb4f121e729.sol:1404

distributionPeriod * 1 days

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.464010
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 1422
Estimated Gas Usage: 46536 - 230197
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0eadd31db1d0f367a54eff9e4c76beb4f121e729.sol:303

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.451480
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0eadd31db1d0f367a54eff9e4c76beb4f121e729.sol:225

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.145644
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: transfer(address,uint256)
PC address: 3334
Estimated Gas Usage: 2044 - 3175
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x0eadd31db1d0f367a54eff9e4c76beb4f121e729.sol:1100

_town.checkProposal(recipient)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.049130
Transaction Length: 2
Severity: High
Contract: ExternalTokenTemplate
Function name: increaseAllowance(address,uint256)
PC address: 3494
Estimated Gas Usage: 922 - 1397
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0eadd31db1d0f367a54eff9e4c76beb4f121e729.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.764475
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: getHolderByIndex(uint256)
PC address: 4982
Estimated Gas Usage: 725 - 820
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x0eadd31db1d0f367a54eff9e4c76beb4f121e729.sol:1076

_holders[index]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.710222
Transaction Length: 2
Severity: High
Contract: TownToken
Function name: increaseAllowance(address,uint256)
PC address: 6628
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0eadd31db1d0f367a54eff9e4c76beb4f121e729.sol:225

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x6ed094545751da48bcccc91b59a606be8472a24f.sol
Total states:2324
2.197551
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x884d2d79657bac17b964bc5d8bdfd80c3712db74.sol
Total states:10936
27.212044
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.695599
Transaction Length: 1
Severity: High
Contract: pLINKVault
Function name: availableWithdraw(address)
PC address: 1869
Estimated Gas Usage: 1088 - 1373
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x884d2d79657bac17b964bc5d8bdfd80c3712db74.sol:640

_rewardCount - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.652895
Transaction Length: 1
Severity: Low
Contract: pLINKVault
Function name: addressIndices(uint256)
PC address: 2343
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x884d2d79657bac17b964bc5d8bdfd80c3712db74.sol:456

address[] public addressIndices

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.486600
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x884d2d79657bac17b964bc5d8bdfd80c3712db74.sol:214

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.586563
Transaction Length: 1
Severity: High
Contract: pLINKVault
Function name: deposit(uint256)
PC address: 5691
Estimated Gas Usage: 11933 - 52453
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x884d2d79657bac17b964bc5d8bdfd80c3712db74.sol:252

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol
Total states:12852
466.773963
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.400073
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.527139
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1722
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.321336
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1724
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.836059
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1870
Estimated Gas Usage: 785 - 3562
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.344317
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1872
Estimated Gas Usage: 785 - 3562
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:36.273133
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: getModuleAddress(string)
PC address: 2154
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:13.277519
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: withdraw(address,uint256[])
PC address: 2519
Estimated Gas Usage: 397 - 492
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:17.668893
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: withdraw(address,uint256[])
PC address: 2521
Estimated Gas Usage: 397 - 492
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:43.022718
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: supportedTokens()
PC address: 3026
Estimated Gas Usage: 1250 - 2097
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:1309

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:16.204307
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: supportedTokens()
PC address: 3066
Estimated Gas Usage: 1400 - 2623
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xa46ddf8d1c3f9c7b594c25bbb7b500eecb237781.sol:1309

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x28414d8735831e660f19e2293234ba7962ee00ab.sol
Total states:77
3.300526
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xf19ed2025effdb2b22d1376c09b4884f26475dd1.sol
Total states:22554
100.903575
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.305913
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 844
Estimated Gas Usage: 558 - 3889
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf19ed2025effdb2b22d1376c09b4884f26475dd1.sol:705

distributionPeriod * 1 days

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.368056
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 1422
Estimated Gas Usage: 46536 - 230197
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf19ed2025effdb2b22d1376c09b4884f26475dd1.sol:153

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.352571
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf19ed2025effdb2b22d1376c09b4884f26475dd1.sol:114

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.873617
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: transfer(address,uint256)
PC address: 3334
Estimated Gas Usage: 2044 - 3175
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xf19ed2025effdb2b22d1376c09b4884f26475dd1.sol:553

_town.checkProposal(recipient)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.899336
Transaction Length: 2
Severity: High
Contract: ExternalTokenTemplate
Function name: increaseAllowance(address,uint256)
PC address: 3494
Estimated Gas Usage: 922 - 1397
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf19ed2025effdb2b22d1376c09b4884f26475dd1.sol:114

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.551943
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: getHolderByIndex(uint256)
PC address: 4982
Estimated Gas Usage: 725 - 820
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xf19ed2025effdb2b22d1376c09b4884f26475dd1.sol:541

_holders[index]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.103912
Transaction Length: 2
Severity: High
Contract: TownToken
Function name: increaseAllowance(address,uint256)
PC address: 6628
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xf19ed2025effdb2b22d1376c09b4884f26475dd1.sol:114

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x444395df5c6e2806adc408796f70a6e028072695.sol
Total states:2324
1.883814
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x949414d01c913e71e3c141f5e607a4d8bbbb3b25.sol
Total states:5184
9.291172
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.113325
Transaction Length: 1
Severity: Low
Contract: dBalancerPool
Function name: invAddrs(address,uint256)
PC address: 9072
Estimated Gas Usage: 798 - 1083
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x949414d01c913e71e3c141f5e607a4d8bbbb3b25.sol:628

mapping(address => address[]) public invAddrs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol
Total states:35718
204.940824
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.286659
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.587588
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.701013
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.573959
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.945937
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1206
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.766496
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1208
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.590001
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1291
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.667559
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1293
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.925462
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleAccess
Function name: interpolate(uint256,uint256,uint256,uint256,uint256)
PC address: 2313
Estimated Gas Usage: 997 - 1848
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.895961
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.397746
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3332
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.879403
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3332
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:38.516218
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:23.073155
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:962

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.675201
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:1112

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.857581
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:1112

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.593233
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.772256
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.014267
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 13472
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x310d1325d8410e572f0d7f9e117c3fbb558b8300.sol:1267

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x2b4f291dac3f50df9f846901dd350a7ff2357bd6.sol
Total states:738
3.665744
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol
Total states:10198
188.550725
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.131469
Transaction Length: 0
Severity: High
Contract: SimpleUpgrader
Function name: constructor
PC address: 116
Estimated Gas Usage: 287 - 3153
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:17

ation, either version

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:03.078418
Transaction Length: 1
Severity: Medium
Contract: BaseModule
Function name: recoverToken(address)
PC address: 334
Estimated Gas Usage: 4033 - 73677
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1416
Offset: 1673
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:1436

function recoverToken(address _token) external {

        uint total = ERC20(_token).balanceOf(address(this));

        ERC20(_token).transfer(address(registry), total);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.411032
Transaction Length: 0
Severity: High
Contract: SimpleUpgrader
Function name: constructor
PC address: 531
Estimated Gas Usage: 17810 - 82247
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:1524

contract SimpleUpgrader is BaseModule {



    bytes32 constant NAME = "SimpleUpgrader";

    address[] public toDisable;

    address[] public toEnable;



    // *************** Constructor ********************** //



    constructor(

        ModuleRegistry _registry,

        address[] memory _toDisable,

        address[] memory _toEnable

    )

        BaseModule(_registry, GuardianStorage(0), NAME)

        public

    {

        toDisable = _toDisable;

        toEnable = _toEnable;

    }



    // *************** External/Public Functions ********************* //



    /**

     * @dev Perform the upgrade for a wallet. This method gets called

     * when SimpleUpgrader is temporarily added as a module.

     * @param _wallet The target wallet.

     */

    function init(BaseWallet _wallet) public onlyWallet(_wallet) {

        uint256 i = 0;

        //add new modules

        for (; i < toEnable.length; i++) {

            BaseWallet(_wallet).authoriseModule(toEnable[i], true);

        }

        //remove old modules

        for (i = 0; i < toDisable.length; i++) {

            BaseWallet(_wallet).authoriseModule(toDisable[i], false);

        }

        // SimpleUpgrader did its job, we no longer need it as a module

        BaseWallet(_wallet).authoriseModule(address(this), false);

    }

}

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.559619
Transaction Length: 1
Severity: High
Contract: ModuleRegistry
Function name: isRegisteredModule(address[])
PC address: 723
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:9

yright (C) 2018  Arge

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.613493
Transaction Length: 1
Severity: High
Contract: ModuleRegistry
Function name: isRegisteredModule(address[])
PC address: 725
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:3



*/



// Copyright (C) 2018  Argen

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.913453
Transaction Length: 1
Severity: High
Contract: BaseWallet
Function name: init(address,address[])
PC address: 1149
Estimated Gas Usage: 418 - 513
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:9

yright (C) 2018  Arge

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.940775
Transaction Length: 1
Severity: High
Contract: BaseWallet
Function name: init(address,address[])
PC address: 1151
Estimated Gas Usage: 418 - 513
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:3



*/



// Copyright (C) 2018  Argen

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.461122
Transaction Length: 1
Severity: High
Contract: GuardianStorage
Function name: revokeGuardian(address,address)
PC address: 1519
Estimated Gas Usage: 2898 - 37745
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:890

config.guardians.length - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.957651
Transaction Length: 1
Severity: Low
Contract: GuardianStorage
Function name: revokeGuardian(address,address)
PC address: 1530
Estimated Gas Usage: 2908 - 37755
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:890

config.guardians[config.guardians.length - 1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:22.271242
Transaction Length: 1
Severity: High
Contract: BaseWallet
Function name: invoke(address,uint256,bytes)
PC address: 1655
Estimated Gas Usage: 422 - 517
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:3



*/



// Copyright (C) 2018  Arge

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:02.977337
Transaction Length: 1
Severity: Medium
Contract: BaseModule
Function name: recoverToken(address)
PC address: 1673
Estimated Gas Usage: 3208 - 38666
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:1440

ERC20(_token).transfer(address(registry), total)

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:00:20.008711
Transaction Length: 1
Severity: Medium
Contract: BaseWallet
Function name: init(address,address[])
PC address: 4835
Estimated Gas Usage: 19097 - 81268
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop2/0xc0b6eed9589380c3e3258e3a00a15c898541da5c.sol:318

Module(_modules[i]).init(this)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x32f1d4bb869ae0be174a4d06ee359877c1b6b71b.sol
Total states:3288
12.094313
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.915083
Transaction Length: 2
Severity: High
Contract: LPTokenWrapper
Function name: stake(uint256)
PC address: 963
Estimated Gas Usage: 765 - 860
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x32f1d4bb869ae0be174a4d06ee359877c1b6b71b.sol:82

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xb3ab2b676a1efdb16a227e151dc31f5bd3856744.sol
Total states:9122
90.333933
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:20.251506
Transaction Length: 1
Severity: High
Contract: SafeMath
Function name: safeMul(uint256,uint256)
PC address: 483
Estimated Gas Usage: 305 - 400
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb3ab2b676a1efdb16a227e151dc31f5bd3856744.sol:52

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:48.467623
Transaction Length: 1
Severity: High
Contract: SafeMath
Function name: safeAdd(uint256,uint256)
PC address: 532
Estimated Gas Usage: 331 - 426
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb3ab2b676a1efdb16a227e151dc31f5bd3856744.sol:42

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.452271
Transaction Length: 1
Severity: High
Contract: CriptoRo
Function name: safeMul(uint256,uint256)
PC address: 7739
Estimated Gas Usage: 371 - 466
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb3ab2b676a1efdb16a227e151dc31f5bd3856744.sol:52

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.545734
Transaction Length: 1
Severity: High
Contract: CriptoRo
Function name: safeAdd(uint256,uint256)
PC address: 7923
Estimated Gas Usage: 419 - 514
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xb3ab2b676a1efdb16a227e151dc31f5bd3856744.sol:42

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol
Total states:10016
593.672726
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.360840
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: multipleAirdrop(address[],uint256[])
PC address: 1629
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:5

olidity ^ 0.5.16;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.004287
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: multipleAirdrop(address[],uint256[])
PC address: 1631
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:3

*/

//pragma solidity ^ 0.5.16;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.890021
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: multipleAirdrop(address[],uint256[])
PC address: 1777
Estimated Gas Usage: 718 - 3495
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:5

olidity ^ 0.5.16;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.068741
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: multipleAirdrop(address[],uint256[])
PC address: 1779
Estimated Gas Usage: 718 - 3495
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:3

*/

//pragma solidity ^ 0.5.16;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:53.357339
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: sumAsm(uint256[])
PC address: 1998
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:5

olidity ^ 0.5.16;
pra

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:56.846558
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: sumAsm(uint256[])
PC address: 2000
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:3

*/

//pragma solidity ^ 0.5.16;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:09.892849
Transaction Length: 1
Severity: High
Contract: EMTC
Function name: symbol()
PC address: 2632
Estimated Gas Usage: 1957 - 3087
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:133

function symbol() public view returns(string memory) {
        return _symbol;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.280493
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3291
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x7bf435c7c9692bbc1e5600095d933e3853f043d0.sol:144

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xd1afd2a0c423f115ab28af59402872f50c742af0.sol
Total states:23611
207.726925
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.307045
Transaction Length: 0
Severity: High
Contract: StableCoin
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1afd2a0c423f115ab28af59402872f50c742af0.sol:15

ilable
 * via msg.sender and msg.data, they

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:53.303032
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1afd2a0c423f115ab28af59402872f50c742af0.sol:217

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:50.994340
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4075
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1afd2a0c423f115ab28af59402872f50c742af0.sol:217

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:54.082146
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 4983
Estimated Gas Usage: 1467 - 2272
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0xd1afd2a0c423f115ab28af59402872f50c742af0.sol:217

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x296d278e7a48fed3fcb8b86b8f71b0fd78818c66.sol
Total states:1986
21.617454
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.171714
Transaction Length: 1
Severity: High
Contract: StrategyAddTwoSidesOptimal
Function name: execute(address,uint256,bytes)
PC address: 726
Estimated Gas Usage: 376 - 471
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x296d278e7a48fed3fcb8b86b8f71b0fd78818c66.sol:3

*/

// File: openzeppelin-solidity-

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.179319
Transaction Length: 0
Severity: Medium
Contract: StrategyAddTwoSidesOptimal
Function name: constructor
PC address: 867
Estimated Gas Usage: 38791 - 235224
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 375
Offset: 664
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop2/0x296d278e7a48fed3fcb8b86b8f71b0fd78818c66.sol:619

contract StrategyAddTwoSidesOptimal is Ownable, ReentrancyGuard, Strategy {
    using SafeToken for address;
    using SafeMath for uint256;

    IUniswapV2Factory public factory;
    IUniswapV2Router02 public router;
    address public weth;
    address public goblin;

    /// @dev Create a new add two-side optimal strategy instance.
    /// @param _router The Uniswap router smart contract.
    constructor(IUniswapV2Router02 _router, address _goblin) public {
        factory = IUniswapV2Factory(_router.factory());
        router = _router;
        weth = _router.WETH();
        goblin = _goblin;
    }
    
    /// @dev Throws if called by any account other than the goblin.
    modifier onlyGoblin() {
        require(isGoblin(), "caller is not the goblin");
        _;
    }

    /// @dev Returns true if the caller is the current goblin.
    function isGoblin() public view returns (bool) {
        return msg.sender == goblin;
    }

    /// @dev Compute optimal deposit amount
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function optimalDeposit(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256 swapAmt, bool isReversed) {
        if (amtA.mul(resB) >= amtB.mul(resA)) {
            swapAmt = _optimalDepositA(amtA, amtB, resA, resB);
            isReversed = false;
        } else {
            swapAmt = _optimalDepositA(amtB, amtA, resB, resA);
            isReversed = true;
        }
    }

    /// @dev Compute optimal deposit amount helper
    /// @param amtA amount of token A desired to deposit
    /// @param amtB amonut of token B desired to deposit
    /// @param resA amount of token A in reserve
    /// @param resB amount of token B in reserve
    function _optimalDepositA(
        uint256 amtA,
        uint256 amtB,
        uint256 resA,
        uint256 resB
    ) internal pure returns (uint256) {
        require(amtA.mul(resB) >= amtB.mul(resA), "Reversed");

        uint256 a = 997;
        uint256 b = uint256(1997).mul(resA);
        uint256 _c = (amtA.mul(resB)).sub(amtB.mul(resA));
        uint256 c = _c.mul(1000).div(amtB.add(resB)).mul(resA);

        uint256 d = a.mul(c).mul(4);
        uint256 e = Math.sqrt(b.mul(b).add(d));

        uint256 numerator = e.sub(b);
        uint256 denominator = a.mul(2);

        return numerator.div(denominator);
    }

    /// @dev Execute worker strategy. Take LP tokens + ETH. Return LP tokens + ETH.
    /// @param user User address
    /// @param data Extra calldata information passed along to this strategy.
    function execute(address user, uint256, /* debt */ bytes calldata data) 
        external         
        payable  
        onlyGoblin       
        nonReentrant 
    {
        // 1. Find out what farming token we are dealing with.
        (address fToken, uint256 fAmount, uint256 minLPAmount) = abi.decode(data, (address, uint256, uint256));
        IUniswapV2Pair lpToken = IUniswapV2Pair(factory.getPair(fToken, weth));        
        // 2. Compute the optimal amount of ETH and fToken to be converted.  
        if (fAmount > 0) {  
            fToken.safeTransferFrom(user, address(this), fAmount);            
        }
        uint256 ethBalance = address(this).balance;
        uint256 swapAmt;
        bool isReversed;
        {
            (uint256 r0, uint256 r1, ) = lpToken.getReserves();
            (uint256 ethReserve, uint256 fReserve) = lpToken.token0() == weth ? (r0, r1) : (r1, r0);
            (swapAmt, isReversed) = optimalDeposit(ethBalance, fToken.myBalance(), ethReserve, fReserve);
        }
        // 3. Convert between ETH and farming tokens
        fToken.safeApprove(address(router), 0);
        fToken.safeApprove(address(router), uint256(-1));
        address[] memory path = new address[](2);
        (path[0], path[1]) = isReversed ? (fToken, weth) : (weth, fToken);
        if (isReversed) {
            router.swapExactTokensForETH(swapAmt, 0, path, address(this), now); // farming tokens to ETH
        } else {
            router.swapExactETHForTokens.value(swapAmt)(0, path, address(this), now); // ETH to farming tokens
        }
        // 4. Mint more LP tokens and return all LP tokens to the sender.
        (,, uint256 moreLPAmount) = router.addLiquidityETH.value(address(this).balance)(
            fToken, fToken.myBalance(), 0, 0, address(this), now
        );
        require(moreLPAmount >= minLPAmount, "insufficient LP tokens received");
        lpToken.transfer(msg.sender, lpToken.balanceOf(address(this)));
    }

    /// @dev Recover ERC20 tokens that were accidentally sent to this smart contract.
    /// @param token The token contract. Can be anything. This contract should not hold ERC20 tokens.
    /// @param to The address to send the tokens to.
    /// @param value The number of tokens to transfer to `to`.
    function recover(address token, address to, uint256 value) external onlyOwner nonReentrant {
        token.safeTransfer(to, value);
    }

    function() external payable {}
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x718F3fAAccFCdDB8977205126ca3f5f3b1A53D312.sol
Total states:3094
6.866483
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.395854
Transaction Length: 0
Severity: Medium
Contract: RebasedOracle
Function name: constructor
PC address: 1685
Estimated Gas Usage: 65856 - 482160
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 486
Offset: 686
Offset: 886
Offset: 1144
Offset: 1344
Offset: 1544
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop2/0x718F3fAAccFCdDB8977205126ca3f5f3b1A53D312.sol:404

contract RebasedOracle is IOracle, Ownable {
    using FixedPoint for *;

    uint private reb2EthPrice0CumulativeLast;
    uint private reb2EthPrice1CumulativeLast;
    uint32 private reb2EthBlockTimestampLast;
    
    uint private usdcEthPrice0CumulativeLast;
    uint private usdcEthPrice1CumulativeLast;
    uint32 private usdcEthBlockTimestampLast;
    
    address private constant _weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    address private constant _usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;

    IUniswapV2Pair private _reb2_eth;
    IUniswapV2Pair private _usdc_eth;
    
    address controller;
    
    modifier onlyControllerOrOwner {
        require(msg.sender == controller || msg.sender == owner());
        _;
    }

    // RebasedController: 0x41630a33d4d6e3767e26aaf50277ab2a235edea3
    // SushiSwap REB2/ETH: 0xc4dE5Cc1232f6493Cc7BF7bcb12F905eb9742Bd7
    // SushiSwap USDC/ETH: 0x397ff1542f962076d0bfe58ea045ffa2d347aca0

    constructor(
        address _controller,
        address __reb2_eth,   // Address of the ETH/REB Uniswap pair
        address __usdc_reb   // Address of the USDC/ETH Uniswap pair
        ) public {
        
        controller = _controller;

        _reb2_eth = IUniswapV2Pair(__reb2_eth);
        _usdc_eth = IUniswapV2Pair(__usdc_reb);
        
        uint112 _dummy1;
        uint112 _dummy2;
        
        reb2EthPrice0CumulativeLast = _reb2_eth.price0CumulativeLast();
        reb2EthPrice1CumulativeLast = _reb2_eth.price1CumulativeLast();
        
        (_dummy1, _dummy2, reb2EthBlockTimestampLast) = _reb2_eth.getReserves();
        
        usdcEthPrice0CumulativeLast = _usdc_eth.price0CumulativeLast();
        usdcEthPrice1CumulativeLast = _usdc_eth.price1CumulativeLast();
        
        (_dummy1, _dummy2, usdcEthBlockTimestampLast) = _usdc_eth.getReserves();
    }

    // Get the average price of 1 REB in Wei
    function getRebEthRate() public view returns (uint256, uint256, uint32, uint256) {
        (uint price0Cumulative, uint price1Cumulative, uint32 _blockTimestamp) =
            UniswapV2OracleLibrary.currentCumulativePrices(address(_reb2_eth));
            
        FixedPoint.uq112x112 memory rebEthAverage = FixedPoint.uq112x112(uint224(1e9 * (price0Cumulative - reb2EthPrice0CumulativeLast) / (_blockTimestamp - reb2EthBlockTimestampLast)));
        
        return (price0Cumulative, price1Cumulative, _blockTimestamp, rebEthAverage.mul(1).decode144());
    }
    
    // Get the average price of 1 USD in Wei
    function getUsdcEthRate() public view returns (uint256, uint256, uint32, uint256) {
        (uint price0Cumulative, uint price1Cumulative, uint32 _blockTimestamp) =
            UniswapV2OracleLibrary.currentCumulativePrices(address(_usdc_eth));
            
        FixedPoint.uq112x112 memory usdcEthAverage = FixedPoint.uq112x112(uint224(1e6 * (price0Cumulative - usdcEthPrice0CumulativeLast) / (_blockTimestamp - usdcEthBlockTimestampLast)));
            
        return (price0Cumulative, price1Cumulative, _blockTimestamp, usdcEthAverage.mul(1).decode144());
    }

    // Update "last" state variables to current values
    // This is *only* called by the controller during rebase which enforces a minimum interim period of 12h.
   function update() external onlyControllerOrOwner {
        
        uint rebEthAverage;
        uint usdcEthAverage;
        
        (reb2EthPrice0CumulativeLast, reb2EthPrice1CumulativeLast, reb2EthBlockTimestampLast, rebEthAverage) = getRebEthRate();
        (usdcEthPrice0CumulativeLast, usdcEthPrice1CumulativeLast, usdcEthBlockTimestampLast, usdcEthAverage) = getUsdcEthRate();
    }

    // Return the average price since last update
    function getData() external view returns (uint256) {
        
        uint _price0CumulativeLast;
        uint _price1CumulativeLast;
        uint32 _blockTimestampLast;
        
        uint rebEthAverage;

        (_price0CumulativeLast, _price1CumulativeLast, _blockTimestampLast, rebEthAverage) = getRebEthRate();
        
        uint usdcEthAverage;
        
         (_price0CumulativeLast, _price1CumulativeLast, _blockTimestampLast, usdcEthAverage) = getUsdcEthRate();
         
        uint answer = (rebEthAverage * 1e18) / usdcEthAverage;
        
        return (answer);
    }
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xf64ba2fA3595612cd56f7290E9FCf0293007E7bb2.sol
Total states:2391
19.995419
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol
Total states:367
1219.832017
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.741580
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getBalances()
PC address: 2652
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:5

dity 0.5.17; //

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.739743
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getBalances()
PC address: 2655
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:3



//pragma solidity 0.5.17; // optimization

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:33.730791
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 8959
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:5

ns: 200, evm version: istan

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:55.402846
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 8962
Estimated Gas Usage: 1232 - 35889
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:5

mization runs: 200, evm version: istanbul
pragma so

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:58.917939
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 8975
Estimated Gas Usage: 1232 - 35889
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:7

icBatchCalls

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:07.060854
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 9075
Estimated Gas Usage: 1246 - 35996
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:1796

abi.decode(returnData, (address))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:24.878721
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 9084
Estimated Gas Usage: 1246 - 35996
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:1796

abi.decode(returnData, (address))

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:12:30.841886
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: escape()
PC address: 13539
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:5

dity 0.5.17; //

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:12:21.994733
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: escape()
PC address: 13542
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:3



//pragma solidity 0.5.17; // optimization

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:12:26.427759
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: escape()
PC address: 13554
Estimated Gas Usage: 1889 - 36453
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:1320

_ESCAPE_HATCH_REGISTRY.getEscapeHatch()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.084297
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 31188
Estimated Gas Usage: 722 - 1100
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:78

ns (bytes32 actionID);

  func

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:14.107943
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 31947
Estimated Gas Usage: 722 - 1100
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:248

iew returns (bytes3

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:03:28.807632
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: getImplementation()
PC address: 32169
Estimated Gas Usage: 1246 - 35996
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:294

DTokenInterface {
  // 

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:12:31.434232
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: escape()
PC address: 33455
Estimated Gas Usage: 1889 - 36453
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:513

6c1d19D4a2e9Eb0cE3606eB

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.333759
Transaction Length: 1
Severity: High
Contract: DharmaSmartWalletImplementationV12Staging
Function name: executeActionWithAtomicBatchCalls((address,bytes)[],uint256,bytes,bytes)
PC address: 38221
Estimated Gas Usage: 549 - 737
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x708c0b0ec4bf296883f882fe16ddb540980fcaa3.sol:1247

s memory returnDa

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x7309967c767643c06ce34e93d66b8211dacf9ee9.sol
Total states:594
1.482392
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xf9462c5ce99fe7301f77c6d62729f197d82d2a58.sol
Total states:594
1.119798
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol
Total states:18334
2784.053432
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.395344
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 458
Estimated Gas Usage: 375 - 470
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.833777
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 460
Estimated Gas Usage: 375 - 470
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.739173
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 606
Estimated Gas Usage: 717 - 3494
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:5

olidity 0.5.7;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.045574
Transaction Length: 1
Severity: High
Contract: master
Function name: airdrop(address,address[],uint256[])
PC address: 608
Estimated Gas Usage: 717 - 3494
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:3

*/

//pragma solidity 0.5.7;
pragma 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:10.129195
Transaction Length: 1
Severity: High
Contract: master
Function name: name()
PC address: 790
Estimated Gas Usage: 1914 - 3044
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:68

function name() public view returns(string memory) {
        return _name;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:11:07.436664
Transaction Length: 1
Severity: High
Contract: master
Function name: symbol()
PC address: 1757
Estimated Gas Usage: 1957 - 3087
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:72

function symbol() public view returns(string memory) {
        return _symbol;
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:14:13.252652
Transaction Length: 1
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:40

assert(b <= a)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:29:01.501648
Transaction Length: 2
Severity: Low
Contract: master
Function name: decreaseAllowance(address,uint256)
PC address: 9553
Estimated Gas Usage: 973 - 1448
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:40

assert(b <= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:19:26.763468
Transaction Length: 2
Severity: High
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9571
Estimated Gas Usage: 1003 - 1478
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:45

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:26:36.463837
Transaction Length: 2
Severity: Low
Contract: master
Function name: increaseAllowance(address,uint256)
PC address: 9584
Estimated Gas Usage: 1013 - 1488
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x4dbd26387db060bdbf8556bd91977fc6b3ab65e0.sol:46

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x5f203a1b7113c22d79e161455ef3810b020d8f9a.sol
Total states:21968
160.78566
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.856456
Transaction Length: 1
Severity: High
Contract: YSCARCE
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5f203a1b7113c22d79e161455ef3810b020d8f9a.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.241653
Transaction Length: 1
Severity: High
Contract: YSCARCE
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5f203a1b7113c22d79e161455ef3810b020d8f9a.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.942206
Transaction Length: 1
Severity: High
Contract: YSCARCE
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5f203a1b7113c22d79e161455ef3810b020d8f9a.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.111479
Transaction Length: 1
Severity: High
Contract: YSCARCE
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5f203a1b7113c22d79e161455ef3810b020d8f9a.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.843413
Transaction Length: 1
Severity: High
Contract: YSCARCE
Function name: transferAndCall(address,uint256,bytes)
PC address: 1391
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x5f203a1b7113c22d79e161455ef3810b020d8f9a.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:45.701167
Transaction Length: 1
Severity: Low
Contract: YSCARCE
Function name: unstake(uint256)
PC address: 6288
Estimated Gas Usage: 1353 - 1638
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5f203a1b7113c22d79e161455ef3810b020d8f9a.sol:205

_feeAmount * FLOAT_SCALAR / info.totalStaked

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:36.322638
Transaction Length: 2
Severity: Low
Contract: YSCARCE
Function name: unstake(uint256)
PC address: 6288
Estimated Gas Usage: 1353 - 1638
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x5f203a1b7113c22d79e161455ef3810b020d8f9a.sol:205

_feeAmount * FLOAT_SCALAR / info.totalStaked

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x921f377068912c8da390e4b6a0288765a144d7de.sol
Total states:629
1.540163
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x374fbefe7cd832dd5745e1d741d661c91d0b5106.sol
Total states:17430
35.551251
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.073437
Transaction Length: 0
Severity: High
Contract: LexList
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x374fbefe7cd832dd5745e1d741d661c91d0b5106.sol:9

╗     
███

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.088691
Transaction Length: 0
Severity: High
Contract: LexList
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x374fbefe7cd832dd5745e1d741d661c91d0b5106.sol:9

═╝   ██╔██╗     
███

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.404673
Transaction Length: 1
Severity: High
Contract: LexList
Function name: list(address[])
PC address: 251
Estimated Gas Usage: 319 - 414
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x374fbefe7cd832dd5745e1d741d661c91d0b5106.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.970741
Transaction Length: 1
Severity: High
Contract: LexList
Function name: list(address[])
PC address: 253
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x374fbefe7cd832dd5745e1d741d661c91d0b5106.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.610557
Transaction Length: 1
Severity: High
Contract: LexList
Function name: updateMessage(string)
PC address: 374
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x374fbefe7cd832dd5745e1d741d661c91d0b5106.sol:3

*/

/*
██╗     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.728898
Transaction Length: 1
Severity: High
Contract: LexList
Function name: delist(address[])
PC address: 493
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x374fbefe7cd832dd5745e1d741d661c91d0b5106.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.867924
Transaction Length: 1
Severity: High
Contract: LexList
Function name: delist(address[])
PC address: 495
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x374fbefe7cd832dd5745e1d741d661c91d0b5106.sol:3

*/

/*
██╗     █████

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol
Total states:144
358.732094
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.491553
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3244
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.245679
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3246
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.043233
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3329
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.211183
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3331
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.851709
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: submitActionProposal(address,address,uint256,uint256,bytes32,bytes)
PC address: 4686
Estimated Gas Usage: 533 - 628
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:3



*/



//pragma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:45.058849
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: symbol()
PC address: 4964
Estimated Gas Usage: 573 - 1703
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:274

string public constant symbol = "MXDAO"

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:17.454804
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5430
Estimated Gas Usage: 451 - 546
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:24.579927
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5432
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:33.115751
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5515
Estimated Gas Usage: 627 - 722
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:9

ma solidity 0.5.17;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:44.174877
Transaction Length: 1
Severity: High
Contract: Mystic
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5517
Estimated Gas Usage: 627 - 722
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:3



*/



//pragma solidity 0.5.17;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.421488
Transaction Length: 1
Severity: Low
Contract: Mystic
Function name: approvedTokens(uint256)
PC address: 9370
Estimated Gas Usage: 791 - 886
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:418

address[] public approvedTokens

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.073460
Transaction Length: 1
Severity: Low
Contract: Mystic
Function name: proposalQueue(uint256)
PC address: 12762
Estimated Gas Usage: 769 - 864
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x0323fa07c085d3eb28a8c0a500112171f6dddd75.sol:424

uint256[] public proposalQueue

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xD6758916BFb6c79d14709DDd1E1DC76B1AE8C0Ae.sol
Total states:695
1.638528
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x004580afbad43d81e5a5aefb63282bf782c35b1a.sol
Total states:14395
63.287577
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.263940
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x004580afbad43d81e5a5aefb63282bf782c35b1a.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.526821
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x004580afbad43d81e5a5aefb63282bf782c35b1a.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.722707
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x004580afbad43d81e5a5aefb63282bf782c35b1a.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.456470
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x004580afbad43d81e5a5aefb63282bf782c35b1a.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.943338
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x004580afbad43d81e5a5aefb63282bf782c35b1a.sol:1256

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:40.523594
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x004580afbad43d81e5a5aefb63282bf782c35b1a.sol:1254

uint[] public bonusRangeStart

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.386856
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x004580afbad43d81e5a5aefb63282bf782c35b1a.sol:324

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xd926103b4ef429208169553c53caeb8f45ae6172.sol
Total states:499
5.417873
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0xcb8682d159ae26caedd115b2478700510c92b2b4.sol
Total states:4302
15.938143
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:08.232574
Transaction Length: 1
Severity: Low
Contract: KOREv1Router
Function name: fallback
PC address: 2051
Estimated Gas Usage: 7941 - 29735
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xcb8682d159ae26caedd115b2478700510c92b2b4.sol:642

_WETH.deposit.value(msg.value)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:09.198378
Transaction Length: 1
Severity: Low
Contract: KOREv1Router
Function name: refreshApproval()
PC address: 4484
Estimated Gas Usage: 1921 - 3147
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0xcb8682d159ae26caedd115b2478700510c92b2b4.sol:626

IUniswapV2Pair(_koreWETHPair).approve(address(_koreVault), uint(-1))

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol
Total states:16652
374.972938
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:40.348862
Transaction Length: 1
Severity: Low
Contract: SpacePodsUSDC
Function name: depositSZToken(address,uint256)
PC address: 7242
Estimated Gas Usage: 3085 - 4406
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol:337

token.intTransfer(_from,address(this),amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:54.790128
Transaction Length: 2
Severity: Low
Contract: SpacePodsUSDC
Function name: depositSZToken(address,uint256)
PC address: 7242
Estimated Gas Usage: 3085 - 4406
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol:337

token.intTransfer(_from,address(this),amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:25.919176
Transaction Length: 1
Severity: Low
Contract: SpacePodsUSDC
Function name: depositToken(address,uint256)
PC address: 7917
Estimated Gas Usage: 2685 - 3581
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol:311

token.deposit(_from,amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:25.535002
Transaction Length: 2
Severity: Low
Contract: SpacePodsUSDC
Function name: depositToken(address,uint256)
PC address: 7917
Estimated Gas Usage: 2685 - 3581
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol:311

token.deposit(_from,amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:13.604696
Transaction Length: 1
Severity: Low
Contract: SpacePodsUSDC
Function name: depositTokenTerm(address,uint256,uint256)
PC address: 8254
Estimated Gas Usage: 4425 - 40403
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol:314

token.intTransfer(_from,address(this),amount * (10 ** 12))

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:55.438415
Transaction Length: 2
Severity: Low
Contract: SpacePodsUSDC
Function name: depositTokenTerm(address,uint256,uint256)
PC address: 8254
Estimated Gas Usage: 4425 - 40403
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol:314

token.intTransfer(_from,address(this),amount * (10 ** 12))

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:49.696317
Transaction Length: 1
Severity: Low
Contract: SpacePodsUSDC
Function name: interests(uint256)
PC address: 11735
Estimated Gas Usage: 746 - 841
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol:147

InterestStruct[] public interests

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:01.938717
Transaction Length: 1
Severity: Low
Contract: SpacePodsUSDC
Function name: borrow(uint256)
PC address: 21098
Estimated Gas Usage: 57191 - 296141
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d2be030cef4f9a51cc81ab92cda12c5a90e4338.sol:655

catToken.intTransfer(_addr,address(this),amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x36ef5ad3348da55519ffdcd17eb42b05c6108e57.sol
Total states:1322
80.243053
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.825023
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 857
Estimated Gas Usage: 384 - 479
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x36ef5ad3348da55519ffdcd17eb42b05c6108e57.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.216532
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 859
Estimated Gas Usage: 384 - 479
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x36ef5ad3348da55519ffdcd17eb42b05c6108e57.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.806107
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 942
Estimated Gas Usage: 560 - 655
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x36ef5ad3348da55519ffdcd17eb42b05c6108e57.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.115529
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 944
Estimated Gas Usage: 560 - 655
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x36ef5ad3348da55519ffdcd17eb42b05c6108e57.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.427692
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 1027
Estimated Gas Usage: 736 - 831
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x36ef5ad3348da55519ffdcd17eb42b05c6108e57.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:01.608098
Transaction Length: 1
Severity: High
Contract: TimeLock
Function name: addParameters(address[],uint256[],uint256[])
PC address: 1029
Estimated Gas Usage: 736 - 831
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x36ef5ad3348da55519ffdcd17eb42b05c6108e57.sol:3

*/

/**
 *Submitted for verification

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x4d4deb670ae7fddb8f0025f388a81e3a6933f211.sol
Total states:2434
15.096324
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:12.359741
Transaction Length: 1
Severity: Low
Contract: COREv1Router
Function name: fallback()
PC address: 1389
Estimated Gas Usage: 1767 - 2851
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop2/0x4d4deb670ae7fddb8f0025f388a81e3a6933f211.sol:606

_WETH.deposit.value(msg.value)()

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop2/0x78672912e4c8a8192a51e52fdf3c8887ee64ce27.sol
Total states:29348
230.757827
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:06.931255
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3645
Estimated Gas Usage: 1025 - 1500
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x78672912e4c8a8192a51e52fdf3c8887ee64ce27.sol:56

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.214573
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 5092
Estimated Gas Usage: 1003 - 1478
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x78672912e4c8a8192a51e52fdf3c8887ee64ce27.sol:56

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.155755
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 5125
Estimated Gas Usage: 1003 - 1478
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x78672912e4c8a8192a51e52fdf3c8887ee64ce27.sol:56

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.176838
Transaction Length: 2
Severity: High
Contract: ERC20Pausable
Function name: increaseAllowance(address,uint256)
PC address: 5478
Estimated Gas Usage: 1070 - 1545
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop2/0x78672912e4c8a8192a51e52fdf3c8887ee64ce27.sol:56

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x0073a236ee3dbd8a133f8d9d4717c0d6a042e392.sol
Total states:738
3.56392
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x098eabc5cb8ca7d8aaeaf0a927a5c2bbcedffb30.sol
Total states:77
2.9132
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x061f57eA8383558A7E20F84948d0F11A6e1BcDe2.sol
Total states:24247
174.716209
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.972567
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 3958
Estimated Gas Usage: 598 - 693
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x061f57eA8383558A7E20F84948d0F11A6e1BcDe2.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.953311
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 3960
Estimated Gas Usage: 598 - 693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x061f57eA8383558A7E20F84948d0F11A6e1BcDe2.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.624358
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4106
Estimated Gas Usage: 931 - 3708
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x061f57eA8383558A7E20F84948d0F11A6e1BcDe2.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.700643
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4108
Estimated Gas Usage: 931 - 3708
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x061f57eA8383558A7E20F84948d0F11A6e1BcDe2.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:48.010106
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4254
Estimated Gas Usage: 1264 - 6723
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x061f57eA8383558A7E20F84948d0F11A6e1BcDe2.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:58.503344
Transaction Length: 1
Severity: High
Contract: DMGYieldFarmingV1
Function name: initialize(address,address,address,uint256,address[],address[],uint8[],uint16[])
PC address: 4256
Estimated Gas Usage: 1264 - 6723
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x061f57eA8383558A7E20F84948d0F11A6e1BcDe2.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x88f042fdea1d94ccd7b848686f9f529552085110.sol
Total states:10447
3211.723542
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:11.129901
Transaction Length: 2
Severity: Low
Contract: LPStaker
Function name: withdraw(address)
PC address: 1742
Estimated Gas Usage: 20413 - 84139
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x88f042fdea1d94ccd7b848686f9f529552085110.sol:223

depositToken.transfer(to, balance)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:22.362853
Transaction Length: 2
Severity: Low
Contract: LPStaker
Function name: withdraw(address)
PC address: 2124
Estimated Gas Usage: 22549 - 121262
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x88f042fdea1d94ccd7b848686f9f529552085110.sol:224

rewardToken1.transfer(to, reward)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:37.591530
Transaction Length: 2
Severity: Low
Contract: LPStaker
Function name: withdraw(address)
PC address: 2509
Estimated Gas Usage: 24693 - 158393
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x88f042fdea1d94ccd7b848686f9f529552085110.sol:225

rewardToken2.transfer(to, reward * 75)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:17:42.079376
Transaction Length: 1
Severity: Low
Contract: LPStaker
Function name: depositWithBonus(uint128,bool)
PC address: 3970
Estimated Gas Usage: 33969 - 139837
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x88f042fdea1d94ccd7b848686f9f529552085110.sol:204

depositToken.transferFrom(msg.sender, address(this), amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:23:30.127546
Transaction Length: 2
Severity: Low
Contract: LPStaker
Function name: depositWithBonus(uint128,bool)
PC address: 3970
Estimated Gas Usage: 33969 - 139837
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x88f042fdea1d94ccd7b848686f9f529552085110.sol:204

depositToken.transferFrom(msg.sender, address(this), amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x331bfba995C3c2273194c690537708948d11c86a.sol
Total states:65
0.753833
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x9a48a188c6db08c811a8d66a6e474e498fceb88f.sol
Total states:149
2.682668
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xaaa601ae20077f9fae80494ddc36bb39c952c2d02.sol
Total states:7896
52.552592
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.966459
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1295
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xaaa601ae20077f9fae80494ddc36bb39c952c2d02.sol:6

yright 2017-2020, bZe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.947411
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1297
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xaaa601ae20077f9fae80494ddc36bb39c952c2d02.sol:3

*/

/**
 * Copyright 2017-2020, bZer

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.126279
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1380
Estimated Gas Usage: 561 - 656
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xaaa601ae20077f9fae80494ddc36bb39c952c2d02.sol:6

yright 2017-2020, bZe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.691089
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setPriceFeed(address[],address[])
PC address: 1382
Estimated Gas Usage: 561 - 656
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xaaa601ae20077f9fae80494ddc36bb39c952c2d02.sol:3

*/

/**
 * Copyright 2017-2020, bZer

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.960179
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setDecimals(address[])
PC address: 1865
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xaaa601ae20077f9fae80494ddc36bb39c952c2d02.sol:6

yright 2017-2020, bZe

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.581361
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: setDecimals(address[])
PC address: 1867
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xaaa601ae20077f9fae80494ddc36bb39c952c2d02.sol:3

*/

/**
 * Copyright 2017-2020, bZer

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.217460
Transaction Length: 1
Severity: High
Contract: PriceFeeds
Function name: checkPriceDisagreement(address,address,uint256,uint256,uint256)
PC address: 6399
Estimated Gas Usage: 1065 - 1490
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xaaa601ae20077f9fae80494ddc36bb39c952c2d02.sol:181

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x8B78029AFdB3f9E65912aF6b5b6A3dB99D4c7594.sol
Total states:1023
59.955223
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.265039
Transaction Length: 1
Severity: High
Contract: Multicall
Function name: aggregate((address,bytes)[])
PC address: 1027
Estimated Gas Usage: 668 - 1046
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x8B78029AFdB3f9E65912aF6b5b6A3dB99D4c7594.sol:42

; i < calls.length; i++) {

  

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:08.642731
Transaction Length: 1
Severity: High
Contract: Multicall
Function name: aggregate((address,bytes)[])
PC address: 1166
Estimated Gas Usage: 668 - 1046
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x8B78029AFdB3f9E65912aF6b5b6A3dB99D4c7594.sol:76

imestamp;

    }

 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol
Total states:12852
501.738962
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.159010
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.187237
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1722
Estimated Gas Usage: 452 - 547
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.894989
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1724
Estimated Gas Usage: 452 - 547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.284614
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1870
Estimated Gas Usage: 785 - 3562
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.375619
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: handleDeposit(address[],uint256[])
PC address: 1872
Estimated Gas Usage: 785 - 3562
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:36.004102
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: getModuleAddress(string)
PC address: 2154
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:12.704007
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: withdraw(address,uint256[])
PC address: 2519
Estimated Gas Usage: 397 - 492
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:17.002181
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: withdraw(address,uint256[])
PC address: 2521
Estimated Gas Usage: 397 - 492
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:11.312907
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: supportedTokens()
PC address: 3104
Estimated Gas Usage: 1272 - 2119
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:1304

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:41.816704
Transaction Length: 1
Severity: High
Contract: CurveFiProtocol_SBTC
Function name: supportedTokens()
PC address: 3144
Estimated Gas Usage: 1422 - 2645
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x30a7a3cefe09d9b2e834d5c811d56b7eb086f763.sol:1304

function supportedTokens() public view returns(address[] memory){
        return _registeredTokens;
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol
Total states:120
359.924691
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.154497
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3280
Estimated Gas Usage: 386 - 481
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:9

X-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.452743
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3282
Estimated Gas Usage: 386 - 481
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:3



*/



// SPDX-License-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.912849
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3365
Estimated Gas Usage: 562 - 657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:9

X-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.344023
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: withdrawBalances(address[],uint256[],bool)
PC address: 3367
Estimated Gas Usage: 562 - 657
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:3



*/



// SPDX-License-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.279405
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: submitActionProposal(address,uint256,uint256,bytes32,bytes)
PC address: 4844
Estimated Gas Usage: 500 - 595
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:3



*/



// SPDX-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:43.955534
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: symbol()
PC address: 5079
Estimated Gas Usage: 551 - 1681
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:256

string public constant symbol = "MSTX"

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:28.362118
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5614
Estimated Gas Usage: 473 - 568
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:9

X-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:32.922528
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5616
Estimated Gas Usage: 473 - 568
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:3



*/



// SPDX-License-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:38.708385
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5699
Estimated Gas Usage: 649 - 744
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:9

X-License-Identifier:

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:50.107254
Transaction Length: 1
Severity: High
Contract: MSTX
Function name: init(address,address,address[],uint256[],uint256,uint256,uint256,uint256,uint256,uint256,uint256)
PC address: 5701
Estimated Gas Usage: 649 - 744
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:3



*/



// SPDX-License-Identifier: 

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.700195
Transaction Length: 1
Severity: Low
Contract: MSTX
Function name: approvedTokens(uint256)
PC address: 9442
Estimated Gas Usage: 769 - 864
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:294

address[] public approvedTokens

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.746595
Transaction Length: 1
Severity: Low
Contract: MSTX
Function name: proposalQueue(uint256)
PC address: 12834
Estimated Gas Usage: 747 - 842
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x68f989f17ce7e21b1b82235a89098a00771528ef.sol:300

uint256[] public proposalQueue

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x175d6cbaeff93734ada4c5430815f2208a6b040c.sol
Total states:272
74.181238
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.065903
Transaction Length: 0
Severity: High
Contract: VaultProRata
Function name: constructor
PC address: 408
Estimated Gas Usage: 82423 - 403508
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x175d6cbaeff93734ada4c5430815f2208a6b040c.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.559140
Transaction Length: 0
Severity: Low
Contract: VaultProRata
Function name: constructor
PC address: 422
Estimated Gas Usage: 82433 - 403518
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x175d6cbaeff93734ada4c5430815f2208a6b040c.sol:35

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol
Total states:60
482.685685
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.053639
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: getGlobalDetails()
PC address: 6686
Estimated Gas Usage: 2475 - 38127
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:5

se-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.964970
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: getGlobalDetails()
PC address: 6689
Estimated Gas Usage: 2475 - 38127
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:3



// SPDX-License-Identifier: UNLICENSED
//

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.516917
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: getGlobalDetails()
PC address: 6701
Estimated Gas Usage: 2475 - 38127
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:179

DAO.ROUTER()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.619970
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: allTokens()
PC address: 9677
Estimated Gas Usage: 2259 - 37153
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:5

se-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.553644
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: allTokens()
PC address: 9680
Estimated Gas Usage: 2259 - 37153
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:3



// SPDX-License-Identifier: UNLICENSED
//

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.628762
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: allTokens()
PC address: 9692
Estimated Gas Usage: 2259 - 37153
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:195

DAO.ROUTER()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.650531
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: allTokens()
PC address: 9833
Estimated Gas Usage: 4077 - 73533
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:3



// SPDX-License-Identifier: UNLICENSED
//

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.952684
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: allTokens()
PC address: 9845
Estimated Gas Usage: 4077 - 73533
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:195

iROUTER(DAO.ROUTER()).tokenCount()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:00.958859
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: tokenCount()
PC address: 11033
Estimated Gas Usage: 2320 - 37214
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:5

se-Identifier: 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:57.103045
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: tokenCount()
PC address: 11036
Estimated Gas Usage: 2320 - 37214
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:3



// SPDX-License-Identifier: UNLICENSED
//

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:59.093118
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: tokenCount()
PC address: 11048
Estimated Gas Usage: 2320 - 37214
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:192

DAO.ROUTER()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.031841
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: getTokenDetails(address)
PC address: 16717
Estimated Gas Usage: 2320 - 37214
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:89

contract Utils_Vether {

    using SafeMath for uint;

    address public BASE;
    address public DEPLOYER;
    iDAO public DAO;

    struct TokenDetails {
        string name;
        string symbol;
        uint decimals;
        uint totalSupply;
        uint balance;
        address tokenAddress;
    }

    struct ListedAssetDetails {
        string name;
        string symbol;
        uint decimals;
        uint totalSupply;
        uint balance;
        address tokenAddress;
        bool hasClaimed;
    }

    struct GlobalDetails {
        uint totalStaked;
        uint totalVolume;
        uint totalFees;
        uint unstakeTx;
        uint stakeTx;
        uint swapTx;
    }

    struct PoolDataStruct {
        address tokenAddress;
        address poolAddress;
        uint genesis;
        uint baseAmt;
        uint tokenAmt;
        uint baseAmtStaked;
        uint tokenAmtStaked;
        uint fees;
        uint volume;
        uint txCount;
        uint poolUnits;
    }

    // Only Deployer can execute
    modifier onlyDeployer() {
        require(msg.sender == DEPLOYER, "DeployerErr");
        _;
    }

    constructor () public payable {
        BASE = 0x4Ba6dDd7b89ed838FEd25d208D4f644106E34279;
        DEPLOYER = msg.sender;
    }

    function setGenesisDao(address dao) public onlyDeployer {
        DAO = iDAO(dao);
    }

    //====================================DATA-HELPERS====================================//

    function getTokenDetails(address token) public view returns (TokenDetails memory tokenDetails){
        return getTokenDetailsWithMember(token, msg.sender);
    }

    function getTokenDetailsWithMember(address token, address member) public view returns (TokenDetails memory tokenDetails){
        if(token == address(0)){
            tokenDetails.name = 'Ethereum';
            tokenDetails.symbol = 'ETH';
            tokenDetails.decimals = 18;
            tokenDetails.totalSupply = 100000000 * 10**18;
            tokenDetails.balance = msg.sender.balance;
        } else {
            tokenDetails.name = iERC20(token).name();
            tokenDetails.symbol = iERC20(token).symbol();
            tokenDetails.decimals = iERC20(token).decimals();
            tokenDetails.totalSupply = iERC20(token).totalSupply();
            tokenDetails.balance = iERC20(token).balanceOf(member);
        }
        tokenDetails.tokenAddress = token;
        return tokenDetails;
    }

    function getGlobalDetails() public view returns (GlobalDetails memory globalDetails){
        globalDetails.totalStaked = iROUTER(DAO.ROUTER()).totalStaked();
        globalDetails.totalVolume = iROUTER(DAO.ROUTER()).totalVolume();
        globalDetails.totalFees = iROUTER(DAO.ROUTER()).totalFees();
        globalDetails.unstakeTx = iROUTER(DAO.ROUTER()).unstakeTx();
        globalDetails.stakeTx = iROUTER(DAO.ROUTER()).stakeTx();
        globalDetails.swapTx = iROUTER(DAO.ROUTER()).swapTx();
        return globalDetails;
    }

    function getPool(address token) public view returns(address payable pool){
        return iROUTER(DAO.ROUTER()).getPool(token);
    }
    function tokenCount() public view returns (uint256 count){
        return iROUTER(DAO.ROUTER()).tokenCount();
    }
    function allTokens() public view returns (address[] memory _allTokens){
        return tokensInRange(0, iROUTER(DAO.ROUTER()).tokenCount()) ;
    }
    function tokensInRange(uint start, uint count) public view returns (address[] memory someTokens){
        if(start.add(count) > tokenCount()){
            count = tokenCount().sub(start);
        }
        address[] memory result = new address[](count);
        for (uint i = 0; i < count; i++){
            result[i] = iROUTER(DAO.ROUTER()).getToken(i);
        }
        return result;
    }
    function allPools() public view returns (address[] memory _allPools){
        return poolsInRange(0, tokenCount());
    }
    function poolsInRange(uint start, uint count) public view returns (address[] memory somePools){
        if(start.add(count) > tokenCount()){
            count = tokenCount().sub(start);
        }
        address[] memory result = new address[](count);
        for (uint i = 0; i<count; i++){
            result[i] = getPool(iROUTER(DAO.ROUTER()).getToken(i));
        }
        return result;
    }

    function getPoolData(address token) public view returns(PoolDataStruct memory poolData){
        address payable pool = getPool(token);
        poolData.poolAddress = pool;
        poolData.tokenAddress = token;
        poolData.genesis = iPOOL(pool).genesis();
        poolData.baseAmt = iPOOL(pool).baseAmt();
        poolData.tokenAmt = iPOOL(pool).tokenAmt();
        poolData.baseAmtStaked = iPOOL(pool).baseAmtStaked();
        poolData.tokenAmtStaked = iPOOL(pool).tokenAmtStaked();
        poolData.fees = iPOOL(pool).fees();
        poolData.volume = iPOOL(pool).volume();
        poolData.txCount = iPOOL(pool).txCount();
        poolData.poolUnits = iERC20(pool).totalSupply();
        return poolData;
    }

    function getMemberShare(address token, address member) public view returns(uint baseAmt, uint tokenAmt){
        address pool = getPool(token);
        uint units = iERC20(pool).balanceOf(member);
        return getPoolShare(token, units);
    }

    function getPoolShare(address token, uint units) public view returns(uint baseAmt, uint tokenAmt){
        address payable pool = getPool(token);
        baseAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
        tokenAmt = calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
        return (baseAmt, tokenAmt);
    }

    function getShareOfBaseAmount(address token, address member) public view returns(uint baseAmt){
        address payable pool = getPool(token);
        uint units = iERC20(pool).balanceOf(member);
        return calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
    }
    function getShareOfTokenAmount(address token, address member) public view returns(uint baseAmt){
        address payable pool = getPool(token);
        uint units = iERC20(pool).balanceOf(member);
        return calcShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
    }

    function getPoolShareAssym(address token, uint units, bool toBase) public view returns(uint baseAmt, uint tokenAmt, uint outputAmt){
        address payable pool = getPool(token);
        if(toBase){
            baseAmt = calcAsymmetricShare(units, iERC20(pool).totalSupply(), iPOOL(pool).baseAmt());
            tokenAmt = 0;
            outputAmt = baseAmt;
        } else {
            baseAmt = 0;
            tokenAmt = calcAsymmetricShare(units, iERC20(pool).totalSupply(), iPOOL(pool).tokenAmt());
            outputAmt = tokenAmt;
        }
        return (baseAmt, tokenAmt, outputAmt);
    }

    function getPoolAge(address token) public view returns (uint daysSinceGenesis){
        address payable pool = getPool(token);
        uint genesis = iPOOL(pool).genesis();
        if(now < genesis.add(86400)){
            return 1;
        } else {
            return (now.sub(genesis)).div(86400);
        }
    }

    function getPoolROI(address token) public view returns (uint roi){
        address payable pool = getPool(token);
        uint _baseStart = iPOOL(pool).baseAmtStaked().mul(2);
        uint _baseEnd = iPOOL(pool).baseAmt().mul(2);
        uint _ROIS = (_baseEnd.mul(10000)).div(_baseStart);
        uint _tokenStart = iPOOL(pool).tokenAmtStaked().mul(2);
        uint _tokenEnd = iPOOL(pool).tokenAmt().mul(2);
        uint _ROIA = (_tokenEnd.mul(10000)).div(_tokenStart);
        return (_ROIS + _ROIA).div(2);
   }

   function getPoolAPY(address token) public view returns (uint apy){
        uint avgROI = getPoolROI(token);
        uint poolAge = getPoolAge(token);
        return (avgROI.mul(365)).div(poolAge);
   }

    function isMember(address token, address member) public view returns(bool){
        address payable pool = getPool(token);
        if (iERC20(pool).balanceOf(member) > 0){
            return true;
        } else {
            return false;
        }
    }

    //====================================PRICING====================================//

    function calcValueInBase(address token, uint amount) public view returns (uint value){
       address payable pool = getPool(token);
       return calcValueInBaseWithPool(pool, amount);
    }

    function calcValueInToken(address token, uint amount) public view returns (uint value){
        address payable pool = getPool(token);
        return calcValueInTokenWithPool(pool, amount);
    }

    function calcTokenPPinBase(address token, uint amount) public view returns (uint _output){
        address payable pool = getPool(token);
        return  calcTokenPPinBaseWithPool(pool, amount);
   }

    function calcBasePPinToken(address token, uint amount) public view returns (uint _output){
        address payable pool = getPool(token);
        return  calcValueInBaseWithPool(pool, amount);
    }

    function calcValueInBaseWithPool(address payable pool, uint amount) public view returns (uint value){
       uint _baseAmt = iPOOL(pool).baseAmt();
       uint _tokenAmt = iPOOL(pool).tokenAmt();
       return (amount.mul(_baseAmt)).div(_tokenAmt);
    }

    function calcValueInTokenWithPool(address payable pool, uint amount) public view returns (uint value){
        uint _baseAmt = iPOOL(pool).baseAmt();
        uint _tokenAmt = iPOOL(pool).tokenAmt();
        return (amount.mul(_tokenAmt)).div(_baseAmt);
    }

    function calcTokenPPinBaseWithPool(address payable pool, uint amount) public view returns (uint _output){
        uint _baseAmt = iPOOL(pool).baseAmt();
        uint _tokenAmt = iPOOL(pool).tokenAmt();
        return  calcSwapOutput(amount, _tokenAmt, _baseAmt);
   }

    function calcBasePPinTokenWithPool(address payable pool, uint amount) public view returns (uint _output){
        uint _baseAmt = iPOOL(pool).baseAmt();
        uint _tokenAmt = iPOOL(pool).tokenAmt();
        return  calcSwapOutput(amount, _baseAmt, _tokenAmt);
    }

    //====================================CORE-MATH====================================//

    function calcPart(uint bp, uint total) public pure returns (uint part){
        // 10,000 basis points = 100.00%
        require((bp <= 10000) && (bp > 0), "Must be correct BP");
        return calcShare(bp, 10000, total);
    }

    function calcShare(uint part, uint total, uint amount) public pure returns (uint share){
        // share = amount * part/total
        return(amount.mul(part)).div(total);
    }

    function  calcSwapOutput(uint x, uint X, uint Y) public pure returns (uint output){
        // y = (x * X * Y )/(x + X)^2
        uint numerator = x.mul(X.mul(Y));
        uint denominator = (x.add(X)).mul(x.add(X));
        return numerator.div(denominator);
    }

    function  calcSwapFee(uint x, uint X, uint Y) public pure returns (uint output){
        // y = (x * x * Y) / (x + X)^2
        uint numerator = x.mul(x.mul(Y));
        uint denominator = (x.add(X)).mul(x.add(X));
        return numerator.div(denominator);
    }

    function calcStakeUnits(uint b, uint B, uint t, uint T) public pure returns (uint units){
        // units = ((T + B) * (t * B + T * b))/(4 * T * B)
        // (part1 * (part2 + part3)) / part4
        uint part1 = T.add(B);
        uint part2 = t.mul(B);
        uint part3 = T.mul(b);
        uint numerator = part1.mul((part2.add(part3)));
        uint part4 = 4 * (T.mul(B));
        return numerator.div(part4);
    }

    function calcAsymmetricShare(uint u, uint U, uint A) public pure returns (uint share){
        // share = (u * U * (2 * A^2 - 2 * U * u + U^2))/U^3
        // (part1 * (part2 - part3 + part4)) / part5
        uint part1 = u.mul(A);
        uint part2 = U.mul(U).mul(2);
        uint part3 = U.mul(u).mul(2);
        uint part4 = u.mul(u);
        uint numerator = part1.mul(part2.sub(part3).add(part4));
        uint part5 = U.mul(U).mul(U);
        return numerator.div(part5);
    }

}

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.580060
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: getGlobalDetails()
PC address: 17115
Estimated Gas Usage: 2475 - 38127
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:41

ion getTokenAmtStaked(a

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:13.374170
Transaction Length: 1
Severity: High
Contract: Utils_Vether
Function name: allTokens()
PC address: 17521
Estimated Gas Usage: 4077 - 73533
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x0f216323076dfe029f01b3deb3bc1682b1ea8a37.sol:145

() public payable {
   

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol
Total states:15168
36.237783
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.098265
Transaction Length: 0
Severity: High
Contract: LexList
Function name: constructor
PC address: 110
Estimated Gas Usage: 257 - 3030
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol:9

╗     
███

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.113447
Transaction Length: 0
Severity: High
Contract: LexList
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol:9

═╝   ██╔██╗     
███

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.340468
Transaction Length: 1
Severity: High
Contract: LexList
Function name: list(address[])
PC address: 284
Estimated Gas Usage: 319 - 414
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.285848
Transaction Length: 1
Severity: High
Contract: LexList
Function name: list(address[])
PC address: 286
Estimated Gas Usage: 319 - 414
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.518188
Transaction Length: 1
Severity: High
Contract: LexList
Function name: updateMessage(string)
PC address: 506
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol:3

*/

/*
██╗     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.586262
Transaction Length: 1
Severity: High
Contract: LexList
Function name: delist(address[])
PC address: 625
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.443196
Transaction Length: 1
Severity: High
Contract: LexList
Function name: delist(address[])
PC address: 627
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol:3

*/

/*
██╗     █████

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:22.003451
Transaction Length: 1
Severity: Low
Contract: LexList
Function name: listings(uint256)
PC address: 4282
Estimated Gas Usage: 700 - 795
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xfdd97979b07a27e45ae20d77e93f8fec0b425c49.sol:23

address[] public listings

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x8b2b9eedc067e739ba99f5573ce57a34ade61a94.sol
Total states:120
4.049305
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol
Total states:77909
262.773522
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.037530
Transaction Length: 0
Severity: High
Contract: TokenAccessList
Function name: constructor
PC address: 108
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:16

ping (address => bool) bearer;
    }

    /

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.397826
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: disableWalletList(address[])
PC address: 362
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.030028
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: disableWalletList(address[])
PC address: 364
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.893939
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: enableWalletList(address[])
PC address: 878
Estimated Gas Usage: 362 - 457
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:5

olidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.020738
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: enableWalletList(address[])
PC address: 880
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:3

*/

//pragma solidity ^0.5.0;
pragma

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:33.108179
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: identifier()
PC address: 2134
Estimated Gas Usage: 1331 - 2178
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:489

string public identifier

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:32.650593
Transaction Length: 1
Severity: High
Contract: TokenAccessList
Function name: identifier()
PC address: 2186
Estimated Gas Usage: 1190 - 1568
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:489

string public identifier

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.860854
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:331

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.488906
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3626
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:331

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.334576
Transaction Length: 2
Severity: High
Contract: ERC20BurnableAdmin
Function name: increaseAllowance(address,uint256)
PC address: 3881
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:331

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.579433
Transaction Length: 2
Severity: High
Contract: ERC20Operator
Function name: increaseAllowance(address,uint256)
PC address: 4057
Estimated Gas Usage: 1011 - 1486
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:331

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.833222
Transaction Length: 2
Severity: High
Contract: ERC20CapEnabler
Function name: increaseAllowance(address,uint256)
PC address: 4836
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xfc98e825a2264d890f9a1e68ed50e1526abccacd.sol:331

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol
Total states:123717
284.938781
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.116718
Transaction Length: 0
Severity: High
Contract: CLIPricingStrategy
Function name: constructor
PC address: 130
Estimated Gas Usage: 317 - 3276
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:12

these are generally a

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:01.367732
Transaction Length: 1
Severity: Medium
Contract: CLIStats
Function name: getWeis(uint256)
PC address: 2203
Estimated Gas Usage: 7850 - 147417
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5401
Offset: 5557
Offset: 5762
Offset: 5945
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:3028

function getWeis(
        uint256 _tokenAmount
    )
        public
        view
        returns (uint256 totalWeiAmount, uint256)
    {
        uint256 tokensSold = CLICrowdsale(
            management.contractRegistry(CONTRACT_CROWDSALE)
        ).tokensSold();

        return CLIPricingStrategy(
            management.contractRegistry(CONTRACT_PRICING)
        ).getWeis(0, tokensSold, _tokenAmount);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.293880
Transaction Length: 1
Severity: High
Contract: CLIStats
Function name: ERROR_NO_CONTRACT()
PC address: 3106
Estimated Gas Usage: 528 - 1658
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:320

string public constant ERROR_NO_CONTRACT = "ERROR_NO_CONTRACT"

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.216861
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:145

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.503190
Transaction Length: 1
Severity: Low
Contract: LockupContract
Function name: lockedAllocationData(address,uint256)
PC address: 3295
Estimated Gas Usage: 821 - 1106
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2166

mapping(address => uint256[]) public lockedAllocationData

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.615216
Transaction Length: 1
Severity: High
Contract: CLIStats
Function name: ERROR_ACCESS_DENIED()
PC address: 3365
Estimated Gas Usage: 549 - 1679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:318

string public constant ERROR_ACCESS_DENIED = "ERROR_ACCESS_DENIED"

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.468756
Transaction Length: 1
Severity: Low
Contract: CLIContribution
Function name: contributions(uint256)
PC address: 3504
Estimated Gas Usage: 791 - 886
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2653

Contribution[] public contributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.951341
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3578
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2233

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.156984
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3603
Estimated Gas Usage: 2951 - 4089
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2233

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.388499
Transaction Length: 2
Severity: High
Contract: LockupContract
Function name: getUnlockedBalance(address,uint256,uint256)
PC address: 3605
Estimated Gas Usage: 2951 - 4089
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2233

uint256[] memory  addressLockupData = lockedAllocationData[_address]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.727883
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:145

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.799694
Transaction Length: 1
Severity: Low
Contract: CLIAllocator
Function name: unlockManuallyLockedBalances(address)
PC address: 4785
Estimated Gas Usage: 5545 - 76368
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2349

lockupContract.setManuallyLockedForAddress(
            _holder,
            0
        )

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.425842
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5243
Estimated Gas Usage: 13852 - 89787
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:05.056426
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5255
Estimated Gas Usage: 24473 - 140693
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2213

lockedAllocationData[_address].push(_amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.971150
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5348
Estimated Gas Usage: 24473 - 140693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2

ification at Ether

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:09.959412
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5360
Estimated Gas Usage: 35094 - 191599
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2214

lockedAllocationData[_address].push(_lockPeriodInSeconds)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.873914
Transaction Length: 1
Severity: High
Contract: LockupContract
Function name: allocationLog(address,uint256,uint256,uint256,uint256,uint256)
PC address: 5453
Estimated Gas Usage: 35094 - 191599
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2

ification at Ether

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.178002
Transaction Length: 2
Severity: High
Contract: CLIContribution
Function name: forward()
PC address: 6542
Estimated Gas Usage: 776 - 1249
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:145

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.858090
Transaction Length: 2
Severity: High
Contract: CLIReferral
Function name: getReferrerTokens(address,uint256)
PC address: 8130
Estimated Gas Usage: 1789 - 2404
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:199

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.262900
Transaction Length: 1
Severity: High
Contract: CLIStats
Function name: getTiersData()
PC address: 9333
Estimated Gas Usage: 7157 - 145547
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:5

nzeppelin/contr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.045296
Transaction Length: 1
Severity: Low
Contract: CLICrowdsale
Function name: userSafeAgreementsList(uint256)
PC address: 10947
Estimated Gas Usage: 789 - 884
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x2f7bd0c24ffec8ab1b08c12d01123f875b4dad2c.sol:2834

address[] public userSafeAgreementsList

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol
Total states:1880
106.787285
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.279827
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:5

olidity ^0.5.9;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.929514
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:3

*/

//pragma solidity ^0.5.9;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.681290
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:5

olidity ^0.5.9;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.626630
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:3

*/

//pragma solidity ^0.5.9;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.225522
Transaction Length: 0
Severity: High
Contract: TokenVesting
Function name: constructor
PC address: 937
Estimated Gas Usage: 7924 - 32078
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:112

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.173597
Transaction Length: 0
Severity: High
Contract: AkropolisTokenVesting
Function name: constructor
PC address: 1201
Estimated Gas Usage: 7908 - 31969
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:112

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.208012
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:571

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:39.318796
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1d44b41a742d2b008a8faf655451aa015a59f248.sol:570

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x16523645fd051641ce525866f351ed97c058e637.sol
Total states:2324
2.077257
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x1a3b7917b5952eef04e7dd3c9d8a736b57fb2613.sol
Total states:1608
1.235344
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x723091df82333033f1b646fe1ad7bbbf9cbe420c.sol
Total states:1992
76.410405
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x88596e70298e5ae8bcc1e740200f2b9293041542.sol
Total states:14739
93.990836
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.064901
Transaction Length: 2
Severity: High
Contract: RegularToken
Function name: transferFrom(address,address,uint256)
PC address: 2724
Estimated Gas Usage: 2054 - 2909
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x88596e70298e5ae8bcc1e740200f2b9293041542.sol:1450

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:20.323339
Transaction Length: 2
Severity: Low
Contract: RegularToken
Function name: transferFrom(address,address,uint256)
PC address: 2737
Estimated Gas Usage: 2064 - 2919
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x88596e70298e5ae8bcc1e740200f2b9293041542.sol:1451

assert(c >= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.549313
Transaction Length: 2
Severity: High
Contract: UnboundedRegularToken
Function name: transferFrom(address,address,uint256)
PC address: 2771
Estimated Gas Usage: 2065 - 2920
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x88596e70298e5ae8bcc1e740200f2b9293041542.sol:1450

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:21.936014
Transaction Length: 2
Severity: Low
Contract: UnboundedRegularToken
Function name: transferFrom(address,address,uint256)
PC address: 2784
Estimated Gas Usage: 2075 - 2930
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x88596e70298e5ae8bcc1e740200f2b9293041542.sol:1451

assert(c >= a)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.148358
Transaction Length: 2
Severity: High
Contract: ETPlanToken
Function name: transferFrom(address,address,uint256)
PC address: 3237
Estimated Gas Usage: 2110 - 2965
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x88596e70298e5ae8bcc1e740200f2b9293041542.sol:1450

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:15.673572
Transaction Length: 2
Severity: Low
Contract: ETPlanToken
Function name: transferFrom(address,address,uint256)
PC address: 3250
Estimated Gas Usage: 2120 - 2975
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x88596e70298e5ae8bcc1e740200f2b9293041542.sol:1451

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol
Total states:3456
86.682479
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.023301
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 787
Estimated Gas Usage: 461 - 556
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.352755
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 789
Estimated Gas Usage: 461 - 556
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.369778
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 872
Estimated Gas Usage: 637 - 732
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.766850
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: initialize(uint256,uint256,address[],uint256[],address)
PC address: 874
Estimated Gas Usage: 637 - 732
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:35.626793
Transaction Length: 1
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.635662
Transaction Length: 2
Severity: Medium
Contract: LidTeamLock
Function name: startRelease()
PC address: 1025
Estimated Gas Usage: 20818 - 150697
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4521
Offset: 4885
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:694

function startRelease() external {

        require(releaseStart == 0, "Has already started.");

        require(address(this).balance != 0, "Must have some ether deposited.");

        require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");

        startingLid = lidToken.balanceOf(address(this));

        startingEth = address(this).balance;

        releaseStart = now.add(24 hours);

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.858075
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1163
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.921069
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1165
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.231060
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1248
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:9

ma solidity 0.5.16;
p

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:01.925333
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 1250
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:3



*/



//pragma solidity 0.5.16;
pr

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.778824
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberBPs(uint256)
PC address: 1624
Estimated Gas Usage: 679 - 774
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:572

uint[] public teamMemberBPs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:23.138140
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: resetTeam(address[],uint256[])
PC address: 5028
Estimated Gas Usage: 1070 - 1165
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:720

teamMemberAddresses[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:23.581972
Transaction Length: 1
Severity: Low
Contract: LidTeamLock
Function name: teamMemberAddresses(uint256)
PC address: 5599
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:570

address payable[] public teamMemberAddresses

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:34.581932
Transaction Length: 1
Severity: High
Contract: LidTeamLock
Function name: startRelease()
PC address: 6511
Estimated Gas Usage: 15758 - 125637
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xec8e247c4f839701fd4966b3fe1b38dcbdfd6a90.sol:186

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x3fefa465e68720b21a79aa00a1f2b1c3048c4909.sol
Total states:304
2.070121
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol
Total states:36021
195.746428
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.132496
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.523779
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.345487
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.131400
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.894690
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1217
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.047382
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1219
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.951528
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1302
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.958000
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1304
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.741933
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleAccess
Function name: interpolate(uint256,uint256,uint256,uint256,uint256)
PC address: 2313
Estimated Gas Usage: 997 - 1848
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.858770
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.391596
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3486
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.927477
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3486
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:1266

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:39.202353
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:21.609860
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:962

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.678020
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:1112

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.940654
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:1112

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.670717
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.345478
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.536498
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 13879
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:1267

uint[] public tokenPoolBPs

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.171801
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: getRefundableEth(address)
PC address: 19220
Estimated Gas Usage: 3489 - 38666
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x16a396a1f587731a915dc1718cf5c661597d3b7e.sol:162

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol
Total states:3553
171.389397
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.429475
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 355
Estimated Gas Usage: 352 - 447
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.280779
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 357
Estimated Gas Usage: 352 - 447
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.295232
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 504
Estimated Gas Usage: 594 - 689
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.354384
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 506
Estimated Gas Usage: 594 - 689
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:3

*/

/*
██╗     █████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:23.690093
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: resolve(uint256,uint256,uint256[],bytes32)
PC address: 1471
Estimated Gas Usage: 394 - 489
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:6

     ████

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:28.041526
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: resolve(uint256,uint256,uint256[],bytes32)
PC address: 1473
Estimated Gas Usage: 394 - 489
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:3

*/

/*
██╗     █████

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:21.015578
Transaction Length: 1
Severity: Low
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 1730
Estimated Gas Usage: 846 - 941
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:185

batch[i]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.066146
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 9688
Estimated Gas Usage: 1414 - 1509
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:87

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.558577
Transaction Length: 1
Severity: High
Contract: LexGuildLocker
Function name: registerLocker(address,address[],address,address,uint256[],uint256,uint256,uint256,bytes32)
PC address: 9739
Estimated Gas Usage: 1157 - 1252
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3a08f5cf2c77d003fe07b69e76ff27cbb1520b4f.sol:105

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x44d771d0c998f524ff39ab6df64b72bce1d09566.sol
Total states:272
78.43673
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x2da9a52911bd029306398feaea4dd4658247b1f7.sol
Total states:10936
28.018014
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.809462
Transaction Length: 1
Severity: High
Contract: pSNXVault
Function name: availableWithdraw(address)
PC address: 1869
Estimated Gas Usage: 1088 - 1373
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2da9a52911bd029306398feaea4dd4658247b1f7.sol:640

_rewardCount - 1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.909391
Transaction Length: 1
Severity: Low
Contract: pSNXVault
Function name: addressIndices(uint256)
PC address: 2343
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x2da9a52911bd029306398feaea4dd4658247b1f7.sol:456

address[] public addressIndices

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.086368
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2da9a52911bd029306398feaea4dd4658247b1f7.sol:214

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.667175
Transaction Length: 1
Severity: High
Contract: pSNXVault
Function name: deposit(uint256)
PC address: 5691
Estimated Gas Usage: 11933 - 52453
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x2da9a52911bd029306398feaea4dd4658247b1f7.sol:252

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x29f81a819481044105a779480f3ba6b39edc6c2d.sol
Total states:10115
24.000869
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.031756
Transaction Length: 0
Severity: High
Contract: ERC20TOKEN
Function name: constructor
PC address: 98
Estimated Gas Usage: 233 - 3006
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x29f81a819481044105a779480f3ba6b39edc6c2d.sol:25

t, herein "Interests" involves substantial 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.254778
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x29f81a819481044105a779480f3ba6b39edc6c2d.sol:344

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x6a89b3c90d66081ab7a555a3e8411d9bde2c493e.sol
Total states:1880
98.175543
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.319539
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x6a89b3c90d66081ab7a555a3e8411d9bde2c493e.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.807962
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x6a89b3c90d66081ab7a555a3e8411d9bde2c493e.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.516113
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x6a89b3c90d66081ab7a555a3e8411d9bde2c493e.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.376397
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x6a89b3c90d66081ab7a555a3e8411d9bde2c493e.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:29.326443
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x6a89b3c90d66081ab7a555a3e8411d9bde2c493e.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:32.978170
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x6a89b3c90d66081ab7a555a3e8411d9bde2c493e.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xbeeadc4229b1f6415d7fe86ee98dfd182cb150b3.sol
Total states:426
0.800511
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x45ab3febb4be7882e3e4423ac736510d43f568a9.sol
Total states:3288
11.98292
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.869625
Transaction Length: 2
Severity: High
Contract: LPTokenWrapper
Function name: stake(uint256)
PC address: 963
Estimated Gas Usage: 765 - 860
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x45ab3febb4be7882e3e4423ac736510d43f568a9.sol:82

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xBf198A82F39Ec0E989F33D16Aa86A6A9660e97762.sol
Total states:537
3.580254
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xf45ebf13ef373c971c2182b01976c1a47161c8c6.sol
Total states:2324
1.868267
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xf5687a7b140aef274d1bc8bdc7f41823cc61169f.sol
Total states:77
2.927753
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x5330A5805b9Db68EbCF5247BbC9097163c1c2442.sol
Total states:33392
97.370549
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.246087
Transaction Length: 0
Severity: High
Contract: PaymentSplitter
Function name: constructor
PC address: 91
Estimated Gas Usage: 233 - 3006
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5330A5805b9Db68EbCF5247BbC9097163c1c2442.sol:15

 * functions, this si

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.260882
Transaction Length: 0
Severity: High
Contract: PaymentSplitter
Function name: constructor
PC address: 93
Estimated Gas Usage: 233 - 3006
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5330A5805b9Db68EbCF5247BbC9097163c1c2442.sol:14

authorization control
 * functions, this sim

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.546069
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 2575
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5330A5805b9Db68EbCF5247BbC9097163c1c2442.sol:204

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.630645
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 2748
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5330A5805b9Db68EbCF5247BbC9097163c1c2442.sol:204

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.689715
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3005
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5330A5805b9Db68EbCF5247BbC9097163c1c2442.sol:204

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.280863
Transaction Length: 2
Severity: High
Contract: ERC20Frozenable
Function name: increaseAllowance(address,uint256)
PC address: 4458
Estimated Gas Usage: 1012 - 1487
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5330A5805b9Db68EbCF5247BbC9097163c1c2442.sol:204

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol
Total states:10345
194.44807
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.436390
Transaction Length: 1
Severity: High
Contract: Operator
Function name: setOperators(address[])
PC address: 540
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol:5

ontracts/modules/Owna

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.713442
Transaction Length: 1
Severity: High
Contract: Operator
Function name: setOperators(address[])
PC address: 542
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol:3

*/

// File: contracts/modules/Ownab

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.938338
Transaction Length: 1
Severity: High
Contract: Operator
Function name: getOperator()
PC address: 763
Estimated Gas Usage: 1249 - 2096
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol:440

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.992118
Transaction Length: 1
Severity: High
Contract: Operator
Function name: getOperator()
PC address: 803
Estimated Gas Usage: 1399 - 2622
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol:440

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.468111
Transaction Length: 1
Severity: High
Contract: OptionsData
Function name: setOperators(address[])
PC address: 1990
Estimated Gas Usage: 362 - 457
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol:5

ontracts/modules/Owna

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.731732
Transaction Length: 1
Severity: High
Contract: OptionsData
Function name: setOperators(address[])
PC address: 1992
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol:3

*/

// File: contracts/modules/Ownab

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.617863
Transaction Length: 1
Severity: High
Contract: OptionsData
Function name: getOperator()
PC address: 2213
Estimated Gas Usage: 1271 - 2118
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol:440

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:45.852756
Transaction Length: 1
Severity: High
Contract: OptionsData
Function name: getOperator()
PC address: 2253
Estimated Gas Usage: 1421 - 2644
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x991f67eeba67ec6775b80ed2b2e0b2f32eb41dc6.sol:440

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x31046b5f39732dcce2acd64c9488ea4eac1ff4be.sol
Total states:38890
91.762045
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.935714
Transaction Length: 1
Severity: Low
Contract: LockableToken
Function name: grantedLocks(address,uint256)
PC address: 2420
Estimated Gas Usage: 820 - 1105
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x31046b5f39732dcce2acd64c9488ea4eac1ff4be.sol:526

mapping (address => Lock[]) public grantedLocks

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.720006
Transaction Length: 1
Severity: Low
Contract: DCASHToken
Function name: grantedLocks(address,uint256)
PC address: 2887
Estimated Gas Usage: 798 - 1083
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x31046b5f39732dcce2acd64c9488ea4eac1ff4be.sol:526

mapping (address => Lock[]) public grantedLocks

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.479640
Transaction Length: 2
Severity: High
Contract: StandardToken
Function name: increaseAllowance(address,uint256)
PC address: 4619
Estimated Gas Usage: 1474 - 2279
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x31046b5f39732dcce2acd64c9488ea4eac1ff4be.sol:265

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.974339
Transaction Length: 2
Severity: High
Contract: MintableToken
Function name: increaseAllowance(address,uint256)
PC address: 5093
Estimated Gas Usage: 1496 - 2301
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x31046b5f39732dcce2acd64c9488ea4eac1ff4be.sol:265

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.328398
Transaction Length: 2
Severity: High
Contract: BurnableToken
Function name: increaseAllowance(address,uint256)
PC address: 5241
Estimated Gas Usage: 1496 - 2301
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x31046b5f39732dcce2acd64c9488ea4eac1ff4be.sol:265

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.675946
Transaction Length: 2
Severity: High
Contract: LockableToken
Function name: increaseAllowance(address,uint256)
PC address: 6998
Estimated Gas Usage: 1518 - 2323
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x31046b5f39732dcce2acd64c9488ea4eac1ff4be.sol:265

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.778891
Transaction Length: 2
Severity: High
Contract: DCASHToken
Function name: increaseAllowance(address,uint256)
PC address: 7543
Estimated Gas Usage: 1452 - 2257
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x31046b5f39732dcce2acd64c9488ea4eac1ff4be.sol:265

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x466f2d2698c7fd89f36d67d48a06f2b181b97177.sol
Total states:2324
1.791864
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x4ddbb9e98e213d0697d09628672c161db9546313.sol
Total states:2324
1.819215
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x963b000cbcda96c0052ee239ff98085ef187fbf9.sol
Total states:2437
34.466336
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:10.858198
Transaction Length: 1
Severity: Low
Contract: COREv1Router
Function name: fallback()
PC address: 1419
Estimated Gas Usage: 2242 - 3656
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x963b000cbcda96c0052ee239ff98085ef187fbf9.sol:2141

_WETH.deposit.value(msg.value)()

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x8401d5cb939f1ed07a9f52f1e58f493961ffdbc9.sol
Total states:561
256.531582
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.284625
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: setStringData(bytes32,string)
PC address: 683
Estimated Gas Usage: 435 - 530
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x8401d5cb939f1ed07a9f52f1e58f493961ffdbc9.sol:3

*/

//pragma solidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:26.547906
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: getStringData(bytes32)
PC address: 1499
Estimated Gas Usage: 1697 - 3112
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x8401d5cb939f1ed07a9f52f1e58f493961ffdbc9.sol:314

function getStringData(bytes32 key) public view returns (string memory) {
        return user_dataList[msg.sender][key];
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:00.121996
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: safeTransferFrom(address,address,uint256,bytes)
PC address: 1948
Estimated Gas Usage: 455 - 550
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x8401d5cb939f1ed07a9f52f1e58f493961ffdbc9.sol:3

*/

//pragma solidity ^0.5.0;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:50.963251
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: balanceByAddressAll(address)
PC address: 8512
Estimated Gas Usage: 1232 - 2742
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x8401d5cb939f1ed07a9f52f1e58f493961ffdbc9.sol:242

bytes_a.length + bytes_b.length

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.746087
Transaction Length: 1
Severity: High
Contract: ERC721
Function name: setStringData(bytes32,string)
PC address: 10032
Estimated Gas Usage: 11618 - 55056
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x8401d5cb939f1ed07a9f52f1e58f493961ffdbc9.sol:149

contract ERC721 is ERC165, IERC721 {
    using SafeMath for uint256;
    using Address for address;
    using Counters for Counters.Counter;
    using EnumerableSet for EnumerableSet.UintSet;
    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
    mapping (uint256 => address) private _tokenOwner;
    mapping (uint256 => address) private _tokenApprovals;
    mapping (address => mapping (address => bool)) private _operatorApprovals;
    mapping (uint256 => string) private _tokenURIs;
    mapping (address => EnumerableSet.UintSet) private _holderTokens;
    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
    mapping(address => mapping(bytes32 => string)) user_dataList;
    address public owner;
    constructor () public {_registerInterface(_INTERFACE_ID_ERC721);}
    
    struct EaCard {
        string  name;
        uint256 cardprice;
        string stakingto;
    }
    
    mapping(uint256 => EaCard) public Cards_list;
    
    function ownerOf(uint256 tokenId) public view returns (address) {
        address coinowner = _tokenOwner[tokenId];
        require(coinowner != address(0), "ERC721: owner query for nonexistent token");
        return coinowner;
    }
    function approve(address to, uint256 tokenId) public {
        address coinowner = ownerOf(tokenId);
        require(to != coinowner, "ERC721: approval to current owner");
        require(msg.sender == coinowner || isApprovedForAll(owner, msg.sender),
            "ERC721: approve caller is not owner nor approved for all"
        );
        _tokenApprovals[tokenId] = to;
        emit Approval(coinowner, to, tokenId);
    }
    function getApproved(uint256 tokenId) public view returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");
        return _tokenApprovals[tokenId];
    }
    function setApprovalForAll(address to, bool approved) public {
        require(to != msg.sender, "ERC721: approve to caller");
        _operatorApprovals[msg.sender][to] = approved;
        emit ApprovalForAll(msg.sender, to, approved);
    }
    function isApprovedForAll(address coinowner, address operator) public view returns (bool) {
        return _operatorApprovals[coinowner][operator];
    }
    function safeTransferFrom(address from, address to, uint256 tokenId) public {
        safeTransferFrom(from, to, tokenId, "");
    }
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
        transferFrom(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }
    
    
    
    function _burn(address coinowner, uint256 tokenId) internal {
        require(ownerOf(tokenId) == coinowner, "ERC721: burn of token that is not own");
        _clearApproval(tokenId);
        _tokenOwner[tokenId] = address(0);
        _holderTokens[coinowner].remove(tokenId);
        emit Transfer(coinowner, address(0), tokenId);
    }
    function _burn(uint256 tokenId) internal {
        _burn(ownerOf(tokenId), tokenId);
    }
    
    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool){
        if (!to.isContract()) {return true;}
        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);
        return (retval == _ERC721_RECEIVED);
    }
    function _clearApproval(uint256 tokenId) private {
        if (_tokenApprovals[tokenId] != address(0)) {
            _tokenApprovals[tokenId] = address(0);
        }
    }
    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {
        if (_i == 0) {return "0";}
        uint j = _i; uint len;
        while (j != 0) {len++;j /= 10;}
        bytes memory bstr = new bytes(len);
        uint k = len - 1;
        while (_i != 0) {bstr[k--] = byte(uint8(48 + _i % 10));_i /= 10;}
        return string(bstr);
    }
    function concatStrng(string memory _a, string memory _b) internal pure returns (string memory){
        bytes memory bytes_a = bytes(_a);
        bytes memory bytes_b = bytes(_b);
        string memory length_ab = new string(bytes_a.length + bytes_b.length);
        bytes memory bytes_c = bytes(length_ab);
        uint k = 0;
        for (uint256 i = 0; i < bytes_a.length; i++) bytes_c[k++] = bytes_a[i];
        for (uint256 i = 0; i < bytes_b.length; i++) bytes_c[k++] = bytes_b[i];
        return string(bytes_c);
    }
    function _mint(address to, uint256 tokenId) internal {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");
        _tokenOwner[tokenId] = to;
        _holderTokens[to].add(tokenId);
        emit Transfer(address(0), to, tokenId);
    }
    function tokenOfOwnerByIndex(address holder, uint256 index) public view returns (uint256) {
        return _holderTokens[holder].at(index);
    }
    
    function balanceOf(address coinowner) public view returns (uint256) {
        require(coinowner != address(0), "ERC721: balance query for the zero address");
        return _holderTokens[coinowner].length();
    }
    function _gettokenURI(uint256 tokenId) public view returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
        string memory _tokenURI = _tokenURIs[tokenId];
        return _tokenURI;
    }
    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal {
        require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
        _tokenURIs[tokenId] = _tokenURI;
    }
    
    function balanceByAddressAll(address holder) public view returns (string memory) {
        require(holder != address(0), "ERC721: balance query for the zero address");
        uint256 ns = _holderTokens[holder].length();
        string memory _a1 = '[';
        for(uint8 i = 0; i < ns; i++ ){
            uint256 ea = _holderTokens[holder].at(i);
            string memory No = uint2str(ea);
            if( i > 0 ) _a1 = concatStrng(_a1, ',');
            _a1 = concatStrng(_a1, No);
            
        }
        _a1 = concatStrng(_a1, ']');
        return _a1;
    }
    
    function transferFrom(address from, address to, uint256 tokenId) public {
        require(_isApprovedOrOwner(msg.sender, tokenId), "ERC721: transfer caller is not owner nor approved");
        _transferFrom(from, to, tokenId);
    }
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address coinowner = ownerOf(tokenId);
        return (spender == owner || spender == coinowner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }
    function _exists(uint256 tokenId) internal view returns (bool) {
        address Coinowner = _tokenOwner[tokenId];
        return Coinowner != address(0);
    }
    function _transferFrom(address from, address to, uint256 tokenId) internal {
        require(ownerOf(tokenId) == from || from == owner , "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");
        _clearApproval(tokenId);
        _tokenOwner[tokenId] = to;
        address ThistokenOwner = ownerOf(tokenId);
        _holderTokens[ThistokenOwner].remove(tokenId);
        _holderTokens[to].add(tokenId);
        emit Transfer(ThistokenOwner, to, tokenId);
    }
    
    
    function getStringData(bytes32 key) public view returns (string memory) {
        return user_dataList[msg.sender][key];
    }
    function setStringData(bytes32 key, string memory value) public {
        user_dataList[msg.sender][key] = value;
    }
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x73f6B7419281D7D39C70357161cf40D29ca9619d.sol
Total states:2391
19.115056
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol
Total states:7270
50.159741
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.212518
Transaction Length: 1
Severity: Low
Contract: Layer2Base
Function name: EROs(uint256)
PC address: 2400
Estimated Gas Usage: 872 - 967
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol:1524

Data.Request[] public EROs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.300843
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: EROs(uint256)
PC address: 2400
Estimated Gas Usage: 872 - 967
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol:1524

Data.Request[] public EROs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.686903
Transaction Length: 1
Severity: Low
Contract: Layer2Base
Function name: URBs(uint256)
PC address: 2883
Estimated Gas Usage: 849 - 944
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol:1529

Data.RequestBlock[] public URBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.765206
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: URBs(uint256)
PC address: 2883
Estimated Gas Usage: 849 - 944
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol:1529

Data.RequestBlock[] public URBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.329981
Transaction Length: 1
Severity: Low
Contract: Layer2Base
Function name: ORBs(uint256)
PC address: 3261
Estimated Gas Usage: 870 - 965
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol:1528

Data.RequestBlock[] public ORBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.450939
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: ORBs(uint256)
PC address: 3261
Estimated Gas Usage: 870 - 965
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol:1528

Data.RequestBlock[] public ORBs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.721298
Transaction Length: 1
Severity: Low
Contract: Layer2Base
Function name: ERUs(uint256)
PC address: 3461
Estimated Gas Usage: 892 - 987
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol:1525

Data.Request[] public ERUs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:02.823217
Transaction Length: 1
Severity: Low
Contract: Layer2Storage
Function name: ERUs(uint256)
PC address: 3461
Estimated Gas Usage: 892 - 987
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x4d982203992f75289b9e323117b2b81a27bbfbb6.sol:1525

Data.Request[] public ERUs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x73eaa62fd63452a588f44464e14fc2e671f47217.sol
Total states:2324
1.963841
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xb3c66fa11af5b4975d74c654665a0b7e505b2bde.sol
Total states:1526
1.418662
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x1480c0ced06097c75bffd7681741da5fafa58917.sol
Total states:3513
15.119828
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.563135
Transaction Length: 1
Severity: Low
Contract: Authorizable
Function name: authorities(uint256)
PC address: 472
Estimated Gas Usage: 805 - 900
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1480c0ced06097c75bffd7681741da5fafa58917.sol:2356

address[] public authorities

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.513905
Transaction Length: 1
Severity: Low
Contract: ERC20BridgeProxy
Function name: authorities(uint256)
PC address: 611
Estimated Gas Usage: 805 - 900
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1480c0ced06097c75bffd7681741da5fafa58917.sol:2356

address[] public authorities

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x6e0D4a8Dd44E9EFe5b614190AcBaC18b4Cd5CD5D.sol
Total states:2312
5.715404
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.612813
Transaction Length: 1
Severity: Low
Contract: QuotaDistribution
Function name: orgList(uint256)
PC address: 3623
Estimated Gas Usage: 678 - 773
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x6e0D4a8Dd44E9EFe5b614190AcBaC18b4Cd5CD5D.sol:688

address[] public orgList

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x3db94af2808ba0c8a6c21ee0c63e50047a6fff87.sol
Total states:22554
108.298042
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.168144
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 844
Estimated Gas Usage: 558 - 3889
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3db94af2808ba0c8a6c21ee0c63e50047a6fff87.sol:1402

distributionPeriod * 1 days

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:23.671951
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 1422
Estimated Gas Usage: 46536 - 230197
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3db94af2808ba0c8a6c21ee0c63e50047a6fff87.sol:303

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.666273
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3db94af2808ba0c8a6c21ee0c63e50047a6fff87.sol:225

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.842515
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: transfer(address,uint256)
PC address: 3334
Estimated Gas Usage: 2044 - 3175
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x3db94af2808ba0c8a6c21ee0c63e50047a6fff87.sol:1100

_town.checkProposal(recipient)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.587407
Transaction Length: 2
Severity: High
Contract: ExternalTokenTemplate
Function name: increaseAllowance(address,uint256)
PC address: 3494
Estimated Gas Usage: 922 - 1397
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3db94af2808ba0c8a6c21ee0c63e50047a6fff87.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.473857
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: getHolderByIndex(uint256)
PC address: 4982
Estimated Gas Usage: 725 - 820
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x3db94af2808ba0c8a6c21ee0c63e50047a6fff87.sol:1076

_holders[index]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.617854
Transaction Length: 2
Severity: High
Contract: TownToken
Function name: increaseAllowance(address,uint256)
PC address: 6628
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3db94af2808ba0c8a6c21ee0c63e50047a6fff87.sol:225

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xe5a55df7c54fde43a1217449a3f9a0233ef2a393.sol
Total states:594
1.434095
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x5b40841eecfb429452ab25216afc1e1650c07747.sol
Total states:28166
69.847562
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.053680
Transaction Length: 0
Severity: High
Contract: AutoRefactorCoinage
Function name: constructor
PC address: 133
Estimated Gas Usage: 10269 - 53042
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5b40841eecfb429452ab25216afc1e1650c07747.sol:12

setFactor(uint256 factor) external returns 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.239992
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5b40841eecfb429452ab25216afc1e1650c07747.sol:52

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.245732
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3424
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5b40841eecfb429452ab25216afc1e1650c07747.sol:52

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.463703
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5b40841eecfb429452ab25216afc1e1650c07747.sol:52

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xd5bdd280e034b5c3b8c7ed39317f9cf0542178be.sol
Total states:428
0.886029
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x26b7677a22597ac64fc9d3961037f95af77db347.sol
Total states:738
3.533285
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xbc8658828f77940ba63359272ce59b08053bd359.sol
Total states:22554
109.558472
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.166446
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 844
Estimated Gas Usage: 558 - 3889
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xbc8658828f77940ba63359272ce59b08053bd359.sol:1402

distributionPeriod * 1 days

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.647172
Transaction Length: 0
Severity: High
Contract: Town
Function name: constructor
PC address: 1422
Estimated Gas Usage: 46536 - 230197
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xbc8658828f77940ba63359272ce59b08053bd359.sol:303

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.826261
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xbc8658828f77940ba63359272ce59b08053bd359.sol:225

a + b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.899055
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: transfer(address,uint256)
PC address: 3334
Estimated Gas Usage: 2044 - 3175
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0xbc8658828f77940ba63359272ce59b08053bd359.sol:1100

_town.checkProposal(recipient)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.940731
Transaction Length: 2
Severity: High
Contract: ExternalTokenTemplate
Function name: increaseAllowance(address,uint256)
PC address: 3494
Estimated Gas Usage: 922 - 1397
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xbc8658828f77940ba63359272ce59b08053bd359.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.727106
Transaction Length: 1
Severity: Low
Contract: TownToken
Function name: getHolderByIndex(uint256)
PC address: 4982
Estimated Gas Usage: 725 - 820
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xbc8658828f77940ba63359272ce59b08053bd359.sol:1076

_holders[index]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.201325
Transaction Length: 2
Severity: High
Contract: TownToken
Function name: increaseAllowance(address,uint256)
PC address: 6628
Estimated Gas Usage: 967 - 1442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xbc8658828f77940ba63359272ce59b08053bd359.sol:225

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x718F3fAAccFCdDB8977205126ca3f5f3b1A53D31.sol
Total states:3094
7.042452
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.399879
Transaction Length: 0
Severity: Medium
Contract: RebasedOracle
Function name: constructor
PC address: 1685
Estimated Gas Usage: 65856 - 482160
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 486
Offset: 686
Offset: 886
Offset: 1144
Offset: 1344
Offset: 1544
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x718F3fAAccFCdDB8977205126ca3f5f3b1A53D31.sol:404

contract RebasedOracle is IOracle, Ownable {
    using FixedPoint for *;

    uint private reb2EthPrice0CumulativeLast;
    uint private reb2EthPrice1CumulativeLast;
    uint32 private reb2EthBlockTimestampLast;
    
    uint private usdcEthPrice0CumulativeLast;
    uint private usdcEthPrice1CumulativeLast;
    uint32 private usdcEthBlockTimestampLast;
    
    address private constant _weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    address private constant _usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;

    IUniswapV2Pair private _reb2_eth;
    IUniswapV2Pair private _usdc_eth;
    
    address controller;
    
    modifier onlyControllerOrOwner {
        require(msg.sender == controller || msg.sender == owner());
        _;
    }

    // RebasedController: 0x41630a33d4d6e3767e26aaf50277ab2a235edea3
    // SushiSwap REB2/ETH: 0xc4dE5Cc1232f6493Cc7BF7bcb12F905eb9742Bd7
    // SushiSwap USDC/ETH: 0x397ff1542f962076d0bfe58ea045ffa2d347aca0

    constructor(
        address _controller,
        address __reb2_eth,   // Address of the ETH/REB Uniswap pair
        address __usdc_reb   // Address of the USDC/ETH Uniswap pair
        ) public {
        
        controller = _controller;

        _reb2_eth = IUniswapV2Pair(__reb2_eth);
        _usdc_eth = IUniswapV2Pair(__usdc_reb);
        
        uint112 _dummy1;
        uint112 _dummy2;
        
        reb2EthPrice0CumulativeLast = _reb2_eth.price0CumulativeLast();
        reb2EthPrice1CumulativeLast = _reb2_eth.price1CumulativeLast();
        
        (_dummy1, _dummy2, reb2EthBlockTimestampLast) = _reb2_eth.getReserves();
        
        usdcEthPrice0CumulativeLast = _usdc_eth.price0CumulativeLast();
        usdcEthPrice1CumulativeLast = _usdc_eth.price1CumulativeLast();
        
        (_dummy1, _dummy2, usdcEthBlockTimestampLast) = _usdc_eth.getReserves();
    }

    // Get the average price of 1 REB in Wei
    function getRebEthRate() public view returns (uint256, uint256, uint32, uint256) {
        (uint price0Cumulative, uint price1Cumulative, uint32 _blockTimestamp) =
            UniswapV2OracleLibrary.currentCumulativePrices(address(_reb2_eth));
            
        FixedPoint.uq112x112 memory rebEthAverage = FixedPoint.uq112x112(uint224(1e9 * (price0Cumulative - reb2EthPrice0CumulativeLast) / (_blockTimestamp - reb2EthBlockTimestampLast)));
        
        return (price0Cumulative, price1Cumulative, _blockTimestamp, rebEthAverage.mul(1).decode144());
    }
    
    // Get the average price of 1 USD in Wei
    function getUsdcEthRate() public view returns (uint256, uint256, uint32, uint256) {
        (uint price0Cumulative, uint price1Cumulative, uint32 _blockTimestamp) =
            UniswapV2OracleLibrary.currentCumulativePrices(address(_usdc_eth));
            
        FixedPoint.uq112x112 memory usdcEthAverage = FixedPoint.uq112x112(uint224(1e6 * (price0Cumulative - usdcEthPrice0CumulativeLast) / (_blockTimestamp - usdcEthBlockTimestampLast)));
            
        return (price0Cumulative, price1Cumulative, _blockTimestamp, usdcEthAverage.mul(1).decode144());
    }

    // Update "last" state variables to current values
    // This is *only* called by the controller during rebase which enforces a minimum interim period of 12h.
   function update() external onlyControllerOrOwner {
        
        uint rebEthAverage;
        uint usdcEthAverage;
        
        (reb2EthPrice0CumulativeLast, reb2EthPrice1CumulativeLast, reb2EthBlockTimestampLast, rebEthAverage) = getRebEthRate();
        (usdcEthPrice0CumulativeLast, usdcEthPrice1CumulativeLast, usdcEthBlockTimestampLast, usdcEthAverage) = getUsdcEthRate();
    }

    // Return the average price since last update
    function getData() external view returns (uint256) {
        
        uint _price0CumulativeLast;
        uint _price1CumulativeLast;
        uint32 _blockTimestampLast;
        
        uint rebEthAverage;

        (_price0CumulativeLast, _price1CumulativeLast, _blockTimestampLast, rebEthAverage) = getRebEthRate();
        
        uint usdcEthAverage;
        
         (_price0CumulativeLast, _price1CumulativeLast, _blockTimestampLast, usdcEthAverage) = getUsdcEthRate();
         
        uint answer = (rebEthAverage * 1e18) / usdcEthAverage;
        
        return (answer);
    }
}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xcfcbd5c6fbbac2183bd76b5caa4bd86fa0953dd62.sol
Total states:426
0.798684
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xb14affa389865eaedf88c6faf6a55a57dc9b8d47.sol
Total states:736
1.515796
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x72079FB4E9958571b67F25fD9d30F3bABA355f57.sol
Total states:90
1.56753
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xF5F016fD2ba03FcD6f56199327D4E28AC4923E6C.sol
Total states:504
4.310034
==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:00.963107
Transaction Length: 1
Severity: Low
Contract: SpellAction
Function name: execute()
PC address: 215
Estimated Gas Usage: 939 - 1315
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0xF5F016fD2ba03FcD6f56199327D4E28AC4923E6C.sol:101

PotAbstract(MCD_POT).drip()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.128550
Transaction Length: 1
Severity: Low
Contract: SpellAction
Function name: execute()
PC address: 458
Estimated Gas Usage: 2612 - 37645
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0xF5F016fD2ba03FcD6f56199327D4E28AC4923E6C.sol:107

PotAbstract(MCD_POT).file("dsr", ZERO_PCT_RATE)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.305435
Transaction Length: 1
Severity: High
Contract: SpellAction
Function name: execute()
PC address: 644
Estimated Gas Usage: 4958 - 108460
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xF5F016fD2ba03FcD6f56199327D4E28AC4923E6C.sol:5

(C) 2020 Maker 

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol
Total states:12500
160.744261
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.671281
Transaction Length: 1
Severity: High
Contract: Operator
Function name: setOperators(address[])
PC address: 540
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol:5

ontracts/modules/Owna

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.825936
Transaction Length: 1
Severity: High
Contract: Operator
Function name: setOperators(address[])
PC address: 542
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol:3

*/

// File: contracts/modules/Ownab

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:30.660685
Transaction Length: 1
Severity: High
Contract: Operator
Function name: getOperator()
PC address: 763
Estimated Gas Usage: 1249 - 2096
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol:440

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:41.322739
Transaction Length: 1
Severity: High
Contract: Operator
Function name: getOperator()
PC address: 803
Estimated Gas Usage: 1399 - 2622
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol:440

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.501951
Transaction Length: 1
Severity: High
Contract: OptionsData
Function name: setOperators(address[])
PC address: 1990
Estimated Gas Usage: 362 - 457
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol:5

ontracts/modules/Owna

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.001464
Transaction Length: 1
Severity: High
Contract: OptionsData
Function name: setOperators(address[])
PC address: 1992
Estimated Gas Usage: 362 - 457
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol:3

*/

// File: contracts/modules/Ownab

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.759679
Transaction Length: 1
Severity: High
Contract: OptionsData
Function name: getOperator()
PC address: 2213
Estimated Gas Usage: 1271 - 2118
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol:440

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:47.271944
Transaction Length: 1
Severity: High
Contract: OptionsData
Function name: getOperator()
PC address: 2253
Estimated Gas Usage: 1421 - 2644
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x3ff5c61fde87589529e54c57397f816c7f10a5d6.sol:440

function getOperator()public view returns (address[] memory) {
        return _operatorList;
    }

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x91d0b6296e334b872ac6cb297d14eb7cd2612ad8.sol
Total states:305
3.938954
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol
Total states:16369
190.553012
==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:07.608238
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeSub(uint256,uint256)
PC address: 601
Estimated Gas Usage: 527 - 622
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:110

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:09.884045
Transaction Length: 1
Severity: Low
Contract: Math
Function name: safeDiv(uint256,uint256)
PC address: 689
Estimated Gas Usage: 542 - 637
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:118

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.953426
Transaction Length: 1
Severity: High
Contract: Math
Function name: rdiv(uint256,uint256)
PC address: 715
Estimated Gas Usage: 600 - 695
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:114

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.277086
Transaction Length: 1
Severity: High
Contract: Math
Function name: safeAdd(uint256,uint256)
PC address: 807
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:106

x + y

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:08.838773
Transaction Length: 1
Severity: High
Contract: Interest
Function name: safeSub(uint256,uint256)
PC address: 1189
Estimated Gas Usage: 527 - 622
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:110

x - y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:10.772586
Transaction Length: 1
Severity: Low
Contract: Interest
Function name: safeDiv(uint256,uint256)
PC address: 1277
Estimated Gas Usage: 542 - 637
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:118

x / y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.562169
Transaction Length: 1
Severity: High
Contract: Interest
Function name: rdiv(uint256,uint256)
PC address: 1303
Estimated Gas Usage: 623 - 718
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:114

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.406342
Transaction Length: 1
Severity: High
Contract: Interest
Function name: safeAdd(uint256,uint256)
PC address: 1542
Estimated Gas Usage: 615 - 710
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:106

x + y

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.736497
Transaction Length: 1
Severity: Low
Contract: NAVFeed
Function name: writeOffs(uint256)
PC address: 3592
Estimated Gas Usage: 473 - 568
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:573

WriteOff [5] public writeOffs

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:37.210303
Transaction Length: 1
Severity: High
Contract: BaseNFTFeed
Function name: safeSub(uint256,uint256)
PC address: 5428
Estimated Gas Usage: 550 - 645
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:110

x - y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.742895
Transaction Length: 1
Severity: High
Contract: BaseNFTFeed
Function name: rmul(uint256,uint256)
PC address: 5695
Estimated Gas Usage: 635 - 730
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:114

x * y

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.977996
Transaction Length: 1
Severity: High
Contract: BaseNFTFeed
Function name: totalValue()
PC address: 5950
Estimated Gas Usage: 2297 - 37191
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:5

sing https://da

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.453521
Transaction Length: 1
Severity: High
Contract: BaseNFTFeed
Function name: totalValue()
PC address: 5953
Estimated Gas Usage: 2297 - 37191
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:3



// Verified using https://dapp.tools

// 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.212406
Transaction Length: 1
Severity: High
Contract: BaseNFTFeed
Function name: totalValue()
PC address: 5965
Estimated Gas Usage: 2297 - 37191
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:503

pile.total()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:44.075598
Transaction Length: 1
Severity: High
Contract: BaseNFTFeed
Function name: safeAdd(uint256,uint256)
PC address: 6159
Estimated Gas Usage: 571 - 666
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:106

x + y

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:41.711867
Transaction Length: 1
Severity: High
Contract: BaseNFTFeed
Function name: totalValue()
PC address: 7043
Estimated Gas Usage: 2297 - 37191
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:125

blic pure returns (uint

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:37.134622
Transaction Length: 1
Severity: High
Contract: NAVFeed
Function name: safeSub(uint256,uint256)
PC address: 8847
Estimated Gas Usage: 617 - 712
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc61e65114CbD5508e31fd755A49A817798C132cb.sol:110

x - y

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x2454d66220d48a07306e03e6694f10eb4906b299.sol
Total states:636
1.964641
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol
Total states:77467
1784.204118
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.193913
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.085008
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.657663
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: initialize(string,string,uint8)
PC address: 1049
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.005143
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.458199
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: initialize(string,string,uint8)
PC address: 1200
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.714573
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: getModuleAddress(string)
PC address: 1909
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:22.056260
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: quickWithdraw(address,address[],uint256[])
PC address: 2190
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.349036
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: quickWithdraw(address,address[],uint256[])
PC address: 2192
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.787277
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.643776
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:46.417911
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: quickWithdraw(address,address[],uint256[])
PC address: 2338
Estimated Gas Usage: 795 - 3572
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:58.970292
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: quickWithdraw(address,address[],uint256[])
PC address: 2340
Estimated Gas Usage: 795 - 3572
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:17.584004
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.164384
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:37.776980
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:05.086023
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: withdrawFromVault(address,address[],uint256[])
PC address: 2630
Estimated Gas Usage: 419 - 514
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:10.650653
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: withdrawFromVault(address,address[],uint256[])
PC address: 2632
Estimated Gas Usage: 419 - 514
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:47.050217
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: getModuleAddress(string)
PC address: 2653
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:35.082674
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: withdrawFromVault(address,address[],uint256[])
PC address: 2778
Estimated Gas Usage: 752 - 3529
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:46.908129
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: withdrawFromVault(address,address[],uint256[])
PC address: 2780
Estimated Gas Usage: 752 - 3529
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:46.878104
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.823804
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:225

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:07.490251
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: initialize(address,address[])
PC address: 3258
Estimated Gas Usage: 418 - 513
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:9

e: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:11.960167
Transaction Length: 1
Severity: High
Contract: VaultProtocol
Function name: initialize(address,address[])
PC address: 3260
Estimated Gas Usage: 418 - 513
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\contr

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:48.425348
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: initialize(address,string,string)
PC address: 3306
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:05.285576
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.777998
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:2410

Distribution[] public distributions

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:43.845757
Transaction Length: 2
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:2410

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:11.632264
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:225

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:06.161814
Transaction Length: 1
Severity: High
Contract: VaultPoolToken
Function name: initialize(address,string,string)
PC address: 3457
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:3



*/



// File: @openzeppelin\cont

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.491705
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:44.503209
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:2410

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:36.907663
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:225

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:56.490051
Transaction Length: 1
Severity: Low
Contract: VaultPoolToken
Function name: distributions(uint256)
PC address: 7232
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:2410

Distribution[] public distributions

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.936506
Transaction Length: 1
Severity: Low
Contract: VaultProtocol
Function name: totalClaimableAmount(address)
PC address: 13517
Estimated Gas Usage: 1314 - 1409
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x7cc0851af6dd95814897ebbae29c839101ede5a3.sol:4108

claimableTokens[indReg]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xac873993e43a5af7b39ab4a5a50ce1fbdb7191d3.sol
Total states:738
3.643706
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x9d1233cc46795E94029fDA81aAaDc1455D510f15.sol
Total states:3260
17.08972
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x035fb9efa7ed40a688044af22282fb19b64b5f60.sol
Total states:23598
69.140144
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.236244
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x035fb9efa7ed40a688044af22282fb19b64b5f60.sol:121

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.674066
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: swapExactAmountOut(address,address,uint256,uint256,uint256)
PC address: 11846
Estimated Gas Usage: 2280 - 37172
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x035fb9efa7ed40a688044af22282fb19b64b5f60.sol:140

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.034403
Transaction Length: 2
Severity: High
Contract: DynamicSwap
Function name: increaseAllowance(address,uint256)
PC address: 12775
Estimated Gas Usage: 1037 - 1512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x035fb9efa7ed40a688044af22282fb19b64b5f60.sol:121

a + b

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:10.707293
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getInExactOut(address,int256,int256,int256)
PC address: 14628
Estimated Gas Usage: 538 - 633
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x035fb9efa7ed40a688044af22282fb19b64b5f60.sol:229

a - b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.909325
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getOutExactIn(address,int256,int256,int256)
PC address: 15848
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x035fb9efa7ed40a688044af22282fb19b64b5f60.sol:235

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.463141
Transaction Length: 1
Severity: High
Contract: DynamicSwap
Function name: getInExactOut(address,int256,int256,int256)
PC address: 16973
Estimated Gas Usage: 788 - 883
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x035fb9efa7ed40a688044af22282fb19b64b5f60.sol:215

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xd16583c912bda99c2919256c58e19dcbdf55e7b6.sol
Total states:7292
62.721658
==== Unchecked Call Return Value ====
SWC ID: 104
FOUND TIME: 0:00:02.284702
Transaction Length: 1
Severity: Low
Contract: SwapsImplKyber
Function name: dexExpectedRate(address,address,uint256)
PC address: 4565
Estimated Gas Usage: 2069 - 39031
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: ../../contracts/m_loop/loop7/0xd16583c912bda99c2919256c58e19dcbdf55e7b6.sol:1020

kyberContract.staticcall(
                abi.encodeWithSelector(
                    0x809a9e55, // keccak("getExpectedRate(address,address,uint256)")
                    sourceTokenAddress,
                    destTokenAddress,
                    sourceTokenAmount
                )
            )

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x99280cefeecceaf2c5b1537cd4eeb3b44c3c171f.sol
Total states:1566
1.133281
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xfFED56a180f23fD32Bc6A1d8d3c09c283aB594A8.sol
Total states:21448
42.895509
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xdf920992b6c33f9e0143633dc6cc38917c300335.sol
Total states:18680
152.756268
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.264456
Transaction Length: 1
Severity: High
Contract: Combine
Function name: bulkTransfer(address[],uint256[])
PC address: 757
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xdf920992b6c33f9e0143633dc6cc38917c300335.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.029205
Transaction Length: 1
Severity: High
Contract: Combine
Function name: bulkTransfer(address[],uint256[])
PC address: 759
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xdf920992b6c33f9e0143633dc6cc38917c300335.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.874875
Transaction Length: 1
Severity: High
Contract: Combine
Function name: bulkTransfer(address[],uint256[])
PC address: 842
Estimated Gas Usage: 584 - 679
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xdf920992b6c33f9e0143633dc6cc38917c300335.sol:5

olidity ^0.5.13;
prag

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.747940
Transaction Length: 1
Severity: High
Contract: Combine
Function name: bulkTransfer(address[],uint256[])
PC address: 844
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xdf920992b6c33f9e0143633dc6cc38917c300335.sol:3

*/

//pragma solidity ^0.5.13;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:42.111346
Transaction Length: 1
Severity: High
Contract: Combine
Function name: transferAndCall(address,uint256,bytes)
PC address: 1417
Estimated Gas Usage: 511 - 606
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xdf920992b6c33f9e0143633dc6cc38917c300335.sol:3

*/

//pragma solidity ^0.5.13;
prag

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:48.782722
Transaction Length: 1
Severity: Low
Contract: Combine
Function name: unfreeze(uint256)
PC address: 6428
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xdf920992b6c33f9e0143633dc6cc38917c300335.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:29.552863
Transaction Length: 2
Severity: Low
Contract: Combine
Function name: unfreeze(uint256)
PC address: 6428
Estimated Gas Usage: 1375 - 1660
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xdf920992b6c33f9e0143633dc6cc38917c300335.sol:212

_burnedAmount * FLOAT_SCALAR / info.totalFrozen

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xC07168567b69e7F185A7690AF3B4580025579f33.sol
Total states:2370
2.426523
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.063598
Transaction Length: 0
Severity: High
Contract: BaseERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xC07168567b69e7F185A7690AF3B4580025579f33.sol:15

e/contracts/blob/master/contracts/token/Syn

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.051400
Transaction Length: 0
Severity: High
Contract: SyntheticToken
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xC07168567b69e7F185A7690AF3B4580025579f33.sol:15

e/contracts/blob/master/contracts/token/Syn

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x137366d6Eb553945D8399a9eDcCa7DbD344258FC.sol
Total states:381
0.546313
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol
Total states:32074
78.780852
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.046301
Transaction Length: 0
Severity: High
Contract: Clover42Token
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:12

ctions; to access them see {ERC20Detailed}.

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.147093
Transaction Length: 0
Severity: High
Contract: C42LiquidityMinter
Function name: constructor
PC address: 356
Estimated Gas Usage: 22796 - 106764
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:1173

block.number + BLOCK_PER_28D

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.382887
Transaction Length: 1
Severity: Low
Contract: C42LiquidityMinter
Function name: poolInfo(uint256)
PC address: 2095
Estimated Gas Usage: 725 - 820
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:1152

PoolInfo[] public poolInfo

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.935468
Transaction Length: 1
Severity: Low
Contract: C42LiquidityMinter
Function name: withdraw(uint256,uint256)
PC address: 2804
Estimated Gas Usage: 732 - 827
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:1295

poolInfo[_pid]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.481963
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:114

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.739975
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3424
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:114

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.377660
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 3847
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:114

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.348221
Transaction Length: 1
Severity: Low
Contract: C42LiquidityMinter
Function name: updatePool(uint256)
PC address: 4642
Estimated Gas Usage: 704 - 799
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:1257

poolInfo[_pid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.687561
Transaction Length: 1
Severity: Low
Contract: C42LiquidityMinter
Function name: emergencyWithdraw(uint256)
PC address: 5712
Estimated Gas Usage: 726 - 821
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:1313

poolInfo[_pid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.547226
Transaction Length: 1
Severity: Low
Contract: C42LiquidityMinter
Function name: pendingC42(uint256,address)
PC address: 7360
Estimated Gas Usage: 739 - 834
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:1235

poolInfo[_pid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.899325
Transaction Length: 1
Severity: Low
Contract: C42LiquidityMinter
Function name: deposit(uint256,uint256)
PC address: 7993
Estimated Gas Usage: 752 - 847
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:1276

poolInfo[_pid]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.857680
Transaction Length: 1
Severity: High
Contract: C42LiquidityMinter
Function name: getMultiplier(uint256,uint256)
PC address: 8815
Estimated Gas Usage: 1121 - 1594
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x1a16e1894df4579650e1e611e5b0b92eae478bb2.sol:168

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol
Total states:35615
162.687084
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.477270
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.815838
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:14.822337
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.851567
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.058496
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1261
Estimated Gas Usage: 462 - 557
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.177328
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1263
Estimated Gas Usage: 462 - 557
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.805109
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1346
Estimated Gas Usage: 638 - 733
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.335349
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresale
Function name: setTokenPools(uint256,uint256,address[],uint256[])
PC address: 1348
Estimated Gas Usage: 638 - 733
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.747800
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:784

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.523752
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.190669
Transaction Length: 2
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPools(uint256)
PC address: 3707
Estimated Gas Usage: 703 - 798
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1226

address[] public tokenPools

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.069737
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:783

uint[] public bonusRangeStart

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:26.928914
Transaction Length: 1
Severity: Low
Contract: LidStaking
Function name: stakeHandlers(uint256)
PC address: 6118
Estimated Gas Usage: 790 - 885
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:961

IStakeHandler[] public stakeHandlers

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:00.669710
Transaction Length: 2
Severity: High
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6315
Estimated Gas Usage: 1699 - 2124
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1111

stakeHandlers.length-1

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.810363
Transaction Length: 2
Severity: Low
Contract: LidStaking
Function name: unregisterStakeHandler(uint256)
PC address: 6326
Estimated Gas Usage: 1709 - 2134
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1111

stakeHandlers[stakeHandlers.length-1]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:31.524728
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:162

a * b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.348391
Transaction Length: 1
Severity: High
Contract: LidStaking
Function name: findTaxAmount(uint256,uint256)
PC address: 13348
Estimated Gas Usage: 474 - 569
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:162

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.269373
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresale
Function name: tokenPoolBPs(uint256)
PC address: 15577
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x22d6af3eef515cd4a20db5c88143b256b0a1a206.sol:1227

uint[] public tokenPoolBPs

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xf7070f533932b495ac859e910373d9f7bdf9569f.sol
Total states:2301
2.258561
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.063657
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xf7070f533932b495ac859e910373d9f7bdf9569f.sol:22

al functions; to access them see `ERC20Deta

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.041647
Transaction Length: 0
Severity: High
Contract: TulipToken
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xf7070f533932b495ac859e910373d9f7bdf9569f.sol:22

al functions; to access them see `ERC20Deta

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x0a4e9f69f5b2e1e661da9ed98956f928200ea4ba.sol
Total states:3288
18.664113
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.547425
Transaction Length: 1
Severity: Low
Contract: YieldContract
Function name: withdraw(uint256)
PC address: 1468
Estimated Gas Usage: 705 - 800
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x0a4e9f69f5b2e1e661da9ed98956f928200ea4ba.sol:628

lockBoxStructs[lockBoxNumber]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:06.504570
Transaction Length: 1
Severity: Low
Contract: YieldContract
Function name: lockBoxStructs(uint256)
PC address: 2041
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x0a4e9f69f5b2e1e661da9ed98956f928200ea4ba.sol:560

LockBoxStruct[] public lockBoxStructs

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.057729
Transaction Length: 1
Severity: Low
Contract: YieldContract
Function name: updateBeneficiary(uint256,address)
PC address: 2132
Estimated Gas Usage: 759 - 854
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x0a4e9f69f5b2e1e661da9ed98956f928200ea4ba.sol:622

lockBoxStructs[lockBoxNumber]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:07.730293
Transaction Length: 1
Severity: Low
Contract: YieldContract
Function name: getLockBoxBeneficiary(uint256)
PC address: 2484
Estimated Gas Usage: 726 - 821
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x0a4e9f69f5b2e1e661da9ed98956f928200ea4ba.sol:574

lockBoxStructs[lockBoxNumber]

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:15.478299
Transaction Length: 1
Severity: Low
Contract: YieldContract
Function name: deposit12m(address,uint256)
PC address: 4320
Estimated Gas Usage: 8943 - 30264
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x0a4e9f69f5b2e1e661da9ed98956f928200ea4ba.sol:606

token.transferFrom(yieldWallet, address(this), yieldAmount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:13.333444
Transaction Length: 1
Severity: Low
Contract: YieldContract
Function name: deposit6m(address,uint256)
PC address: 4639
Estimated Gas Usage: 11032 - 67435
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x0a4e9f69f5b2e1e661da9ed98956f928200ea4ba.sol:609

token.transferFrom(msg.sender, address(this), amount)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x75e9f410e8d1d7240b67ec6fe35fa37580b814d9.sol
Total states:272
78.543547
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.065695
Transaction Length: 0
Severity: High
Contract: VaultProRata
Function name: constructor
PC address: 408
Estimated Gas Usage: 82423 - 403508
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x75e9f410e8d1d7240b67ec6fe35fa37580b814d9.sol:34

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.564556
Transaction Length: 0
Severity: Low
Contract: VaultProRata
Function name: constructor
PC address: 422
Estimated Gas Usage: 82433 - 403518
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x75e9f410e8d1d7240b67ec6fe35fa37580b814d9.sol:35

assert(c >= a)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol
Total states:2749
25.987642
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.582023
Transaction Length: 1
Severity: High
Contract: DODOLpToken
Function name: name()
PC address: 1065
Estimated Gas Usage: 2316 - 37588
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol:5

racts/intf/IERC

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.323117
Transaction Length: 1
Severity: High
Contract: DODOLpToken
Function name: name()
PC address: 1068
Estimated Gas Usage: 2316 - 37588
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol:3



// File: contracts/intf/IERC20.sol

/*

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.074431
Transaction Length: 1
Severity: High
Contract: DODOLpToken
Function name: name()
PC address: 1080
Estimated Gas Usage: 2316 - 37588
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol:249

IERC20(originToken).name()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.048179
Transaction Length: 1
Severity: High
Contract: DODOLpToken
Function name: decimals()
PC address: 2785
Estimated Gas Usage: 2275 - 37169
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol:5

racts/intf/IERC

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.967490
Transaction Length: 1
Severity: High
Contract: DODOLpToken
Function name: decimals()
PC address: 2788
Estimated Gas Usage: 2275 - 37169
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol:3



// File: contracts/intf/IERC20.sol

/*

 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.094429
Transaction Length: 1
Severity: High
Contract: DODOLpToken
Function name: decimals()
PC address: 2800
Estimated Gas Usage: 2275 - 37169
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol:253

IERC20(originToken).decimals()

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:02.088311
Transaction Length: 1
Severity: High
Contract: DODOLpToken
Function name: name()
PC address: 6249
Estimated Gas Usage: 2316 - 37588
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol:77

er} event.
     */
    

--------------------

==== Integer Underflow ====
SWC ID: 101
FOUND TIME: 0:00:08.811592
Transaction Length: 1
Severity: High
Contract: DODOLpToken
Function name: decimals()
PC address: 6314
Estimated Gas Usage: 2275 - 37169
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xc11eccdee225d644f873776a68a02ecd8c015697.sol:102

ry SafeMath {
    funct

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xb21188c0d4eea42ab6fb93df0ba7d4cbfc20b4ed.sol
Total states:1986
6.211865
==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.491391
Transaction Length: 1
Severity: Low
Contract: YugiFarming
Function name: poolList(uint256)
PC address: 1908
Estimated Gas Usage: 702 - 797
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xb21188c0d4eea42ab6fb93df0ba7d4cbfc20b4ed.sol:1064

PoolList[] public poolList

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.340513
Transaction Length: 1
Severity: Low
Contract: YugiFarming
Function name: pendingRewardsFromPool(uint256,address)
PC address: 6377
Estimated Gas Usage: 982 - 2215
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xb21188c0d4eea42ab6fb93df0ba7d4cbfc20b4ed.sol:1244

poolList[_pid]

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xe94f904a6181a00266abb1b39711520b5551d0b7.sol
Total states:2324
1.979372
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol
Total states:52177
1112.410687
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.860070
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.012818
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.710577
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_SBTC
Function name: initialize(string,string,uint8)
PC address: 1000
Estimated Gas Usage: 409 - 504
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.731957
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.512952
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_SBTC
Function name: initialize(string,string,uint8)
PC address: 1151
Estimated Gas Usage: 751 - 3528
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.205381
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2226
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.383891
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[],uint256)
PC address: 2228
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.642807
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2357
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:5

openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.942294
Transaction Length: 1
Severity: High
Contract: DistributionToken
Function name: claimDistributions(address[])
PC address: 2359
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades\

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:55.881513
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:40.859080
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_SBTC
Function name: getModuleAddress(string)
PC address: 2526
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:55.491378
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:57.355629
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_SBTC
Function name: initialize(address,string,string)
PC address: 3179
Estimated Gas Usage: 485 - 580
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.726416
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3249
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:212

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:13.993212
Transaction Length: 1
Severity: High
Contract: PoolToken
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:18.482842
Transaction Length: 1
Severity: High
Contract: PoolToken_CurveFi_SBTC
Function name: initialize(address,string,string)
PC address: 3330
Estimated Gas Usage: 827 - 3604
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:3

*/

// File: @openzeppelin\upgrades

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.427235
Transaction Length: 1
Severity: Low
Contract: DistributionToken
Function name: distributions(uint256)
PC address: 3405
Estimated Gas Usage: 724 - 819
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:995

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.644833
Transaction Length: 2
Severity: High
Contract: ERC20Burnable
Function name: increaseAllowance(address,uint256)
PC address: 3429
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:212

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.992922
Transaction Length: 2
Severity: High
Contract: ERC20Mintable
Function name: increaseAllowance(address,uint256)
PC address: 4214
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:212

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:01.258394
Transaction Length: 1
Severity: Low
Contract: PoolToken
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:995

Distribution[] public distributions

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:45.781979
Transaction Length: 1
Severity: Low
Contract: PoolToken_CurveFi_SBTC
Function name: distributions(uint256)
PC address: 6392
Estimated Gas Usage: 768 - 863
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:995

Distribution[] public distributions

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.682728
Transaction Length: 2
Severity: High
Contract: DistributionToken
Function name: increaseAllowance(address,uint256)
PC address: 6759
Estimated Gas Usage: 1104 - 1579
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xe6d3c33178bddab782f68ccdfe0ea5f0c26dea01.sol:212

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x382f28ea85232d6d6b22c51580e7669601949ec4.sol
Total states:1759
5.979589
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xacfb5a0cc16e1cc0e0d4f42d8bc42996f491b901.sol
Total states:426
0.814459
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x3896b3e2dfbed991d0c030440f589f4003ec0327.sol
Total states:149
2.696029
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x7a5918670b0c390ad25f7bee908c1acc2d314a3c.sol
Total states:4596
21.902628
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.848060
Transaction Length: 1
Severity: High
Contract: OSM
Function name: kiss(address[])
PC address: 498
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7a5918670b0c390ad25f7bee908c1acc2d314a3c.sol:5

sol - Medianizer v2



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.061579
Transaction Length: 1
Severity: High
Contract: OSM
Function name: kiss(address[])
PC address: 500
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7a5918670b0c390ad25f7bee908c1acc2d314a3c.sol:3

*/

// median.sol - Medianizer v2

/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.762348
Transaction Length: 1
Severity: High
Contract: OSM
Function name: diss(address[])
PC address: 761
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7a5918670b0c390ad25f7bee908c1acc2d314a3c.sol:5

sol - Medianizer v2



--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.976340
Transaction Length: 1
Severity: High
Contract: OSM
Function name: diss(address[])
PC address: 763
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x7a5918670b0c390ad25f7bee908c1acc2d314a3c.sol:3

*/

// median.sol - Medianizer v2

/

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol
Total states:12855
250.046268
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.951618
Transaction Length: 1
Severity: High
Contract: Module
Function name: getModuleAddress(string)
PC address: 416
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:3

*/

// File: @openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.560504
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 511
Estimated Gas Usage: 364 - 459
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.187541
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 513
Estimated Gas Usage: 364 - 459
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.665012
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 596
Estimated Gas Usage: 540 - 635
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.631936
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 598
Estimated Gas Usage: 540 - 635
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.603953
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 681
Estimated Gas Usage: 716 - 811
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:43.681887
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 683
Estimated Gas Usage: 716 - 811
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:06.035785
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 766
Estimated Gas Usage: 892 - 987
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:5

openzeppelin\contract

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:30.267009
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: addRewards(address[],address[],uint256[],uint256[])
PC address: 768
Estimated Gas Usage: 892 - 987
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:3

*/

// File: @openzeppelin\contracts

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:58.728118
Transaction Length: 1
Severity: High
Contract: RewardVestingModule
Function name: getModuleAddress(string)
PC address: 1453
Estimated Gas Usage: 451 - 546
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x5ff99a7127fb6948c3fb9fddb2d18163f8b0629d.sol:3

*/

// File: @openzeppelin\contract

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xCCa15caA715e918df70A62E5A600c0f53c1B9053.sol
Total states:779
54.483111
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.320123
Transaction Length: 1
Severity: High
Contract: ExchangeProxy
Function name: multihopBatchSwapExactOut((address,address,address,uint256,uint256,uint256)[][],address,address,uint256)
PC address: 6267
Estimated Gas Usage: 617 - 995
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xCCa15caA715e918df70A62E5A600c0f53c1B9053.sol:19


pragma experimental ABIEncode

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:12.499076
Transaction Length: 1
Severity: High
Contract: ExchangeProxy
Function name: multihopBatchSwapExactOut((address,address,address,uint256,uint256,uint256)[][],address,address,uint256)
PC address: 6320
Estimated Gas Usage: 617 - 995
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xCCa15caA715e918df70A62E5A600c0f53c1B9053.sol:26

;
    function ge

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:28.296189
Transaction Length: 1
Severity: High
Contract: ExchangeProxy
Function name: multihopBatchSwapExactIn((address,address,address,uint256,uint256,uint256)[][],address,address,uint256,uint256)
PC address: 8075
Estimated Gas Usage: 460 - 648
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xCCa15caA715e918df70A62E5A600c0f53c1B9053.sol:238

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol
Total states:2922
338.833682
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.690097
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: feedMultiple(uint256[],uint256[])
PC address: 719
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:5

cense-Identifier: MIT

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.393564
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: feedMultiple(uint256[],uint256[])
PC address: 721
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:3

*/

// SPDX-License-Identifier: MIT


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.995178
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: feedMultiple(uint256[],uint256[])
PC address: 804
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:5

cense-Identifier: MIT

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:25.324291
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: feedMultiple(uint256[],uint256[])
PC address: 806
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:3

*/

// SPDX-License-Identifier: MIT


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:06.144263
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: claimMultiple(uint256[])
PC address: 999
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:5

cense-Identifier: MIT

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:10.435807
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: claimMultiple(uint256[])
PC address: 1001
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:3

*/

// SPDX-License-Identifier: MIT


--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:39.045478
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: _checkAmount(uint256[])
PC address: 1198
Estimated Gas Usage: 340 - 435
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:5

cense-Identifier: MIT

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:42.717013
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: _checkAmount(uint256[])
PC address: 1200
Estimated Gas Usage: 340 - 435
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:3

*/

// SPDX-License-Identifier: MIT


--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:03:21.093184
Transaction Length: 1
Severity: Low
Contract: NiftyTools
Function name: claimMultiple(uint256[])
PC address: 5114
Estimated Gas Usage: 4802 - 40639
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:430

vnft.claimMiningRewards(ids[i])

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:27.261105
Transaction Length: 1
Severity: High
Contract: NiftyTools
Function name: claimMultiple(uint256[])
PC address: 7707
Estimated Gas Usage: 3963 - 39280
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xa2cd4f0ca0ab2504c5ee4f3c8e2d7e486b24d8fe.sol:196

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xdc2327e2000053e4e908f2cc360e3d2242fc719e.sol
Total states:654
0.608436
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0xac72ba2c6bbe28928b0ebf22d25e689e033aee5a.sol
Total states:16824
38.582469
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.324147
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3044
Estimated Gas Usage: 989 - 1464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xac72ba2c6bbe28928b0ebf22d25e689e033aee5a.sol:38

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.508118
Transaction Length: 1
Severity: Low
Contract: AiToken
Function name: lockState(address,uint256)
PC address: 4015
Estimated Gas Usage: 830 - 1115
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0xac72ba2c6bbe28928b0ebf22d25e689e033aee5a.sol:319

lockInfo[_holder][_idx]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.605240
Transaction Length: 2
Severity: High
Contract: AiToken
Function name: increaseAllowance(address,uint256)
PC address: 11746
Estimated Gas Usage: 968 - 1443
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0xac72ba2c6bbe28928b0ebf22d25e689e033aee5a.sol:38

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x9eb2980d08189720999871279b0272bc17c725f4.sol
Total states:2324
1.781116
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x74730672e1333dcd8799576bc7246e51835cb337.sol
Total states:149
2.953334
The analysis was completed successfully. No issues were detected.
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol
Total states:377586
11377.735359
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.014973
Transaction Length: 1
Severity: High
Contract: usingOraclize
Function name: __callback(bytes32,string)
PC address: 181
Estimated Gas Usage: 323 - 418
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.634716
Transaction Length: 1
Severity: Medium
Contract: Pool2
Function name: changeDependentContractAddress()
PC address: 230
Estimated Gas Usage: 24904 - 225557
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1400
Offset: 1644
Offset: 1941
Offset: 2238
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7548

function changeDependentContractAddress() public onlyInternal {
        m1 = MCR(ms.getLatestAddress("MC"));
        pd = PoolData(ms.getLatestAddress("PD"));
        p1 = Pool1(ms.getLatestAddress("P1"));
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:00.975918
Transaction Length: 2
Severity: Medium
Contract: Pool2
Function name: changeDependentContractAddress()
PC address: 230
Estimated Gas Usage: 24904 - 225557
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1400
Offset: 1644
Offset: 1941
Offset: 2238
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7548

function changeDependentContractAddress() public onlyInternal {
        m1 = MCR(ms.getLatestAddress("MC"));
        pd = PoolData(ms.getLatestAddress("PD"));
        p1 = Pool1(ms.getLatestAddress("P1"));
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:05.973899
Transaction Length: 1
Severity: Medium
Contract: ClaimsReward
Function name: upgrade(address)
PC address: 359
Estimated Gas Usage: 6620 - 111486
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4109
Offset: 4368
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9402

function upgrade(address _newAdd) public onlyInternal {
        uint amount = tk.balanceOf(address(this));
        if (amount > 0) {
            require(tk.transfer(_newAdd, amount));
        }

    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:14.366644
Transaction Length: 2
Severity: Medium
Contract: ClaimsReward
Function name: upgrade(address)
PC address: 359
Estimated Gas Usage: 6620 - 111486
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4109
Offset: 4368
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9402

function upgrade(address _newAdd) public onlyInternal {
        uint amount = tk.balanceOf(address(this));
        if (amount > 0) {
            require(tk.transfer(_newAdd, amount));
        }

    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.989457
Transaction Length: 1
Severity: High
Contract: usingOraclize
Function name: __callback(bytes32,string,bytes)
PC address: 378
Estimated Gas Usage: 345 - 440
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:01.580976
Transaction Length: 1
Severity: Medium
Contract: Claims
Function name: getClaimbyIndex(uint256)
PC address: 464
Estimated Gas Usage: 4859 - 75864
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 6227
Offset: 6500
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:8924

function getClaimbyIndex(uint _claimId) external view returns (
        uint claimId,
        uint status,
        int8 finalVerdict,
        address claimOwner,
        uint coverId
    )
    {
        uint stat;
        claimId = _claimId;
        (, coverId, finalVerdict, stat, , ) = cd.getClaim(_claimId);
        claimOwner = qd.getCoverMemberAddress(coverId);
        status = stat;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.569090
Transaction Length: 1
Severity: High
Contract: Pool2
Function name: saveIADetails(bytes4[],uint64[],uint64,bool)
PC address: 502
Estimated Gas Usage: 407 - 502
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.403175
Transaction Length: 1
Severity: High
Contract: Pool2
Function name: saveIADetails(bytes4[],uint64[],uint64,bool)
PC address: 504
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.221114
Transaction Length: 1
Severity: High
Contract: Quotation
Function name: verifyCoverDetails(address,address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 521
Estimated Gas Usage: 488 - 583
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.170259
Transaction Length: 1
Severity: High
Contract: Quotation
Function name: verifyCoverDetails(address,address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 523
Estimated Gas Usage: 488 - 583
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:37.904249
Transaction Length: 1
Severity: High
Contract: usingOraclize
Function name: __callback(bytes32,string,bytes)
PC address: 529
Estimated Gas Usage: 687 - 3464
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:01.581800
Transaction Length: 1
Severity: Medium
Contract: TokenFunctions
Function name: getLockedCNAgainstCover(uint256)
PC address: 534
Estimated Gas Usage: 4829 - 75933
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 21827
Offset: 22241
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:870

function getLockedCNAgainstCover(uint _coverId) external view returns(uint) {
        return _getLockedCNAgainstCover(_coverId);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.868352
Transaction Length: 1
Severity: High
Contract: Pool2
Function name: saveIADetails(bytes4[],uint64[],uint64,bool)
PC address: 587
Estimated Gas Usage: 583 - 678
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.598755
Transaction Length: 1
Severity: High
Contract: Pool2
Function name: saveIADetails(bytes4[],uint64[],uint64,bool)
PC address: 589
Estimated Gas Usage: 583 - 678
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.423695
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: __callback(bytes32,string)
PC address: 738
Estimated Gas Usage: 457 - 552
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:33.033774
Transaction Length: 1
Severity: High
Contract: Quotation
Function name: initiateMembershipAndCover(address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 825
Estimated Gas Usage: 453 - 548
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:39.663499
Transaction Length: 1
Severity: High
Contract: Quotation
Function name: initiateMembershipAndCover(address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 827
Estimated Gas Usage: 453 - 548
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:29.167504
Transaction Length: 1
Severity: Medium
Contract: Pool2
Function name: _getCurrencyAssetsBalance(bytes4)
PC address: 849
Estimated Gas Usage: 4531 - 74691
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 6846
Offset: 7094
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7561

function _getCurrencyAssetsBalance(bytes4 _curr) public view returns(uint caBalance) {
        if (_curr == "ETH") {
            caBalance = address(p1).balance;
        } else {
            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(_curr));
            caBalance = erc20.balanceOf(address(p1));
        }
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:23.241443
Transaction Length: 2
Severity: Medium
Contract: Pool2
Function name: _getCurrencyAssetsBalance(bytes4)
PC address: 849
Estimated Gas Usage: 4531 - 74691
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 6846
Offset: 7094
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7561

function _getCurrencyAssetsBalance(bytes4 _curr) public view returns(uint caBalance) {
        if (_curr == "ETH") {
            caBalance = address(p1).balance;
        } else {
            IERC20 erc20 = IERC20(pd.getCurrencyAssetAddress(_curr));
            caBalance = erc20.balanceOf(address(p1));
        }
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:02.804765
Transaction Length: 1
Severity: Medium
Contract: TokenController
Function name: changeDependentContractAddress()
PC address: 861
Estimated Gas Usage: 15312 - 125756
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5311
Offset: 5609
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1489

function changeDependentContractAddress() public {
        token = NXMToken(ms.tokenAddress());
        pooledStaking = IPooledStaking(ms.getLatestAddress('PS'));
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:05.649088
Transaction Length: 2
Severity: Medium
Contract: TokenController
Function name: changeDependentContractAddress()
PC address: 861
Estimated Gas Usage: 15312 - 125756
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5311
Offset: 5609
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1489

function changeDependentContractAddress() public {
        token = NXMToken(ms.tokenAddress());
        pooledStaking = IPooledStaking(ms.getLatestAddress('PS'));
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:02.016045
Transaction Length: 1
Severity: Medium
Contract: Governance
Function name: changeDependentContractAddress()
PC address: 939
Estimated Gas Usage: 22854 - 188520
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 6072
Offset: 6369
Offset: 6666
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11509

function changeDependentContractAddress() public {
        tokenInstance = TokenController(ms.dAppLocker());
        memberRole = MemberRoles(ms.getLatestAddress("MR"));
        proposalCategory = ProposalCategory(ms.getLatestAddress("PC"));
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:26.536363
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: __callback(bytes32,string,bytes)
PC address: 948
Estimated Gas Usage: 479 - 574
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:09.532218
Transaction Length: 1
Severity: Medium
Contract: Claims
Function name: checkVoteClosing(uint256)
PC address: 1028
Estimated Gas Usage: 4691 - 74944
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 22966
Offset: 23186
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9137

function checkVoteClosing(uint claimId) public view returns(int8 close) {
        close = 0;
        uint status;
        (, status) = cd.getClaimStatusNumber(claimId);
        uint dateUpd = cd.getClaimDateUpd(claimId);
        if (status == 12 && dateUpd.add(cd.payoutRetryTime()) < now) {
            if (cd.getClaimState12Count(claimId) < 60)
                close = 1;
        } 
        
        if (status > 5 && status != 12) {
            close = -1;
        }  else if (status != 12 && dateUpd.add(cd.maxVotingTime()) <= now) {
            close = 1;
        } else if (status != 12 && dateUpd.add(cd.minVotingTime()) >= now) {
            close = 0;
        } else if (status == 0 || (status >= 1 && status <= 5)) {
            close = _checkVoteClosingFinal(claimId, status);
        }
        
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:47.228960
Transaction Length: 1
Severity: High
Contract: Quotation
Function name: verifySign(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 1069
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:50.768948
Transaction Length: 1
Severity: High
Contract: Quotation
Function name: verifySign(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 1071
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.862841
Transaction Length: 1
Severity: High
Contract: MCR
Function name: addMCRData(uint256,uint256,uint256,bytes4[],uint256[],uint64)
PC address: 1094
Estimated Gas Usage: 422 - 517
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.627190
Transaction Length: 1
Severity: High
Contract: MCR
Function name: addMCRData(uint256,uint256,uint256,bytes4[],uint256[],uint64)
PC address: 1096
Estimated Gas Usage: 422 - 517
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.403088
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: __callback(bytes32,string,bytes)
PC address: 1099
Estimated Gas Usage: 821 - 3598
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:27.118835
Transaction Length: 1
Severity: High
Contract: MCR
Function name: addMCRData(uint256,uint256,uint256,bytes4[],uint256[],uint64)
PC address: 1179
Estimated Gas Usage: 598 - 693
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.116487
Transaction Length: 1
Severity: High
Contract: MCR
Function name: addMCRData(uint256,uint256,uint256,bytes4[],uint256[],uint64)
PC address: 1181
Estimated Gas Usage: 598 - 693
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.963430
Transaction Length: 1
Severity: High
Contract: QuotationData
Function name: addHoldCover(address,address,bytes4,uint256[],uint16)
PC address: 1198
Estimated Gas Usage: 577 - 672
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:08.083417
Transaction Length: 1
Severity: High
Contract: QuotationData
Function name: addHoldCover(address,address,bytes4,uint256[],uint16)
PC address: 1200
Estimated Gas Usage: 577 - 672
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:04.643278
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: addRole(bytes32,string,address)
PC address: 1232
Estimated Gas Usage: 457 - 552
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.357417
Transaction Length: 1
Severity: High
Contract: Governance
Function name: createProposalwithSolution(string,string,string,uint256,string,bytes)
PC address: 1239
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:07.860116
Transaction Length: 1
Severity: High
Contract: Governance
Function name: createProposalwithSolution(string,string,string,uint256,string,bytes)
PC address: 1324
Estimated Gas Usage: 584 - 679
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.905723
Transaction Length: 1
Severity: High
Contract: Governance
Function name: createProposalwithSolution(string,string,string,uint256,string,bytes)
PC address: 1409
Estimated Gas Usage: 760 - 855
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.210743
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: updateCategory(uint256,string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[])
PC address: 1409
Estimated Gas Usage: 390 - 485
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:59.997959
Transaction Length: 1
Severity: High
Contract: Quotation
Function name: makeCoverUsingNXMTokens(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 1410
Estimated Gas Usage: 363 - 458
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:03.326113
Transaction Length: 1
Severity: High
Contract: Quotation
Function name: makeCoverUsingNXMTokens(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 1412
Estimated Gas Usage: 363 - 458
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:02:48.442603
Transaction Length: 1
Severity: Medium
Contract: Pool1
Function name: upgradeCapitalPool(address)
PC address: 1439
Estimated Gas Usage: 16352 - 127126
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 7684
Offset: 7893
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:8128

function upgradeCapitalPool(address payable newPoolAddress) external noReentrancy onlyInternal {
        for (uint64 i = 1; i < pd.getAllCurrenciesLen(); i++) {
            bytes4 caName = pd.getCurrenciesByIndex(i);
            _upgradeCapitalPool(caName, newPoolAddress);
        }
        if (address(this).balance > 0) {
            Pool1 newP1 = Pool1(newPoolAddress);
            newP1.sendEther.value(address(this).balance)();
        }
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:35.538139
Transaction Length: 1
Severity: High
Contract: Governance
Function name: createProposalwithSolution(string,string,string,uint256,string,bytes)
PC address: 1504
Estimated Gas Usage: 963 - 1058
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.532500
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: updateCategory(uint256,string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[])
PC address: 1588
Estimated Gas Usage: 813 - 3590
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:24.687058
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: updateCategory(uint256,string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[])
PC address: 1590
Estimated Gas Usage: 813 - 3590
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:18.287630
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: makeCoverBegin(address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 1594
Estimated Gas Usage: 408 - 503
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:25.740433
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: makeCoverBegin(address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 1596
Estimated Gas Usage: 408 - 503
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:51.533428
Transaction Length: 1
Severity: Medium
Contract: TokenFunctions
Function name: deprecated_unlockStakerUnlockableTokens(address)
PC address: 1649
Estimated Gas Usage: 4536 - 74320
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 13945
Offset: 14217
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1083

function deprecated_unlockStakerUnlockableTokens(address _stakerAddress) public checkPause {
        uint unlockableAmount;
        address scAddress;
        bytes32 reason;
        uint scIndex;
        for (uint i = 0; i < td.getStakerStakedContractLength(_stakerAddress); i++) {
            scAddress = td.getStakerStakedContractByIndex(_stakerAddress, i);
            scIndex = td.getStakerStakedContractIndex(_stakerAddress, i);
            unlockableAmount = _deprecated_getStakerUnlockableTokensOnSmartContract(
            _stakerAddress, scAddress,
            scIndex);
            td.setUnlockableBeforeLastBurnTokens(_stakerAddress, i, 0);
            td.pushUnlockedStakedTokens(_stakerAddress, i, unlockableAmount);
            reason = keccak256(abi.encodePacked("UW", _stakerAddress, scAddress, scIndex));
            tc.releaseLockedTokens(_stakerAddress, reason, unlockableAmount);
        }
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:47.028865
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: updateCategory(uint256,string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[])
PC address: 1748
Estimated Gas Usage: 1173 - 6632
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:01.685589
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: addInitialABMembers(address[])
PC address: 1955
Estimated Gas Usage: 385 - 480
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:06.160010
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: addInitialABMembers(address[])
PC address: 1957
Estimated Gas Usage: 385 - 480
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:20.857698
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: updateCategory(uint256,string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[])
PC address: 1972
Estimated Gas Usage: 1584 - 9725
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:47.922513
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: updateCategory(uint256,string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[])
PC address: 1974
Estimated Gas Usage: 1584 - 9725
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:39.679748
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: makeCoverUsingCA(address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 2037
Estimated Gas Usage: 498 - 593
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:45.593448
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: makeCoverUsingCA(address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 2039
Estimated Gas Usage: 498 - 593
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:51.589694
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: getMemberLengthForAllRoles()
PC address: 2050
Estimated Gas Usage: 1293 - 2140
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10099

function getMemberLengthForAllRoles() public view returns(uint[] memory totalMembers) { //solhint-disable-line
        totalMembers = new uint[](memberRoleData.length);
        for (uint i = 0; i < memberRoleData.length; i++) {
            totalMembers[i] = numberOfMembers(i);
        }
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:05.617136
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: getMemberLengthForAllRoles()
PC address: 2090
Estimated Gas Usage: 1443 - 2666
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10099

function getMemberLengthForAllRoles() public view returns(uint[] memory totalMembers) { //solhint-disable-line
        totalMembers = new uint[](memberRoleData.length);
        for (uint i = 0; i < memberRoleData.length; i++) {
            totalMembers[i] = numberOfMembers(i);
        }
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:30.739695
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: addMembersBeforeLaunch(address[],uint256[])
PC address: 2197
Estimated Gas Usage: 429 - 524
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:33.506270
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: addMembersBeforeLaunch(address[],uint256[])
PC address: 2199
Estimated Gas Usage: 429 - 524
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:23.712588
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: newCategory(string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[],string)
PC address: 2233
Estimated Gas Usage: 407 - 502
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:07.652807
Transaction Length: 1
Severity: High
Contract: Governance
Function name: createProposal(string,string,string,uint256)
PC address: 2286
Estimated Gas Usage: 474 - 569
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:49.102506
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: addMembersBeforeLaunch(address[],uint256[])
PC address: 2345
Estimated Gas Usage: 762 - 3539
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:05.729662
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: addMembersBeforeLaunch(address[],uint256[])
PC address: 2347
Estimated Gas Usage: 762 - 3539
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:12.482622
Transaction Length: 1
Severity: High
Contract: Governance
Function name: createProposal(string,string,string,uint256)
PC address: 2371
Estimated Gas Usage: 650 - 745
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:02.273584
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: newCategory(string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[],string)
PC address: 2412
Estimated Gas Usage: 830 - 3607
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:15.563544
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: newCategory(string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[],string)
PC address: 2414
Estimated Gas Usage: 830 - 3607
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:25.188702
Transaction Length: 1
Severity: High
Contract: Governance
Function name: createProposal(string,string,string,uint256)
PC address: 2456
Estimated Gas Usage: 826 - 921
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:47.863708
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: newCategory(string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[],string)
PC address: 2572
Estimated Gas Usage: 1190 - 6649
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:40.536726
Transaction Length: 1
Severity: High
Contract: Governance
Function name: addSolution(uint256,string,bytes)
PC address: 2787
Estimated Gas Usage: 434 - 529
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:35.875272
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: newCategory(string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[],string)
PC address: 2796
Estimated Gas Usage: 1601 - 9742
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

itted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:06.485056
Transaction Length: 1
Severity: High
Contract: ProposalCategory
Function name: newCategory(string,uint256,uint256,uint256,uint256[],uint256,string,address,bytes2,uint256[],string)
PC address: 2798
Estimated Gas Usage: 1601 - 9742
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verification

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:47.348778
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: roles(address)
PC address: 2870
Estimated Gas Usage: 995 - 1842
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10070

function roles(address _memberAddress) public view returns(uint[] memory) { //solhint-disable-line
        uint length = memberRoleData.length;
        uint[] memory assignedRoles = new uint[](length);
        uint counter = 0; 
        for (uint i = 1; i < length; i++) {
            if (memberRoleData[i].memberActive[_memberAddress]) {
                assignedRoles[counter] = i;
                counter++;
            }
        }
        return assignedRoles;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:47.681506
Transaction Length: 1
Severity: High
Contract: Governance
Function name: addSolution(uint256,string,bytes)
PC address: 2872
Estimated Gas Usage: 610 - 705
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:06:23.470326
Transaction Length: 1
Severity: High
Contract: MemberRoles
Function name: roles(address)
PC address: 2910
Estimated Gas Usage: 1145 - 2368
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10070

function roles(address _memberAddress) public view returns(uint[] memory) { //solhint-disable-line
        uint length = memberRoleData.length;
        uint[] memory assignedRoles = new uint[](length);
        uint counter = 0; 
        for (uint i = 1; i < length; i++) {
            if (memberRoleData[i].memberActive[_memberAddress]) {
                assignedRoles[counter] = i;
                counter++;
            }
        }
        return assignedRoles;
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:03.048942
Transaction Length: 1
Severity: High
Contract: Governance
Function name: submitProposalWithSolution(uint256,string,bytes)
PC address: 3279
Estimated Gas Usage: 391 - 486
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:12.542777
Transaction Length: 1
Severity: High
Contract: Governance
Function name: submitProposalWithSolution(uint256,string,bytes)
PC address: 3364
Estimated Gas Usage: 567 - 662
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3

*/

/**
 *Submitted for verificatio

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:03.660282
Transaction Length: 1
Severity: Low
Contract: ClaimsReward
Function name: _claimStakeCommission(uint256,address)
PC address: 3382
Estimated Gas Usage: 7989 - 113561
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9735

td.setLastCompletedStakeCommissionIndex(_user, i)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:08.201953
Transaction Length: 2
Severity: Low
Contract: ClaimsReward
Function name: _claimStakeCommission(uint256,address)
PC address: 3382
Estimated Gas Usage: 7989 - 113561
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9735

td.setLastCompletedStakeCommissionIndex(_user, i)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:01.879473
Transaction Length: 1
Severity: Low
Contract: TokenController
Function name: changeOperator(address)
PC address: 3840
Estimated Gas Usage: 3670 - 39363
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1499

token.changeOperator(_newOperator)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:44.177825
Transaction Length: 2
Severity: Low
Contract: TokenController
Function name: changeOperator(address)
PC address: 3840
Estimated Gas Usage: 3670 - 39363
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1499

token.changeOperator(_newOperator)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.554418
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: authorized(uint256)
PC address: 3875
Estimated Gas Usage: 706 - 801
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10066

memberRoleData[_memberRoleId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.004875
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: numberOfMembers(uint256)
PC address: 3949
Estimated Gas Usage: 728 - 823
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10061

memberRoleData[_memberRoleId]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:04:18.957728
Transaction Length: 1
Severity: High
Contract: Governance
Function name: getFollowers(address)
PC address: 4225
Estimated Gas Usage: 1411 - 2448
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11429

function getFollowers(address _add) external view returns(uint[] memory) {
        return leaderDelegation[_add];
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:26.858623
Transaction Length: 1
Severity: High
Contract: QuotationData
Function name: getHoldedCoverDetailsByID2(uint256)
PC address: 4341
Estimated Gas Usage: 2857 - 4414
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4574

function getHoldedCoverDetailsByID2(
        uint _hcid
    ) 
        external
        view
        returns (
            uint hcid,
            address payable memberAddress, 
            uint[] memory coverDetails
        )
    {
        return (
            _hcid,
            allCoverHolded[_hcid].userAddress,
            allCoverHolded[_hcid].coverDetails
        );
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:05:40.616313
Transaction Length: 1
Severity: High
Contract: QuotationData
Function name: getHoldedCoverDetailsByID2(uint256)
PC address: 4381
Estimated Gas Usage: 3007 - 4940
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4574

function getHoldedCoverDetailsByID2(
        uint _hcid
    ) 
        external
        view
        returns (
            uint hcid,
            address payable memberAddress, 
            uint[] memory coverDetails
        )
    {
        return (
            _hcid,
            allCoverHolded[_hcid].userAddress,
            allCoverHolded[_hcid].coverDetails
        );
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.791859
Transaction Length: 1
Severity: Low
Contract: ClaimsReward
Function name: upgrade(address)
PC address: 4635
Estimated Gas Usage: 5776 - 76456
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9405

tk.transfer(_newAdd, amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:14.222483
Transaction Length: 2
Severity: Low
Contract: ClaimsReward
Function name: upgrade(address)
PC address: 4635
Estimated Gas Usage: 5776 - 76456
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9405

tk.transfer(_newAdd, amount)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:01.893197
Transaction Length: 1
Severity: High
Contract: QuotationData
Function name: getAllCoversOfUser(address)
PC address: 5367
Estimated Gas Usage: 1498 - 2535
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4426

function getAllCoversOfUser(address _add) external view returns(uint[] memory allCover) {
        return (userCover[_add]);
    }

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:07:16.634954
Transaction Length: 1
Severity: High
Contract: QuotationData
Function name: getAllCoversOfUser(address)
PC address: 5407
Estimated Gas Usage: 1648 - 3061
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4426

function getAllCoversOfUser(address _add) external view returns(uint[] memory allCover) {
        return (userCover[_add]);
    }

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.746081
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: pushBurnedTokens(address,uint256,uint256)
PC address: 5478
Estimated Gas Usage: 2974 - 38151
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5036

stakerStakedContracts[_stakerAddress][
                _stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:29.937933
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: pushBurnedTokens(address,uint256,uint256)
PC address: 5478
Estimated Gas Usage: 2974 - 38151
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5036

stakerStakedContracts[_stakerAddress][
                _stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.237710
Transaction Length: 1
Severity: Low
Contract: ProposalCategory
Function name: category(uint256)
PC address: 5662
Estimated Gas Usage: 770 - 865
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10348

allCategory[_categoryId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:01.501555
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getCoverSumAssured(uint256)
PC address: 5762
Estimated Gas Usage: 750 - 845
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4447

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:21:51.240891
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getCoverSumAssured(uint256)
PC address: 5762
Estimated Gas Usage: 750 - 845
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4447

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:45.923307
Transaction Length: 1
Severity: Low
Contract: Quotation
Function name: initiateMembershipAndCover(address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 5935
Estimated Gas Usage: 2907 - 40574
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7144

coverDetails[3]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:03.424397
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: pushUnlockableBeforeLastBurnTokens(address,uint256,uint256)
PC address: 5956
Estimated Gas Usage: 3031 - 38208
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5055

stakerStakedContracts[_stakerAddress][
                _stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:34.076765
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: pushUnlockableBeforeLastBurnTokens(address,uint256,uint256)
PC address: 5956
Estimated Gas Usage: 3031 - 38208
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5055

stakerStakedContracts[_stakerAddress][
                _stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:37.455863
Transaction Length: 1
Severity: Low
Contract: Quotation
Function name: initiateMembershipAndCover(address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 6034
Estimated Gas Usage: 3442 - 41625
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7145

coverDetails[4]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:04.494611
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakedContractStakerIndex(address,uint256)
PC address: 6551
Estimated Gas Usage: 873 - 1158
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4947

stakedContractStakers[
            _stakedContractAddress][_stakedContractIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:32.509517
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakedContractStakerIndex(address,uint256)
PC address: 6551
Estimated Gas Usage: 873 - 1158
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4947

stakedContractStakers[
            _stakedContractAddress][_stakedContractIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:39.645235
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getCoverDetailsByCoverID2(uint256)
PC address: 6847
Estimated Gas Usage: 1259 - 1874
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4529

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:22:29.048760
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getCoverDetailsByCoverID2(uint256)
PC address: 6847
Estimated Gas Usage: 1259 - 1874
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4529

allCovers[_cid]

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:25.410546
Transaction Length: 1
Severity: Low
Contract: Pool1
Function name: __callback(bytes32,string)
PC address: 6871
Estimated Gas Usage: 1944 - 5427
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:8181

ms.delegateCallBack(myid)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:06.123594
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakerStakedBurnedByIndex(address,uint256)
PC address: 7228
Estimated Gas Usage: 872 - 1157
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4893

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:48.234706
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakerStakedBurnedByIndex(address,uint256)
PC address: 7228
Estimated Gas Usage: 872 - 1157
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4893

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:53.666721
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getCoverMemberAddress(uint256)
PC address: 7549
Estimated Gas Usage: 771 - 866
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4467

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:22:50.347990
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getCoverMemberAddress(uint256)
PC address: 7549
Estimated Gas Usage: 771 - 866
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4467

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:05.140368
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getHoldedCoverDetailsByID1(uint256)
PC address: 7719
Estimated Gas Usage: 827 - 922
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4554

allCoverHolded[_hcid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:23:10.761721
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getHoldedCoverDetailsByID1(uint256)
PC address: 7719
Estimated Gas Usage: 827 - 922
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4554

allCoverHolded[_hcid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:08.478902
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakerInitialStakedAmountOnContract(address,uint256)
PC address: 7939
Estimated Gas Usage: 828 - 1113
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4965

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:56.252669
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakerInitialStakedAmountOnContract(address,uint256)
PC address: 7939
Estimated Gas Usage: 828 - 1113
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4965

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:03.666555
Transaction Length: 1
Severity: High
Contract: TokenFunctions
Function name: getUserAllLockedCNTokens(address)
PC address: 8074
Estimated Gas Usage: 4484 - 74365
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

ed for verifica

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.760304
Transaction Length: 1
Severity: Low
Contract: PoolData
Function name: getIARankDetailsByDate(uint64)
PC address: 8341
Estimated Gas Usage: 1267 - 1552
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3725

allIARankDetails[index]

--------------------

==== External Call To User-Supplied Address ====
SWC ID: 107
FOUND TIME: 0:03:05.472565
Transaction Length: 1
Severity: Medium
Contract: Pool1
Function name: upgradeCapitalPool(address)
PC address: 8370
Estimated Gas Usage: 12096 - 102821
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on thecontract state.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:8135

newP1.sendEther.value(address(this).balance)()

--------------------

==== Unprotected Ether Withdrawal ====
SWC ID: 105
FOUND TIME: 0:03:01.234658
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: upgradeCapitalPool(address)
PC address: 8370
Estimated Gas Usage: 12096 - 102821
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:8135

newP1.sendEther.value(address(this).balance)()

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:07.277947
Transaction Length: 1
Severity: Low
Contract: TokenController
Function name: mint(address,uint256)
PC address: 8775
Estimated Gas Usage: 3706 - 39494
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1664

token.mint(_member, _amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:51.642224
Transaction Length: 2
Severity: Low
Contract: TokenController
Function name: mint(address,uint256)
PC address: 8775
Estimated Gas Usage: 3706 - 39494
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1664

token.mint(_member, _amount)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:57.615672
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: updateRole(address,uint256,bool)
PC address: 9337
Estimated Gas Usage: 780 - 875
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9798

memberRoleData[_memberRoleId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:24.847243
Transaction Length: 2
Severity: Low
Contract: MemberRoles
Function name: updateRole(address,uint256,bool)
PC address: 9337
Estimated Gas Usage: 780 - 875
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9798

memberRoleData[_memberRoleId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:10.790167
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakerStakedContractIndex(address,uint256)
PC address: 9355
Estimated Gas Usage: 872 - 1157
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4929

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:04.451229
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakerStakedContractIndex(address,uint256)
PC address: 9355
Estimated Gas Usage: 872 - 1157
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4929

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:29.066866
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getValidityOfCover(uint256)
PC address: 9655
Estimated Gas Usage: 771 - 866
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4457

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:24:42.382544
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getValidityOfCover(uint256)
PC address: 9655
Estimated Gas Usage: 771 - 866
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4457

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:33.956982
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getCoverPeriod(uint256)
PC address: 9697
Estimated Gas Usage: 726 - 821
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4442

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:24:51.448742
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getCoverPeriod(uint256)
PC address: 9697
Estimated Gas Usage: 726 - 821
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4442

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:12.535421
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakerStakedContractByIndex(address,uint256)
PC address: 9968
Estimated Gas Usage: 915 - 1200
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4875

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:10.926749
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakerStakedContractByIndex(address,uint256)
PC address: 9968
Estimated Gas Usage: 915 - 1200
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4875

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:44.074482
Transaction Length: 1
Severity: Low
Contract: PoolData
Function name: getCurrenciesByIndex(uint256)
PC address: 10117
Estimated Gas Usage: 816 - 911
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3764

allCurrencies[index]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:45.390626
Transaction Length: 2
Severity: Low
Contract: PoolData
Function name: getCurrenciesByIndex(uint256)
PC address: 10117
Estimated Gas Usage: 816 - 911
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3764

allCurrencies[index]

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:10.245776
Transaction Length: 1
Severity: Low
Contract: TokenController
Function name: lockForMemberVote(address,uint256)
PC address: 10261
Estimated Gas Usage: 3750 - 39538
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1672

token.lockForMemberVote(_of, _days)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:58.561067
Transaction Length: 2
Severity: Low
Contract: TokenController
Function name: lockForMemberVote(address,uint256)
PC address: 10261
Estimated Gas Usage: 3750 - 39538
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1672

token.lockForMemberVote(_of, _days)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:11.627851
Transaction Length: 1
Severity: Low
Contract: TokenController
Function name: lockReason(address,uint256)
PC address: 10352
Estimated Gas Usage: 798 - 1083
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1337

mapping(address => bytes32[]) public lockReason

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:14.250314
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: pushUnlockedStakedTokens(address,uint256,uint256)
PC address: 10362
Estimated Gas Usage: 2964 - 38141
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5017

stakerStakedContracts[_stakerAddress][
                _stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:41.286364
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: pushUnlockedStakedTokens(address,uint256,uint256)
PC address: 10362
Estimated Gas Usage: 2964 - 38141
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5017

stakerStakedContracts[_stakerAddress][
                _stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:18.493709
Transaction Length: 1
Severity: Low
Contract: Quotation
Function name: verifySign(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 10537
Estimated Gas Usage: 2930 - 40597
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7079

coverDetails[0]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:06.168321
Transaction Length: 1
Severity: Low
Contract: Quotation
Function name: verifySign(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 10565
Estimated Gas Usage: 3003 - 40856
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7082

coverDetails[1]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:01.591027
Transaction Length: 1
Severity: Low
Contract: Quotation
Function name: verifySign(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 10590
Estimated Gas Usage: 3067 - 41106
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7083

coverDetails[2]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:55.246220
Transaction Length: 1
Severity: Low
Contract: Quotation
Function name: verifySign(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 10615
Estimated Gas Usage: 3131 - 41356
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7084

coverDetails[3]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:50.969425
Transaction Length: 1
Severity: Low
Contract: Quotation
Function name: verifySign(uint256[],uint16,bytes4,address,uint8,bytes32,bytes32)
PC address: 10640
Estimated Gas Usage: 3195 - 41606
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7085

coverDetails[4]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:01.714209
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getCurrencyOfCover(uint256)
PC address: 10672
Estimated Gas Usage: 727 - 822
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4452

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:25:30.696870
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getCurrencyOfCover(uint256)
PC address: 10672
Estimated Gas Usage: 727 - 822
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4452

allCovers[_cid]

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:13.387048
Transaction Length: 1
Severity: Low
Contract: TokenController
Function name: burnFrom(address,uint256)
PC address: 10833
Estimated Gas Usage: 3732 - 39520
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1606

token.burnFrom(_of, amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:03.916326
Transaction Length: 2
Severity: Low
Contract: TokenController
Function name: burnFrom(address,uint256)
PC address: 10833
Estimated Gas Usage: 3732 - 39520
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1606

token.burnFrom(_of, amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:06.972829
Transaction Length: 1
Severity: Low
Contract: Claims
Function name: submitClaimAfterEPOff()
PC address: 11009
Estimated Gas Usage: 7743 - 113030
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9036

cd.setFirstClaimIndexToSubmitAfterEP(lengthOfClaimSubmittedAtEP)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:06.759267
Transaction Length: 2
Severity: Low
Contract: Claims
Function name: submitClaimAfterEPOff()
PC address: 11009
Estimated Gas Usage: 7743 - 113030
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9036

cd.setFirstClaimIndexToSubmitAfterEP(lengthOfClaimSubmittedAtEP)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:37.075303
Transaction Length: 2
Severity: High
Contract: QuotationData
Function name: addCover(uint16,uint256,address,bytes4,address,uint256,uint256)
PC address: 11053
Estimated Gas Usage: 1860 - 2618
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4301

Cover(_userAddress, _currencyCode,
                _sumAssured, _coverPeriod, expiryDate, _scAddress, premiumNXM)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:19.039815
Transaction Length: 1
Severity: High
Contract: TokenData
Function name: updateUintParameters(bytes8,uint256)
PC address: 11233
Estimated Gas Usage: 2679 - 37666
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5375

val * 1 hours

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:16.907484
Transaction Length: 1
Severity: High
Contract: TokenData
Function name: updateUintParameters(bytes8,uint256)
PC address: 11319
Estimated Gas Usage: 2714 - 37701
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5379

val * 1 days

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:15.031519
Transaction Length: 1
Severity: High
Contract: TokenData
Function name: updateUintParameters(bytes8,uint256)
PC address: 11405
Estimated Gas Usage: 2714 - 37701
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5383

val * 1 days

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:01.566575
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getscAddressOfCover(uint256)
PC address: 11859
Estimated Gas Usage: 777 - 872
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4462

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:26:28.025426
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getscAddressOfCover(uint256)
PC address: 11859
Estimated Gas Usage: 777 - 872
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4462

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:21.812865
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakerStakedUnlockableBeforeLastBurnByIndex(address,uint256)
PC address: 11868
Estimated Gas Usage: 916 - 1201
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4911

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:31.523154
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakerStakedUnlockableBeforeLastBurnByIndex(address,uint256)
PC address: 11868
Estimated Gas Usage: 916 - 1201
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4911

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:06.143515
Transaction Length: 1
Severity: Low
Contract: Governance
Function name: getSolutionAction(uint256,uint256)
PC address: 11934
Estimated Gas Usage: 860 - 1145
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11413

allProposalSolutions[_proposalId][_solution]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:22.523500
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakedContractStakerByIndex(address,uint256)
PC address: 11972
Estimated Gas Usage: 938 - 1223
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5241

stakedContractStakers[
            _stakedContractAddress][_stakedContractIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:38.827569
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakedContractStakerByIndex(address,uint256)
PC address: 11972
Estimated Gas Usage: 938 - 1223
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5241

stakedContractStakers[
            _stakedContractAddress][_stakedContractIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:23.224854
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: stakedContractStakers(address,uint256)
PC address: 12057
Estimated Gas Usage: 820 - 1105
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4746

mapping(address => Staker[]) public stakedContractStakers

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:23.821525
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: stakerStakedContracts(address,uint256)
PC address: 12153
Estimated Gas Usage: 842 - 1127
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4739

mapping(address => Stake[]) public stakerStakedContracts

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:17.467595
Transaction Length: 1
Severity: Low
Contract: TokenController
Function name: removeFromWhitelist(address)
PC address: 12903
Estimated Gas Usage: 3681 - 39374
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1655

token.removeFromWhiteList(_member)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:12.042677
Transaction Length: 2
Severity: Low
Contract: TokenController
Function name: removeFromWhitelist(address)
PC address: 12903
Estimated Gas Usage: 3681 - 39374
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1655

token.removeFromWhiteList(_member)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:55.585031
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: checkRole(address,uint256)
PC address: 12956
Estimated Gas Usage: 856 - 951
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10091

memberRoleData[_roleId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:39.585579
Transaction Length: 1
Severity: Low
Contract: Governance
Function name: getPendingReward(address)
PC address: 13045
Estimated Gas Usage: 1324 - 2082
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11444

allDelegation[delegationId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:00.220947
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: members(uint256)
PC address: 13094
Estimated Gas Usage: 710 - 805
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10042

memberRoleData[_memberRoleId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:34.117733
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: userHoldedCover(address,uint256)
PC address: 13238
Estimated Gas Usage: 864 - 1149
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4210

mapping(address => uint[]) public userHoldedCover

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:27:11.143956
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: userHoldedCover(address,uint256)
PC address: 13238
Estimated Gas Usage: 864 - 1149
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4210

mapping(address => uint[]) public userHoldedCover

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:26.073023
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: pushRedeemedStakeCommissions(address,uint256,uint256)
PC address: 13342
Estimated Gas Usage: 3048 - 38225
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5119

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:35.111635
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: pushRedeemedStakeCommissions(address,uint256,uint256)
PC address: 13342
Estimated Gas Usage: 3048 - 38225
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5119

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:00.499647
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getCoverPremiumNXM(uint256)
PC address: 13674
Estimated Gas Usage: 770 - 865
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4472

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:27:48.979002
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getCoverPremiumNXM(uint256)
PC address: 13674
Estimated Gas Usage: 770 - 865
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4472

allCovers[_cid]

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:08.517643
Transaction Length: 1
Severity: Low
Contract: Claims
Function name: startAllPendingClaimsVoting()
PC address: 13736
Estimated Gas Usage: 7751 - 113038
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9128

cd.setFirstClaimIndexToStartVotingAfterEP(i)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:11.802976
Transaction Length: 2
Severity: Low
Contract: Claims
Function name: startAllPendingClaimsVoting()
PC address: 13736
Estimated Gas Usage: 7751 - 113038
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9128

cd.setFirstClaimIndexToStartVotingAfterEP(i)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:59.152861
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getHoldedCoverDetailsByID2(uint256)
PC address: 13820
Estimated Gas Usage: 735 - 830
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4587

allCoverHolded[_hcid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:28:53.056886
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getHoldedCoverDetailsByID2(uint256)
PC address: 13820
Estimated Gas Usage: 735 - 830
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4587

allCoverHolded[_hcid]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:48.785196
Transaction Length: 2
Severity: High
Contract: QuotationData
Function name: getHoldedCoverDetailsByID2(uint256)
PC address: 13919
Estimated Gas Usage: 1860 - 2618
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4585

return (
            _hcid,
            allCoverHolded[_hcid].userAddress,
            allCoverHolded[_hcid].coverDetails
        )

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:06:15.422437
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getCoverDetailsByCoverID1(uint256)
PC address: 14470
Estimated Gas Usage: 810 - 905
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4498

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:29:17.233334
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getCoverDetailsByCoverID1(uint256)
PC address: 14470
Estimated Gas Usage: 810 - 905
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4498

allCovers[_cid]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:49.378771
Transaction Length: 1
Severity: Low
Contract: PoolData
Function name: allAPIcall(uint256)
PC address: 14565
Estimated Gas Usage: 812 - 907
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3337

bytes32[] public allAPIcall

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:06:29.548125
Transaction Length: 1
Severity: Low
Contract: QuotationData
Function name: getUserHoldedCoverByIndex(address,uint256)
PC address: 14913
Estimated Gas Usage: 893 - 1178
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4567

userHoldedCover[_add][index]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 1:29:43.446304
Transaction Length: 2
Severity: Low
Contract: QuotationData
Function name: getUserHoldedCoverByIndex(address,uint256)
PC address: 14913
Estimated Gas Usage: 893 - 1178
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4567

userHoldedCover[_add][index]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.752007
Transaction Length: 1
Severity: High
Contract: MCR
Function name: getThresholdValues(uint256,uint256,uint256,uint256)
PC address: 14982
Estimated Gas Usage: 879 - 1304
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:71

a * b

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:22.449891
Transaction Length: 1
Severity: Low
Contract: TokenController
Function name: addToWhitelist(address)
PC address: 15011
Estimated Gas Usage: 3680 - 39373
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1647

token.addToWhiteList(_member)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:17.810695
Transaction Length: 2
Severity: Low
Contract: TokenController
Function name: addToWhitelist(address)
PC address: 15011
Estimated Gas Usage: 3680 - 39373
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1647

token.addToWhiteList(_member)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:50.410980
Transaction Length: 1
Severity: Low
Contract: PoolData
Function name: getApiCallIndex(uint256)
PC address: 15039
Estimated Gas Usage: 770 - 865
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3949

allAPIcall[index]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:59.053128
Transaction Length: 2
Severity: Low
Contract: PoolData
Function name: getApiCallIndex(uint256)
PC address: 15039
Estimated Gas Usage: 770 - 865
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3949

allAPIcall[index]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:58.800659
Transaction Length: 2
Severity: High
Contract: QuotationData
Function name: getAllCoversOfUser(address)
PC address: 15404
Estimated Gas Usage: 1860 - 2618
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4427

return (userCover[_add])

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:08:26.449031
Transaction Length: 2
Severity: High
Contract: QuotationData
Function name: getAllCoversOfUser(address)
PC address: 15417
Estimated Gas Usage: 1860 - 2618
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4427

return (userCover[_add])

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:42:17.473160
Transaction Length: 2
Severity: High
Contract: QuotationData
Function name: getAllCoversOfUser(address)
PC address: 15429
Estimated Gas Usage: 1860 - 2618
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4427

return (userCover[_add])

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:09:08.552515
Transaction Length: 2
Severity: High
Contract: QuotationData
Function name: getAllCoversOfUser(address)
PC address: 15431
Estimated Gas Usage: 1860 - 2618
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4427

return (userCover[_add])

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:09:19.397866
Transaction Length: 2
Severity: High
Contract: QuotationData
Function name: getAllCoversOfUser(address)
PC address: 15450
Estimated Gas Usage: 1860 - 2618
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4427

return (userCover[_add])

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:17.885462
Transaction Length: 1
Severity: High
Contract: QuotationData
Function name: addCover(uint16,uint256,address,bytes4,address,uint256,uint256)
PC address: 15515
Estimated Gas Usage: 2863 - 37850
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:102

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:02.103627
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: membersLength(uint256)
PC address: 15600
Estimated Gas Usage: 749 - 844
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10199

memberRoleData[_memberRoleId]

--------------------

==== Unprotected Ether Withdrawal ====
SWC ID: 105
FOUND TIME: 0:11:40.305930
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: sendClaimPayout(uint256,uint256,uint256,address,bytes4)
PC address: 15852
Estimated Gas Usage: 11211 - 102266
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:8052

coverHolder.transfer(sumAssured)

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.714873
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: setUnlockableBeforeLastBurnTokens(address,uint256,uint256)
PC address: 15927
Estimated Gas Usage: 3025 - 38202
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5073

stakerStakedContracts[_stakerAddress][
            _stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:58.596971
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: setUnlockableBeforeLastBurnTokens(address,uint256,uint256)
PC address: 15927
Estimated Gas Usage: 3025 - 38202
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5073

stakerStakedContracts[_stakerAddress][
            _stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:36.275720
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakerUnlockedStakedTokens(address,uint256)
PC address: 16031
Estimated Gas Usage: 914 - 1199
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4998

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:26.064853
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakerUnlockedStakedTokens(address,uint256)
PC address: 16031
Estimated Gas Usage: 914 - 1199
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:4998

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:06.612018
Transaction Length: 1
Severity: High
Contract: TokenData
Function name: bookCATokens(address)
PC address: 16064
Estimated Gas Usage: 3498 - 38675
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:102

a + b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:05.052719
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakerEarnedStakeCommission(address,uint256)
PC address: 16171
Estimated Gas Usage: 925 - 1210
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5414

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:20.674482
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakerEarnedStakeCommission(address,uint256)
PC address: 16171
Estimated Gas Usage: 925 - 1210
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5414

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:31.619755
Transaction Length: 1
Severity: Low
Contract: Quotation
Function name: verifyCoverDetails(address,address,bytes4,uint256[],uint16,uint8,bytes32,bytes32)
PC address: 16258
Estimated Gas Usage: 3002 - 40764
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:7245

coverDetails[3]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:35.358864
Transaction Length: 1
Severity: High
Contract: Governance
Function name: updateUintParameters(bytes8,uint256)
PC address: 16303
Estimated Gas Usage: 2530 - 37517
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11481

val * 1 days

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:33.314510
Transaction Length: 1
Severity: High
Contract: Governance
Function name: updateUintParameters(bytes8,uint256)
PC address: 16466
Estimated Gas Usage: 2600 - 37587
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11489

val * 1 days

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:33.977338
Transaction Length: 1
Severity: Low
Contract: TokenData
Function name: getStakerRedeemedStakeCommission(address,uint256)
PC address: 16494
Estimated Gas Usage: 878 - 1163
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5438

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:03:44.024301
Transaction Length: 2
Severity: Low
Contract: TokenData
Function name: getStakerRedeemedStakeCommission(address,uint256)
PC address: 16494
Estimated Gas Usage: 878 - 1163
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:5438

stakerStakedContracts[
            _stakerAddress][_stakerIndex]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:07:39.531938
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: changeAuthorized(uint256,address)
PC address: 16563
Estimated Gas Usage: 812 - 907
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9798

memberRoleData[_memberRoleId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:42.523192
Transaction Length: 2
Severity: Low
Contract: MemberRoles
Function name: changeAuthorized(uint256,address)
PC address: 16563
Estimated Gas Usage: 812 - 907
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9798

memberRoleData[_memberRoleId]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:31.280240
Transaction Length: 1
Severity: High
Contract: Governance
Function name: updateUintParameters(bytes8,uint256)
PC address: 16611
Estimated Gas Usage: 2600 - 37587
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11493

val * 1 days

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:02:31.001460
Transaction Length: 1
Severity: Low
Contract: Governance
Function name: updateUintParameters(bytes8,uint256)
PC address: 16696
Estimated Gas Usage: 3891 - 39584
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11493

ms.updatePauseTime(val * 1 days)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:27.014598
Transaction Length: 1
Severity: High
Contract: Governance
Function name: updateUintParameters(bytes8,uint256)
PC address: 16794
Estimated Gas Usage: 2670 - 37657
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11497

val * 1 hours

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:54.600978
Transaction Length: 1
Severity: High
Contract: PoolData
Function name: updateUintParameters(bytes8,uint256)
PC address: 16802
Estimated Gas Usage: 2548 - 37535
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3995

val * 1 hours

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:01:13.097527
Transaction Length: 1
Severity: Low
Contract: TokenFunctions
Function name: burnCAToken(uint256,uint256,address)
PC address: 16814
Estimated Gas Usage: 3819 - 39702
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1004

tc.burnLockedTokens(_of, "CLA", _value)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:52.673419
Transaction Length: 1
Severity: High
Contract: PoolData
Function name: updateUintParameters(bytes8,uint256)
PC address: 16887
Estimated Gas Usage: 2583 - 37570
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3999

val * 1 hours

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:37.414316
Transaction Length: 1
Severity: High
Contract: Governance
Function name: allowedToCreateProposal(uint256)
PC address: 17127
Estimated Gas Usage: 2453 - 37442
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

ed for verifica

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:39.150148
Transaction Length: 1
Severity: High
Contract: Governance
Function name: allowedToCreateProposal(uint256)
PC address: 17130
Estimated Gas Usage: 2660 - 38114
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3



/**
 *Submitted for verification at Ether

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:40.791085
Transaction Length: 1
Severity: High
Contract: Governance
Function name: allowedToCreateProposal(uint256)
PC address: 17151
Estimated Gas Usage: 2660 - 38114
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11522

proposalCategory.category(category)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:42.182593
Transaction Length: 1
Severity: High
Contract: Governance
Function name: allowedToCreateProposal(uint256)
PC address: 17242
Estimated Gas Usage: 2718 - 38265
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:16

 interface
 * @dev se

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:09:07.154153
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: memberAtIndex(uint256,uint256)
PC address: 19588
Estimated Gas Usage: 759 - 854
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10194

memberRoleData[_memberRoleId]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:18.088722
Transaction Length: 1
Severity: High
Contract: TokenController
Function name: updateUintParameters(bytes8,uint256)
PC address: 19741
Estimated Gas Usage: 2592 - 37579
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:71

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:09:07.600024
Transaction Length: 1
Severity: Low
Contract: MemberRoles
Function name: swapABMember(address,address)
PC address: 19835
Estimated Gas Usage: 822 - 917
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9798

memberRoleData[_memberRoleId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:07:34.974626
Transaction Length: 2
Severity: Low
Contract: MemberRoles
Function name: swapABMember(address,address)
PC address: 19835
Estimated Gas Usage: 822 - 917
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:9798

memberRoleData[_memberRoleId]

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:46.541231
Transaction Length: 1
Severity: High
Contract: TokenFunctions
Function name: lockCN(uint256,uint256,uint256,address)
PC address: 19993
Estimated Gas Usage: 4591 - 74375
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:1024

coverPeriod * 1 days

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:51.163186
Transaction Length: 1
Severity: Low
Contract: Governance
Function name: allDelegation(uint256)
PC address: 20906
Estimated Gas Usage: 767 - 862
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10885

DelegateVote[] public allDelegation

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:52.597659
Transaction Length: 1
Severity: High
Contract: Governance
Function name: canCloseProposal(uint256)
PC address: 21277
Estimated Gas Usage: 3906 - 39465
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

ed for verifica

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:14.019307
Transaction Length: 1
Severity: High
Contract: Governance
Function name: canCloseProposal(uint256)
PC address: 21280
Estimated Gas Usage: 4107 - 40131
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3



/**
 *Submitted for verification at Ether

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:16.080849
Transaction Length: 1
Severity: High
Contract: Governance
Function name: canCloseProposal(uint256)
PC address: 21301
Estimated Gas Usage: 4107 - 40131
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:11573

proposalCategory.category(allProposalData[_proposalId].category)

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:55.166018
Transaction Length: 1
Severity: High
Contract: Governance
Function name: canCloseProposal(uint256)
PC address: 21366
Estimated Gas Usage: 4107 - 40131
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:2


*/

/**
 *Submitted 

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:18.526678
Transaction Length: 1
Severity: High
Contract: Governance
Function name: canCloseProposal(uint256)
PC address: 21372
Estimated Gas Usage: 4107 - 40131
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:6

o on 2020-09-1

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:34.745190
Transaction Length: 1
Severity: High
Contract: Governance
Function name: canCloseProposal(uint256)
PC address: 21392
Estimated Gas Usage: 4165 - 40282
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:16

 interface
 * @dev se

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:03:50.376417
Transaction Length: 1
Severity: High
Contract: Governance
Function name: canCloseProposal(uint256)
PC address: 21394
Estimated Gas Usage: 4165 - 40282
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:12




/**
 * @title ERC20 interface
 * @dev see

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:26.130478
Transaction Length: 1
Severity: Low
Contract: PoolData
Function name: getInvestmentCurrencyByIndex(uint256)
PC address: 22411
Estimated Gas Usage: 770 - 865
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3743

allInvestmentCurrencies[index]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:04:21.356825
Transaction Length: 2
Severity: Low
Contract: PoolData
Function name: getInvestmentCurrencyByIndex(uint256)
PC address: 22411
Estimated Gas Usage: 770 - 865
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3743

allInvestmentCurrencies[index]

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:05.928876
Transaction Length: 1
Severity: Low
Contract: Pool1
Function name: transferCurrencyAsset(bytes4,uint256)
PC address: 22592
Estimated Gas Usage: 10531 - 66789
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:8397

p2.sendEther.value(_amount)()

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:01:21.653730
Transaction Length: 1
Severity: High
Contract: TokenFunctions
Function name: extendCNEPOff(address,uint256,uint256)
PC address: 22768
Estimated Gas Usage: 2556 - 37543
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:102

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:29.955140
Transaction Length: 1
Severity: High
Contract: TokenFunctions
Function name: burnDepositCN(uint256)
PC address: 23301
Estimated Gas Usage: 6709 - 111573
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:71

a * b

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:05:40.579646
Transaction Length: 2
Severity: Low
Contract: MemberRoles
Function name: swapOwner(address)
PC address: 23638
Estimated Gas Usage: 3297 - 38519
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10122

memberRoleData[_roleId]

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:02:29.602118
Transaction Length: 1
Severity: Low
Contract: PoolData
Function name: allMCRData(uint256)
PC address: 23979
Estimated Gas Usage: 722 - 817
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:3333

McrData[] public allMCRData

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:13:19.507816
Transaction Length: 1
Severity: High
Contract: Pool1
Function name: triggerExternalLiquidityTrade()
PC address: 24652
Estimated Gas Usage: 6471 - 111052
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:102

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.546046
Transaction Length: 1
Severity: High
Contract: Claims
Function name: getCATokens(uint256,uint256)
PC address: 24930
Estimated Gas Usage: 8871 - 149143
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:102

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:02:58.067594
Transaction Length: 1
Severity: High
Contract: Governance
Function name: delegateVote(address)
PC address: 39562
Estimated Gas Usage: 4107 - 40131
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x38B704Ba216C762565Da03D1603935d0f579Ef01.sol:10843

contract Governance is IGovernance, Iupgradable {

    using SafeMath for uint;

    enum ProposalStatus { 
        Draft,
        AwaitingSolution,
        VotingStarted,
        Accepted,
        Rejected,
        Majority_Not_Reached_But_Accepted,
        Denied
    }

    struct ProposalData {
        uint propStatus;
        uint finalVerdict;
        uint category;
        uint commonIncentive;
        uint dateUpd;
        address owner;
    }

    struct ProposalVote {
        address voter;
        uint proposalId;
        uint dateAdd;
    }

    struct VoteTally {
        mapping(uint=>uint) memberVoteValue;
        mapping(uint=>uint) abVoteValue;
        uint voters;
    }

    struct DelegateVote {
        address follower;
        address leader;
        uint lastUpd;
    }

    ProposalVote[] internal allVotes;
    DelegateVote[] public allDelegation;

    mapping(uint => ProposalData) internal allProposalData;
    mapping(uint => bytes[]) internal allProposalSolutions;
    mapping(address => uint[]) internal allVotesByMember;
    mapping(uint => mapping(address => bool)) public rewardClaimed;
    mapping (address => mapping(uint => uint)) public memberProposalVote;
    mapping (address => uint) public followerDelegation;
    mapping (address => uint) internal followerCount;
    mapping (address => uint[]) internal leaderDelegation;
    mapping (uint => VoteTally) public proposalVoteTally;
    mapping (address => bool) public isOpenForDelegation;
    mapping (address => uint) public lastRewardClaimed;

    bool internal constructorCheck;
    uint public tokenHoldingTime;
    uint internal roleIdAllowedToCatgorize;
    uint internal maxVoteWeigthPer;
    uint internal specialResolutionMajPerc;
    uint internal maxFollowers;
    uint internal totalProposals;
    uint internal maxDraftTime;

    MemberRoles internal memberRole;
    ProposalCategory internal proposalCategory;
    TokenController internal tokenInstance;

    mapping(uint => uint) public proposalActionStatus;
    mapping(uint => uint) internal proposalExecutionTime;
    mapping(uint => mapping(address => bool)) public proposalRejectedByAB;
    mapping(uint => uint) internal actionRejectedCount;

    bool internal actionParamsInitialised;
    uint internal actionWaitingTime;
    uint constant internal AB_MAJ_TO_REJECT_ACTION = 3;

    enum ActionStatus {
        Pending,
        Accepted,
        Rejected,
        Executed,
        NoAction
    }

    /**
    * @dev Called whenever an action execution is failed.
    */
    event ActionFailed (
        uint256 proposalId
    );

    /**
    * @dev Called whenever an AB member rejects the action execution.
    */
    event ActionRejected (
        uint256 indexed proposalId,
        address rejectedBy
    );

    /**
    * @dev Checks if msg.sender is proposal owner
    */
    modifier onlyProposalOwner(uint _proposalId) {
        require(msg.sender == allProposalData[_proposalId].owner, "Not allowed");
        _;
    }

    /**
    * @dev Checks if proposal is opened for voting
    */
    modifier voteNotStarted(uint _proposalId) {
        require(allProposalData[_proposalId].propStatus < uint(ProposalStatus.VotingStarted));
        _;
    }

    /**
    * @dev Checks if msg.sender is allowed to create proposal under given category
    */
    modifier isAllowed(uint _categoryId) {
        require(allowedToCreateProposal(_categoryId), "Not allowed");
        _;
    }

    /**
    * @dev Checks if msg.sender is allowed categorize proposal under given category
    */
    modifier isAllowedToCategorize() {
        require(memberRole.checkRole(msg.sender, roleIdAllowedToCatgorize), "Not allowed");
        _;
    }

    /**
    * @dev Checks if msg.sender had any pending rewards to be claimed
    */
    modifier checkPendingRewards {
        require(getPendingReward(msg.sender) == 0, "Claim reward");
        _;
    }

    /**
    * @dev Event emitted whenever a proposal is categorized
    */
    event ProposalCategorized(
        uint indexed proposalId,
        address indexed categorizedBy,
        uint categoryId
    );
    
    /**
     * @dev Removes delegation of an address.
     * @param _add address to undelegate.
     */
    function removeDelegation(address _add) external onlyInternal {
        _unDelegate(_add);
    }

    /**
    * @dev Creates a new proposal
    * @param _proposalDescHash Proposal description hash through IPFS having Short and long description of proposal
    * @param _categoryId This id tells under which the proposal is categorized i.e. Proposal's Objective
    */
    function createProposal(
        string calldata _proposalTitle, 
        string calldata _proposalSD, 
        string calldata _proposalDescHash, 
        uint _categoryId
    ) 
        external isAllowed(_categoryId)
    {
        require(ms.isMember(msg.sender), "Not Member");

        _createProposal(_proposalTitle, _proposalSD, _proposalDescHash, _categoryId);
    }

    /**
    * @dev Edits the details of an existing proposal
    * @param _proposalId Proposal id that details needs to be updated
    * @param _proposalDescHash Proposal description hash having long and short description of proposal.
    */
    function updateProposal(
        uint _proposalId, 
        string calldata _proposalTitle, 
        string calldata _proposalSD, 
        string calldata _proposalDescHash
    ) 
        external onlyProposalOwner(_proposalId)
    {
        require(
            allProposalSolutions[_proposalId].length < 2,
            "Not allowed"
        );
        allProposalData[_proposalId].propStatus = uint(ProposalStatus.Draft);
        allProposalData[_proposalId].category = 0;
        allProposalData[_proposalId].commonIncentive = 0;
        emit Proposal(
            allProposalData[_proposalId].owner,
            _proposalId,
            now,
            _proposalTitle, 
            _proposalSD, 
            _proposalDescHash
        );
    }

    /**
    * @dev Categorizes proposal to proceed further. Categories shows the proposal objective.
    */
    function categorizeProposal(
        uint _proposalId,
        uint _categoryId,
        uint _incentive
    )
        external
        voteNotStarted(_proposalId) isAllowedToCategorize
    {
        _categorizeProposal(_proposalId, _categoryId, _incentive);
    }

    /**
    * @dev Initiates add solution
    * To implement the governance interface
    */
    function addSolution(uint, string calldata, bytes calldata) external {
    }

    /**
    * @dev Opens proposal for voting
    * To implement the governance interface
    */
    function openProposalForVoting(uint) external {
    }

    /**
    * @dev Submit proposal with solution
    * @param _proposalId Proposal id
    * @param _solutionHash Solution hash contains  parameters, values and description needed according to proposal
    */
    function submitProposalWithSolution(
        uint _proposalId, 
        string calldata _solutionHash, 
        bytes calldata _action
    ) 
        external
        onlyProposalOwner(_proposalId)
    {

        require(allProposalData[_proposalId].propStatus == uint(ProposalStatus.AwaitingSolution));
        
        _proposalSubmission(_proposalId, _solutionHash, _action);
    }

    /**
    * @dev Creates a new proposal with solution
    * @param _proposalDescHash Proposal description hash through IPFS having Short and long description of proposal
    * @param _categoryId This id tells under which the proposal is categorized i.e. Proposal's Objective
    * @param _solutionHash Solution hash contains  parameters, values and description needed according to proposal
    */
    function createProposalwithSolution(
        string calldata _proposalTitle, 
        string calldata _proposalSD, 
        string calldata _proposalDescHash,
        uint _categoryId, 
        string calldata _solutionHash, 
        bytes calldata _action
    ) 
        external isAllowed(_categoryId)
    {


        uint proposalId = totalProposals;

        _createProposal(_proposalTitle, _proposalSD, _proposalDescHash, _categoryId);
        
        require(_categoryId > 0);

        _proposalSubmission(
            proposalId,
            _solutionHash,
            _action
        );
    }

    /**
     * @dev Submit a vote on the proposal.
     * @param _proposalId to vote upon.
     * @param _solutionChosen is the chosen vote.
     */
    function submitVote(uint _proposalId, uint _solutionChosen) external {
        
        require(allProposalData[_proposalId].propStatus == 
        uint(Governance.ProposalStatus.VotingStarted), "Not allowed");

        require(_solutionChosen < allProposalSolutions[_proposalId].length);


        _submitVote(_proposalId, _solutionChosen);
    }

    /**
     * @dev Closes the proposal.
     * @param _proposalId of proposal to be closed.
     */
    function closeProposal(uint _proposalId) external {
        uint category = allProposalData[_proposalId].category;
        
        
        uint _memberRole;
        if (allProposalData[_proposalId].dateUpd.add(maxDraftTime) <= now && 
            allProposalData[_proposalId].propStatus < uint(ProposalStatus.VotingStarted)) {
            _updateProposalStatus(_proposalId, uint(ProposalStatus.Denied));
        } else {
            require(canCloseProposal(_proposalId) == 1);
            (, _memberRole, , , , , ) = proposalCategory.category(allProposalData[_proposalId].category);
            if (_memberRole == uint(MemberRoles.Role.AdvisoryBoard)) {
                _closeAdvisoryBoardVote(_proposalId, category);
            } else {
                _closeMemberVote(_proposalId, category);
            }
        }
        
    }

    /**
     * @dev Claims reward for member.
     * @param _memberAddress to claim reward of.
     * @param _maxRecords maximum number of records to claim reward for.
     _proposals list of proposals of which reward will be claimed.
     * @return amount of pending reward.
     */
    function claimReward(address _memberAddress, uint _maxRecords) 
        external returns(uint pendingDAppReward) 
    {
        
        uint voteId;
        address leader;
        uint lastUpd;

        require(msg.sender == ms.getLatestAddress("CR"));

        uint delegationId = followerDelegation[_memberAddress];
        DelegateVote memory delegationData = allDelegation[delegationId];
        if (delegationId > 0 && delegationData.leader != address(0)) {
            leader = delegationData.leader;
            lastUpd = delegationData.lastUpd;
        } else
            leader = _memberAddress;

        uint proposalId;
        uint totalVotes = allVotesByMember[leader].length;
        uint lastClaimed = totalVotes;
        uint j;
        uint i;
        for (i = lastRewardClaimed[_memberAddress]; i < totalVotes && j < _maxRecords; i++) {
            voteId = allVotesByMember[leader][i];
            proposalId = allVotes[voteId].proposalId;
            if (proposalVoteTally[proposalId].voters > 0 && (allVotes[voteId].dateAdd > (
                lastUpd.add(tokenHoldingTime)) || leader == _memberAddress)) {
                if (allProposalData[proposalId].propStatus > uint(ProposalStatus.VotingStarted)) {
                    if (!rewardClaimed[voteId][_memberAddress]) {
                        pendingDAppReward = pendingDAppReward.add(
                                allProposalData[proposalId].commonIncentive.div(
                                    proposalVoteTally[proposalId].voters
                                )
                            );
                        rewardClaimed[voteId][_memberAddress] = true;
                        j++;
                    }
                } else {
                    if (lastClaimed == totalVotes) {
                        lastClaimed = i;
                    }
                }
            }
        }

        if (lastClaimed == totalVotes) {
            lastRewardClaimed[_memberAddress] = i;
        } else {
            lastRewardClaimed[_memberAddress] = lastClaimed;
        }

        if (j > 0) {
            emit RewardClaimed(
                _memberAddress,
                pendingDAppReward
            );
        }
    }

    /**
     * @dev Sets delegation acceptance status of individual user
     * @param _status delegation acceptance status
     */
    function setDelegationStatus(bool _status) external isMemberAndcheckPause checkPendingRewards {
        isOpenForDelegation[msg.sender] = _status;
    }

    /**
     * @dev Delegates vote to an address.
     * @param _add is the address to delegate vote to.
     */
    function delegateVote(address _add) external isMemberAndcheckPause checkPendingRewards {

        require(ms.masterInitialized());

        require(allDelegation[followerDelegation[_add]].leader == address(0));

        if (followerDelegation[msg.sender] > 0) {
            require((allDelegation[followerDelegation[msg.sender]].lastUpd).add(tokenHoldingTime) < now);
        }

        require(!alreadyDelegated(msg.sender));
        require(!memberRole.checkRole(msg.sender, uint(MemberRoles.Role.Owner)));
        require(!memberRole.checkRole(msg.sender, uint(MemberRoles.Role.AdvisoryBoard)));


        require(followerCount[_add] < maxFollowers);
        
        if (allVotesByMember[msg.sender].length > 0) {
            require((allVotes[allVotesByMember[msg.sender][allVotesByMember[msg.sender].length - 1]].dateAdd).add(tokenHoldingTime)
            < now);
        }

        require(ms.isMember(_add));

        require(isOpenForDelegation[_add]);

        allDelegation.push(DelegateVote(msg.sender, _add, now));
        followerDelegation[msg.sender] = allDelegation.length - 1;
        leaderDelegation[_add].push(allDelegation.length - 1);
        followerCount[_add]++;
        lastRewardClaimed[msg.sender] = allVotesByMember[_add].length;
    }

    /**
     * @dev Undelegates the sender
     */
    function unDelegate() external isMemberAndcheckPause checkPendingRewards {
        _unDelegate(msg.sender);
    }

    /**
     * @dev Triggers action of accepted proposal after waiting time is finished
     */
    function triggerAction(uint _proposalId) external {
        require(proposalActionStatus[_proposalId] == uint(ActionStatus.Accepted) && proposalExecutionTime[_proposalId] <= now, "Cannot trigger");
        _triggerAction(_proposalId, allProposalData[_proposalId].category);
    }

    /**
     * @dev Provides option to Advisory board member to reject proposal action execution within actionWaitingTime, if found suspicious
     */
    function rejectAction(uint _proposalId) external {
        require(memberRole.checkRole(msg.sender, uint(MemberRoles.Role.AdvisoryBoard)) && proposalExecutionTime[_proposalId] > now);

        require(proposalActionStatus[_proposalId] == uint(ActionStatus.Accepted));

        require(!proposalRejectedByAB[_proposalId][msg.sender]);

        require(
            keccak256(proposalCategory.categoryActionHashes(allProposalData[_proposalId].category))
            != keccak256(abi.encodeWithSignature("swapABMember(address,address)"))
        );

        proposalRejectedByAB[_proposalId][msg.sender] = true;
        actionRejectedCount[_proposalId]++;
        emit ActionRejected(_proposalId, msg.sender);
        if (actionRejectedCount[_proposalId] == AB_MAJ_TO_REJECT_ACTION) {
            proposalActionStatus[_proposalId] = uint(ActionStatus.Rejected);
        }
    }

    /**
     * @dev Sets intial actionWaitingTime value
     * To be called after governance implementation has been updated
     */
    function setInitialActionParameters() external onlyOwner {
        require(!actionParamsInitialised);
        actionParamsInitialised = true;
        actionWaitingTime = 24 * 1 hours;
    }

    /**
     * @dev Gets Uint Parameters of a code
     * @param code whose details we want
     * @return string value of the code
     * @return associated amount (time or perc or value) to the code
     */
    function getUintParameters(bytes8 code) external view returns(bytes8 codeVal, uint val) {

        codeVal = code;

        if (code == "GOVHOLD") {

            val = tokenHoldingTime / (1 days);

        } else if (code == "MAXFOL") {

            val = maxFollowers;

        } else if (code == "MAXDRFT") {

            val = maxDraftTime / (1 days);

        } else if (code == "EPTIME") {

            val = ms.pauseTime() / (1 days);

        } else if (code == "ACWT") {

            val = actionWaitingTime / (1 hours);

        }
    }

    /**
     * @dev Gets all details of a propsal
     * @param _proposalId whose details we want
     * @return proposalId
     * @return category
     * @return status
     * @return finalVerdict
     * @return totalReward
     */
    function proposal(uint _proposalId)
        external
        view
        returns(
            uint proposalId,
            uint category,
            uint status,
            uint finalVerdict,
            uint totalRewar
        )
    {
        return(
            _proposalId,
            allProposalData[_proposalId].category,
            allProposalData[_proposalId].propStatus,
            allProposalData[_proposalId].finalVerdict,
            allProposalData[_proposalId].commonIncentive
        );
    }

    /**
     * @dev Gets some details of a propsal
     * @param _proposalId whose details we want
     * @return proposalId
     * @return number of all proposal solutions
     * @return amount of votes 
     */
    function proposalDetails(uint _proposalId) external view returns(uint, uint, uint) {
        return(
            _proposalId,
            allProposalSolutions[_proposalId].length,
            proposalVoteTally[_proposalId].voters
        );
    }

    /**
     * @dev Gets solution action on a proposal
     * @param _proposalId whose details we want
     * @param _solution whose details we want
     * @return action of a solution on a proposal
     */
    function getSolutionAction(uint _proposalId, uint _solution) external view returns(uint, bytes memory) {
        return (
            _solution,
            allProposalSolutions[_proposalId][_solution]
        );
    }
   
    /**
     * @dev Gets length of propsal
     * @return length of propsal
     */
    function getProposalLength() external view returns(uint) {
        return totalProposals;
    }

    /**
     * @dev Get followers of an address
     * @return get followers of an address
     */
    function getFollowers(address _add) external view returns(uint[] memory) {
        return leaderDelegation[_add];
    }

    /**
     * @dev Gets pending rewards of a member
     * @param _memberAddress in concern
     * @return amount of pending reward
     */
    function getPendingReward(address _memberAddress)
        public view returns(uint pendingDAppReward)
    {
        uint delegationId = followerDelegation[_memberAddress];
        address leader;
        uint lastUpd;
        DelegateVote memory delegationData = allDelegation[delegationId];

        if (delegationId > 0 && delegationData.leader != address(0)) {
            leader = delegationData.leader;
            lastUpd = delegationData.lastUpd;
        } else
            leader = _memberAddress;

        uint proposalId;
        for (uint i = lastRewardClaimed[_memberAddress]; i < allVotesByMember[leader].length; i++) {
            if (allVotes[allVotesByMember[leader][i]].dateAdd > (
                lastUpd.add(tokenHoldingTime)) || leader == _memberAddress) {
                if (!rewardClaimed[allVotesByMember[leader][i]][_memberAddress]) {
                    proposalId = allVotes[allVotesByMember[leader][i]].proposalId;
                    if (proposalVoteTally[proposalId].voters > 0 && allProposalData[proposalId].propStatus
                    > uint(ProposalStatus.VotingStarted)) {
                        pendingDAppReward = pendingDAppReward.add(
                            allProposalData[proposalId].commonIncentive.div(
                                proposalVoteTally[proposalId].voters
                            )
                        );
                    }
                }
            }
        }
    }

    /**
     * @dev Updates Uint Parameters of a code
     * @param code whose details we want to update
     * @param val value to set
     */
    function updateUintParameters(bytes8 code, uint val) public {

        require(ms.checkIsAuthToGoverned(msg.sender));
        if (code == "GOVHOLD") {

            tokenHoldingTime = val * 1 days;

        } else if (code == "MAXFOL") {

            maxFollowers = val;

        } else if (code == "MAXDRFT") {

            maxDraftTime = val * 1 days;

        } else if (code == "EPTIME") {

            ms.updatePauseTime(val * 1 days);

        } else if (code == "ACWT") {

            actionWaitingTime = val * 1 hours;

        } else {

            revert("Invalid code");

        }
    }

    /**
    * @dev Updates all dependency addresses to latest ones from Master
    */
    function changeDependentContractAddress() public {
        tokenInstance = TokenController(ms.dAppLocker());
        memberRole = MemberRoles(ms.getLatestAddress("MR"));
        proposalCategory = ProposalCategory(ms.getLatestAddress("PC"));
    }

    /**
    * @dev Checks if msg.sender is allowed to create a proposal under given category
    */
    function allowedToCreateProposal(uint category) public view returns(bool check) {
        if (category == 0)
            return true;
        uint[] memory mrAllowed;
        (, , , , mrAllowed, , ) = proposalCategory.category(category);
        for (uint i = 0; i < mrAllowed.length; i++) {
            if (mrAllowed[i] == 0 || memberRole.checkRole(msg.sender, mrAllowed[i]))
                return true;
        }
    }

    /**
     * @dev Checks if an address is already delegated
     * @param _add in concern
     * @return bool value if the address is delegated or not
     */
    function alreadyDelegated(address _add) public view returns(bool delegated) {
        for (uint i=0; i < leaderDelegation[_add].length; i++) {
            if (allDelegation[leaderDelegation[_add][i]].leader == _add) {
                return true;
            }
        }
    }

    /**
    * @dev Pauses a proposal
    * To implement govblocks interface
    */
    function pauseProposal(uint) public {
    }

    /**
    * @dev Resumes a proposal
    * To implement govblocks interface
    */
    function resumeProposal(uint) public {
    }

    /**
    * @dev Checks If the proposal voting time is up and it's ready to close 
    *      i.e. Closevalue is 1 if proposal is ready to be closed, 2 if already closed, 0 otherwise!
    * @param _proposalId Proposal id to which closing value is being checked
    */
    function canCloseProposal(uint _proposalId) 
        public 
        view 
        returns(uint)
    {
        uint dateUpdate;
        uint pStatus;
        uint _closingTime;
        uint _roleId;
        uint majority;
        pStatus = allProposalData[_proposalId].propStatus;
        dateUpdate = allProposalData[_proposalId].dateUpd;
        (, _roleId, majority, , , _closingTime, ) = proposalCategory.category(allProposalData[_proposalId].category);
        if (
            pStatus == uint(ProposalStatus.VotingStarted)
        ) {
            uint numberOfMembers = memberRole.numberOfMembers(_roleId);
            if (_roleId == uint(MemberRoles.Role.AdvisoryBoard)) {
                if (proposalVoteTally[_proposalId].abVoteValue[1].mul(100).div(numberOfMembers) >= majority  
                || proposalVoteTally[_proposalId].abVoteValue[1].add(proposalVoteTally[_proposalId].abVoteValue[0]) == numberOfMembers
                || dateUpdate.add(_closingTime) <= now) {

                    return 1;
                }
            } else {
                if (numberOfMembers == proposalVoteTally[_proposalId].voters 
                || dateUpdate.add(_closingTime) <= now)
                    return  1;
            }
        } else if (pStatus > uint(ProposalStatus.VotingStarted)) {
            return  2;
        } else {
            return  0;
        }
    }

    /**
     * @dev Gets Id of member role allowed to categorize the proposal
     * @return roleId allowed to categorize the proposal
     */
    function allowedToCatgorize() public view returns(uint roleId) {
        return roleIdAllowedToCatgorize;
    }

    /**
     * @dev Gets vote tally data
     * @param _proposalId in concern
     * @param _solution of a proposal id
     * @return member vote value
     * @return advisory board vote value
     * @return amount of votes
     */
    function voteTallyData(uint _proposalId, uint _solution) public view returns(uint, uint, uint) {
        return (proposalVoteTally[_proposalId].memberVoteValue[_solution],
            proposalVoteTally[_proposalId].abVoteValue[_solution], proposalVoteTally[_proposalId].voters);
    }

    /**
     * @dev Internal call to create proposal
     * @param _proposalTitle of proposal
     * @param _proposalSD is short description of proposal
     * @param _proposalDescHash IPFS hash value of propsal
     * @param _categoryId of proposal
     */
    function _createProposal(
        string memory _proposalTitle,
        string memory _proposalSD,
        string memory _proposalDescHash,
        uint _categoryId
    )
        internal
    {
        require(proposalCategory.categoryABReq(_categoryId) == 0 || _categoryId == 0);
        uint _proposalId = totalProposals;
        allProposalData[_proposalId].owner = msg.sender;
        allProposalData[_proposalId].dateUpd = now;
        allProposalSolutions[_proposalId].push("");
        totalProposals++;

        emit Proposal(
            msg.sender,
            _proposalId,
            now,
            _proposalTitle,
            _proposalSD,
            _proposalDescHash
        );

        if (_categoryId > 0)
            _categorizeProposal(_proposalId, _categoryId, 0);
    }

    /**
     * @dev Internal call to categorize a proposal
     * @param _proposalId of proposal
     * @param _categoryId of proposal
     * @param _incentive is commonIncentive
     */
    function _categorizeProposal(
        uint _proposalId,
        uint _categoryId,
        uint _incentive
    )
        internal
    {
        require(
            _categoryId > 0 && _categoryId < proposalCategory.totalCategories(),
            "Invalid category"
        );
        allProposalData[_proposalId].category = _categoryId;
        allProposalData[_proposalId].commonIncentive = _incentive;
        allProposalData[_proposalId].propStatus = uint(ProposalStatus.AwaitingSolution);

        emit ProposalCategorized(_proposalId, msg.sender, _categoryId);
    }

    /**
     * @dev Internal call to add solution to a proposal
     * @param _proposalId in concern
     * @param _action on that solution
     * @param _solutionHash string value
     */
    function _addSolution(uint _proposalId, bytes memory _action, string memory _solutionHash)
        internal
    {
        allProposalSolutions[_proposalId].push(_action);
        emit Solution(_proposalId, msg.sender, allProposalSolutions[_proposalId].length - 1, _solutionHash, now);
    }

    /**
    * @dev Internal call to add solution and open proposal for voting
    */
    function _proposalSubmission(
        uint _proposalId,
        string memory _solutionHash,
        bytes memory _action
    )
        internal
    {

        uint _categoryId = allProposalData[_proposalId].category;
        if (proposalCategory.categoryActionHashes(_categoryId).length == 0) {
            require(keccak256(_action) == keccak256(""));
            proposalActionStatus[_proposalId] = uint(ActionStatus.NoAction);
        }
        
        _addSolution(
            _proposalId,
            _action,
            _solutionHash
        );

        _updateProposalStatus(_proposalId, uint(ProposalStatus.VotingStarted));
        (, , , , , uint closingTime, ) = proposalCategory.category(_categoryId);
        emit CloseProposalOnTime(_proposalId, closingTime.add(now));

    }

    /**
     * @dev Internal call to submit vote
     * @param _proposalId of proposal in concern
     * @param _solution for that proposal
     */
    function _submitVote(uint _proposalId, uint _solution) internal {

        uint delegationId = followerDelegation[msg.sender];
        uint mrSequence;
        uint majority;
        uint closingTime;
        (, mrSequence, majority, , , closingTime, ) = proposalCategory.category(allProposalData[_proposalId].category);

        require(allProposalData[_proposalId].dateUpd.add(closingTime) > now, "Closed");

        require(memberProposalVote[msg.sender][_proposalId] == 0, "Not allowed");
        require((delegationId == 0) || (delegationId > 0 && allDelegation[delegationId].leader == address(0) && 
        _checkLastUpd(allDelegation[delegationId].lastUpd)));

        require(memberRole.checkRole(msg.sender, mrSequence), "Not Authorized");
        uint totalVotes = allVotes.length;

        allVotesByMember[msg.sender].push(totalVotes);
        memberProposalVote[msg.sender][_proposalId] = totalVotes;

        allVotes.push(ProposalVote(msg.sender, _proposalId, now));

        emit Vote(msg.sender, _proposalId, totalVotes, now, _solution);
        if (mrSequence == uint(MemberRoles.Role.Owner)) {
            if (_solution == 1)
                _callIfMajReached(_proposalId, uint(ProposalStatus.Accepted), allProposalData[_proposalId].category, 1, MemberRoles.Role.Owner);
            else
                _updateProposalStatus(_proposalId, uint(ProposalStatus.Rejected));
        
        } else {
            uint numberOfMembers = memberRole.numberOfMembers(mrSequence);
            _setVoteTally(_proposalId, _solution, mrSequence);

            if (mrSequence == uint(MemberRoles.Role.AdvisoryBoard)) {
                if (proposalVoteTally[_proposalId].abVoteValue[1].mul(100).div(numberOfMembers) 
                >= majority 
                || (proposalVoteTally[_proposalId].abVoteValue[1].add(proposalVoteTally[_proposalId].abVoteValue[0])) == numberOfMembers) {
                    emit VoteCast(_proposalId);
                }
            } else {
                if (numberOfMembers == proposalVoteTally[_proposalId].voters)
                    emit VoteCast(_proposalId);
            }
        }

    }

    /**
     * @dev Internal call to set vote tally of a proposal
     * @param _proposalId of proposal in concern
     * @param _solution of proposal in concern
     * @param mrSequence number of members for a role
     */
    function _setVoteTally(uint _proposalId, uint _solution, uint mrSequence) internal
    {
        uint categoryABReq;
        uint isSpecialResolution;
        (, categoryABReq, isSpecialResolution) = proposalCategory.categoryExtendedData(allProposalData[_proposalId].category);
        if (memberRole.checkRole(msg.sender, uint(MemberRoles.Role.AdvisoryBoard)) && (categoryABReq > 0) || 
            mrSequence == uint(MemberRoles.Role.AdvisoryBoard)) {
            proposalVoteTally[_proposalId].abVoteValue[_solution]++;
        }
        tokenInstance.lockForMemberVote(msg.sender, tokenHoldingTime);
        if (mrSequence != uint(MemberRoles.Role.AdvisoryBoard)) {
            uint voteWeight;
            uint voters = 1;
            uint tokenBalance = tokenInstance.totalBalanceOf(msg.sender);
            uint totalSupply = tokenInstance.totalSupply();
            if (isSpecialResolution == 1) {
                voteWeight = tokenBalance.add(10**18);
            } else {
                voteWeight = (_minOf(tokenBalance, maxVoteWeigthPer.mul(totalSupply).div(100))).add(10**18);
            }
            DelegateVote memory delegationData;
            for (uint i = 0; i < leaderDelegation[msg.sender].length; i++) {
                delegationData = allDelegation[leaderDelegation[msg.sender][i]];
                if (delegationData.leader == msg.sender && 
                _checkLastUpd(delegationData.lastUpd)) {
                    if (memberRole.checkRole(delegationData.follower, mrSequence)) {
                        tokenBalance = tokenInstance.totalBalanceOf(delegationData.follower);
                        tokenInstance.lockForMemberVote(delegationData.follower, tokenHoldingTime);
                        voters++;
                        if (isSpecialResolution == 1) {
                            voteWeight = voteWeight.add(tokenBalance.add(10**18));
                        } else {
                            voteWeight = voteWeight.add((_minOf(tokenBalance, maxVoteWeigthPer.mul(totalSupply).div(100))).add(10**18));
                        }
                    }
                }
            }
            proposalVoteTally[_proposalId].memberVoteValue[_solution] = proposalVoteTally[_proposalId].memberVoteValue[_solution].add(voteWeight);
            proposalVoteTally[_proposalId].voters = proposalVoteTally[_proposalId].voters + voters;
        }
    }

    /**
     * @dev Gets minimum of two numbers
     * @param a one of the two numbers
     * @param b one of the two numbers
     * @return minimum number out of the two
     */
    function _minOf(uint a, uint b) internal pure returns(uint res) {
        res = a;
        if (res > b)
            res = b;
    }
    
    /**
     * @dev Check the time since last update has exceeded token holding time or not
     * @param _lastUpd is last update time
     * @return the bool which tells if the time since last update has exceeded token holding time or not
     */
    function _checkLastUpd(uint _lastUpd) internal view returns(bool) {
        return (now - _lastUpd) > tokenHoldingTime;
    }

    /**
    * @dev Checks if the vote count against any solution passes the threshold value or not.
    */
    function _checkForThreshold(uint _proposalId, uint _category) internal view returns(bool check) {
        uint categoryQuorumPerc;
        uint roleAuthorized;
        (, roleAuthorized, , categoryQuorumPerc, , , ) = proposalCategory.category(_category);
        check = ((proposalVoteTally[_proposalId].memberVoteValue[0]
                            .add(proposalVoteTally[_proposalId].memberVoteValue[1]))
                        .mul(100))
                .div(
                    tokenInstance.totalSupply().add(
                        memberRole.numberOfMembers(roleAuthorized).mul(10 ** 18)
                    )
                ) >= categoryQuorumPerc;
    }
    
    /**
     * @dev Called when vote majority is reached
     * @param _proposalId of proposal in concern
     * @param _status of proposal in concern
     * @param category of proposal in concern
     * @param max vote value of proposal in concern
     */
    function _callIfMajReached(uint _proposalId, uint _status, uint category, uint max, MemberRoles.Role role) internal {
        
        allProposalData[_proposalId].finalVerdict = max;
        _updateProposalStatus(_proposalId, _status);
        emit ProposalAccepted(_proposalId);
        if (proposalActionStatus[_proposalId] != uint(ActionStatus.NoAction)) {
            if (role == MemberRoles.Role.AdvisoryBoard) {
                _triggerAction(_proposalId, category);
            } else {
                proposalActionStatus[_proposalId] = uint(ActionStatus.Accepted);
                proposalExecutionTime[_proposalId] = actionWaitingTime.add(now);
            }
        }
    }

    /**
     * @dev Internal function to trigger action of accepted proposal
     */
    function _triggerAction(uint _proposalId, uint _categoryId) internal {
        proposalActionStatus[_proposalId] = uint(ActionStatus.Executed);
        bytes2 contractName;
        address actionAddress;
        bytes memory _functionHash;
        (, actionAddress, contractName, , _functionHash) = proposalCategory.categoryActionDetails(_categoryId);
        if (contractName == "MS") {
            actionAddress = address(ms);
        } else if (contractName != "EX") {
            actionAddress = ms.getLatestAddress(contractName);
        }
        (bool actionStatus, ) = actionAddress.call(abi.encodePacked(_functionHash, allProposalSolutions[_proposalId][1]));
        if (actionStatus) {
            emit ActionSuccess(_proposalId);
        } else {
            proposalActionStatus[_proposalId] = uint(ActionStatus.Accepted);
            emit ActionFailed(_proposalId);
        }
    }

    /**
     * @dev Internal call to update proposal status
     * @param _proposalId of proposal in concern
     * @param _status of proposal to set
     */
    function _updateProposalStatus(uint _proposalId, uint _status) internal {
        if (_status == uint(ProposalStatus.Rejected) || _status == uint(ProposalStatus.Denied)) {
            proposalActionStatus[_proposalId] = uint(ActionStatus.NoAction);   
        }
        allProposalData[_proposalId].dateUpd = now;
        allProposalData[_proposalId].propStatus = _status;
    }

    /**
     * @dev Internal call to undelegate a follower
     * @param _follower is address of follower to undelegate
     */
    function _unDelegate(address _follower) internal {
        uint followerId = followerDelegation[_follower];
        if (followerId > 0) {

            followerCount[allDelegation[followerId].leader] = followerCount[allDelegation[followerId].leader].sub(1);
            allDelegation[followerId].leader = address(0);
            allDelegation[followerId].lastUpd = now;

            lastRewardClaimed[_follower] = allVotesByMember[_follower].length;
        }
    }

    /**
     * @dev Internal call to close member voting
     * @param _proposalId of proposal in concern
     * @param category of proposal in concern
     */
    function _closeMemberVote(uint _proposalId, uint category) internal {
        uint isSpecialResolution;
        uint abMaj;
        (, abMaj, isSpecialResolution) = proposalCategory.categoryExtendedData(category);
        if (isSpecialResolution == 1) {
            uint acceptedVotePerc = proposalVoteTally[_proposalId].memberVoteValue[1].mul(100)
            .div(
                tokenInstance.totalSupply().add(
                        memberRole.numberOfMembers(uint(MemberRoles.Role.Member)).mul(10**18)
                    ));
            if (acceptedVotePerc >= specialResolutionMajPerc) {
                _callIfMajReached(_proposalId, uint(ProposalStatus.Accepted), category, 1, MemberRoles.Role.Member);
            } else {
                _updateProposalStatus(_proposalId, uint(ProposalStatus.Denied));
            }
        } else {
            if (_checkForThreshold(_proposalId, category)) {
                uint majorityVote;
                (, , majorityVote, , , , ) = proposalCategory.category(category);
                if (
                    ((proposalVoteTally[_proposalId].memberVoteValue[1].mul(100))
                                        .div(proposalVoteTally[_proposalId].memberVoteValue[0]
                                                .add(proposalVoteTally[_proposalId].memberVoteValue[1])
                                        ))
                    >= majorityVote
                    ) {
                        _callIfMajReached(_proposalId, uint(ProposalStatus.Accepted), category, 1, MemberRoles.Role.Member);
                    } else {
                        _updateProposalStatus(_proposalId, uint(ProposalStatus.Rejected));
                    }
            } else {
                if (abMaj > 0 && proposalVoteTally[_proposalId].abVoteValue[1].mul(100)
                .div(memberRole.numberOfMembers(uint(MemberRoles.Role.AdvisoryBoard))) >= abMaj) {
                    _callIfMajReached(_proposalId, uint(ProposalStatus.Accepted), category, 1, MemberRoles.Role.Member);
                } else {
                    _updateProposalStatus(_proposalId, uint(ProposalStatus.Denied));
                }
            }
        }

        if (proposalVoteTally[_proposalId].voters > 0) {
            tokenInstance.mint(ms.getLatestAddress("CR"), allProposalData[_proposalId].commonIncentive);
        }
    }

    /**
     * @dev Internal call to close advisory board voting
     * @param _proposalId of proposal in concern
     * @param category of proposal in concern
     */
    function _closeAdvisoryBoardVote(uint _proposalId, uint category) internal {
        uint _majorityVote;
        MemberRoles.Role _roleId = MemberRoles.Role.AdvisoryBoard;
        (, , _majorityVote, , , , ) = proposalCategory.category(category);
        if (proposalVoteTally[_proposalId].abVoteValue[1].mul(100)
        .div(memberRole.numberOfMembers(uint(_roleId))) >= _majorityVote) {
            _callIfMajReached(_proposalId, uint(ProposalStatus.Accepted), category, 1, _roleId);
        } else {
            _updateProposalStatus(_proposalId, uint(ProposalStatus.Denied));
        }

    }

}

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x800933440fe46a5f74cc3f88165bf0727664e0e8.sol
Total states:14395
56.416516
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:02.258465
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1004
Estimated Gas Usage: 417 - 512
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x800933440fe46a5f74cc3f88165bf0727664e0e8.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.374772
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1006
Estimated Gas Usage: 417 - 512
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x800933440fe46a5f74cc3f88165bf0727664e0e8.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:13.710654
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1089
Estimated Gas Usage: 593 - 688
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x800933440fe46a5f74cc3f88165bf0727664e0e8.sol:5

olidity 0.5.16;
pragm

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:21.831507
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: initialize(uint256,uint256,uint256[],uint256[],address,address)
PC address: 1091
Estimated Gas Usage: 593 - 688
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x800933440fe46a5f74cc3f88165bf0727664e0e8.sol:3

*/

//pragma solidity 0.5.16;
pragma

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:00.969789
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeBP(uint256)
PC address: 2585
Estimated Gas Usage: 745 - 840
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x800933440fe46a5f74cc3f88165bf0727664e0e8.sol:629

uint[] public bonusRangeBP

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:35.331565
Transaction Length: 1
Severity: Low
Contract: LidSimplifiedPresaleRedeemer
Function name: bonusRangeStart(uint256)
PC address: 6017
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x800933440fe46a5f74cc3f88165bf0727664e0e8.sol:628

uint[] public bonusRangeStart

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:32.564683
Transaction Length: 1
Severity: High
Contract: LidSimplifiedPresaleRedeemer
Function name: calculateRatePerEth(uint256,uint256,uint256)
PC address: 6866
Estimated Gas Usage: 955 - 1050
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x800933440fe46a5f74cc3f88165bf0727664e0e8.sol:163

a * b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/m_loop/loop7/0x79b23d2e338be27bd554e1fa5777d79491414747.sol
Total states:1880
100.660976
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:01.299287
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 360
Estimated Gas Usage: 342 - 437
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x79b23d2e338be27bd554e1fa5777d79491414747.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:05.047489
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShip(address[])
PC address: 362
Estimated Gas Usage: 342 - 437
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x79b23d2e338be27bd554e1fa5777d79491414747.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:38.116374
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 776
Estimated Gas Usage: 341 - 436
The binary multiplication can overflow.
The operands of the multiplication operation are not sufficiently constrained. The multiplication could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x79b23d2e338be27bd554e1fa5777d79491414747.sol:5

penzeppelin-solidity/

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:40.918690
Transaction Length: 1
Severity: High
Contract: BeneficiaryOperations
Function name: transferBeneficiaryShipWithHowMany(address[],uint256)
PC address: 778
Estimated Gas Usage: 341 - 436
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/m_loop/loop7/0x79b23d2e338be27bd554e1fa5777d79491414747.sol:3

*/

// File: openzeppelin-solidity/c

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:00:30.146331
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: allOperations(uint256)
PC address: 1715
Estimated Gas Usage: 701 - 796
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x79b23d2e338be27bd554e1fa5777d79491414747.sol:386

bytes32[] public allOperations

--------------------

==== Exception State ====
SWC ID: 110
FOUND TIME: 0:01:35.382100
Transaction Length: 1
Severity: Low
Contract: BeneficiaryOperations
Function name: beneficiaries(uint256)
PC address: 4636
Estimated Gas Usage: 744 - 839
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: ../../contracts/m_loop/loop7/0x79b23d2e338be27bd554e1fa5777d79491414747.sol:385

address[] public beneficiaries

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop3/0x448ff6d5ca4cdf28f9c61de671108df310903eb1.sol
Total states:4708
9.277949
==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:00.199812
Transaction Length: 0
Severity: High
Contract: ERC20
Function name: constructor
PC address: 112
Estimated Gas Usage: 257 - 3030
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/noloop/noloop3/0x448ff6d5ca4cdf28f9c61de671108df310903eb1.sol:17

dentifier: MIT

//pragma solidity ^0.6.0;
p

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop3/0xfb9fc4ccc2538172fe76f7dc231a6969950e57c8.sol
Total states:20052
42.729089
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.259903
Transaction Length: 0
Severity: Medium
Contract: WEV
Function name: constructor
PC address: 209
Estimated Gas Usage: 17133 - 78876
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/noloop/noloop3/0xfb9fc4ccc2538172fe76f7dc231a6969950e57c8.sol:733

tx.origin

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:09.113766
Transaction Length: 2
Severity: High
Contract: ERC20
Function name: increaseAllowance(address,uint256)
PC address: 3244
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/noloop/noloop3/0xfb9fc4ccc2538172fe76f7dc231a6969950e57c8.sol:33

a + b

--------------------

==== Integer Overflow ====
SWC ID: 101
FOUND TIME: 0:00:10.320390
Transaction Length: 2
Severity: High
Contract: WEV
Function name: increaseAllowance(address,uint256)
PC address: 5586
Estimated Gas Usage: 1059 - 1534
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: ../../contracts/noloop/noloop3/0xfb9fc4ccc2538172fe76f7dc231a6969950e57c8.sol:33

a + b

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol
Total states:4104
24.304509
==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:05.445175
Transaction Length: 1
Severity: Medium
Contract: Operator
Function name: supplyOrderWithDaiPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)
PC address: 339
Estimated Gas Usage: 10986 - 154068
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1353
Offset: 5894
Offset: 6269
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:169

function supplyOrderWithDaiPermit(uint amount, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {
        DaiPermitLike(tranche.currency()).permit(msg.sender, address(tranche), nonce, expiry, true, v, r, s);
        supplyOrder(amount);
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:07.741433
Transaction Length: 1
Severity: Medium
Contract: Operator
Function name: redeemOrder(uint256)
PC address: 385
Estimated Gas Usage: 8635 - 116441
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 1961
Offset: 2326
Offset: 2583
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:147

function redeemOrder(uint amount) public note {
        require((token.hasMember(msg.sender) == true), "user-not-allowed-to-hold-token");
        token.hasMember(msg.sender);
        tranche.redeemOrder(msg.sender, amount);
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:14.976278
Transaction Length: 1
Severity: Medium
Contract: Operator
Function name: disburse()
PC address: 823
Estimated Gas Usage: 4632 - 75356
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 4515
Offset: 4882
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:154

function disburse() external
        returns(uint payoutCurrencyAmount, uint payoutTokenAmount, uint remainingSupplyCurrency,  uint remainingRedeemToken)
    {
        require((token.hasMember(msg.sender) == true), "user-not-allowed-to-hold-token");
        return tranche.disburse(msg.sender);
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:16.935656
Transaction Length: 1
Severity: Medium
Contract: Operator
Function name: disburse(uint256)
PC address: 910
Estimated Gas Usage: 4758 - 75577
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5182
Offset: 5557
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:161

function disburse(uint endEpoch) external
        returns(uint payoutCurrencyAmount, uint payoutTokenAmount, uint remainingSupplyCurrency,  uint remainingRedeemToken)
    {
        require((token.hasMember(msg.sender) == true), "user-not-allowed-to-hold-token");
        return tranche.disburse(msg.sender, endEpoch);
    }

--------------------

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
FOUND TIME: 0:00:19.024643
Transaction Length: 1
Severity: Medium
Contract: Operator
Function name: supplyOrder(uint256)
PC address: 1044
Estimated Gas Usage: 6568 - 79482
Multiple sends are executed in one transaction.
Consecutive calls are executed at the following bytecode offsets:
Offset: 5894
Offset: 6269
Try to isolate each external call into its own transaction, as external calls can fail accidentally or deliberately.

--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:141

function supplyOrder(uint amount) public note {
        require((token.hasMember(msg.sender) == true), "user-not-allowed-to-hold-token");
        tranche.supplyOrder(msg.sender, amount);
    }

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:02.434236
Transaction Length: 1
Severity: Low
Contract: Operator
Function name: supplyOrderWithDaiPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)
PC address: 1711
Estimated Gas Usage: 3914 - 40177
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:170

DaiPermitLike(tranche.currency()).permit(msg.sender, address(tranche), nonce, expiry, true, v, r, s)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:23.041636
Transaction Length: 1
Severity: Low
Contract: Operator
Function name: redeemOrderWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)
PC address: 2583
Estimated Gas Usage: 8608 - 114894
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:150

tranche.redeemOrder(msg.sender, amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:09.945930
Transaction Length: 1
Severity: Low
Contract: Operator
Function name: supplyOrderWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)
PC address: 3258
Estimated Gas Usage: 3875 - 40043
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:174

EIP2612PermitLike(tranche.currency()).permit(msg.sender, address(tranche), value, deadline, v, r, s)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:14.803930
Transaction Length: 1
Severity: Low
Contract: Operator
Function name: disburse()
PC address: 4882
Estimated Gas Usage: 3600 - 39293
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:158

tranche.disburse(msg.sender)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:16.758658
Transaction Length: 1
Severity: Low
Contract: Operator
Function name: disburse(uint256)
PC address: 5557
Estimated Gas Usage: 3724 - 39512
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:165

tranche.disburse(msg.sender, endEpoch)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:18.773587
Transaction Length: 1
Severity: Low
Contract: Operator
Function name: supplyOrder(uint256)
PC address: 6269
Estimated Gas Usage: 3727 - 39515
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:143

tranche.supplyOrder(msg.sender, amount)

--------------------

==== External Call To Fixed Address ====
SWC ID: 107
FOUND TIME: 0:00:20.309119
Transaction Length: 1
Severity: Low
Contract: Operator
Function name: redeemOrderWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32)
PC address: 6826
Estimated Gas Usage: 2310 - 4011
The contract executes an external message call.
An external function call to a fixed contract address is executed. Make sure that the callee contract has been reviewed carefully.
--------------------
In file: ../../contracts/noloop/noloop3/0xEDCD9e36017689c6Fc51C65c517f488E3Cb6C381.sol:178

EIP2612PermitLike(address(token)).permit(msg.sender, address(tranche), value, deadline, v, r, s)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop3/0x98b689a88e421E4CdC3A27b61b99c039a8ae9885.sol
Total states:2175
2.734301
==== Delegatecall Proxy ====
SWC ID: 112
FOUND TIME: 0:00:00.285642
Transaction Length: 1
Severity: Low
Contract: UpgradeabilityProxy
Function name: fallback
PC address: 274
Estimated Gas Usage: 681 - 3503
The contract implements a delegatecall proxy.
The smart contract forwards the received calldata via delegatecall. Note that callerscan execute arbitrary functions in the callee contract and that the callee contract can access the storage of the calling contract. Make sure that the callee contract is audited properly.DELEGATECALL target: Concat(0,
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy),
       5_code(UpgradeabilityProxy))
--------------------
In file: ../../contracts/noloop/noloop3/0x98b689a88e421E4CdC3A27b61b99c039a8ae9885.sol:260

delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)

--------------------

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
$                                                  $
$                                                  $
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Williams test file: ../../contracts/noloop/noloop3/0x87a59a9f2c2caf9c7ec3fa62d7496d9fc7449b01.sol
Total states:2389
11.581232
==== Use of tx.origin ====
SWC ID: 111
FOUND TIME: 0:00:00.892934
Transaction Length: 1
Severity: Medium
Contract: Liquidator
Function name: triggerLiquidation(address)
PC address: 4941
Estimated Gas Usage: 280 - 375
Use of tx.origin is deprecated.
The smart contract retrieves the transaction origin (tx.origin) using msg.origin. Use of msg.origin is deprecated and the instruction may be removed in the  future. Use msg.sender instead.
See also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin
--------------------
In file: ../../contracts/noloop/noloop3/0x87a59a9f2c2caf9c7ec3fa62d7496d9fc7449b01.sol:1111

tx.origin

--------------------

